id,severity,title,description,iacontrols,ruleid,fixid,fixtext,checkid,checktext
V-35422,medium,The application server must generate a unique session identifier using a FIPS 140-2 approved random number generator.,"The application server will use session IDs to communicate between modules or applications within the application server and between the application server and users.  The session ID allows the application to track the communications along with credentials that may have been used to authenticate users or modules.

Unique session IDs are the opposite of sequentially generated session IDs which can be easily guessed by an attacker.  Unique session identifiers help to reduce predictability of said identifiers.

Unique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session.  If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.",None,SV-46709r3_rule,F-39966r2_fix,Configure the application server to generate unique session identifiers and to use a FIPS 140-2 random number generator to generate the randomness of the session identifiers.,C-43773r2_chk,"Review the application server configuration and documentation to determine if the application server uses a FIPS 140-2 approved random number generator to create unique session identifiers.

Have a user log onto the application server to determine if the session IDs generated are random and unique.

If the application server does not generate unique session identifiers and does not use a FIPS 140-2 random number generator to create the randomness of the session ID, this is a finding."
V-69441,medium,The application must implement transaction recovery logs when transaction based.,"Without required logging and access control, security issues related to data changes will not be identified. This could lead to security compromises such as data misuse, unauthorized changes, or unauthorized access.

Transaction logs contain a sequential record of all changes to the database. Using a transaction log helps with maintaining application availability and aids in speedy recovery. Transactional logging should be enabled whenever the application database offers the transactional logging capability.",None,SV-84063r1_rule,F-75617r1_fix,Configure the application database to utilize transactional logging.,C-69859r1_chk,"Review the application documentation and interview the application administrator.  Have the application administrator provide configuration settings that demonstrate transaction logging is enabled.

Review configuration settings for the location of transaction specific logs and verify transaction logs exist and the log records access and changes to the data.

If the application is not configured to utilize transaction logging, this is a finding."
V-26678,medium,The application must maintain the binding of security attributes to information with sufficient assurance that the information/attribute association can be used as the basis for automated policy actions.,"Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.  

These attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.  

Examples of application security attributes are classified, FOUO, sensitive,  etc. 

Applications maintaining the binding of organization defined security attributes to data must ensure the information-attribute associations can be used as a basis for automated policy actions.

The integrity of security attribute values is critical to ensuring that automated policy actions are performed accurately.  Examples of automated policy actions include automated access control decisions (e.g., Mandatory Access Control decisions), or decisions to release (or not release) information (e.g., information flows via cross domain systems).  ",None,SV-33877r1_rule,None,None,None,None
V-70239,medium,The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information systems.,"Denial of Service (DoS) is a condition where a resource is not available for legitimate users. When this occurs, the organization either cannot accomplish its mission or must operate at degraded capacity.

Individuals of concern can include hostile insiders or external adversaries that have access or have successfully breached the information system and are using the system as a platform to launch cyber attacks on the application, the application host or other third-parties.

Application developers and application administrators must take the steps needed to ensure an application cannot be used to launch DoS attacks against the application itself, the application host or other systems and networks. 

Application developers should be cognizant that many attackers using DoS techniques will attempt to identify resource intensive processes and functions within the application.  For web applications, this can be application objects that perform database queries or other resource intensive tasks.  Improper application memory management can also lead to memory leaks which can exhaust system resources forcing a system or application restart.  

Limiting attempts to repeatedly execute application processes by validating the requests also reduces the ability to launch some DoS attacks.

For application administrators, ensuring network access controls are in place to protect the application host.

The methods employed to counter DoS risks are dependent upon the application layer methods that can be used to exploit it.",None,SV-84861r1_rule,F-76475r1_fix,Design and deploy the application to utilize controls that will prevent the application from being affected by DoS attacks or being used to attack other systems. This includes but is not limited to utilizing throttling techniques for application traffic such as QoS or implementing logic controls within the application code itself that prevents application use that results in network or system capabilities being exceeded.,C-70715r1_chk,"Review the application documentation and interview the application administrator.

Ask the application administrator if any anti-DoS technology or anti-DoS emergency response services are deployed to protect the application.

Check for code review, penetration or vulnerability test results that attempt to DoS the application or use the application as a DoS tool.

Examine test results and testing configuration to ensure that the application was tested and the application was not reported as being susceptible to DoS attacks either from external sources or from the application itself. Also verify the testing results show that the application cannot be weaponized to attack other systems.

If the test results indicate the application is susceptible to DoS attacks or can be weaponized to attack other applications or systems, this is a finding."
V-30593,medium,Applications that utilize Discretionary Access Control (DAC) must enforce a policy that Includes or excludes access to the granularity of a single user.,"DAC is based on the notion that individual users are ""owners"" of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment.

DAC allows the owner to determine who will have access to objects they control.  An example of DAC includes user controlled file permissions.

Including or excluding access to the granularity of a single user means providing the capability to either allow or deny access to objects (e.g., files, folders) on a per single user basis.

Applications that utilize Discretionary Access Control (DAC) must enforce a policy that includes or excludes access to the granularity of a single user.",None,SV-40340r1_rule,None,None,None,None
V-69301,low,The application must automatically disable accounts after a 35 day period of account inactivity.,"Attackers that are able to exploit an inactive account can potentially obtain and maintain undetected access to an application. Owners of inactive accounts will not notice if unauthorized access to their user account has been obtained. Applications need to track periods of user inactivity and disable accounts after 35 days of inactivity. Such a process greatly reduces the risk that accounts will be hijacked, leading to a data compromise.

To address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.

This policy does not apply to either emergency accounts or infrequently used accounts. Infrequently used accounts are local logon administrator accounts used by system administrators when network or normal logon/access is not available. Emergency accounts are administrator accounts created in response to crisis situations.",None,SV-83923r1_rule,F-75475r1_fix,Design and configure the application to expire user accounts after 35 days of inactivity.,C-69713r1_chk,"Examine the application documentation or interview the application representative to identify how the application users are managed.

Interview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory (AD) for user management or if the application manages user accounts within the application.

If the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.

If the application handles the management tasks for user accounts, access the applications user management utility.

Navigate to the screen where user accounts are configured to be disabled after 35 days of inactivity.

Confirm this setting is active.

If the application is not set to expire inactive accounts after 35 days, or if the application has no ability to expire accounts after 35 days of inactivity, this is a finding."
V-16790,medium,The designer will ensure the application does not connect to a database using administrative credentials or other privileged database accounts.,"If the application uses administrative credentials or other privileged database accounts to access the database, an attacker that has already compromised the application though another vulnerability can drop, add, and modify the data in the database or the database structure.",['ECLP-1'],SV-17790r1_rule,F-17007r1_fix,Modify the application and the database account used for the application so administrative credentials are not required to access the database.,C-17777r1_chk,"If the application does not use a database, this check is not applicable.
 
Ask the application representative how the application authenticates to the database.  
 
1) If the application authenticates to the database by using a database account that has database administrator access, it is a finding.
"
V-27013,medium,The information systems that collectively provide name/address resolution service for an organization must be fault-tolerant.,"A Domain Name System (DNS) server is an example of an information system providing name/address resolution service. To eliminate single points of failure and to enhance redundancy, there are typically at least two authoritative DNS servers, one configured as primary and the other as secondary. Additionally, the two servers are commonly located in two different network subnets and geographically separated (i.e., not located in the same physical facility). 

With regard to role separation, DNS servers with an internal role, only process name/address resolution requests from within the organization (i.e., internal clients). DNS servers with an external role only process name/address resolution information requests from clients external to the organization (i.e., on the external networks including the Internet). The set of clients that can access an authoritative DNS server in a particular role is specified by the organization (e.g., by address ranges, explicit lists). 

This requirement addresses the need to have redundant DNS servers and does not apply to DNS application functionality.",None,SV-34307r1_rule,None,None,None,None
V-70155,medium,"The application, for PKI-based authentication, must implement a local cache of revocation data to support path discovery and validation in case of the inability to access revocation information via the network.","A local cache of revocation data is also known as a CRL list. This list contains a list of revoked certificates and can be periodically downloaded to ensure certificates can still be checked for revocation when network access is not available or access to the Online Certificate Status Protocol OCSP server is not available.

Without configuring a local cache of revocation data, there is the potential to allow access to users who are no longer authorized (users with revoked certificates).",None,SV-84777r1_rule,F-76391r1_fix,Implement a Certificate Revocation List (CRL) import process and configure the application to check the CRL if OCSP is not available.,C-70631r1_chk,"Review the application documentation and interview the system administrator to identify how the application checks certificate revocation.

If the application resides on the SIPRNET and does not have access to the root CAs this requirement is not applicable.

Different application frameworks may handle this requirement for the developer or the developer may have chosen to implement their own implementation for managing and implementing the CRL.

Have the administrator demonstrate the process used for obtaining and importing the CRL. CAs may publish the CRL in an LDAP directory or it may be posted to an HTTP server.

Verify the application is configured to import the CRL on a regular basis.

Have the administrator demonstrate the configuration setting that enables CRL checking in the event the OCSP server is not available.

If the application is not configured to implement a CRL, this is a finding."
V-6140,medium,The designer and IAO will ensure the audit trail is readable only by the application and auditors and protected against modification and deletion by unauthorized individuals.,Excessive permissions of audit records allow cover up of intrusion or misuse of the application.,['ECTP-1'],SV-6140r1_rule,F-4432r1_fix,Correct permissions on application audit logs.,C-2953r1_chk,"Locate the application audit log location.  Examine the properties of the log files.  
 
For a Windows system, the NTFS file permissions should be System – Full control, Administrators and Application Administrators - Read, and Auditors - Full Control.  
 
1) If the log files have permissions more permissive than what is listed, it is a finding.
 
For UNIX systems, use the ls –la (or equivalent) command to check the permissions of the audit log files.  
 
2) If excessive permissions exist, it is a finding."
V-69477,medium,The applications must use internal system clocks to generate time stamps for audit records.,"Without an internal clock used as the reference for the time stored on each event to provide a trusted common reference for the time, forensic analysis would be impeded. Determining the correct time a particular event occurred on a system is critical when conducting forensic analysis and investigating system events.

If the internal clock is not used, the system may not be able to provide time stamps for log messages. Additionally, externally generated time stamps may not be accurate. Applications can use the capability of an operating system or purpose-built module for this purpose.",None,SV-84099r1_rule,F-75653r1_fix,Configure the application to use the hosting systems internal clock for audit record generation.,C-69895r1_chk,"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.

Identify the application components and the logs associated with the components.

Ensure the time written into the logs coincides with the OS timeclock.

Access random audit records and review the most recent logs.
 
Access the system OS hosting the application and use the related OS commands to determine the time of the system.

Perform an action in the application that causes a log event to be written and review the log to ensure the system times and the application log times correlate; compensating for any time delays that may have occurred between running the OS time command and running the application action.

If the application doesn't use the internal system clocks to generate time stamps for the audit event logs, this is a finding."
V-22031,medium,"The designer shall ensure messages are encrypted when the SessionIndex is tied to privacy data.
","When the SessionIndex is tied to privacy data (e.g., attributes containing privacy data) the message should be encrypted. If the message is not encrypted there is the possibility of compromise of privacy data.",['ECNK-1'],SV-25357r1_rule,F-23095r1_fix,"Encrypt messages when the SessionIndex is tied to privacy data.
",C-27029r1_chk,"Examine the contents of a SOAP message using a SessionIndex in the SAML element AuthnStatement. Verify the information which is tied to the SessionIndex.

If the SessionIndex is tied to privacy information, and it is not encrypted, it is a finding."
V-27144,medium,Applications that serve to protect organizations and individuals from SPAM messages must incorporate update mechanisms updating protection mechanisms and signature updates when new application releases are available in accordance with organizational configuration management policy and procedures.,"Senders of SPAM messages are continually modifying their tactics and source email addresses in order to elude protection mechanisms. To stay up-to-date with the changing threat and to identify SPAM messages, it is critical that SPAM protection mechanisms are kept current.",None,SV-34443r1_rule,None,None,None,None
V-16835,medium,"The IAO will ensure at least one application administrator has registered to receive update notifications, or security alerts, when automated alerts are available.
","Administrators should register for updates to all COTS and custom developed software, so when security flaws are identified, they can be tracked for testing and updates of the application can be applied.
",['DCCT-1'],SV-17835r1_rule,F-17153r1_fix,"Register administrator to receive updates.
",C-17841r1_chk,"Review the components of the application. Deployment personnel should be registered to receive updates to all components of the application, such as Web Server, Application Servers, and Database Servers.  Also, if update notifications are provided to any custom developed software, deployment personnel should also register for these updates. Ask the application representative to demonstrate deployment personnel are registered to receive notifications for updates to all the application components including and custom developed software.
 
1) If the application provides automated alerts for update notifications, and no deployment personnel are registered to receive the alerts, it is a finding."
V-35317,medium,The application server must store only encrypted representations of passwords.,"Applications must enforce password encryption when storing passwords. Passwords need to be protected at all times and encryption is the standard method for protecting passwords. If passwords are not encrypted, they can be plainly read and easily compromised. 

Application servers provide either a local user store or they integrate with enterprise user stores like LDAP. When the application server is responsible for creating or storing passwords, the application server must enforce the storage of encrypted representations of passwords.",None,SV-46604r3_rule,F-39863r2_fix,Configure the application server to only store encrypted representations of passwords.,C-43687r2_chk,"Review application server documentation and configuration to determine if the application server enforces the requirement to only store encrypted representations of passwords.

If the application server is not configured to meet this requirement, this is a finding."
V-26888,medium,The application must protect against an individual falsely denying having performed a particular action.,"Non-repudiation of actions taken is required in order to maintain application integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. 

Non-repudiation protects individuals against later claims by an author of not having authored a particular document, a sender of not having transmitted a message, a receiver of not having received a message, or a signatory of not having signed a document.  ",None,SV-34168r1_rule,None,None,None,None
V-47163,medium,The release manager must ensure application files are cryptographically hashed prior to deploying to DoD operational networks.,"When application code and binaries are transferred from one environment to another, there is the potential for malware to be introduced into either the application code or even the application binaries themselves.  Care must be taken to ensure that application code and binaries are validated for integrity prior to deployment into a production environment.   

To ensure file integrity, application files and/or application packages are cryptographically hashed using a strong hashing algorithm.  Comparing hashes after transferring the files makes it possible to detect changes in files that could indicate potential integrity issues with the application.

Currently, SHA256 is the DoD approved standard for cryptographic hash functions.   DoD application developers must use SHA256 when creating cryptographic hashes, however, some non-DoD vendors might still use MD5 or SHA1 when generating a checksum hash for their application packages.  It is important to use the same algorithms when validating the hash.  If a non DoD vendor uses SHA1 when hashing their files, you must use SHA1 to validate the hash.  Otherwise, the hashes will not match and a false positive indication of tampering will result.

Prior to release of the application receiving an ATO/IATO for deployment into a DoD operational network, the application must be validated for integrity to ensure no tampering of source code or binaries has occurred.  Failure to validate the integrity of application code and/or application binaries prior to deploying an application into a production environment may compromise the operational network.",['DCSQ-1'],SV-60029r1_rule,F-50871r1_fix,"1. Developers/release managers create cryptographic hash values of application files and/or application packages prior to transitioning the application from test to a production environment.  They protect cryptographic hash information so it cannot be altered and make a read copy of the hash information available to application Admins so they can validate application packages and files after they download the files.

2. Application Admins validate cryptographic hashes prior to deploying the application to production.
",C-49993r1_chk,"Ask the application representative to demonstrate their cryptographic hash validation process or provide process documentation.  The validation process will vary based upon the operating system used as there are numerous clients available that will display a file's cryptographic hash for validation purposes.  

Linux operating systems include the ""sha256sum"" utility. For Linux systems using sha256sum command syntax is:  sha256sum [OPTION]... [FILE]...

Windows does not natively provide a SHA256 checksum validation tool; however, there are utilities available that provide this capability. 

A validation process involves obtaining the application files’ cryptographic hash value from the programs author or other authoritative source such as the application's web site.  A utility like the ""sha256sum"" utility is then run using the downloaded application file name as the argument.  The output is the files' hash value.  The two hash values are compared and if they match, then file integrity is ensured.

If the application being reviewed is a COTS product and the vendor used a SHA1 or MD5 algorithm to generate a hash value, this is not a finding.

If the application being reviewed is a COTS product and the vendor did not provide a hash value for validating the package, this is not a finding.

If the integrity of the application files/code is not validated prior to deployment to DoD operational networks, this is a finding.
"
V-16787,high,"The designer will ensure the application follows the secure failure design principle.
","The secure design principle ensures the application follows a secure predictable path in the application code. If all possible code paths are not accounted for, the application may allow access to unauthorized users. Applications should perform checks on the validity of data, user permissions, and resource existence before performing a function. Secure failure is defined if a check fails for any reason, the application remains in a secure state.
",['DCSQ-1'],SV-17787r1_rule,F-16995r1_fix,"Design and code the application so the secure design principle is followed.
",C-17772r1_chk,"Ask the application representative for code review results from the entire application or the documented code review process. 

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.

If the results are provided from a manual code review, the application representative will need to demonstrate how secure design principle vulnerabilities are identified during code reviews. 
 
1) If the results are not provided or the application representative cannot demonstrate how manual code reviews are performed to identify secure design principle vulnerabilities, this is a CAT I finding.
 
2) If code analysis tools are used to perform a code review and errors have not been fixed, this is a CAT II finding.  "
V-35191,medium,The application server must be configured to fail over to another system in the event of log subsystem failure.,"This requirement is dependent upon system MAC and availability.  If the system MAC and availability do not specify redundancy requirements, this requirement is NA.

It is critical that, when a system is at risk of failing to process logs as required, it detects and takes action to mitigate the failure.
 
Application servers must be capable of failing over to another system which can handle application and logging functions upon detection of an application log processing failure. This will allow continual operation of the application and logging functions while minimizing the loss of operation for the users and loss of log data.",None,SV-46478r3_rule,F-39737r5_fix,"If the system MAC level and availability do not require redundancy, this requirement is NA.

Configure the application server to fail over to another system which can handle log functions when the logging subsystem fails.",C-43569r7_chk,"If the system MAC level and availability do not require redundancy, this requirement is NA.

Review the system's accreditation documentation to determine system MAC and confidentiality requirements.  Review application server configuration settings to determine if the application server is configured to fail over operation to another system when the log subsystem fails to operate.

If the system MAC level requires redundancy and the application server is not configured to fail over to another system which can handle application and log functions when a log subsystem failure occurs, this is a finding."
V-26958,medium,Configuration management applications must employ automated mechanisms to centrally respond to unauthorized changes to configuration settings. ,"Configuration settings are the configurable security-related parameters of information technology products that are part of the information system. 

Security-related parameters are those parameters impacting the security state of the system, including parameters related to meeting other security control requirements. 

Security-related parameters include:  registry settings; account, file, and directory settings (i.e., permissions); and settings for services, ports, protocols, and remote connections.  

Responses to unauthorized changes to configuration settings can include:  alerting designated organizational personnel, restoring mandatory/organization-defined configuration settings, or in the extreme case, halting affected information system processing.  

Centrally respond means to respond to unauthorized changes to settings have taken effect from a centralized location.  In order to accommodate large scale environments, centralized solutions may also employ distributed systems used as configuration management proxies.  This is allowable as long as these systems are centrally managed and controlled as part of the overall configuration management solution.",None,SV-34243r1_rule,None,None,None,None
V-30583,medium,The application must notify appropriate individuals when accounts are terminated.,"When application accounts are terminated, user accessibility is affected.  Accounts are utilized for identifying individual application users or for identifying the application processes themselves. 

In order to detect and respond to events that affect user accessibility and application processing, applications must notify the appropriate individuals when an account is terminated so they can investigate the event.  Such a capability greatly reduces the risk that application accessibility will be negatively affected for extended periods of time and provides logging that can be used for forensic purposes. 

To address the multitude of policy based audit requirements, and to ease the burden of meeting these requirements, many application developers choose to integrate their applications with enterprise level authentication/access/audit mechanisms that meet or exceed access control policy requirements. Examples include but are not limited to Active Directory and LDAP.

The application must automatically notify the appropriate individuals when accounts are terminated.",None,SV-40323r1_rule,None,None,None,None
V-16845,medium,"The IAO will ensure procedures are in place to assure the appropriate physical and technical protection of the backup and restoration of the application.
",Protection of backup and restoration assets is essential for the successful restore of operations after a catastrophic failure or damage to the system or data files. Failure to follow proper procedures may result in the permanent loss of system data and/or the loss of system capability resulting in failure of the customers mission.,['COBR-1'],SV-17845r1_rule,F-17167r1_fix,"Develop and implement procedures to insure that backup and restoral assets are properly protected and stored in an
area/location where it is unlike they would be affected by an event that would affect the primary assets.",C-17856r1_chk,"Validate that backup and recovery procedures incorporate protection of the backup and restoration assets.
 
Verify assets housing the backup data (e.g., SANS, tapes, backup directories, software) and the assets used for restoration (e.g., equipment and system software) are included in the backup and recovery procedures.  

 1) If backup and restoration devices are not included in the recovery procedures, it is a finding.
"
V-16779,medium,"The Program Manager and designer will ensure the application is registered with the DoD Ports and Protocols Database.

","Failure to register the  applications usage of ports, protocols, and services with the DoD PPS Database may result in a Denial of Service (DoS) because of enclave boundary protections at other end points within the network.",['DCPP-1'],SV-17779r1_rule,F-16978r1_fix,"Register the application and ports in the Ports and Protocols Database.

",C-17756r1_chk,"Verify registration of the application and ports in the Ports and Protocols Database for a production site.

1) If the application requires registration, and is not registered or all ports used have not been identified in the database this is a finding. "
V-57521,medium,The application server must conform to FICAM-issued profiles.,"Without conforming to FICAM-issued profiles, the information system may not be interoperable with FICAM-authentication protocols, such as SAML 2.0 and OpenID 2.0.

This requirement addresses open identity management standards.",None,SV-71797r2_rule,F-62589r1_fix,Configure the application server to conform to FICAM-issued profiles.,C-58229r1_chk,"Review the application server documentation and configuration to determine if the application server conforms to FICAM-issued profiles.

If the application server does not conform to FICAM-issued profiles, this is a finding."
V-16810,high,"The designer will ensure the application does not allow command injection.
","A command injection attack, is an attack on a vulnerable application where improperly validated input is passed to a command shell setup in the application. A command injection allows an attacker to execute their own commands with the same privileges as the application executing. Command injection allows immediate access to the system where the application is executing.
",['DCSQ-1'],SV-17810r1_rule,F-17103r1_fix,"Modify the application to protect against command injection attacks.
",C-17808r1_chk,"Ask the application representative for code review or scan results from the entire application.  This can be provided as results from an automated code review or a vulnerability scanning tool.  See section 5.4 of the Application Security and Development STIG for additional details.

If the results are provided from a manual code review, the application representative will need to demonstrate how command injection vulnerabilities are identified during code reviews. 
 
1) If the results are not provided or the application representative cannot demonstrate how manual code reviews are performed to identify command injection vulnerabilities, it is a finding.

Examples of Command Injection vulnerabilities can be obtained from the OWASP website.
 
*Note: Web services are subject to the same coding practices of other web application code (e.g., command injection)."
V-27143,medium,"The organization must employ malicious code protection mechanisms at workstations, servers, or mobile computing devices on the network to detect and take action on unsolicited messages transported by electronic mail, electronic mail attachments, and web accesses.
","Senders of SPAM messages are continually modifying their tactics and source email addresses in order to elude protection mechanisms. To stay up-to-date with the changing threat and to identify SPAM messages, it is critical that SPAM protection mechanisms are kept current.

Unsolicited email messages otherwise known as SPAM are known to be one of the primary vectors for the propagation of many types of attacks including phishing attacks. SPAM and malware protection techniques include examining email messages, files, and web traffic at border gateways or proxies to determine if the traffic contains SPAM or some other type of malware.

This is a requirement to utilize SPAM prevention and anti-virus/malware software on workstations, servers, and laptops. This requirement does not apply to applications. ",None,SV-34442r1_rule,None,None,None,None
V-35301,medium,The application server must use multifactor authentication for local access to privileged accounts.,"Multifactor authentication creates a layered defense and makes it more difficult for an unauthorized person to access the application server.  If one factor is compromised or broken, the attacker still has at least one more barrier to breach before successfully breaking into the target.  Unlike a simple username/password scenario where the attacker could gain access by knowing both the username and password without the user knowing his account was compromised, multifactor authentication adds the requirement that the attacker must have something from the user, such as a token, or to biometrically be the user.

Multifactor authentication is defined as: using two or more factors to achieve authentication. 

Factors include: 
(i) something a user knows (e.g., password/PIN); 
(ii) something a user has (e.g., cryptographic identification device, token); or 
(iii) something a user is (e.g., biometric). A CAC or PKI Hardware Token meets this definition.

A privileged account is defined as an information system account with authorizations of a privileged user.  These accounts would be capable of accessing the command line management interface.

When accessing the application server via a local connection, administrative access to the application server must be PKI hardware token enabled.",None,SV-46588r3_rule,F-39847r3_fix,Configure the application server to authenticate privileged users via multifactor authentication for local access to the management interface.,C-43670r2_chk,"Review the application server configuration to ensure the system is authenticating via multifactor authentication for privileged users.

If all aspects of application server command line management interfaces are not authenticating privileged users via multifactor authentication methods, this is a finding."
V-27160,medium,The application must protect audit information from unauthorized deletion.,"If audit data were to become compromised then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve. 

To ensure the veracity of audit data the information system and/or the application must protect audit information from unauthorized deletion.  This requirement can be achieved through multiple methods which will depend upon system architecture and design.  

Some commonly employed methods include:  ensuring log files enjoy the proper file system permissions utilizing file system protections; restricting access and backing up log data to ensure log data is retained.  

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity. ",None,SV-34459r1_rule,None,None,None,None
V-16776,medium,The Program Manager will ensure the development team follows a set of coding standards.,"Implementing coding standards provides many benefits to the development process.  These benefits include readability, consistency, and ease of integration.  

Code conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.

Introducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors.

Coding standards also allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  Coding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  
",['DCSQ-1'],SV-17776r1_rule,F-16973r1_fix,Adopt and document coding standards.,C-17752r1_chk,"The Program Manager will ensure the development team follows a set of coding standards. The Program Manager will ensure the development team creates a list of unsafe functions to avoid and document this list in the coding standards. 

The Designer will follow the established coding standards established for the project.

The Designer will not use unsafe functions documented in the project coding standards.

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.
 
Interview the application representative to determine if a documented set of coding standards exists. Ask the application representative to demonstrate coding standards are being followed by reviewing a sample of code. Also, check the coding standards for a list of unsafe functions or section documenting there are no unsafe functions.
 
1) If no coding standards exist at an organizational or project level, it is a finding.
 
2) If documented coding standards are not being followed, it is a finding.
 
3) If there is no documented list of unsafe functions, or the coding standards do not document that there are no unsafe functions (for that particular language), it is a finding."
V-27173,medium,Applications designed to address malware issues and/or enforce policy pertaining to organizational use of mobile code must implement detection and inspection mechanisms to identify unauthorized mobile code,"Decisions regarding the employment of mobile code within organizational information systems are based on the potential for the code to cause damage to the system if used maliciously. 

Mobile code technologies include:  Java, JavaScript, ActiveX, PDF, Postscript, Shockwave movies, Flash animations, and VBScript. Usage restrictions and implementation guidance apply to both the selection and use of mobile code installed on organizational servers and mobile code downloaded and executed on individual workstations. 

Policy and procedures related to mobile code, address preventing the development, acquisition, or introduction of unacceptable mobile code within the information system. ",None,SV-34472r1_rule,None,None,None,None
V-27019,medium,Applications must recognize only system-generated session identifiers.,"This requirement focuses on communications protection at the application session, versus network packet level. The intent of this control is to establish grounds for confidence at each end of a communications session in the ongoing identity of the other party and in the validity of the information being transmitted. 

Unique session IDs are the opposite of sequentially generated session IDs which can be easily guessed by an attacker.  Unique session identifiers help to reduce predictability of said identifiers.  

Unique session IDs address man-in-the-middle attacks including session hijacking or insertion of false information into a session.  If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.",None,SV-34313r1_rule,None,None,None,None
V-6137,medium,"The designer will ensure the application uses the Federal Information Processing Standard (FIPS) 140-2 validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality.


","Unapproved cryptographic module algorithms cannot be verified, and cannot be relied upon to provide confidentiality or integrity and DoD data may be compromised due to weak algorithms.","['DCNR-1', 'ECCR-1', 'ECCR-2', 'ECCT-1', 'ECCT-2']",SV-6137r1_rule,F-16997r1_fix,"Utilize FIPS 140-2 cryptography for modules implementing encryption, key exchange, digital signature, and hash. ",C-2948r1_chk,"If the application does not utilize encryption, key exchange, digital signature, or hash, FIPS 140-2 cryptography is not required and this check is not applicable.  

Identify all application or supporting infrastructure features that require cryptography such as, file encryption, VPN, SSH, etc.  Verify the application is using FIPS-140 validated cryptographic modules.

The National Institute of Standards and Technology’s FIPS 140-1 and FIPS 140-2 Vendor List is located at: http://csrc.nist.gov/cryptval/.  

1) If the application requiring encryption, key exchange, digital signature or hash is using an unapproved module or no module, it is a finding.  

2) If the application utilizes unapproved modules for cryptographic random number generation, it is a finding. 
 
Note: If the application uses WS Security tokens, W3C XML Signature can be used to digitally sign messages and provide message integrity."
V-27175,medium,"Applications utilizing mobile code must meet policy requirements regarding the acquisition, development, and/or use of mobile code.  ","Decisions regarding the employment of mobile code within organizational information systems are based on the potential for the code to cause damage to the system if used maliciously. 

Mobile code technologies include:  Java, JavaScript, ActiveX, PDF, Postscript, Shockwave movies, Flash animations, and VBScript. Usage restrictions and implementation guidance apply to both the selection and use of mobile code installed on organizational servers and mobile code downloaded and executed on individual workstations. 

DoDI 8552.01 policy pertains to the use of mobile code technologies within DoD information systems. ",None,SV-34474r1_rule,None,None,None,None
V-69241,medium,The application must clear temporary storage and cookies when the session is terminated.,"Persistent cookies are a primary means by which a web application will store application state and user information.  Since HTTP is a stateless protocol, this persistence allows the web application developer to provide a robust and customizable user experience.

However, if a web application stores user authentication information within a persistent cookie or other temporary storage mechanism, this information can be stolen and used to compromise the users account.

Likewise, HTML 5 provides the developer with a client storage capability where application data larger than the 4K cookie size limit can be stored on the local client.  While this can be beneficial to the developer, this is considered insecure storage and should not be used for storing sensitive session or security tokens.  A cross site scripting attack can put this data at risk.

Web applications must clear sensitive data from files and storage areas on the client when the session is terminated.",None,SV-83863r1_rule,F-75411r1_fix,Design and configure the application to clear sensitive data from cookies and local storage when the user logs out of the application.,C-69665r1_chk,"Review application design documentation and interview application administrator to identify how the application makes use of temporary client storage and cookies.  Identify cookie and web storage locations on the client.  Clear all browser cookies and web cache.

Log on to the application and perform several standard operations, noting if the application ever prompts the user to accept a cookie. If prompted by the browser to save the user ID and password (decline to save the user ID and password), this is a finding. 

Log out of the application and close the browser. Reopen the browser and examine the stored cookies. The cookies displayed should be related to the application website.

The procedure to view cookies will vary according to the browser used. Some modern browsers are making use of SQLite databases to store cookie data so use of a SQLite db reader/browser may be required.

Open the cookies related to the application website and search for any identification or authentication information. While authentication information can vary on a per application basis, this is most often specified as ""username=x"", or ""password=x"".

If the web application prompts the user to save their password, or if a username or password value exists within a cookie or within local storage locations, even if hashed, this is a finding.

The application may use means other than cookies to store user information. If the reviewer detects an alternative mechanism for storing information locally, examine the data storage to ensure no authentication or other sensitive information is present."
V-26819,medium,Applications providing information flow control must uniquely authenticate destination domains when transferring information.,"Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

Specific examples of flow control enforcement can be found in boundary protection devices (e.g., proxies, application gateways, guards, cross domain systems) employing rule sets or establish configuration settings restricting information system services, provide a packet-filtering capability based on header information, or message-filtering capability based on content (e.g., using key word searches or document characteristics). 

Attribution, (e.g., the ability to attribute actions to individuals), processes or systems, is a critical component of a security concept of operations. 

The ability to identify source and destination points for information flowing in an information system, allows forensic reconstruction of events when required, and increases policy compliance by attributing policy violations to specific organizations/individuals.  
",None,SV-34069r1_rule,None,None,None,None
V-26705,medium,Applications must support the requirement to automatically audit account creation.,"Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. 

Auditing of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure an audit trail documents the creation of application user accounts and, as required, notifies administrators and/or application owners exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.  

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality. 

Examples of enterprise level authentication/access mechanisms include but are not limited to, Active Directory and LDAP.",None,SV-33948r1_rule,None,None,None,None
V-69531,medium,The application must accept Personal Identity Verification (PIV) credentials.,"The use of PIV credentials facilitates standardization and reduces the risk of unauthorized access.

DoD has mandated the use of the CAC to support identity management and personal authentication for systems covered under HSPD 12, as well as a primary component of layered protection for national security systems.",None,SV-84153r1_rule,F-75705r1_fix,Configure the application to require CAC authentication.,C-69949r1_chk,"Review the application documentation and interview the application administrator to identify application access methods.

If the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.

Ask the application administrator to log on to the application. Have the application admin use their non-privileged credentials.

Validate the application prompts the user to provide a certificate from the CAC.

If the application allows access without requiring a CAC, this is a finding."
V-16832,medium,"The Test Manager will ensure security flaws are fixed or addressed in the project plan.
","If security flaws are not tracked, they may possibly be forgotten to be included in a release.  Tracking flaws in the project plan will help identify code elements to be changed as well as the requested change.
",['DCSQ-1'],SV-17832r1_rule,F-17149r1_fix,Address security flaws in the project plan.,C-17831r1_chk,"Ask the application representative to demonstrate how security flaws are integrated into the project plan.

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.

1) If security flaws are not addressed in the project plan or there is no process to introduce security flaws into the project plan, it is a finding."
V-27172,medium,Applications must support organizational requirements to issue public key certificates under an appropriate certificate policy or obtain public key certificates under an appropriate certificate policy from an approved service provider.,"For user certificates, each organization attains certificates from an approved, shared service provider, as required by OMB policy. 

For federal agencies operating a legacy public key infrastructure cross-certified with the Federal Bridge Certification Authority at medium assurance or higher, this Certification Authority will suffice. 

This control focuses on certificates with a visibility external to the information system and does not include certificates related to internal system operations, for example, application-specific time services. ",None,SV-34471r1_rule,None,None,None,None
V-26676,medium,The application must dynamically reconfigure security attributes in accordance with an identified security policy as information is created and combined. ,"Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.  

These attributes are typically associated with internal data structures (e.g., data records, buffers, files) within the application and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.  

Organizations define the security attributes of their data (e.g., classified, FOUO).

When application data is created and/or combined, data security attributes defined by organizational policy must be dynamically created and/or updated to reflect the potential change in data sensitivity and characteristics.

If the application does not dynamically reconfigure the data security attributes as data is created and combined, there is the possibility that classified data may become comingled with unclassified data resulting in a data compromise.",None,SV-33847r1_rule,None,None,None,None
V-21498,high,"The designer will ensure the application is not vulnerable to XML Injection.
","XML injection results in an immediate loss of “integrity” of the data.

Any vulnerability associated with a DoD Information system or system enclave, the exploitation of which, by a risk factor, will directly and immediately result in loss of Confidentiality, Availability or Integrity of the system
associated data. 
",['DCSQ-1'],SV-23682r1_rule,F-23047r1_fix,"Correct XML Injection flaws.
",C-25721r1_chk,"Ask the application representative for code review results from the entire application. This can be provided as results from an automated code review tool.  
 
If the results are provided from a manual code review, the application representative will need to demonstrate how XML injection vulnerabilities are identified during code reviews. Using XML Schema Definition (XSD) Restrictions and XML Schema Regular Expressions can minimize XML injection attacks.
 
1) If the results are not provided or the application representative cannot demonstrate how manual code reviews are performed to identify XML injection vulnerabilities, it is a finding. 
 
Examples of XML Injection vulnerabilities can be obtained from the OWASP website.
"
V-27141,medium,"The organization must employ malicious code protection mechanisms at information system entry and exit points to detect and take action on unsolicited messages transported by electronic mail, electronic mail attachments, web accesses, removable media, or other common means.","Unsolicited email messages otherwise known as SPAM are known to be one of the primary vectors for the propagation of many types of attacks including phishing attacks.  SPAM and malware protection techniques include examining email messages, files, and web traffic at border gateways or proxies to determine if the traffic contains SPAM or some other type of malware.

This is a requirement to deploy SPAM protection at certain locations on the network.  This requirement does not apply to applications.",None,SV-34440r1_rule,None,None,None,None
V-70309,medium,The designer must ensure the application does not store configuration and control files in the same directory as user data.,"Application configuration settings and user data are required to be stored in separate locations in order to prevent application users from possibly being able to access application configuration settings or application data files. Without proper access controls and separation of application configuration settings from user data, there is the potential that existing code or configuration settings could be changed by users. These changes in code can lead to a Denial of Service (DoS) attack or allow malicious code to be placed within the application. In addition, collocating application data and code complicates many issues such as backup, recovery, directory access privilege, and upgrades.",None,SV-84931r1_rule,F-76545r1_fix,Separate the application user data into a different directory than the application code and user file permissions to restrict user access to application configuration settings.,C-70785r1_chk,"Review the application documentation and interview the application administrator.

Ask the application administrator or examine the application documentation to determine the file location of the application configuration settings and user data.

Identify the directory where the application code, configuration settings and other application control data are located.

Identify where user data is stored.

Examine file permissions to application folder.

If the application user data is located in the same directory as the application configuration settings or control files, or if the file permissions allow application users write access to application configuration settings, this is a finding."
V-69329,high,The application must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies.,"To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems (e.g., networks, web servers, and web portals) must be properly configured to incorporate access control methods that do not rely solely on the possession of a certificate for access. 

Successful authentication must not automatically give an entity access to a restricted asset or security boundary.

Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization.

Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset.

Information systems use access control policies and enforcement mechanisms to implement this requirement.

Access control policies include identity-based policies, role-based policies, and attribute-based policies.

Access enforcement mechanisms include access control lists, access control matrices, and cryptography.

These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.

This requirement is applicable to access control enforcement applications (e.g., authentication servers) and other applications that perform information and system access control functions.",None,SV-83951r1_rule,F-75503r1_fix,Design or configure the application to enforce access to application resources.,C-69741r1_chk,"Review the application documentation and interview the application administrator.

Review application data protection requirements.

Identify application resources that require protection and authentication over and above the authentication required to access the application itself.

This can be access to a URL, a folder, a file, a process or a database record that should only be available to certain individuals.

Identify the access control methods utilized by the application in order to control access to the resource.

Examples include Role-Based Access Control policies (RBAC).

Using RBAC as an example, utilize a test account placed into a test role.

Set a protection control on a resource and explicitly deny access to the role assigned to the test user account.

Try to access an application resource that is not configured to allow access. Access should be denied.

If the enforcement of configured access restrictions is not performed, this is a finding."
V-70375,medium,An application code review must be performed on the application.,"A code review is a systematic evaluation of computer source code conducted for the purposes of identifying and remediating the security flaws in the software.

This requirement is meant to apply to developers or organizations that are doing application development work and have the responsibility for maintaining the application source code.

Examples of security flaws include but are not limited to:

- format string exploits
- memory leaks 
- buffer overflows 
- race conditions
- sql injection
- dead/unused/commented code
- input validation exploits

The code review is conducted during the application development phase, this allows discovered security issues to be corrected prior to release.

Code reviews performed after the development phase must eventually go back to development for correction so conducting the code review during development is the logical and preferred action.

Automated code review tools are to be used whenever reviewing application source code. These tools are often incorporated into Integrated Development Environments (IDE) so code reviews can be conducted during all stages of the development life cycle. Periodically reviewing code during the development phase makes transition to a production environment easier as flaws are continually identified and addressed during the development phase rather than en masse at the end of the development effort.

Code review processes and the tools used to conduct the code review analysis will vary depending upon application architecture and the development languages utilized.

In addition to automated testing, manual code reviews may also be used to validate or augment automated code review results. Larger projects will have a large code base and will require the use of automated code review tools in order to achieve complete code review coverage.

A manual code review may consist of a peer review wherein other programmers on the team manually examine source code and automated code review results for known flaws that introduce security bugs into the application.

As with any testing, there is no single best approach and the tests must be tailored to the application architecture. Use of automated tools along with manual review of code and testing results is considered a best practice when conducting code reviews. This method is the most likely way to ensure the maximum number of errors are caught and addressed prior to implementing the application in a production environment.",None,SV-84997r1_rule,F-76611r1_fix,Conduct and document code reviews on the application during development and identify and remediate all known and potential security vulnerabilities prior to releasing the application.,C-70829r1_chk,"This requirement is meant to apply to developers or organizations that are doing the application development work and have the responsibility for maintaining the application source code.  Otherwise, the requirement is not applicable.

Review the system documentation and ask the application representative to describe the code review process or provide documentation outlining the organizations code review process.

If code reviews are conducted with software tools, have the application representative provide the latest code review report for the application.

Ensure the code review looks for all known security flaws including but not limited to:

- format string exploits
- memory leaks
- buffer overflows
- race conditions
- sql injection
- dead/unused/commented code
- input validation exploits

If the organization does not conduct code reviews on the application that attempt to identify all known and potential security issues, or if code review results are not available for review, this is a finding."
V-6148,medium,"The designer will ensure threat models are documented and reviewed for each application release and updated as required by design and functionality changes or new threats are discovered.

",The lack of threat modeling will potentially leave unidentified threats for attackers to utilize to gain access to the application.,['DCSQ-1'],SV-6148r1_rule,F-16986r1_fix,Establish and maintain threat models and review for each application release and when new threats are discovered. Identify potential mitigations to identified threats. Ensure mitigations are implemented to threats based on their risk analysis.,C-2960r1_chk,"Review the threat model and identify the following sections are present:
• Identified threats
• Potential mitigations 
• Mitigations selected based on risk analysis

Detailed information on threat modeling can be found at the Open Web Application Security Project (OWASP) website.
 
If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.

1) If the threat model does not exist, or does not have identified threats, potential mitigations, and mitigations selected based on risk analysis, as sections within the Threat Model, it is a finding.
 
2) If the threat model has not been updated to reflect the application release being reviewed, this is a finding.
 
Verify the mitigations selected in the threat model have been implemented.
 
3) If the mitigations selected based on risk analysis have not been implemented, this is a finding. 
 
Review the identified threats from the each of the application’s networked components.  For example, a backend server may accept SQL queries and SSH connections and also have an NFS share.  Next, examine firewall rules and router ACLs that prevent clients from reaching these access points, effectively reducing the area of the threat surface.  For example, if the backend database accepts queries but is in an enclave where there are no user workstations and firewall rules allow only web traffic, this is not a finding.
 
For each of the remaining access points, attempt to access these resources in a similar manner as the application would without utilizing the user interface (e.g., send SQL query using a tool outside of the application or attempt to access a share using command line utilities).   
 
4) If a user can authenticate to any of these remaining access points outside of the intended user interface, this is a finding.  
 
The finding details should note the application component accessed and the method or tool used to access it. "
V-57519,medium,The application server must accept FICAM-approved third-party credentials.,"Access may be denied to legitimate users if FICAM-approved third-party credentials are not accepted.

This requirement typically applies to organizational information systems that are accessible to non-federal government agencies and other partners. This allows federal government relying parties to trust such credentials at their approved assurance levels.

Third-party credentials are those credentials issued by non-federal government entities approved by the Federal Identity, Credential, and Access Management (FICAM) Trust Framework Solutions initiative.",None,SV-71795r2_rule,F-62587r1_fix,Configure the application server to accept FICAM-approved third-party credentials.,C-58227r1_chk,"Review the application server documentation and configuration to determine if the application server accepts FICAM-approved third-party credentials.

If the application server does not accept FICAM-approved third-party credentials, this is a finding."
V-35186,medium,"The application server must alert the SA and ISSO, at a minimum, in the event of a log processing failure.","Logs are essential to monitor the health of the system, investigate changes that occurred to the system, or investigate a security incident.  When log processing fails, the events during the failure can be lost.  To minimize the timeframe of the log failure, an alert needs to be sent to the SA and ISSO at a minimum.

Log processing failures include, but are not limited to, failures in the application server log capturing mechanisms or log storage capacity being reached or exceeded. In some instances, it is preferred to send alarms to individuals rather than to an entire group. Application servers must be able to trigger an alarm and send an alert to, at a minimum, the SA and ISSO in the event there is an application server log processing failure.",None,SV-46473r3_rule,F-39734r2_fix,Configure the application server log feature to alert the SA and ISSO in the event of a log processing failure.,C-43566r3_chk,"Review application server log configuration.  Verify the application server sends alerts to the SA and ISSO in the event of a log processing failure.

If the application server is not configured to meet this requirement, this is a finding."
V-16817,low,The designer will ensure the application has a capability to notify the user of important login information.,Attempted logons must be controlled to prevent password guessing exploits and unauthorized access attempts. ,['ECLO-2'],SV-17817r1_rule,F-17117r1_fix,Display last login information.,C-17816r1_chk,"Policy:

The designer will ensure the application has a capability to notify the user on logon of date and time of the user's last unsuccessful logon, IP address of the user’s last  unsuccessful logon, date and time of the user's last successful logon, IP address of the user’s last successful logon, and number of unsuccessful logon attempts since the last successful logon.

Check:
If the application uses password authentication, try to logon to the system using an incorrect password.

Restart the application and logon again using the correct password. After a successful logon to the application, logout of the application and note the date and times for the last success and unsuccessful logons.  Again, logon to the application and determine whether the application correctly displays the following information immediately at logon:
 
Unsuccessful Logon
Date 
Time
IP Address
 
Successful Logon
Date 
Time
IP Address
 
If the application does not correctly display the last unsuccessful and successful logon information immediately at login, it is a finding
 
For CAC and NSA approved token authentication logons, remove the CAC or mistype the PIN to simulate an unsuccessful login.
"
V-57531,medium,"The application server, when a MAC I system, must be in a high-availability (HA) cluster.","A MAC I system is a system that handles data vital to the organization's operational readiness or effectiveness of deployed or contingency forces.  A MAC I system must maintain the highest level of integrity and availability.  By HA clustering the application server, the hosted application and data are given a platform that is load-balanced and provided high-availability.",None,SV-71807r2_rule,F-62599r1_fix,"If the application server is not a MAC I system, this requirement is NA.

Configure the application server to be part of an HA cluster.",C-58239r1_chk,"If the application server is not a MAC I system, this requirement is NA.

Review the application server documentation and configuration to determine if the application server is part of an HA cluster.

If the application server is not part of an HA cluster, this is a finding."
V-57543,medium,Application servers must use NIST-approved or NSA-approved key management technology and processes.,"An asymmetric encryption key must be protected during transmission. The public portion of an asymmetric key pair can be freely distributed without fear of compromise, and the private portion of the key must be protected. The application server will provide software libraries that applications can programmatically utilize to encrypt and decrypt information. These application server libraries must use NIST-approved or NSA-approved key management technology and processes when producing, controlling, or distributing symmetric and asymmetric keys.",None,SV-71819r2_rule,F-62611r1_fix,"Configure the application server to utilize NIST-approved or NSA-approved key management technology when the application server produces, controls, and distributes symmetric and asymmetric cryptographic keys.",C-58251r1_chk,"Review application server configuration and the NIST FIPS certificate to validate the application server uses NIST-approved or NSA-approved key management technology and processes when producing, controlling or distributing symmetric and asymmetric keys.

If the application server does not use this NIST-approved or NSA-approved key management technology and processes, this is a finding."
V-26752,medium,Applications providing information flow control must enforce approved authorizations for controlling the flow of information within the system in accordance with applicable policy.,"Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

From an application perspective, flow control is established once application data flow modeling has been completed.  Data flow modeling can be described as:

the process of identifying, modeling and documenting how data moves around an information system. Data flow modeling examines processes (activities transforming data from one form to another), data stores (the holding areas for data), external entities (what sends data into a system or receives data from a system, and data flows (routes by which data can flow). 

Once the application data flows have been identified, corresponding flow controls can be applied at the appropriate points.

A few examples of flow control restrictions include: keeping export controlled information from being transmitted in the clear to the Internet and blocking information marked as classified but is being transported to an unapproved destination.  Information flow control policies and enforcement mechanisms are commonly employed by organizations to control the flow of information between designated sources and destinations (e.g., networks, individuals, devices) within information systems and between interconnected systems. Flow control is based on the characteristics of the information and/or the information path.

Application specific examples of flow control enforcement can be found in information protection software (e.g., guards, proxies, gateways and cross domain solutions) employing rule sets or establish configuration settings restricting information system services or provide message-filtering capability based on content (e.g., using key word searches or document characteristics).  

Applications providing information flow control must be able to enforce approved authorizations for controlling the flow of information within the system in accordance with applicable policy.
",None,SV-34000r1_rule,None,None,None,None
V-26932,medium,The application must obscure feedback of authentication information during the authentication process to protect the information from possible exploitation/use by unauthorized individuals.,"To prevent the compromise of authentication information such as passwords during the authentication process,  the feedback from the information system shall not provide any information that would allow an unauthorized user to compromise the authentication mechanism.  

Obfuscation of user provided information when typed into the system is a method used in addressing this risk. 

For example, displaying asterisks when a user types in a password, is an example of obscuring feedback of authentication information.  ",None,SV-34212r1_rule,None,None,None,None
V-22030,medium,"The designer will ensure the asserting party uses FIPS approved random numbers in the generation of SessionIndex in the SAML element AuthnStatement.
","A predictable SessionIndex could lead to an attacker computing a future SessionIndex, thereby, possibly compromising the application.",['DCSQ-1'],SV-25356r1_rule,F-23094r1_fix,"Use FIPS approved random numbers in the generation of SessionIndex in the SAML element AuthnStatement.
",C-27028r1_chk,"Ask the application representative for the Design Document. Verify in the Design Document asserting parties for SAML assertions use FIPS approved random numbers in the generation of SessionIndex in the Element AuthnStatement.

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.

1) If FIPS approved random numbers are not used in the generation of SessionIndex (in the Element AuthnStatement), it is a finding.

"
V-16829,medium,"The Test Manager will ensure a code review is performed before the application is released.
","A code review is a systematic evaluation of computer source code conducted for the purposes of identifying and remediating security flaws.  Examples of security flaws include but are not limited to format string exploits, memory leaks, buffer overflows or race conditions.  The code review is usually conducted during the application development phase, this allows discovered security issues to be corrected prior to release.  A code review can also be performed after the development phase, however, in all instances identified errors must go back to development for correction so conducting the code review during development is the logical and preferred action.  Automated code review tools are to be used whenever reviewing application source code.   These tools are often incorporated into many Integrated Development Environments (IDE) so code reviews can be conducted during all stages of the development life cycle.  Periodically reviewing code during the development phase makes transition to a production environment easier as flaws are continually identified and addressed during the development phase rather than en masse at the end of the development effort.
  
Code review processes and the tools used to conduct the code review analysis will vary depending upon application architecture and the development languages utilized.  

In addition to automated testing, manual code reviews may also be used to validate or augment automated code review results.  Larger projects will have a large code base and will require the use of automated code review tools in order to achieve complete code review coverage.  

A manual code review may consist of a peer review wherein other programmers on the team manually examine source code and automated code review results for known flaws that introduce security bugs into the application.

As with any testing, there is no single best approach and the tests must be tailored to the application architecture.  Use of automated tools along with manual review of code and testing results is considered a best practice when conducting code reviews. This method is the most likely way to ensure the maximum number of errors are caught and addressed prior to implementing the application in a production environment.   

For a list of tools that can be used for source code review, please reference http://samate.nist.gov/index.php/Source_Code_Security_Analyzers.html.
Please note that reference to these tools does not imply that they have been tested and approved for use by DISA.  
",['DCSQ-1'],SV-53700r1_rule,F-17146r3_fix,"Use automated code review tools, perform manual code reviews to validate and augment automated code review results.  Fix identified coding errors and issues prior to releasing application for production use.",C-17828r3_chk,"Ask the application representative to provide evidence of automated code reviews.  This will be in the form of a test plan or methodology which identifies application architecture and components as well as a formal report provided by the automated code review tool plus manual testing results.

This requirement requires access to the application source code, if the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.

1) If an automated application code review is not performed, this is a finding.

2) If analysis of code review results is not performed, this is a finding.

3) If all application code is not being reviewed, this is a finding.

4) If the code review report includes coding errors that have not been fixed, this is a finding.  If identified coding errors have been fixed, this is not a finding.

5) If the code reviews indicate the existence of hard-coded IPv4 or IPV6 addresses, it is a finding.
"
V-26845,medium,The application must produce audit records containing sufficient information to establish what type of events occurred.,"Information system auditing capability is critical for accurate forensic analysis.   Audit record content that may be necessary to satisfy the requirement of this control, includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked. ",None,SV-34125r1_rule,None,None,None,None
V-16773,medium,"The Program Manager will provide an Application Configuration Guide to the application hosting
providers to include a list of all potential hosting enclaves and connection rules and requirements. ",The security posture of the enclave could be degraded if an Application Configuration Guide is not available and followed by application developers. ,"['DCID-1', 'EBCR-1']",SV-17773r1_rule,F-16969r1_fix,Create and maintain an Application Configuration Guide and provide it to the application hosting facility.,C-17749r1_chk,"Detailed policy requirements:

The Program Manager will provide an Application Configuration Guide to the application hosting providers. The Program Manager will provide a list of all potential hosting enclaves and connection rules and requirements.
The Program Manager will ensure development systems, build systems, and test systems have a standardized environment and are documented in the Application Configuration Guide. The Designer will ensure known security assumptions, implications, system level protections, best practices, and required permissions are documented in the Application Configuration Guide. The Designer will ensure deployment configuration settings are documented in the Application Configuration Guide. The IAO will ensure the application is deployed in a manner consistent with the Application Configuration Guide provided by the developers. 

The Application Configuration Guide is any document or collection of documents used to configure the application.  These documents may be part of a user guide, secure configuration guide, or any guidance that satisfies the requirements below:
 
The Application Configuration Guide must be made available to application hosting providers. 
 
The Application Configuration Guide will contain a list of all potential hosting enclaves and connection rules and requirements. 
 
Development systems, build systems, and test systems must operate in a standardized environment. These settings are to be documented in the Application Configuration Guide.
Examples include:
 • Versions of compilers used
 • Build options when creating applications and components
 • Versions of COTS software (used as part of the application)
 • For web applications, which browsers and what versions are supported
 
All known security assumptions, implications, system level protections, best practices, and required permissions are documented in the Application Configuration Guide.
 
All deployment configuration settings are documented in the Application Configuration Guide.
Examples include:
 • Encryptions Settings
 • PKI Certificate Configuration Settings
 • Password Settings
 
All deployment configuration settings from the Application Configuration Guide should be implemented.
 
Ask the application representative for Application Configuration Guide or other guidance where these requirements are documented.  Verify the configuration settings have been implemented.
 
1) If any of the above information is missing, or the Application Configuration Guide does not exist, it is a finding. 
 
2) If the settings in the Application Configuration Guide are not implemented, it is a finding."
V-27014,medium,Applications that collectively provide name/address resolution service for an organization must implement internal/external role separation.,"A Domain Name System (DNS) server is an example of an information system providing name/address resolution service. To eliminate single points of failure and to enhance redundancy, there are typically at least two authoritative domain DNS servers, one configured as primary and the other as secondary. 

Additionally, the two servers are commonly located in two different network subnets and geographically separated (i.e., not located in the same physical facility). With regard to role separation, DNS servers with an internal role, only process name/address resolution requests from within the organization (i.e., internal clients). 

DNS servers with an external role only process name/address resolution information requests from clients external to the organization (i.e., on the external networks including the Internet). The set of clients that can access an authoritative DNS server in a particular role is specified by the organization (e.g., by address ranges, explicit lists). ",None,SV-34308r1_rule,None,None,None,None
V-70197,medium,Applications making SAML assertions must use FIPS-approved random numbers in the generation of SessionIndex in the SAML element AuthnStatement.,"A predictable SessionIndex could lead to an attacker computing a future SessionIndex, thereby, possibly compromising the application.

Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.",None,SV-84819r1_rule,F-76433r1_fix,Configure the application to use a FIPS-validated cryptographic module.,C-70673r1_chk,"Interview the system administrator, review the application components, and the application requirements to determine if the application uses SAML assertions.

If the application does not use SAML assertions, the requirement is not applicable.

Review the application documentation and interview he application administrator to identify the cryptographic modules used by the application.

Access the NIST site to determine if the cryptographic modules used by the application have been FIPS-validated.

http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140val-all.htm

If the application is using cryptographic modules that are not FIPS-validated when generating the SessionIndex in the SAML AuthnStatement, this is a finding."
V-69369,medium,The application must not write sensitive data into the application logs.,"It is important to identify and exclude certain types of data that is written into the logs. If the logs are compromised and sensitive data is included in the logs, this could assist an attacker in furthering their attack or it could completely compromise the system.

Examples of such data include but are not limited to; Passwords, Session IDs, Application source code, encryption keys, and sensitive data such as personal health information (PHI), Personally Identifiable Information (PII), or government identifiers (e.g., SSN).",None,SV-83991r1_rule,F-75543r1_fix,Design or reconfigure the application to not write sensitive data to the logs.,C-69783r1_chk,"Review the application logs and identify application logging format. Using the format of the log and the requisite search data as a guide to create your search, create search strings that could successfully identify the existence of passwords, session IDs, or other sensitive information such as SSN.

Utilizing the UNIX grep-based search utility include the following examples which are meant to illustrate the purpose of the requirement.

Password values are usually associated with usernames so searching for ""username"" in the provided log file will often assist in determining if password values are included.

grep -i ""username"" <  logfile.txt

Search for social security numbers in the provided log file.

grep -i ""[0-9]{3}[-]?[0-9]{2}[-]?[0-9]{4}"" <  logfile.txt

Use regular expressions to aid in searching log files. All search syntax cannot be provided within the STIG, the reviewer must utilize their knowledge to create new search criteria based upon the log format used and the potentially sensitive data processed by the application.

If the application logs sensitive data such as session IDs, application source code, encryption keys, or passwords, this is a finding."
V-27147,medium,"The application must synchronize with internal information system clocks which in turn, are synchronized on an organization-defined frequency with an organization-defined authoritative time source. ","Determining the correct time a particular application event occurred on a system is critical when conducting forensic analysis and investigating system events.  

Synchronization of system clocks is needed in order to correctly correlate the timing of events that occur across multiple systems. To meet that requirement the organization will define an authoritative time source and frequency to which each system will synchronize its internal clock.  

An example is utilizing the NTP protocol to synchronize with centralized NTP servers. Time stamps generated by the information system shall include both date and time. The time may be expressed in Coordinated Universal Time (UTC), a modern continuation of Greenwich Mean Time (GMT), or local time with an offset from UTC. 

Applications not purposed to provide NTP services should not try to compete with or replace NTP functionality and should synchronize with internal information system clocks that are in turn synchronized with an organization defined authoritative time source.",None,SV-34446r1_rule,None,None,None,None
V-30575,medium,The application must notify appropriate individuals when accounts are created.,"Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. 

Notification of account creation is one method and best practice for mitigating this risk. A comprehensive account management process will ensure that an audit trail which documents the creation of application user accounts and notifies administrators and/or application owners exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.  

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality. 

Examples of enterprise level authentication/access mechanisms include but are not limited to Active Directory and LDAP. 

Applications must support the requirement to notify appropriate individuals upon account creation.",None,SV-40309r1_rule,None,None,None,None
V-70211,medium,Applications must validate session identifiers.,"Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.",None,SV-84833r1_rule,F-76447r1_fix,Configure the application to configure user session identifiers.,C-70687r1_chk,"Review the application documentation and interview the application administrator.

Identify how the application validates session IDs.

If using a web development framework, ask the application administrator to provide details on the framework's session configuration as it relates to session validation.

If the application is not configured to validate user session identifiers, this is a finding."
V-57563,medium,The application server must remove organization-defined software components after updated versions have been installed.,"Installation of patches and updates is performed when there are errors or security vulnerabilities in the current release of the software.  When previous versions of software components are not removed from the application server after updates have been installed, an attacker may use the older components to exploit the system.",None,SV-71839r2_rule,F-62631r1_fix,Configure the application server to remove organization-defined software components after updated versions have been installed.,C-58271r1_chk,"Review the application server documentation and configuration to determine if organization-defined software components are removed after updated versions have been installed.

If organization-defined software components are not removed after updated versions have been installed, this is a finding."
V-16795,high,"The designer will ensure the application does not display account passwords as clear text.
",Passwords being displayed in clear text can be easily seen by casual observers. Password masking should be employed so any casual observers cannot see passwords on the screen as they are being typed.,['IAIA-1'],SV-17795r1_rule,F-17022r1_fix,Use password masking to prevent display of clear text password.,C-17790r1_chk,"Ask the application representative to login to the application. 
 
If the application uses password authentication, the password should not be displayed as clear text.
 
1) If the password is displayed as clear text, this is a finding."
V-26974,medium,"The application must be capable of taking organization-defined actions upon audit failure (e.g., overwrite oldest audit records, stop generating audit records, cease processing, notify of audit failure).","It is critical when a system is at risk of failing to process audit logs as required; it detects and takes action to mitigate the failure.  Audit processing failures include:  software/hardware errors, failures in the audit capturing mechanisms, and audit storage capacity being reached or exceeded.  Applications are required to be capable of either directly performing or calling system level functionality performing defined actions upon detection of an application audit log processing failure.",None,SV-34262r1_rule,None,None,None,None
V-27059,medium,"The application must maintain the integrity of information during aggregation, packaging, and transformation in preparation for transmission.","Ensuring the confidentiality of transmitted information requires that applications take feasible measures to employ transmission layer security.  This requirement applies to communications across internal and external networks. If the organization is relying on a commercial service provider for transmission services as a commodity item rather than a fully dedicated service, it may be more difficult to obtain the necessary assurances regarding the implementation of needed security controls for transmission integrity. 

When it is infeasible or impractical to obtain the necessary security controls and assurances of control effectiveness through appropriate contracting vehicles, the organization either implements appropriate compensating security controls or explicitly accepts the additional risk. 

When transmitting data, applications need to leverage transmission protection mechanisms such as TLS, SSL VPNs, or IPSEC.  ",None,SV-34354r1_rule,None,None,None,None
V-70177,medium,Applications used for non-local maintenance sessions must implement cryptographic mechanisms to protect the confidentiality of non-local maintenance and diagnostic communications.,"Privileged access contains control and configuration information which is particularly sensitive, so additional protections are necessary. This is maintained by using cryptographic mechanisms to protect confidentiality.

Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.

The application can meet this requirement through leveraging a cryptographic module.",None,SV-84799r1_rule,F-76413r1_fix,Configure the application to encrypt remote application maintenance sessions.,C-70653r1_chk,"Review the application documentation and interview the application administrator to identify application maintenance functions.

If the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.

Identify the maintenance functions/capabilities that are provided by the application and performed by an individual which can be performed remotely.

For example, the application may provide the ability to clean up a folder of temporary files, add users, remove users, restart processes, backup certain files, manage logs, or execute diagnostic sessions.

Access the application in the appropriate role needed to execute maintenance tasks. Observe the manner in which the application is connecting and verify the session is being encrypted.

For example, observe the browser to ensure the session is being encrypted with TLS/SSL.

If the application provides remote access to maintenance functions and capabilities and the remote access methods are not encrypted, this is a finding."
V-16815,medium,"The designer will ensure the application is not vulnerable to race conditions.

","A race condition occurs when an application receives two or more actions on the same resource in an unanticipated order which causes a conflict. Sometimes, the resource is locked by different users or functions within the application creating a deadlock situation. 
",['DCSQ-1'],SV-17815r1_rule,F-17113r1_fix,"Protect against race condition vulnerabilities
",C-17814r1_chk,"Policy:

The designer will ensure the application is not vulnerable to race conditions.

The designer will ensure the application does not use global variables when local variables could be used.

The designer will ensure a multi-threaded application uses thread safe functions when threads are accessing the same object or data.

The Designer will ensure global resources are locked before being accessed by the application.

Check:
If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.


Ask the application representative for code review results from the entire application. This can be provided as results from an automated code review tool. The review results should include all web services used in the application.

If the results are provided from a manual code review, the application representative will need to demonstrate how the following vulnerabilities are identified during code reviews: 
• Race conditions
• Using global variables when local variables could be used
• Multi-threaded application uses thread safe functions
• Global resources are locked before being accessed by the application

1) If the results are not provided or the application representative cannot demonstrate how manual code reviews are performed to identify these vulnerabilities, it is a finding.
 
Examples of race conditions vulnerabilities can be obtained from the OWASP website."
V-22032,medium,"The designer shall ensure if a OneTimeUse element is used in an assertion, there is only one used in the Conditions element portion of an assertion.
","Multiple OneTimeUse elements used in a SAML assertion can lead to elevation of privileges, if the application does not process SAML assertions correctly.",['DCSQ-1'],SV-25358r1_rule,F-23100r1_fix,"When using OneTimeUse elements in a SAML assertion  only allow one, OneTimeUse element to be used in the Conditions element of a SAML assertion.",C-27027r1_chk,"Examine the contents of a SOAP message using the OneTimeUse element, all messages should contain only one instance of a  OneTimeUse element in a SAML assertion.  This can be accomplished using a protocol analyzer such as WireShark

1) If SOAP message uses more than one, OneTimeUse element in a SAML assertion, it is a finding."
V-16813,high,"The designer will ensure the application does not use hidden fields to control user access privileges or as a part of a security mechanism.
","Using hidden fields to pass data in forms is very common. However, hidden fields can be easily manipulated by users.  Hidden fields used to control access decisions can lead to a complete compromise of access control  mechanism allowing immediate anonymous user access.  ",['DCSQ-1'],SV-17813r1_rule,F-17112r1_fix,"Do not use Hidden fields to control access privileges.
",C-17812r1_chk,"Ask the application representative for code review or scan results from the entire application.  This can be provided as results from an automated code review or a vulnerability scanning tool.  See section 5.4 of the Application Security and Development STIG for additional details.
 
If the results are provided from a manual code review, the application representative will need to demonstrate how hidden field vulnerabilities are identified during code reviews. 
 
Hidden fields or input parameters that utilize randomly generated token values used to address Cross Site Request Forgery (CSRF) attacks and are not used for access control are not applicable.

1) If the results are not provided or the application representative cannot demonstrate how manual code reviews are performed to identify hidden field vulnerabilities, this is a CAT I finding.
 
2) If the code review results are provided and hidden field vulnerabilities exist for user authentication, this is a CAT I finding.
 
3) If the code review results are provided and hidden field vulnerabilities exist allowing users to access unauthorized information, this is a CAT II finding.
"
V-35234,medium,The application server must adhere to the principles of least functionality by providing only essential capabilities.,"Application servers provide a myriad of differing processes, features and functionalities. Some of these processes may be deemed to be unnecessary or too unsecure to run on a production DoD system. Application servers must provide the capability to disable or deactivate functionality and services that are deemed to be non-essential to the server mission or can adversely impact server performance, for example, disabling dynamic JSP reloading on production application servers as a best practice.",None,SV-46521r3_rule,F-39781r2_fix,Configure the application server to use only essential features and capabilities.,C-43604r2_chk,"Review the application server documentation and configuration to determine if the application server can disable non-essential features and capabilities.

If the application server is not configured to meet this requirement, this is a finding."
V-69257,medium,The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions.,"Without confidentiality protection mechanisms, unauthorized individuals may gain access to sensitive information via a remote access session.

Remote access is access to DoD nonpublic information systems by an authorized user (or an information system) communicating through an external, non-organization-controlled network. Remote access methods include, for example, dial-up, broadband, and wireless.

Encryption provides a means to secure the remote connection to prevent unauthorized access to the data traversing the remote access connection thereby providing a degree of confidentiality. The encryption strength of mechanism is selected based on the security categorization of the information.",None,SV-83879r1_rule,F-75427r1_fix,Design and configure applications to use TLS encryption to protect the confidentiality of remote access sessions.,C-69681r1_chk,"Review the application documentation and interview the system administrator.

Identify the application encryption capabilities and methods for implementing encryption protection.

For web based applications; open the web browser and access the website URL. Use the browser and determine if the session is protected via TLS. A secure connection is usually indicated in the upper left hand corner of the URL by a padlock icon. Click on the padlock icon and examine the connection information. Determine if TLS encryption is used to secure the session.

For non-web based applications, determine the TCP/IP port, protocol and method used for establishing client connections to the remote server. Review application configuration settings to ensure encryption is specified and  via TLS.

If the connection is not secured with TLS, this is a finding."
V-16822,medium,"The Release Manager will develop an SCM plan describing the configuration control and change management process of objects developed and the roles and responsibilities of the organization.

","Software Configuration Management (SCM) is very important in tracking code releases, baselines, and managing access to the configuration management repository. The SCM plan identifies what should be under configuration management control. Without an SCM plan, code releases can be tracked and vulnerabilities can be inserted intentionally or unintentionally into the code base of the application.
","['DCPR-1', 'DCSW-1']",SV-17822r1_rule,F-17132r1_fix,"Update SCM plan to include missing items.
",C-17821r1_chk,"The Release Manager will ensure the SCM plan identifies all objects created during the development process subject to configuration control.

The Release Manager will ensure the SCM plan maintains procedures for identifying individual application components, as well as, entire application releases during all phases of the software development lifecycle. 

The Release Manager will ensure the SCM plan identifies and tracks all actions and changes resulting from a change request from initiation to release.

The Release Manager will ensure the SCM plan contains procedures to identify, document, review, and authorize any change requests to the application.

The Release Manager will ensure the SCM plan defines the responsibilities, the actions to be performed, the tools, techniques and methodologies, and defines an initial set of baselined software components.

The Release Manager will ensure the SCM plan objects have security classifications labels. 

The Release Manager will ensure the SCM plan identifies tools and version numbers used in the software development lifecycle. 

The Release Manager will ensure the SCM plan identifies mechanisms for controlled access of simultaneous individuals updating the same application component.

The Release Manager will ensure the SCM plan assures only authorized changes by authorized persons are possible.

The Release Manager will ensure the SCM plan identifies mechanisms to control access and audit changes between different versions of objects subject to configuration control.

The Release Manager will ensure the SCM plan identifies mechanisms to track and audit all modifications of objects under configuration control.  Audits will include the originator and date and time of the modification.

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.

Ask the application representative to review the applications SCM plan.

The SCM plan should contain the following:
• Description of the configuration control and change management process
• Types of objects developed 
• Roles and responsibilities of the organization
 
1) If the SCM plan does not include the above, this is a CAT II finding.
 
The SCM plan should also contain the following:
• Defined responsibilities
• Actions to be performed 
• Tools used in the process
• Techniques and methodologies
• Initial set of baselined software components
 
2) If the SCM plan does not include the above, this is a CAT III finding.

The SCM plan should identify all objects that are under configuration management control.  Ask the application representative to provide access to the configuration management repository and to identify the objects shown in the SCM plan.  

3) If the application representative cannot display all types of objects under CM control, this is a CAT III finding.
 
The SCM plan should identify third party tools and respective version numbers.

4) If the SCM plan does not identify third party tools, this is a CAT II finding.
 
The SCM plan should identify mechanisms for controlled access of individuals simultaneously updating the same application component. 
 
5) If the SCM plan does not identify mechanisms for controlled access, this is a CAT III finding.
 
The SCM plan assures only authorized changes by authorized persons are allowed.
 
6) If the SCM plan does not assure only authorized changes are made, this is a CAT II finding.
 
The SCM plan should identify mechanisms to control access and audit changes between different versions of objects subject to configuration control.
 
7) If the SCM plan does not identify mechanisms to control access and to audit changes between different versions of objects subject to configuration control, this is a CAT III finding.

The SCM plan should have procedures for label versions of application components and application builds under configuration management control.  Ask the application representative demonstrate the configuration management repository and contains versions and releases of the application. Ask the application representative to create a build or demonstrate a current release of the application can be recreated.  

8) If the application representative cannot display releases and application component versions, this is a CAT II finding.
 
The configuration management repository should track change requests from beginning to end. Ask the application representative to display a completed or in-process change request.  

9) If the configuration management repository cannot tracks change requests, this is a CAT III finding. 
 
If the application has just completed its first release, there may not be any change requests logged in the configuration management repository.  In this case, this finding is not applicable.

 
The configuration management repository should authorize change requests to the application. Ask the application representative to display an authorized change request and identify who is responsible for authorizing change requests.  

 
10) If the configuration management repository does not track authorized change requests, this is a CAT III finding.  

 
If the application has just completed its first release, there may not be any change requests logged in the configuration management repository. In this case, this finding is not applicable.

 
The configuration management repository should contain security classification labels for code and documentation in the repository. Classification labels are not applicable to unclassified systems.  

 
11) If there are no classification labels of code and documentation in the configuration management repository, this is a CAT III finding.

 
The configuration management repository should monitor all objects under CM control for auditing.  

 
12) If the configuration management repository does not audit for modifications, this is a CAT II finding.

  
The SCM plan should identify all components required to be IPV6 capable. 
 
 
13) If the SCM plan does not identify application components as IPV6 capable, this is a CAT III finding."
V-27140,medium,"The application must implement required cryptographic protections using cryptographic modules complying with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.","Cryptography is only as strong as the encryption modules/algorithms employed to encrypt the data. 

Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. ",None,SV-34439r1_rule,None,None,None,None
V-26965,medium,Applications must implement transaction recovery for systems that are transaction-based.,"Application recovery and reconstitution constitutes executing an information system contingency plan that is comprised of activities that restore essential missions and business functions. 

Database management systems and transaction-based processing systems are examples of information systems that are transaction-based. Transaction rollback and transaction journaling are examples of mechanisms supporting transaction recovery.  ",None,SV-34250r1_rule,None,None,None,None
V-26968,medium,"The application must invoke a system shutdown in the event of an audit failure, unless an alternative audit capability exists.","It is critical when a system is at risk of failing to process audit logs as required; it takes action to mitigate the failure. If the system were to continue processing without auditing enabled, actions can be taken on the system that cannot be tracked and recorded for later forensic analysis. 

Audit processing failures include; software/hardware errors, failures in the audit capturing mechanisms, and audit storage capacity being reached or exceeded.  

In many system configurations, the disk space allocated to the auditing system is separate from the disks allocated for the operating system; therefore, this may not result in a system outage. This forces the application to detect and take actions.",None,SV-34254r1_rule,None,None,None,None
V-26909,medium,Applications required to identify devices must uniquely identify and authenticate an organization-defined list of specific and/or types of devices before establishing a connection.,"Device authentication is a solution enabling an organization to manage both users and devices.  It is an additional layer of authentication ensuring only specific pre-authorized devices operated by specific pre-authorized users can access the network. 

Device authentication requires unique identification and authentication that may be defined by type, by specific device, or by a combination of type and device, as deemed appropriate by the organization. 

The application typically uses either shared known information (e.g., Media Access Control [MAC] or Transmission Control Protocol/Internet Protocol [TCP/IP] addresses) for identification or an organizational authentication solution (e.g., IEEE 802.1x and Extensible Authentication Protocol [EAP], Radius server with EAP-Transport Layer Security [TLS] authentication, Kerberos) to identify and authenticate devices on local and/or wide area networks. 

The required strength of the device authentication mechanism is determined by the security categorization of the information system. ",None,SV-34189r1_rule,None,None,None,None
V-70145,medium,The application password must not be changeable by users other than the administrator or the user with which the password is associated.,"If the application allows user A to change user B's password,  user B can be locked out of the application, and user A is provided the ability to grant themselves access to the application as user B.  This violates application integrity and availability principles.

Many applications provide a password reset capability that allows the user to reset their password if they forget it.

Protections must be utilized when establishing a password change or reset capability to prevent user A from changing user B's password.

Protection is usually accomplished by having each user provide an out of bounds (OOB) communication address such as a separate email address or SMS/text address (mobile phone) that can be used to transmit password reset/change information.

This  OOB information is usually provided by the user when the user account is created.   The OOB information is validated as part of the user account creation process by sending an account validation request to the OOB address and having the user respond to the request.

Applications must prevent users other than the administrator or the user associated with the account from changing the account password.",None,SV-84767r1_rule,F-76381r1_fix,"Use a CAC to authenticate users instead of using passwords.  If application users are prohibited or prevented from obtaining a CAC due to DoD policy requirements and passwords are the only viable option, design the application to utilize a secure password change or password reset process.

Utilize out of band (OOB) communication techniques to communicate password change requests to users.

Ensure verification processes exist that allow users to validate the change request prior to implementing the password change.

Ensure users are only allowed to change their own passwords.",C-70621r1_chk,"Review the application documentation and interview application administrator.

Determine if the application utilizes passwords.  If the application does not utilize passwords, the requirement is NA.

Identify the processes, commands or web pages the application uses to allow application users to change their own passwords.  This includes but is not limited to password resets.

If the application does not allow users to change or reset their passwords, the requirement is NA.

Obtain two application test accounts, referred to here as User A and User B.  Access the application as User A.  Utilize the application password reset or change processes and determine if User A is allowed to specify or otherwise force a password change for User B.

If User A is allowed to change or force a reset of User B's password, this is a finding."
V-70339,medium,The Configuration Management (CM) repository must be properly patched and STIG compliant.,"A Configuration Management (CM) repository is used to manage application code versions and to securely store application code.

Failure to properly apply security patches and secure the software Configuration Management system could affect the confidentiality and integrity of the application source-code.  

Compromise of the Configuration Management system could lead to unauthorized changes to applications including the addition of malware, root kits, back doors, logic bombs or other malicious functions into valid application code.   

This requirement is intended to be applied to application developers or organizations responsible for code management or who have and operate an application CM repository.",None,SV-84961r1_rule,F-76575r1_fix,Patch the CM system when new security patches are made available and apply the relevant STIGs.,C-70793r1_chk,"Review the application system documentation and interview the application administrator.

Identify if the STIG is being applied to application developers or organizations responsible for code management or who have and operate an application CM repository. If this is not the case, the requirement is not applicable.

Review CM patch management processes and procedures.  Have the system and CM admins demonstrate their patch management processes and verify the system has the latest security patches applied.  

Review the ATO documentation and verify the system that operates the CM repository software has had all relevant STIGs applied.

If CM repository is not at the latest security patch level and is not operating on a STIG compliant system, this is a finding."
V-26934,medium,The application must support the enforcement of logical access restrictions associated with changes to application configuration. ,"When dealing with access restrictions pertaining to change control, it should be noted any changes to the hardware, software, and/or firmware components of the information system and/or application can potentially have significant effects on the overall security of the system. 

Accordingly, only qualified and authorized individuals should be allowed to obtain access to application components for the purposes of initiating changes, including upgrades and modifications.  ",None,SV-34214r1_rule,None,None,None,None
V-16804,high,"The designer will ensure the application does not rely solely on a resource name to control access to a resource.
","Application access control decisions should be based on authentication of users. Resource names alone can be spoofed allowing access control mechanisms to be bypassed giving immediate access to the application.
",['DCSQ-1'],SV-17804r1_rule,F-17087r1_fix,Implement authentication on systems requiring access control.,C-17802r1_chk,"Verify the application does not grant access solely based on a resource name (e.g., username, IP address, machine name). Also, verify a username with a blank password does not grant access to the application.

1) If authentication is granted based on a resource name only,  it is a finding."
V-27020,medium,Applications must generate unique session identifiers with organization-defined randomness requirements.,"This requirement focuses on communications protection at the application session, versus network packet level. The intent of this control is to establish grounds for confidence at each end of a communications session in the ongoing identity of the other party and in the validity of the information being transmitted. 

Unique session IDs are the opposite of sequentially generated session IDs which can be easily guessed by an attacker.  Unique session identifiers help to reduce predictability of said identifiers.  

Unique session IDs address man-in-the-middle attacks including session hijacking or insertion of false information into a session.  If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.

Organizations can define the randomness of unique session identifiers when deemed necessary (e.g., sessions in service-oriented architectures providing web-based services). ",None,SV-34314r1_rule,None,None,None,None
V-6132,low,"The IAO will ensure all user accounts are disabled which are authorized to have access to the application but have not authenticated within the past 35 days.
",Disabling inactive userids ensures access and privilege are available to only those who need it.,"['IAAC-1', 'IAIA-1']",SV-6132r2_rule,F-4424r1_fix,APP6240-DG-AP,C-3050r1_chk,"If the user accounts used in the application are only operating system or database accounts this check is Not Applicable.
 
Identify all users that have not authenticated in the past 35 days.  
 
1) If any of these accounts are enabled, it is a finding."
V-70203,medium,The application must set the secure flag on session cookies.,"Many web development frameworks such as PHP, .NET, ASP as well as application servers include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.

Setting the secure bit on session cookie ensures the session cookie is only sent via TLS/SSL HTTPS connections.  This helps to ensure confidentiality as the session cookie is not able to be viewed by unauthorized parties as it transits the network.

Setting the secure flag on all cookies may also be warranted depending upon application design but at a minimum, the session cookie must always be secured.",None,SV-84825r1_rule,F-76439r1_fix,Configure the application to ensure the secure flag is set on session cookies.,C-70679r1_chk,"Review the application documentation and interview the application administrator to identify when session cookies are created.

If vulnerability scan results are available, reference the most recent vulnerability scan results.

Verify that the scan configuration includes checks for the secure flag on session cookies.  If scan configuration settings are not available, follow the manual procedure provided below.

Review the scan results and determine if the secure flag not being set was identified as a vulnerability.

To manually perform the check, open a web browser, logon to the web application and use the web browser to view the new session cookie.  

The procedures used for viewing and clearing browser cookies will vary based upon the web browser used.  Providing steps for every browser is outside the scope of the STIG.  There are numerous sites that document how to view cookies using various web browsers.

For IE11:
Alt-X >> Internet options >> General >> Settings >> View Files

A windows explorer box will open that contains the contents of the Temporary Internet Files.  Browse the folder and locate the application session cookie(s).  View the contents of the cookie(s).

If the ""secure"" flag is not set on the session cookie, or if the vulnerability scan results indicate the application does not set the secure flag on cookies, this is a finding."
V-19695,high,"The designer will ensure web services provide a mechanism for detecting resubmitted SOAP messages.
","SOAP messages should be designed so duplicate messages are detected. 
Replay attacks may lead to a loss of confidentiality and potentially a loss of availability

Any vulnerability associated with a DoD Information system or system enclave, the exploitation of which, by a risk factor, will directly and immediately result in loss of Confidentiality, Availability or Integrity of the system
associated data.
",['DCSQ-1'],SV-21836r1_rule,F-23097r1_fix,"Design web services with the functionality to detect resubmitted SOAP messages.
",C-24092r1_chk,"Ask the application representative for the design document. Review the design document for all web services. Review the design and verify all web services are able to detect resubmitted SOAP message requests.

Look for the use of WS_Reliability or WS_ReliableMessaging standards.  WS_Reliability or WS_ReliableMessaging syntax includes the use of ""At-Most"" semantics which guarantees that a duplicate message will not be delivered or ""Exactly-Once"" which guarantees a message will be delivered without duplication. 

If the application developer uses other reliable messaging standards to detect re-submitted messages, the developer should provide information as to how those standards meet this requirement.

1) If the design document does not indicate all web services are able to detect resubmitted SOAP message requests, this is a finding."
V-19699,medium,"The IAO will ensure web service inquiries to UDDI provide read-only access to the registry to anonymous users.
","If modification of UDDI registries are allowed by anonymous users, UDDI registries can be corrupted, or potentially be hijacked.
",['ECLP-1'],SV-21840r1_rule,F-23073r1_fix,Place access control mechanisms on UDDI registries.,C-24096r1_chk,"If the application does not utilize UDDI registries, this check is not applicable.

Ask the application representative to demonstrate web service inquiries to UDDI provide read-only access to the registry for anonymous users.   

1) If application representative is unable to demonstrate web service inquiries to UDDI provide read-only access to the registry for anonymous users, it is a finding.
"
V-19704,medium,"The designer shall ensure each unique asserting party provides unique assertion ID references for each SAML assertion.
","SAML assertion identifiers should be unique across a server implementation.  Duplicate SAML assertion identifiers could lead to unauthorized access to a web service.

",['IAIA-2'],SV-21845r1_rule,F-23060r1_fix,Design each SAML asserting authority to use unique assertion identifiers.,C-24101r1_chk,"If the application does not utilize SAML, this check is not applicable.

Ask the application representative for the design document. Review the design document for web services using SAML assertions. Review the design document and verify SAML assertion identifiers are not reused by a single asserting party.

1) If the design document does exist, or does not indicate SAML assertion identifiers which are unique for each asserting party, it is a finding."
V-27152,medium,The application must protect audit information from unauthorized modification.,"If audit data were to become compromised then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve. 

To ensure the veracity of audit data the information system and/or the application must protect audit information from unauthorized modification.  

This requirement can be achieved through multiple methods which will depend upon system architecture and design.  Some commonly employed methods include ensuring log files enjoy the proper file system permissions, and limiting log data locations.  

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights that the user enjoys in order to make access decisions regarding the modification of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity. ",None,SV-34451r1_rule,None,None,None,None
V-26703,medium,The application must be capable of automatically disabling accounts after a 35 day period of account inactivity.,"Users are often the first line of defense within an application.  Active users take notice of system and data conditions and are usually the first to notify systems administrators when they notice a system or application related anomaly pertaining to their own account. Inactive user accounts pose a risk to systems and applications. Owners of inactive accounts will not notice if unauthorized access to their user account has been obtained.  

Attackers that are able to exploit an inactive account can potentially obtain and maintain undetected access to an application. Applications need to track periods of user inactivity and disable application accounts after an organization-defined period of inactivity. Such a process greatly reduces the risk that accounts will be misused, hijacked, or data compromised. 

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality. 

Examples of enterprise level authentication/access mechanisms include but are not limited to, Active Directory and LDAP.",None,SV-33946r1_rule,None,None,None,None
V-70357,medium,Back-up copies of the application software or source code must be stored in a fire-rated container or stored separately (offsite).,"Application developers and application administrators must take steps to ensure continuity of development effort and operations should a disaster strike.  

Steps include protecting back-up copies of development code and application software.

Improper storage of the back-up copies can result in extended outages of the information system in the event of a fire or other situation that results in destruction of the back-up as well as the operating copy.

To address this risk, copies of application software and application source code must be stored in a fire-rated container or separately (offsite) from the operational or development environments.",None,SV-84979r1_rule,F-76593r1_fix,Store a back-up copy of the application software and source code in a fire-rated container or store it separately (offsite) from their respective environments.,C-70811r1_chk,"When reviewing a COTS or GOTS application, verify that a back-up copy of the software is stored in a fire rated container or is stored separately (offsite) from the operational environment.

Determine if application development is done in-house. 

If application development occurs in-house and source code is available, verify a back-up copy of the source code is kept in a fire-rated container or stored offsite from the development environment.

If back-up copies of the application software or source code are not stored in a fire-rated container or stored separately (offsite) from their respective environments, this is a finding."
V-27148,medium,The application must protect audit information from any type of unauthorized access. ,"If audit data were to become compromised then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult if not impossible to achieve.   In addition, access to audit records provides information an attacker could potentially use to his or her advantage.

To ensure the veracity of audit data the information system and/or the application must protect audit information from any and all unauthorized access.  This includes read, write, copy, etc.

This requirement can be achieved through multiple methods which will depend upon system architecture and design.  Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location. 

Additionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of or access to those records via the application.  If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.  ",None,SV-34447r1_rule,None,None,None,None
V-26782,medium,Applications providing information flow control must track problems associated with the binding of security attributes to data. ,"Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information.  

Attribution, (e.g., the ability to attribute actions to certain individuals) is a critical component of a security concept of operations. The ability to identify source and destination points for information flowing in an information system, allows forensic reconstruction of events when required, and increases policy compliance by attributing policy violations to specific organizations/individuals.  

In order to identify problems that may occur when binding security attributes to information, tracking and or auditing of these binding events must take place.",None,SV-34032r1_rule,None,None,None,None
V-6163,medium,"The Designer will ensure the application removes temporary storage of files and cookies when the application is terminated.
","If the application does not remove temporary data (e.g., authentication data, temporary files containing sensitive data, etc.) this temporary data could be used to re-authenticate the user or allow unauthorized access to sensitive data.",['ECRC-1'],SV-6163r1_rule,F-16992r1_fix,Configure or redesign the application to remove all temporary files before the application exits.,C-3046r1_chk,"Check application to ensure that memory is being released.  Also ensure database connections are closed, if applicable.  Ask the application representative to demonstrate memory and database connections are released when the application is terminated.

1) If memory is not released and the application is not using garbage collection process for memory (e.g., Java Applications), this is a finding.
 
2) If the application creates new database connections on entry to the application and does not release them on exit of the application, this is a finding.
  
Ask the application representative to access the application, perform selected actions, and exit the application. Ask the application representative to search for files recently created.
 
For a Windows System:
Use Windows Explorer to search for all files (*.*) created today, and then examine the times to narrow the scope of the files to examine.

For a Unix System:
Enter:  # touch -t 200301211020 /tmp/testdatefile
 
The -t flag represents the time option.  The time format to be used with -t is {[CC]YYMMDDhhmm[ss]} where the century [CC] and the seconds [ss] are optional fields.
 
The resulting file is:
-rw-r--r--   1 root    root        0 Jan 21 10:20 /tmp/testdatefile
 
Enter a second command:
# find / -newer /tmp/testdatefile   --> This will produce all files on the system with a date later than that of 'testdatefile'.
# find ./* -newer /tmp/testdatefile --> This will produce all files, recursively, in the current directory with a date later than that of 'testdatefile'.
 
3) If this list includes temporary files that are not being deleted by the application, this is a finding."
V-26684,medium,The application must employ automated mechanisms to facilitate the monitoring and control of remote access methods.,"Remote network access is accomplished by leveraging common communication protocols and establishing a remote connection.  These connections will occur over the public Internet.  

Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.  

Automated monitoring of remote access sessions allows organizations to audit user activities on a variety of information system components (e.g., servers, workstations, notebook/laptop computers) and to ensure compliance with remote access policy.

Remote access applications such as those providing remote access to network devices and information systems and are individually configured with no monitoring or automation capabilities increase risk and makes remote user access management difficult at best.

Applications providing remote access capability need to provide the ability to automatically monitor and control remote user sessions.  This includes the capability to directly trigger actions based on user activity or pass information and or data to a separate application or entity that can then perform automated tasks based on the information. ",None,SV-33904r1_rule,None,None,None,None
V-26772,medium,Applications designed to control information flow must provide the ability to detect unsanctioned information being transmitted across security domains. ,"Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

Specific examples of flow control enforcement can be found in boundary protection devices (e.g., proxies, application layer gateways, cross domain guards, content filters) employing rule sets or establish configuration settings restricting information system services, provide a packet-filtering capability based on header information, or message-filtering capability based on content (e.g., using key word searches or document characteristics). 

Actions to support this requirement include, but are not limited to: checking all transferred information for malware, implementing dirty word list searches on transferred information, and applying the same protection measures to metadata (e.g., security attributes) that is applied to the information payload.",None,SV-34022r1_rule,None,None,None,None
V-26686,medium,The application must monitor for unauthorized remote connections to the information system on an organization-defined frequency.,"Organizations need to monitor for unauthorized remote access connections to information systems in order to determine if break-in attempts or other unauthorized activity is occurring.  There are already other SRG requirements for applications to generate audit connection logs to record connection activity. It is for the organization to determine which of those audited connections is unauthorized.  

This task is usually handled by the IDS, log alarming or some other security mechanism specifically designed to automate and address this requirement.  

This requirement is NA for applications not designed to monitor for unauthorized remote connections to information systems.  Applications designed to meet this requirement must be able to do so on an organization-defined frequency.",None,SV-33909r1_rule,None,None,None,None
V-16824,low,"The Test Manager will ensure at least one tester is designated to test for security flaws in addition to functional testing.
","If there is no person designated to test for security flaws, vulnerabilities can potentially be missed during testing.",['DCSQ-1'],SV-17824r1_rule,F-17139r1_fix,Designate testers for security flaws.,C-17823r1_chk,"Ask the application representative if an individual has been designated to test for security flaws.
 
1) If no individual has been designated to test for security flaws, it is a finding."
V-69437,medium,The application must generate audit records containing information that establishes the identity of any individual or process associated with the event.,"Without information that establishes the identity of the subjects (i.e., users or processes acting on behalf of users) associated with the events, security personnel cannot determine responsibility for the potentially harmful event.

Event identifiers (if authenticated or otherwise known) include, but are not limited to, user database tables, primary key values, user names, or process identifiers.",None,SV-84059r1_rule,F-75613r1_fix,Configure the application to log the identity of the user and/or the process associated with the event.,C-69855r1_chk,"Review system documentation and discuss application operation with application administrator.

Identify application processes and application users.
Identify application components, e.g., application features framework and function. Identify server components, such as web server, database server.

Review application logs. Ensure the application event logs include an identifier or identifiers that will allow an investigator to determine the user or the application process responsible for the application event.

If the event logs do not include the appropriate identifier or identifiers, this is a finding."
V-69309,medium,The application must automatically audit account disabling actions.,"When application accounts are disabled, user accessibility is affected. Accounts are utilized for identifying individual application users or for identifying the application processes themselves. In order to detect and respond to events affecting user accessibility and application processing, applications must audit account disabling actions and, as required, notify the appropriate individuals, so they can investigate the event. Such a capability greatly reduces the risk that application accessibility will be negatively affected for extended periods of time and provides logging that can be used for forensic purposes. 

Application developers are encouraged to integrate their applications with enterprise-level authentication/access/audit mechanisms such as Syslog, Active Directory or LDAP.",None,SV-83931r1_rule,F-75483r1_fix,"Configure the application to write a log entry when a user account is disabled.

At a minimum, ensure account name, date and time of the event are recorded.",C-69721r1_chk,"Examine the application documentation to identify how the application users are managed.

Interview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.

If the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.

Identify the location of the audit logs and review the end of the logs.

Access the user account management functionality and disable a test user account.

Examine the log file again and determine if the account disable event was logged. The information logged should, at a minimum, include enough detail to determine which account was disabled and when.

If the account disabling event information was not logged, this is a finding."
V-19700,medium,"The IAO will ensure if the UDDI registry contains sensitive information and read access to the UDDI registry is granted only to authenticated users.
","If a UDDI registry contains sensitive data, the repository should require authentication to read the UDDI data repository. If the repository does not require authentication, the UDDI data repository will be accessed by anonymous users.
","['ECCR-1', 'ECCR-2']",SV-21841r1_rule,F-23074r1_fix,Add access control mechanism for access to sensitive UDDI XML.,C-24097r1_chk,"If the application does not utilize UDDI registries, this check is not applicable.

Ask the application representative to demonstrate authentication is required when UDDI registry contains sensitive information.   

1) If the application representative is unable to demonstrate authentication is required when UDDI registry contains sensitive information, it is a finding. 
"
V-35089,medium,The application server must use encryption strength in accordance with the categorization of the management data during remote access management sessions.,"Remote management access is accomplished by leveraging common communication protocols and establishing a remote connection to the application server via a network for the purposes of managing the application server. If cryptography is not used, then the session data traversing the remote connection could be intercepted and compromised. 

Types of management interfaces utilized by an application server include web-based HTTPS interfaces as well as command line-based management interfaces.",None,SV-46376r3_rule,F-39640r3_fix,Configure the application server to use encryption strength in accordance with the categorization of the management data during remote access management sessions.,C-43476r3_chk,"Check the application server configuration to ensure all management interfaces use encryption in accordance with the management data.

If the application server is not configured to encrypt remote access management sessions in accordance with the categorization of the management data, this is a finding."
V-27116,medium,The application must either implement compensating security controls or the organization explicitly accepts the risk of not performing the verification as required. ,"Application security functional testing involves testing the application for conformance to the applications security function specifications, as well as, for the underlying security model. The need to verify security functionality applies to all security functions. The conformance criteria state the conditions necessary for the application to exhibit the desired security behavior or satisfy a security property for example, successful login triggers an audit entry. 

Organizations may define conditions requiring verification and the frequency in which such testing occurs. Security function testing usually occurs during the development phase and can in some instances occur in the production phase if the developer provides the security conformance criteria or if the conformance criteria can be established.  There are application testing frameworks available that can perform functional testing on production systems however they are limited in their applicability and are language or product centric. ",None,SV-34413r1_rule,None,None,None,None
V-35165,medium,The application server must produce log records containing sufficient information to establish when (date and time) the events occurred.,"Application server logging capability is critical for accurate forensic analysis.  Without sufficient and accurate information, a correct replay of the events cannot be determined.

Ascertaining the correct order of the events that occurred is important during forensic analysis.  Events that appear harmless by themselves might be flagged as a potential threat when properly viewed in sequence.  By also establishing the event date and time, an event can be properly viewed with an enterprise tool to fully see a possible threat in its entirety.

Without sufficient information establishing when the log event occurred, investigation into the cause of event is severely hindered.  Log record content that may be necessary to satisfy the requirement of this control includes, but is not limited to, time stamps, source and destination IP addresses, user/process identifiers, event descriptions, application-specific events, success/fail indications, file names involved, access control, or flow control rules invoked.

In addition to logging event information, application servers must also log the corresponding dates and times of these events. Examples of event data include, but are not limited to, Java Virtual Machine (JVM) activity, HTTPD activity, and application server-related system process activity.",None,SV-46452r3_rule,F-39715r2_fix,Configure the application server logging system to log date and time with the event.,C-43547r2_chk,"Review the logs on the application server to determine if the date and time are included in the log event data.

If the date and time are not included, this is a finding."
V-19688,high,"The designer and the IAO will ensure physical operating system separation and physical application separation is employed between servers of different data types in the web tier of Increment 1/Phase 1 deployment of the DoD DMZ for Internet-facing applications.
","Restricted and unrestricted data residing on the same server may allow unauthorized access which would result in a loss of integrity and possibly the availability of the data.
 
This requirement to this STIG was added at the request of the DoD DMZ PM.  The goal is to ensure this requirement is addressed as the application is being developed.  This requirement and severity was previously approved by the DSAWG in the Internet-NIPRNet DoD DMZ Increment 1, Phase 1 STIG.

*This requirement does not apply to SIPRNet DMZs.  

",['DCPA-1'],SV-21829r1_rule,F-23071r1_fix,Move restricted and unrestricted data to different servers.,C-24085r1_chk,"Ask the application representative for a network diagram. Review the network diagram for web servers/web services or any server in the web tier of the DoD DMZ.  Verify restricted and unrestricted servers are installed on separate VLANS.

1) If restricted and unrestricted servers in the Web Tier of the DoD DMZ are not installed on separate VLANS, it is a finding.

*Note: This check does not apply to SIPRNet DMZs."
V-69521,medium,"The application must be configured to use only functions, ports, and protocols permitted to it in the PPSM CAL.","In order to prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized tunneling (i.e., embedding of data types within data types), organizations must disable or restrict unused or unnecessary physical and logical ports/protocols on information systems.

Applications are capable of providing a wide variety of functions and services. Some of the functions and services provided by default may not be necessary to support essential organizational operations. Additionally, it is sometimes convenient to provide multiple services from a single component (e.g., email and web services; however, doing so increases risk over limiting the services provided by any one component.

To support the requirements and principles of least functionality, the application must support the organizational requirements providing only essential capabilities and limiting the use of ports, protocols, and/or services to only those required, authorized, and approved to conduct official business or to address authorized quality of life issues.",None,SV-84143r1_rule,F-75695r1_fix,Configure the application to utilize application ports approved by the PPSM CAL.,C-69939r1_chk,"Review the application documentation and configuration.

Interview the application administrator.

Identify the network ports and protocols that are utilized by the application.

Using a combination of relevant OS commands and application configuration utilities identify the TCP/IP port numbers the application is configured to utilize and is utilizing.

Review the PPSM web page at:

http://www.disa.mil/Network-Services/Enterprise-Connections/PPSM

Review the PPSM Category Assurance List (CAL) directly at the following link: 

https://disa.deps.mil/ext/cop/iase/ppsm/Pages/cal.aspx

Verify the ports used by the application are approved by the PPSM CAL.

If the ports are not approved by the PPSM CAL, this is a finding."
V-26830,medium,"Applications must be able to function within separate processing domains (virtualized systems), when specified, so as to enable finer-grained allocation of user privileges.","Applications must employ the concept of least privilege, allowing only authorized accesses for users (and processes acting on behalf of users) which are necessary to accomplish assigned tasks in accordance with organizational missions and business functions.  

Employing virtualization techniques to allow greater privilege within a virtual machine, while restricting privilege to the underlying actual machine is an example of providing separate processing domains for finer-grained allocation of user privileges.",None,SV-34080r1_rule,None,None,None,None
V-26864,medium,The application must produce audit records containing sufficient information to establish the identity of any user/subject or process associated with the event.,"Information system auditing capability is critical for accurate forensic analysis.   Audit record content that may be necessary to satisfy the requirement of this control, includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked. ",None,SV-34144r1_rule,None,None,None,None
V-70165,medium,The application must electronically verify Personal Identity Verification (PIV) credentials from other federal agencies.,"Inappropriate access may be granted to unauthorized users if federal agency PIV credentials are not electronically verified.

Personal Identity Verification (PIV) credentials are those credentials issued by federal agencies that conform to FIPS Publication 201 and supporting guidance documents. OMB Memorandum 11-11 requires federal agencies to continue implementing the requirements specified in HSPD-12 to enable agency-wide use of PIV credentials.",None,SV-84787r1_rule,F-76401r1_fix,Configure the application to verify the PIV credentials presented when utilizing authentication provided by Federal (Non-DoD) agencies.,C-70641r1_chk,"Review the application documentation and interview the application administrator to identify application access methods.

If the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.

If the application is only deployed to SIPRNet, this requirement is not applicable.

If the application is not intended to be available to Federal government (non-DoD) partners this requirement is not applicable.

Ask the application administrator to demonstrate how the application is configured to verify the PIV credentials from other agencies when they are presented as an authentication token.

If the application is required to provide authenticated access to Federal agencies and it does verify the PIV, this is a finding."
V-69545,medium,The application must implement replay-resistant authentication mechanisms for network access to non-privileged accounts.,"A replay attack is a man-in-the-middle style attack which allows an attacker to repeat or alter a valid data transmission that may enable unauthorized access to the application. Authentication sessions between the authenticating client and the application server validating the user credentials must not be vulnerable to a replay attack.

The protection methods selected to protect against a replay attack will vary according to the application architecture.

An authentication process resists replay attacks if it is impractical to achieve a successful authentication by recording and replaying a previous authentication message.

A non-privileged account is any operating system account with authorizations of a non-privileged user.

Techniques used to address this include protocols using nonces (e.g., numbers generated for a specific one time use) or challenges (e.g., TLS, WS_Security) and PKI certificates. Additional techniques include time-synchronous or challenge-response one-time authenticators.",None,SV-84167r1_rule,F-75719r1_fix,Design and configure the application to utilize replay-resistant mechanisms when authenticating non-privileged accounts.,C-69963r1_chk,"Review the application documentation and interview the application administrator to identify what authentication mechanisms are used when accessing the application.

If the application is hosting publicly releasable information that does not require authentication, or if the application users are not eligible for a DoD CAC as per DoD 8520, this requirement is not applicable.

Review to ensure the application is utilizing TLSV1.1 or greater to protect communication and non-privileged user authentication traffic.

Verify the application utilizes a strong authentication mechanism such as Kerberos, IPSEC, or Secure Shell (SSH).

- Cryptographically sign web services packets.
- Time stamps and cryptographic hashes are used with web services packets.
- Use WS_Security for web services.

Request the most recent vulnerability scan results and configuration settings.

Verify the configuration is set to test for known replay vulnerabilities.

Request code review results (if available) and review for issues that have been identified as potential replay attack vulnerabilities.

Verify identified issues have been remediated.

If the application is not implementing replay-resistant authentication methods applicable to the application architecture, this is a finding."
V-6172,medium,"The IAO will ensure data backup is performed at required intervals in accordance with DoD policy.
","Without proper backups, the application is not protected from the loss of data or the operating environment in the event of hardware or software failure.","['CODB-1', 'CODB-2', 'CODB-3']",SV-6172r1_rule,F-4484r1_fix,Develop and implement backup procedures.,C-3058r1_chk,"Check the following based on the MAC level of the application.
 
For MAC 3 applications:
Validate backup procedures exist and are performed at least weekly. 
 
A sampling of system backups should be checked to ensure compliance with the control.
 
For MAC 2 applications:
Validate backup procedures exist and are performed at least daily. 
 
Validate recovery media is stored at an off-site location and ensure the data is protected in accordance with its mission assurance category and confidentiality level. This validation can be performed by examining an SLA or MOU/MOA that states the protection levels of the data and how it should be stored.
 
A sampling of system backups should be checked to ensure compliance with the control.
Verify that the organization tests backup information to ensure media reliability and information integrity. 
 
Verify that the organization selectively uses backup information in the restoration of information system functions as part of annual contingency plan testing. 
 
For MAC 1 applications:
Validate that the procedures have been defined for system redundancy and they are properly implemented and are executing the procedures. 
 
Verify that the redundant system is properly separated from the primary system (i.e., located in a different building or in a different city). This validation should be performed by examining the secondary system and ensuring its operation. Examine the SLA or MOU/MOA to ensure redundant capability is addressed. Finding details should indicate the type of validation performed. Examine the mirror capability testing procedures and results to insure the capability is properly tested at 6 month minimum intervals. 
 
1) If any of the requirements above for the MAC level of the application are not met, it is a finding."
V-57549,medium,The application server must generate a unique session identifier for each session.,"Unique session IDs are the opposite of sequentially generated session IDs, which can be easily guessed by an attacker. Unique session identifiers help to reduce predictability of session identifiers. Unique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session. If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.

Application servers must generate a unique session identifier for each application session so as to prevent session hijacking.",None,SV-71825r2_rule,F-62617r1_fix,Configure the application server to generate a unique session identifier for each session.,C-58257r1_chk,"Review the application server configuration to determine if the application server generates a unique session identifier for each session.

Request an administrator log onto the server and view the logs to verify a unique session identifier was assigned to the session.

If the application server does not generate a unique session identifier for each session, this is a finding."
V-70383,medium,Security flaws must be fixed or addressed in the project plan.,"This requirement is meant to apply to developers or organizations that are doing application development work.

Application development efforts include the creation of a project plan to track and organize the development work.

If security flaws are not tracked within the project plan, it is possible the flaws will be overlooked and included in a release.

Tracking flaws in the project plan will help identify code elements to be changed as well as the requested change.",None,SV-85005r1_rule,F-76619r1_fix,Address security flaws within a project plan to ensure they are tracked and addressed by management.,C-70837r1_chk,"This requirement is meant to apply to developers or organizations that are doing application development work. If the organization managing the application is not performing or managing the development of the application the requirement is not applicable.

Ask the application representative to demonstrate how security flaws are integrated into the project plan.

If security flaws are not addressed in the project plan or there is no process to introduce security flaws into the project plan, this is a finding."
V-26734,medium,The application must employ automated mechanisms enabling authorized users to make information sharing decisions based on access authorizations of sharing partners and access restrictions on information to be shared.,"User based collaboration and information sharing applications present challenges regarding classification and dissemination of information generated and shared among the application users. These types of applications are intended to share information created and stored within the application;  however, not all users have a need to view all data created or stored within the collaboration tool.  

Collaboration tools and all applications handling information that may be restricted in some manner (e.g., privileged medical, contract-sensitive, proprietary, personally identifiable information, special access programs/compartments) must provide the capability to automatically enable authorized users to make information sharing decisions based upon access authorizations.  

Depending on the information-sharing circumstance, the sharing partner may be defined at the individual, group, or organization level and information may be defined by specific content, type, or security categorization. ",None,SV-33982r1_rule,None,None,None,None
V-26966,medium,Backup / Disaster Recovery oriented applications must be capable of backing up user-level information per a defined frequency. ,"Information system backup is a critical step in maintaining data assurance and availability. 

User-level information is data generated by information system and/or application users. In order to assure availability of this data in the event of a system failure, DoD organizations are required to ensure user generated data is backed up at a defined frequency.  This includes data stored on file systems, within databases or within any other storage media.

Applications performing backups must be capable of backing up user-level information per the DoD defined frequency.",None,SV-34251r1_rule,None,None,None,None
V-70183,medium,The application must terminate all sessions and network connections when non-local maintenance is completed.,"If a maintenance session or connection remains open after maintenance is completed, it may be hijacked by an attacker and used to compromise or damage the system.

Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.

This requirement applies to hardware/software diagnostic test equipment or tools. This requirement does not cover hardware/software components that may support information system maintenance, yet are a part of the system (e.g., the software implementing ""ping,"" ""ls,"" ""ipconfig,"" or the hardware and software implementing the monitoring port of an Ethernet switch).",None,SV-84805r1_rule,F-76419r1_fix,Configure the application to expire idle user sessions after 10 minutes of inactivity for admin users and after 15 minutes of inactivity for regular users.,C-70659r1_chk,"Review the application documentation and interview the system administrator to determine how the application is configured to terminate network sessions after sessions have been idle for a period of time. Identify any documented exceptions.

If the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.

For privileged management sessions the period of time is 10 minutes of inactivity.

For regular user or non-privileged sessions, the period of time is 15 minutes of inactivity.

Authenticate to the application using normal in-band access methods and as an application admin.

Perform any operation to verify access and then leave the session idle for 10 minutes and perform no activity within the application.

Access the application after the period of inactivity has expired and determine if the application still allows access.

If necessary, logout of the application, clear the browser cache, and repeat the same test procedure using the account privileges of a regular user. Leave the session inactive for 15 minutes.

If the application does not deny access after each user session has exceeded the relevant idle timeout period and there is no documented risk exceptions needed to fulfill mission requirements, this is a finding."
V-57403,medium,The application server management interface must provide a logout capability for user-initiated communication session.,"If a user cannot explicitly end an application server management interface session, the session may remain open and be exploited by an attacker; this is referred to as a zombie session.

The attacker will then have access to the application server management functions without going through the user authentication process.

To prevent this type of attack, the application server management interface must close user sessions when defined events are met and provide a logout function for users to explicitly close the session and free resources that were in use by the user.",None,SV-71675r2_rule,F-62441r1_fix,Configure the application server management interface to provide a logout capability for the users.,C-58077r1_chk,"Review application server documentation and configuration settings to determine if the application server management interface provides a logout capability.

If the application server management interface does not provide a logout capability, this is a finding."
V-57485,medium,"The application server must generate log records for all account creations, modifications, disabling, and termination events.","The maintenance of user accounts is a key activity within the system to determine access and privileges.  Through changes to accounts, an attacker can create an account for persistent access, modify an account to elevate privileges or terminate/disable an account(s) to cause a DoS for user(s).  To be able to track and investigate these actions, log records must be generated for any account modification functions.

Application servers either provide a local user store, or they can integrate with enterprise user stores like LDAP.  As such, the application server must be able to generate log records on account creation, modification, disabling, and termination.",None,SV-71761r2_rule,F-62553r1_fix,"Configure the application server to generate log records when accounts are created, modified, disabled, or terminated.",C-58193r1_chk,"Review the application server documentation and the system configuration to determine if the application server generates log records when accounts are created, modified, disabled, or terminated.

If the application server does not generate log records for account creation, modification, disabling, and termination, this is a finding."
V-35299,medium,The application server must use an enterprise user management system to uniquely identify and authenticate users (or processes acting on behalf of organizational users).,"To assure accountability and prevent unauthorized access, application server users must be uniquely identified and authenticated.  This is typically accomplished via the use of a user store which is either local (OS-based) or centralized (LDAP) in nature.

To ensure support to the enterprise, the authentication must utilize an enterprise solution.",None,SV-46586r3_rule,F-39845r2_fix,Configure the application server to use an enterprise user management system to uniquely identify and authenticate users and processes acting on behalf of organizational users.,C-43668r2_chk,"Review application server documentation and configuration settings to determine if the application server is using an enterprise solution to authenticate organizational users and processes running on the users' behalf.

If an enterprise solution is not being used, this is a finding."
V-27054,medium,Applications performing extrusion detection must be capable of denying network traffic and auditing internal users (or malicious code) posing a threat to external information systems.,"Detecting internal actions that may pose a security threat to external information systems is sometimes termed extrusion detection. Extrusion detection at the information system boundary includes the analysis of network traffic (incoming as well as, outgoing) looking for indications of an internal threat to the security of external systems.",None,SV-34349r1_rule,None,None,None,None
V-26918,medium,The application must support organizational requirements to enforce password complexity by the number of upper case characters used.,"Password complexity or strength is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. 

Password complexity is one factor of several that determine how long it takes to crack a password. The more complex the password is, the greater the number of possible combinations that need to be tested before the password is compromised. 

Use of a complex password helps to increase the time and resources required to compromise the password. ",None,SV-34198r1_rule,None,None,None,None
V-69535,medium,"The application must use multifactor (e.g., CAC, Alt. Token) authentication for network access to non-privileged accounts.","To assure accountability and prevent unauthenticated access, non-privileged users must utilize multifactor authentication to prevent potential misuse and compromise of the system.

Multifactor authentication uses two or more factors to achieve authentication.

Factors include:

(i) Something you know (e.g., password/PIN);
(ii) Something you have (e.g., cryptographic identification device, CAC/SIPRNet token); or
(iii) Something you are (e.g., biometric).

A non-privileged account is any information system account with authorizations of a non-privileged user.

Network access is any access to an application by a user (or process acting on behalf of a user) where said access is obtained through a network connection.

Applications integrating with the DoD Active Directory and utilize the DoD CAC are an example of compliant multifactor authentication solutions.",None,SV-84157r1_rule,F-75709r1_fix,Configure the application to require CAC or Alt. Token authentication for non-privileged network access to non-privileged accounts.,C-69953r1_chk,"Review the application documentation and interview the application administrator to identify application access methods.

If the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.

Ask the application administrator to log on to the application. Have the application admin use their non-privileged credentials.

Validate the application prompts the user to provide a certificate from the CAC.

Validate the application requests the user to input their CAC PIN. 

If the application allows access without requiring a CAC or Alt. Token, this is a finding."
V-35182,medium,The application server must generate log records containing information that establishes the identity of any individual or process associated with the event.,"Information system logging capability is critical for accurate forensic analysis. Log record content that may be necessary to satisfy the requirement of this control includes: time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked. 

Application servers have differing levels of logging capabilities that can be specified by setting a verbosity level. The application server must, at a minimum, be capable of establishing the identity of any user or process that is associated with any particular event.",None,SV-46469r3_rule,F-39730r2_fix,Configure the application server logging system to log the identity of the user or process related to the events.,C-43562r2_chk,"Review application server documentation and the log files on the application server to determine if the logs contain information that establishes the identity of the user or process associated with log event data.

If the application server does not produce logs that establish the identity of the user or process associated with log event data, this is a finding."
V-27097,medium,Applications providing malware and/or firewall protection must monitor inbound and outbound communications for unauthorized activities or conditions.,"Unusual/unauthorized activities or conditions include internal traffic indicating the presence of malicious code within an information system or propagating among system components, the unauthorized export of information, or signaling to an external information system. 

Evidence of malicious code is used to identify potentially compromised information systems or information system components. 

Examples of applications that provide monitoring capability for unusual/unauthorized activities include, but are not limited to, Intrusion Detection, Anti-Virus and Malware etc.",None,SV-34392r1_rule,None,None,None,None
V-57495,medium,"The application server must prevent the installation of patches, service packs, or application components without verification the software component has been digitally signed using a certificate that is recognized and approved by the organization.","Changes to any software components can have significant effects on the overall security of the application. Verifying software components have been digitally signed using a certificate that is recognized and approved by the organization ensures the software has not been tampered with and that it has been provided by a trusted vendor. 

Accordingly, patches, service packs, or application components must be signed with a certificate recognized and approved by the organization. 

Verifying the authenticity of the software prior to installation validates the integrity of the patch or upgrade received from a vendor. This ensures the software has not been tampered with and that it has been provided by a trusted vendor. Self-signed certificates are disallowed by this requirement. The application should not have to verify the software again. This requirement does not mandate DoD certificates for this purpose; however, the certificate used to verify the software must be from an approved CA.",None,SV-71771r2_rule,F-62563r1_fix,"Configure the application server to prevent the installation of patches, service packs, or application components without verification the software component has been digitally signed using a certificate that is recognized and approved by the organization.",C-58203r1_chk,"Review system documentation to determine if the application server prevents the installation of patches, service packs, or application components without verification the software component has been digitally signed using a certificate that is recognized and approved by the organization.

If the application server does not meet this requirement, this is a finding."
V-27114,medium,The application must terminate all sessions and network connections when non-local maintenance is completed.,"Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. 

The act of managing systems and applications includes the ability to access sensitive application information such as system configuration details, diagnostic information, user information and potentially sensitive application data. 

When applications provide a remote management capability that is inherent to the application, the application needs to ensure all sessions and network connections are terminated when non-local maintenance is completed. ",None,SV-34411r1_rule,None,None,None,None
V-26733,medium,Service Oriented Architecture (SOA) based applications must dynamically manage user privileges and associated access authorizations.,"Web services are web applications providing a method of communication between two or more different electronic devices.  They are normally used by applications to provide each other with data.  

The World Wide Web Consortium (W3C) defines a web service as:
""a software system designed to support interoperable machine to machine interaction over a network. It has an interface described in a machine processable format (specifically, Web Services Description Language or WSDL). Other systems interact with the web service in a manner prescribed by its description using Simple Object Access Protocol (SOAP) messages typically conveyed using HTTP with an XML serialization in conjunction with other web-related standards"".

Web services provide different challenges in managing access than what is presented by typical user based applications. In contrast to conventional access control approaches which employ static information system accounts and predefined sets of user privileges, many service-oriented architecture implementations rely on run time access control decisions facilitated by dynamic privilege management.  While user identities remain relatively constant over time, user privileges may change more frequently based on the ongoing mission/business requirements and operational needs of the organization. 

Service Oriented Architecture (SOA) based applications need to take this possibility into account and leverage dynamic access control methodologies.",None,SV-33981r1_rule,None,None,None,None
V-57423,medium,The application server must off-load log records onto a different system or media from the system being logged.,"Information system logging capability is critical for accurate forensic analysis. Log record content that may be necessary to satisfy the requirement of this control includes, but is not limited to, time stamps, source and destination IP addresses, user/process identifiers, event descriptions, application-specific events, success/fail indications, filenames involved, access control or flow control rules invoked.

Off-loading is a common process in information systems with limited log storage capacity.

Centralized management of log records provides for efficiency in maintenance and management of records, as well as the backup and archiving of those records. Application servers and their related components are required to off-load log records onto a different system or media than the system being logged.",None,SV-71695r2_rule,F-62461r1_fix,Configure the application server to off-load the logs to a remote log or management server.,C-58099r1_chk,"Verify the log records are being off-loaded to a separate system or transferred from the application server to a storage location other than the application server itself.

The system administrator of the device may demonstrate this capability using a log management application, system configuration, or other means.

If logs are not being off-loaded, this is a finding."
V-26947,medium,The organization must audit non-local maintenance and diagnostic sessions.,"Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network in order to conduct system diagnostics.  

This is an organizational requirement to audit non-local maintenance sessions. This does not address an application characteristic and does not apply to applications.",None,SV-34229r1_rule,None,None,None,None
V-26699,medium,Applications must provide automated mechanisms for supporting user account management. The  automated mechanisms may reside within the application itself or may be offered by the operating system or other infrastructure providing automated account management capabilities.,"A comprehensive application account management process that includes automation helps to ensure that accounts designated as requiring attention are consistently and promptly addressed. Examples include but are not limited to using automation to take action on multiple  accounts designated as inactive, suspended or terminated or by disabling accounts located in non-centralized account stores such as multiple servers.

Enterprise environments make application user account management challenging and complex.  A user management process requiring administrators to manually address account management functions adds risk of potential oversight.

Automated mechanisms may be comprised of differing technologies that when placed together contain an overall automated mechanism supporting an organization's automated account management requirements.",None,SV-33942r1_rule,None,None,None,None
V-27062,medium,"Applications must maintain the confidentiality of information during aggregation, packaging, and transformation in preparation for transmission.  When transmitting data, applications need to leverage transmission protection mechanisms such as TLS, SSL VPNs, or IPSEC.  ","Preventing the disclosure of transmitted information requires that applications take measures to employ some form of cryptographic mechanism in order to protect the information during transmission.  This is usually achieved through the use of Transport Layer Security (TLS), SSL VPN, or IPSEC tunnel. 

Alternative physical protection measures include, protected distribution systems. Protective Distribution Systems (PDS) are used to transmit unencrypted classified NSI through an area of lesser classification or control. In as much as the classified NSI is unencrypted, the PDS must provide adequate electrical, electromagnetic and physical safeguards to deter exploitation. Refer to NSTSSI No. 7003 for additional details on a PDS.",None,SV-34357r1_rule,None,None,None,None
V-27066,medium,The application must restrict error messages so only authorized personnel may view them.,"If the application provides too much information in error logs and administrative messages to the screen, this could lead to compromise.  The structure and content of error messages need to be carefully considered by the organization and development team. The extent to which the information system is able to identify and handle error conditions is guided by organizational policy and operational requirements. ",None,SV-34361r1_rule,None,None,None,None
V-69407,medium,The application must generate audit records for privileged activities or other system-level access.,"Privileged activities include the tasks or actions taken by users in an administrative role (admin, backup operator, manager, etc.) which are used to manage or reconfigure application function. Examples include but are not limited to:

Modifying application logging verbosity, starting or stopping of application services, application user account management, managing application functionality, or otherwise changing the underlying application capabilities such as adding a new application module or plugin.

Privileged access does not include an application design which does not modify the application but does provide users with the functionality or the ability to manage their own user specific preferences or otherwise tailor the application to suit individual user needs based upon choices or selections built into the application.",None,SV-84029r1_rule,F-75583r1_fix,Configure the application to write a log entry when privileged activities or other system-level events occur.,C-69825r1_chk,"Review and monitor the application logs.

Authenticate to the application as a privileged user and observe if the log includes an entry to indicate the user’s authentication was successful.

Perform actions as an admin or other privileged user such as modifying the logging verbosity, or starting or stopping an application service, or terminating a test user session.

If log events that correspond with the actions performed are not recorded in the logs, this is a finding."
V-69315,low,The application must notify System Administrators and Information System Security Officers when accounts are modified.,"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Notification of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.",None,SV-83937r1_rule,F-75489r1_fix,Configure the application to notify the system administrator and the ISSO when application accounts are modified.,C-69727r1_chk,"Review the application and system documentation.

Interview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.

If the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.

Ensure the application is configured to notify system administrators when accounts are modified by identifying system administrators who will be notified when accounts are modified.

Modify a test account and check with a system administrator to verify notification was received.

If system administrators and ISSOs are not notified when accounts are modified, this is a finding."
V-70359,medium,Procedures must be in place to assure the appropriate physical and technical protection of the backup and restoration of the application.,Protection of backup and restoration assets is essential for the successful restore of operations after a catastrophic failure or damage to the system or data files. Failure to follow proper procedures may result in the permanent loss of system data and/or the loss of system capability resulting in failure of the customer’s mission.,None,SV-84981r1_rule,F-76595r1_fix,Develop and implement procedures to insure that backup and restoration assets are properly protected and stored in an area/location where it is unlikely they would be affected by an event that would affect the primary assets.,C-70813r1_chk,"Validate that backup and recovery procedures incorporate protection of the backup and restoration assets.

Verify assets housing the backup data (e.g., SANS, tapes, backup directories, software) and the assets used for restoration (e.g., equipment and system software) are included in the backup and recovery procedures.

If backup and restoration devices are not included in the recovery procedures, this is a finding."
V-26906,medium,The application must provide the capability to remotely view/hear all content related to an established user session in real time.,"While a great deal of effort is made to secure applications so as to prevent unauthorized access, in certain instances there can be valid requirements to listen/hear or view all content related to a particular user's application session in real time as it occurs.  

These instances are reserved for monitoring or investigative purposes supported through policy and are officially sanctioned.  Session auditing activities are developed, integrated, and used in consultation with legal counsel in accordance with applicable federal laws, Executive Orders, directives, policies, or regulations. 

These monitoring events occur at the application layer and as such, may be required to be conducted at a host system however in some cases network monitoring may be involved as well.

Applications must support valid monitoring requirement capabilities performed in accordance with applicable federal laws, Executive Orders, directives, policies, or regulations.  This includes the capability to remotely view/hear all content related to an established user session in real time. ",None,SV-34186r1_rule,None,None,None,None
V-26923,medium,The application must support organizational requirements to enforce password encryption for storage.,"Applications must enforce password encryption when storing passwords.  Passwords need to be protected at all times and encryption is the standard method for protecting passwords.  If passwords are not encrypted, they can be plainly read and easily compromised.",None,SV-34203r1_rule,None,None,None,None
V-69359,medium,"For applications providing audit record aggregation, the application must compile audit records from organization-defined information system components into a system-wide audit trail that is time-correlated with an organization-defined level of tolerance for the relationship between time stamps of individual records in the audit trail.","Without the ability to collate records based on the time when the events occurred, the ability to perform forensic analysis and investigations across multiple components is significantly degraded.

Audit trails are time-correlated if the time stamps in the individual audit records can be reliably related to the time stamps in other audit records to achieve a time ordering of the records within organization-defined level of tolerance.

This requirement applies to applications which provide the capability to compile system-wide audit records for multiple systems or system components. However, all applications must provide the relevant log details that are used to aggregate the information.",None,SV-83981r1_rule,F-75533r1_fix,Configure the application to correlate time stamps when aggregating audit records.,C-69771r1_chk,"Review the application documentation and interview the application administrator.

Determine if the application has the ability to compile audit records from multiple systems or system components.

If the application does not provide log aggregation services, this requirement is not applicable.

Identify the systems that comprise the application.

Access each system comprising the application or a random sample of several application systems. Review the application logs and obtain date and time stamps for several random audit events. Record the information.

Access the server providing the log aggregation. Access the application logs that have been written to the server and compare the samples obtained from the application systems to the aggregated logs. Ensure the dates and time stamps correlate with one another.

If the log dates and times do not correlate when the logs are aggregated, this is a finding."
V-69487,medium,The application must protect audit information from unauthorized deletion.,"If audit data were to become compromised, then forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods, which will depend upon system architecture and design.

Some commonly employed methods include: ensuring log files receive the proper file system permissions utilizing file system protections, restricting access, and backing up log data to ensure log data is retained.

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity. Audit information may include data from other applications or be included with the audit application itself.",None,SV-84109r1_rule,F-75663r1_fix,Configure the application to protect audit data from unauthorized deletion. Limit users to roles that are assigned the rights to delete audit data and establish permissions that control access to the audit logs and audit configuration settings.,C-69905r1_chk,"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.

Identify the application components and the logs associated with the components.

Identify the roles and users allowed to delete audit information and the circumstances in which they are allowed to delete the data.

Identify the methods used to manage audit records and audit components. Typical methods are file system-based, via an application user interface via database access or a combination thereof.

For file system access: Review file system permissions to ensure the audit logs and the application audit components such as executable files and libraries are protected by adequate file permission restrictions.

Permissions must be configured to limit deletions to only those who have been identified and whose rights to delete audit data and audit configurations has been approved.

If file permissions are configured to allow unapproved deletions of audit settings and data, this is a finding.

For application oriented and database access: Identify the application module that provides access to audit settings and audit data. Attempt to access audit configuration features and logs by using a regular non-privileged application or database user account. Once access has been established, attempt to delete a test audit record and attempt to delete a test audit settings.

If a non-privileged user account is allowed to delete the audit data or the audit configuration settings, this is a finding."
V-16792,medium,"The designer will ensure sensitive data held in memory is cryptographically protected when not in use, if required by the information owner, and classified data held in memory is always cryptographically protected when not in use.
",Sensitive or classified data in memory must be encrypted to protect data from the possibility of an attacker causing an application crash then analyzing a memory dump of the application for sensitive or classified information.,"['ECCR-1', 'ECCR-2', 'ECCR-3']",SV-17792r1_rule,F-17010r1_fix,Encrypt sensitive and classified data in memory when not in use.,C-17780r1_chk,"If the application does not contain sensitive or classified information this check does not apply.

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable..

Ask the application representative to review global variables for the application.  If the global variables contain sensitive information, ask the application representative if they are required to be encrypted by the data owner. If the data is required to be encrypted by the data owner, ask the application representative to demonstrate they are encrypted. 
 
Note: The .Net Framework 2.0 and higher provides a SecureString class which can encrypt sensitive string values.

1) If sensitive or classified information is required to be encrypted by the data owner and global variables containing sensitive information are not encrypted, it is a finding."
V-35224,medium,The application server must limit privileges to change the software resident within software libraries.,Application servers have the ability to specify that the hosted applications utilize shared libraries. The application server must have a capability to divide roles based upon duties wherein one project user (such as a developer) cannot modify the shared library code of another project user. The application server must also be able to specify that non-privileged users cannot modify any shared library code at all.,None,SV-46511r3_rule,F-39770r2_fix,Configure the application server to limit privileges to change the software resident within software libraries through the use of defined user roles and file permissions.,C-43596r2_chk,"Check the application server documentation and configuration to determine if the application server provides role-based access that limits the capability to change shared software libraries.

Validate file permission settings to ensure library files are secured in relation to OS access.

If the application server does not meet this requirement, this is a finding."
V-19687,high,"The IAO will ensure web servers are on logically separate network segments from the application and database servers if it is a tiered application. 
","Web servers should be on logically separated network segments from the application and database servers in order to provide different levels and types of defenses for each type of server.  Failure to comply would result in an immediate loss of confidentiality.

This requirement to this STIG was added at the request of the DoD DMZ PM.  The goal is to ensure this requirement is addressed as the application is being developed.  This requirement and severity was previously approved by the DSAWG in the Internet-NIPRNet DoD DMZ Inrecrement 1, Phase 1 STIG.
 

Any vulnerability associated with a DoD Information system or system enclave, the exploitation of which, by a risk factor, will directly and immediately result in loss of Confidentiality, Availability or Integrity of the system
associated data.
",['DCPA-1'],SV-21828r1_rule,F-23101r1_fix,Seperate web server and place it on logically seperate network segment apart from the application and database servers.,C-24084r1_chk,"Ask the application representative for a network diagram. Review the network diagram for web servers/web services, web application servers, and database servers.  If the application is a tiered web application located in the DoD DMZ and is available to the Internet, verify web servers are on logically separate network segments from the application and database servers.

If the application is a tiered web application containing different data types, the application must have physically separate network connections, operating systems and application instances for each data type in the web tier when the application is available to the Internet.

This check does not apply to SIPRNet DMZs or applications that are not available to the Internet.

1) In a tiered DMZ web application with similar data types, if the web server is not on a logically separate network segment from the application and database servers and the application is available to the Internet it is a finding.

*Note: Physically separate networks require distinct physical network devices for connections. (e.g. two separate switches or two separate routers) 
"
V-16818,medium,"The designer will ensure the application has a capability to display the user’s time and date of the last change in data content.
","Without access control mechanisms in place, the data is not secure. The time and date display of data content change provides an indication that the data may have been accessed by unauthorized persons, and It may have been compromised, misused, or changed.",['ECCD-2'],SV-17818r1_rule,F-17230r1_fix,Implement transaction logs recording access and changes to the data.,C-17817r1_chk,"Ask the application representative to demonstrate how the application provides the users of time and date of the last change in data content. This may be demonstrated in application logs, audit logs, or database tables and logs.
 
1) If the application representative cannot demonstrate the above, this is a finding."
V-69415,medium,"The application must generate audit records for all account creations, modifications, disabling, and termination events.","When application user accounts are created, modified, disabled or terminated the event must be logged.

Centralized management of user accounts allows for rapid response to user related security events and also provides ease of management.

Allowing the centralized user management solution to log these events is acceptable practice; however, if the application provides a user management interface to manage these tasks, the application must also log these events.

Application developers are encouraged to integrate their applications with enterprise-level authentication/access/audit mechanisms such as Syslog, Active Directory or LDAP.",None,SV-84037r1_rule,F-75591r1_fix,"Configure the application to log user account creation, modification, disabling, and termination events.",C-69833r1_chk,"Log on to the application as an administrative user.

Navigate to the user account management functionality. If no user management capability exists within the application, refer to the Enterprise Active Directory or LDAP user management interfaces.

Monitor and review the log where the application's user activity is recorded.

Create an application test account and then review the log to ensure a log record that documents the event is created.

Modify the test account and then review the log to ensure a log record that documents the event is created.

Disable the test account and then review the log to ensure a log record that documents the event is created.

Terminate/Remove the test account and then review the log to ensure a log record that documents the event is created.

If log events are not created that document all of these events, this is a finding.

If some, but not all of the aforementioned events are documented in the logs, this is a finding.

Findings should document which of the events was not logged."
V-26732,medium,Applications must support the organizational requirement to automatically monitor on atypical usage of accounts.,"Atypical account usage is behavior that is not part of normal usage cycles. For example, user account activity occurring after hours or on weekends.  

A comprehensive account management process will ensure that an audit trail which  documents the use of application user accounts and as required, notifies administrators and/or application owners exists.  

Such a process greatly reduces the risk that compromised user accounts will continue to be used by unauthorized persons and provides logging that can be used for forensic purposes. 
",None,SV-33980r1_rule,None,None,None,None
V-26731,medium,The application must automatically audit account termination and notify appropriate individuals.,"When application accounts are terminated, user accessibility is affected.  Accounts are utilized for identifying individual application users or for identifying the application processes themselves. 

In order to detect and respond to events affecting user accessibility and application processing, applications must audit account terminating actions and notify the appropriate individuals, so they can investigate the event.  Such a capability greatly reduces the risk that application accessibility will be negatively affected for extended periods of time and provides logging that can be used for forensic purposes. 

To address the multitude of policy based audit requirements, and to ease the burden of meeting these requirements, many application developers choose to integrate their applications with enterprise level authentication/access/audit mechanisms meeting or exceeding access control policy requirements. Examples include but are not limited to, Active Directory and LDAP.",None,SV-33979r1_rule,None,None,None,None
V-26977,medium,The application must use multifactor authentication for local access to privileged accounts.,"Multifactor authentication is defined as: using two or more factors to achieve authentication. 

Factors include: 
(i) something a user knows (e.g., password/PIN); 
(ii) something a user has (e.g., cryptographic identification device, token); or 
(iii) something a user is (e.g., biometric). 

A privileged account is defined as an information system account with authorizations of a privileged user. 

Local Access is defined as access to an organizational information system by a user (or process acting on behalf of a user) communicating through a direct connection without the use of a network.",None,SV-34265r1_rule,None,None,None,None
V-26692,medium,The application must monitor for unauthorized connections of mobile devices to organizational information systems.,"Mobile devices include portable storage media (e.g., USB memory sticks, external hard disk drives) and portable computing and communications devices with information storage capability (e.g., notebook/laptop computers, personal digital assistants, cellular telephones, digital cameras, and audio recording devices).  

Organization-controlled mobile devices include those devices for which the organization has the authority to specify and the ability to enforce specific security requirements.

Usage restrictions and implementation guidance related to mobile devices include, configuration management, device identification and authentication, implementation of mandatory protective software (e.g., malicious code detection, firewall), scanning devices for malicious code, updating virus protection software, scanning for critical software updates and patches, conducting primary operating system (and possibly other resident software) integrity checks, and disabling unnecessary hardware (e.g., wireless, infrared).

In order to detect unauthorized mobile device connections, organizations must first identify and document what mobile devices are authorized. 

Monitoring for unauthorized connections is usually handled by configuration management software, log alarming, IDS, or some other security mechanism specifically designed to automate and address this requirement.  

This requirement is NA for applications not designed to monitor for unauthorized connections to information systems.  Applications designed to meet this requirement must be able to do so according to organizational usage restrictions and policy.",None,SV-33927r1_rule,None,None,None,None
V-27046,medium,"The information system must route all networked, privileged accesses through a dedicated, managed interface for purposes of access control and auditing.","Managed interfaces employing boundary protection devices include:  proxies, gateways, routers, firewalls, guards, or encrypted tunnels arranged in effective security architecture (e.g., routers protecting firewalls and application gateways residing on a protected sub network commonly referred to as a demilitarized zone or DMZ).

This is a configuration requirement to route privileged access through a dedicated managed interface (e.g., firewall) and does not apply to applications.",None,SV-34341r1_rule,None,None,None,None
V-16801,medium,"The designer will ensure locked users’ accounts can only be unlocked by the application administrator.
","User accounts should only be unlocked by the user contacting an administrator, and making a formal request to have the account reset.  Accounts that are automatically unlocked after a set time limit, allow potential attackers to retry possible user password combinations without knowledge of the user or the administrator.",['ECLO-1'],SV-17801r1_rule,F-17070r1_fix,Allow only the administrator to unlock locked accounts.,C-17797r1_chk,"Ask the application representative to demonstrate that only the administrator can unlock locked accounts. 

1) If the application allows non-administrator to unlock accounts, it is a finding."
V-27016,medium,Applications must terminate user sessions upon user logout or any other organization or policy defined session termination events such as idle time limit exceeded.,"This requirement focuses on communications protection at the application session, versus network packet level. 

Session IDs are tokens generated by web applications to uniquely identify an application user's session.   Applications will make application decisions and execute business logic based on the session ID. Unique session identifiers or IDs are the opposite of sequentially generated session IDs which can be easily guessed by an attacker.  Unique session IDs help to reduce predictability of said identifiers.  Unique session IDs address man-in-the-middle attacks including session hijacking or insertion of false information into a session.  If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.  When a user logs out, or when any other session termination event occurs, the application must terminate the user session to minimize the potential for an attacker to hijack that particular user session.",None,SV-34310r1_rule,None,None,None,None
V-6174,medium,"The IAO will ensure production database exports have database administration credentials and sensitive data removed before releasing the export.
","Production database exports are often used to populate development databases.  Test and development environments do not typically have the same rigid security protections that production environments do. When production data is used in test and development, the production database exports will need to be scrubbed to prevent information like passwords and other sensitive data from becoming available to development and test staff who may not have a need to know.  Sensitive data should not be included in database exports because of classification, privacy, and other types of data protection requirement issues.  Not all application developers have a need to know sensitive information such as HIPAA data, Privacy Act Data, production admin passwords or classified data.",['ECAN-1'],SV-6174r2_rule,F-4642r2_fix,Remove sensitive data from production database exports.,C-3060r2_chk,"Ask if any database exports from this database are imported to development databases.  
 
If no database exports exist, this check is not applicable.  
 
If there are such exports, ask if policy and procedures are in place to require the modification of the production database account passwords after import into the development database.  
 
1) If there are no policy and procedures in place to modify production database account passwords, it is a finding.  
 
If there are such exports, ask if the production database includes sensitive data identified by the data owner as sensitive such as passwords, financial, personnel, personal, HIPAA, Privacy Act, or classified data is included. 
 
2) If any database exports include sensitive data and it is not modified or removed prior to or after import to the development database, it is a finding.

 
3) If there are no policy and procedures in place to modify production database account passwords, it is a finding.  
 
If there are such exports, ask if the production database includes sensitive data identified by the data owner as sensitive such as financial, personnel, personal, HIPAA, Privacy Act, or classified data is included. 

4) If any database exports include sensitive data, and it is not modified or removed prior to or after import to the development database, it is a finding."
V-30573,medium,The organization must protect against unauthorized physical connections across the boundary protections implemented at an organization-defined list of managed interfaces.,This is a requirement to protect against physically by-passing the firewall interfaces by moving ethernet cables.  This does not apply to applications.,None,SV-40302r1_rule,None,None,None,None
V-27044,medium,"The organization must isolate organization-defined key information security tools, mechanisms, and support components from other internal information system components via physically separate subnets with managed interfaces to other portions of the system.","The application must isolate organization-defined key information security tools, mechanisms, and support components from other internal information system components via physically separate subnets with managed interfaces to other portions of the system.

This is a physical separation requirement and is not applicable.",None,SV-34339r1_rule,None,None,None,None
V-35329,medium,The application server must utilize FIPS 140-2 approved encryption modules when authenticating users and processes.,"Encryption is only as good as the encryption modules utilized.  Unapproved cryptographic module algorithms cannot be verified and cannot be relied upon to provide confidentiality or integrity, and DoD data may be compromised due to weak algorithms.  The use of TLS provides confidentiality of data in transit between the application server and client.  FIPS 140-2 approved TLS versions include TLS V1.0 or greater. 

TLS must be enabled and non-FIPS-approved SSL versions must be disabled.  NIST SP 800-52 specifies the preferred configurations for government systems.",None,SV-46616r3_rule,F-39875r2_fix,Configure the application server to use a FIPS-2 approved TLS version to authenticate users and to disable all non-FIPS-approved SSL versions.,C-43697r2_chk,"Review the application server documentation and deployed configuration to determine which version of TLS is being used.

If the application server is not using TLS when authenticating users or non-FIPS-approved SSL versions are enabled, this is a finding."
V-70231,medium,The application must isolate security functions from non-security functions.,"An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions.

Security functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.

Developers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles. Implementation may include isolation of memory space and libraries. Applications restrict access to security functions through the use of access control mechanisms and by implementing least privilege capabilities.",None,SV-84853r1_rule,F-76467r1_fix,Implement controls within the application that limits access to security configuration functionality and isolates regular application function from security-oriented function.,C-70707r1_chk,"Review the application documentation and interview the application administrator.

Identify if the application utilizes access controls.

Commonly employed access controls include Role-Based Access Controls (RBAC), Access Control Lists (ACL) and Mandatory Access Controls (MAC).

Ensure the application utilizes a control structure that is capable of protecting security assets such as policy and configuration settings from unauthorized modification.

If the application does not protect security functions that enforce security policy and protect security configuration settings, this is a finding."
V-26879,medium,"Applications upon successful logon, must display to the user the date and time of the last logon (access).","Users need to be aware of activity that occurs regarding their application account. Providing users with information regarding the date and time of their last successful login allows the user to determine if any unauthorized activity has occurred and gives them an opportunity to notify administrators. 

This requirement is intended to cover both traditional interactive logons to information systems and general accesses to information systems that occur in other types of architectural configurations (e.g., service oriented architectures). ",None,SV-34159r1_rule,None,None,None,None
V-16775,medium,The Program Manager will ensure the system has been assigned specific MAC and confidentiality levels.,The site security posture and mission completion could be adversely affected if site managed applications and data are not properly assigned with the MAC and confidentiality levels.,['DCSD-1'],SV-17775r1_rule,F-16972r1_fix,Document the Mission Assurance Category (MAC) and confidentiality levels of the application.,C-17751r1_chk,"Interview the application representative to determine if the system documentation has identified the Mission Assurance Category (MAC) and confidentiality levels of the application. 
 
1) If no system documentation exists that identifies the MAC and confidentiality levels, it is a finding."
V-27132,medium,"Applications involved in the production, control, and distribution of  symmetric and asymmetric cryptographic keys must use NIST-approved or NSA-approved key management technology and processes.","Cryptographic key management and establishment can be performed using manual procedures or automated mechanisms with supporting manual procedures. 

In addition to being required for the effective operation of a cryptographic mechanism, effective cryptographic key management provides protections to maintain the availability of the information in the event of the loss of cryptographic keys by users. ",None,SV-34430r1_rule,None,None,None,None
V-16808,high,"The designer will ensure the application is not vulnerable to integer arithmetic issues.
","Integer overflows occur when an integer has not been properly checked and is used in memory allocation, copying, and concatenation.  Also, when incrementing integers past their maximum possible value, it could potentially become a very small or negative number. Integer overflows can lead to infinite looping when loop index variables are compromised and cause a denial of service.  If the integer is used in data references, the data can become corrupt. Also, using the integer in memory allocation can cause buffer overflows, and a denial of service.  Integers used in access control mechanisms can potentially trigger buffer overflows, which can be used to execute arbitrary code. ",['DCSQ-1'],SV-17808r1_rule,F-17101r1_fix,"Modify the application and protect against integer overflow attacks.
",C-17806r1_chk,"Ask the application representative for code review results from the entire application. This can be provided as results from an automated code review tool or use static analysis tools that are known to find this class of vulnerability with few false positives.  See section 5.4 of the Application Security and Development STIG for additional details.
 
If the results are provided from a manual code review, the application representative will need to demonstrate how integer overflow vulnerabilities are identified during code reviews. 
 
1) If the results are not provided or the application representative cannot demonstrate how manual code reviews are performed to identify integer overflow vulnerabilities, it is a finding.
 
Examples of integer overflow vulnerabilities can be obtained from the OWASP website.
"
V-26911,medium,Applications managing network connections for devices must authenticate devices before establishing wireless network connections by using bidirectional authentication that is cryptographically based.,"Device authentication is a solution enabling an organization to manage devices.  

It is an additional layer of authentication ensuring only specific pre-authorized devices operated by specific pre-authorized users can access the network. 

Device authentication requires unique identification and authentication that may be defined by type, by specific device, or by a combination of type and device, as deemed appropriate by the organization. 

The application typically uses either shared known information (e.g., Media Access Control [MAC] or Transmission Control Protocol/Internet Protocol [TCP/IP] addresses) for identification or an organizational authentication solution (e.g., IEEE 802.1x and Extensible Authentication Protocol [EAP], Radius server with EAP-Transport Layer Security [TLS] authentication, Kerberos) to identify and authenticate devices on local and/or wide area networks. 

The required strength of the device authentication mechanism is determined by the security categorization of the information system.  

Bidirectional authentication provides a means for both connecting parties to mutually authenticate one another and cryptographically based authentication provides a secure means of authenticating without the use of clear text passwords. ",None,SV-34191r1_rule,None,None,None,None
V-69451,medium,Applications categorized as having a moderate or high impact must provide an immediate real-time alert to the SA and ISSO (at a minimum) for all audit failure events.,"Applications that are categorized as having a high or moderate impact on the organization must provide immediate alerts when encountering failures with the application audit system.  It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Without this notification, the security personnel may be unaware of an impending failure of the audit capability and system operation may be adversely affected. 

Audit processing failures include software/hardware errors, failures in the audit capturing mechanisms, and audit storage capacity being reached or exceeded.

While alerts provide organizations with urgent messages containing important information regarding application audit log activity, real-time alerts provide these messages at information technology speed (i.e., the time from event detection to alert occurs in seconds or no more than 1-2 minutes).  

Without a real-time alert, security personnel may be unaware of an impending failure of the audit capability and system operation may be adversely affected.",None,SV-84073r1_rule,F-75627r1_fix,"Configure the log alerts to send an alarm when the audit system is in danger of failing or has failed.  

Configure the log alerts to be immediately sent to the application admin/SA and ISSO.",C-69869r1_chk,"Review system documentation and interview application administrator for details regarding application security categorization and logging configuration.

If the application utilizes a centralized logging system that provides the real-time alarms, this requirement is not applicable.

Review application log alert configuration.

Identify audit failure events and associated alarming configuration.

If the application is categorized as having a moderate or high impact and is not configured to provide a real-time alert that indicates the audit system has failed or is failing, this is a finding."
V-69323,low,The application must notify System Administrators and Information System Security Officers of account enabling actions.,"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply enable an existing account that has been previously disabled. Notification when account enabling actions occur is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the enabling of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.",None,SV-83945r1_rule,F-75497r1_fix,Configure the application to notify the system administrator and the ISSO when application accounts are enabled.,C-69735r1_chk,"Review the application and system documentation.

Interview application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.

If the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.

Ensure application is configured to notify system administrators when accounts are enabled by identifying system administrators who will be notified when accounts are enabled.

Disable and then enable a test account and check with system administrator to verify notification was received to indicate the account was enabled.

If system administrators and ISSOs are not notified when accounts are enabled, this is a finding."
V-26672,medium,The application must have the ability to retain a session lock remaining in effect until the user re-authenticates using established identification and authentication procedures.,"A session lock is a temporary action taken when a user stops work and moves away from the immediate physical vicinity of the information system but does not want to log out because of the temporary nature of the absence. 

The session lock is implemented at the point where session activity can be determined. This is typically determined and performed at the operating system-level, but in some instances it may be at the application-level.  

Regardless of where the session lock is determined and implemented, once invoked the session lock shall remain in place until the user re-authenticates.  No other system or application activity aside from re-authentication shall unlock the system.  ",None,SV-33819r1_rule,None,None,None,None
V-26955,medium,Configuration management applications must employ automated mechanisms to centrally manage configuration settings.,"Configuration settings are the configurable security-related parameters of information technology products that are part of the information system. 

Security-related parameters are those parameters impacting the security state of the system including parameters related to meeting other security control requirements. 

Security-related parameters include:  registry settings; account, file, and directory settings (i.e., permissions); and settings for services, ports, protocols, and remote connections.  

Rather than visiting each and every system when making application configuration changes, organizations will employ automated tools that can make changes across all systems.  This greatly increases efficiency and manageability of systems and applications in a large scale environment.  To support this requirement, configuration management applications will employ automated mechanisms to centrally manage configuration settings and applications, in general, will ensure that they do not hinder the use of such tools. ",None,SV-34240r1_rule,None,None,None,None
V-70271,high,The application must not be subject to input handling vulnerabilities.,"A common application vulnerability is unpredictable behavior due to improper input validation. This requirement guards against adverse or unintended system behavior caused by invalid inputs, where information system responses to the invalid input may be disruptive or cause the system to fail into an unsafe state.

Data received from the user should always be suspected as being malicious and always validated prior to using it as input to the application.

Some examples of input methods:

- Forms Data
- URL parameters
- Hidden Fields
- Cookies
- HTTP Headers or anything in the HTTP request
- Client data entry fields

Items to validate:

- Out of range values/Boundary 
- Data length 
- Validate types of characters allowed
- Whitelist validation for known good data input while denying all other input.

Other recommendations include: 

- Using drop down menus for lists
- Validating input on the server, not on the client.

If validating on the client, also validate on the server:

- Using regular expressions to validate input
- Using HTML filter libraries that implement input validation tasks.",None,SV-84893r1_rule,F-76507r1_fix,"Follow best practice when accepting user input and verify that all input is validated before the application processes the input.

Remediate identified vulnerabilities and obtain documented risk acceptance for those issues that cannot be remediated immediately.",C-70747r1_chk,"Review the application documentation and interview the application administrator.

If working with the developer, request documentation on their development processes and what their standard operating procedure is for sanitizing all application input.

Identify the latest vulnerability scan results.

Review the scan results and scan configuration settings.

Verify the scan was configured to identify input validation vulnerabilities.

If the scan results detected high risk vulnerabilities, verify a more recent scan shows remediation of the vulnerabilities is available for examination.

Review any risk acceptance documentation that indicates the ISSO has reviewed and accepted the risk.

If the vulnerability scan is not configured to test for input validation vulnerabilities if the most recent scan results show that high risk input validation vulnerabilities exist and a documented risk acceptance from the ISSO is not available, or if the scan results do not exist, this is a finding."
V-70405,medium,An Application Configuration Guide must be created and included with the application.,"The Application Configuration Guide is any document or collection of documents used to configure the application.  These documents may be part of a user guide, secure configuration guide, or any guidance that satisfies the requirements provided herein.  

Configuration examples include but are not limited to:

 - Encryption Settings
 - PKI Certificate Configuration Settings
 - Password Settings
 - Auditing configuration
 - AD configuration
 - Backup and disaster recovery settings
 - List of hosting enclaves and network connection requirements
 - Deployment configuration settings 
 - Known security assumptions, implications, system level protections, best practices, and required permissions

Development systems, build systems, and test systems must operate in a standardized environment. These settings are to be documented in the Application Configuration Guide.

Examples include but are not limited to:

 - List of development systems, build systems, and test systems. 
 - Versions of compilers used
 - Build options when creating applications and components
 - Versions of COTS software (used as part of the application)
 - Operating systems and versions
 - For web applications, which browsers and what versions are supported.
 
All deployment configuration settings are to be documented in the Application Configuration Guide and the Application Configuration Guide must be made available to application hosting providers and application/system administrators.",None,SV-85027r1_rule,F-76641r1_fix,"Create the application configuration guide in accordance with configuration examples provided in the vulnerability discussion and check.

Verify the application configuration guide is distributed along  with the application.",C-70859r1_chk,"Interview the application administrator.  Request and review the Application Configuration Guide. 

Verify the configuration guide at a minimum provides configuration details for the following examples.  The examples provided herein are not intended to limit the configuration settings that are documented in the guide.

Configuration examples include but are not limited to:

 - Encryption Settings
 - PKI Certificate Configuration Settings
 - Password Settings
 - Auditing configuration
 - AD configuration
 - Backup and disaster recovery settings
 - List of hosting enclaves and network connection requirements
 - Deployment configuration settings 
 - Known security assumptions, implications, system level protections, best practices, and required permissions

Review the Application Configuration Guide and determine if development systems are documented.  If no development is being performed where the application is hosted, this part of the requirement is NA.

Development systems, build systems, and test systems must operate in a standardized environment.

Examples include but are not limited to:

 - List of development systems, build systems, and test systems. 
 - Versions of compilers used
 - Build options when creating applications and components
 - Versions of COTS software (used as part of the application)
 - Operating systems and versions
 - For web applications, which browsers and what versions are supported.

If there is no application configuration guide included with the application, this is a finding."
V-16811,high,"The designer will ensure the application does not have cross site scripting (XSS) vulnerabilities.  
","XSS vulnerabilities exist when an attacker uses a trusted website to inject malicious scripts into applications with improperly validated input. 
",['DCSQ-1'],SV-17811r1_rule,F-17104r1_fix,"Modify the application to protect against cross site scripting attacks.


",C-17809r1_chk,"Ask the application representative for code review or scan results from the entire application.  This can be provided as results from an automated code review or a vulnerability scanning tool.  See section 5.4 of the Application Security and Development STIG for additional details.

If the results are provided from a manual code review, the application representative will need to demonstrate how XSS vulnerabilities are identified during code reviews. 
 
1) If the results are not provided or the application representative cannot demonstrate how manual code reviews are performed to identify cross site scripting vulnerabilities, this is a CAT I finding.
 
Perform query string manipulation testing to determine if the user bypasses access control functions to gain data that should be restricted based on the user's security level or role. For example, if a query string, such as www.testweb.mil/apppage.asp?xyz=113&asd=185, gives the user access to data for data identifier number 185. Try to resubmit the query string with another three digit number (e.g., 186) to see if that data is displayed. If this data can be displayed through reports or other access points in the application, this would not be considered a finding.
 
2) If data displayed in the query manipulation testing is above the user's security level or role, this is a CAT II finding.
 
For script tag embedding, select a text field of the application that accepts at least 15 characters. Try to input a script tag (script) into the field. If the data is accepted without an error, access the data entered via the application (this process will vary depending upon the application).

3) If the script tag in its entirety is displayed within the application, this is a CAT II finding.   
 
Mitigate XSS vulnerabilities by using HTTP-only cookies.  Examine any cookies used while the application is being executed. Verify the HttpOnly flag has been set for all cookies.
 
4) If the HttpOnly flag has not been set for all cookies, this is a CAT II finding.

HttpOnly cookies are explained further at the Microsoft website:
http://msdn.microsoft.com/en-us/library/ms533046.aspx 

Examples of XSS vulnerabilities can be obtained from the OWASP website."
V-70207,high,The application must destroy the session ID value and/or cookie on logoff or browser close.,"Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.

Session cookies contain application session information that can be used to impersonate the web application user or hijack their application session. Once the user's session has terminated, these session IDs must be destroyed and not reused.",None,SV-84829r1_rule,F-76443r1_fix,Configure the application to destroy session ID cookies once the application session has terminated.,C-70683r1_chk,"Review the application documentation and interview the application administrator.

Identify how the application destroys session IDs.

If using a web development framework, ask the application administrator to provide details on the framework's session configuration.

Review framework configuration setting to determine how the session identifiers are destroyed.

Review the client system and using a browser or other tool capable of viewing client cookies, identify cookies set by the application and verify that application session ID cookies are destroyed once the user has logged off or the browser has closed.

If the session IDs and associated cookies are not destroyed on logoff or browser close, this is a finding."
V-57559,medium,The application must implement cryptographic mechanisms to prevent unauthorized disclosure of organization-defined information at rest on organization-defined information system components.,"Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an application server.  Alternative physical protection measures include protected distribution systems.

In order to prevent unauthorized disclosure or modification of the information, application servers must protect data at rest by using cryptographic mechanisms.",None,SV-71835r2_rule,F-62627r1_fix,Configure the application server to implement cryptographic mechanisms to prevent unauthorized disclosure of organization-defined information at rest on organization-defined information system components.,C-58267r1_chk,"Review application server documentation and configuration to determine if the application server implements cryptographic mechanisms to prevent unauthorized disclosure of organization-defined information at rest on organization-defined information system components.

If the application server does not implement cryptographic mechanisms to prevent unauthorized disclosure, this is a finding."
V-26948,medium,Applications used for non-local maintenance sessions must protect those sessions through the use of a strong authenticator tightly bound to the user.,"Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network.

Identification and authentication techniques used in the establishment of non-local maintenance and diagnostic sessions must be consistent with the network access requirements in IA-2. Strong authenticators include, PKI where certificates are stored on a token protected by a password, passphrase, or biometric.

Examples of types of applications used for non-local maintenance and diagnostic activities are provided below.  Use as an example does not imply compliance with policy requirements or approval for use.   Examples include but are not limited to:

- Terminal Services
- Remote Desktop
- Dameware
- VNC (all variants)
",None,SV-34231r1_rule,None,None,None,None
V-16840,low,"The IAO will ensure the system alerts an administrator when low resource conditions are encountered.
","In order to prevent DoS type attacks, applications should be monitored when resource conditions reach a predefined threshold indicating there may be attack occurring.",['ECAT-2'],SV-17840r1_rule,F-17161r1_fix,"Implement mechanisms to alert system administrators about a low resource condition.
",C-17846r1_chk,"Examine the system to determine if an automated, continuous on-line monitoring and audit trail creation capability is present with the capability to immediately alert personnel of any unusual or inappropriate activity with potential IA implications, and with a user configurable capability to automatically disable the system if serious IA violations are detected.
 
1) If this monitoring capability does not exist, it is a finding."
V-69461,medium,The application must provide an audit reduction capability that supports on-demand reporting requirements.,"The ability to generate on-demand reports, including after the audit data has been subjected to audit reduction, greatly facilitates the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.

Audit reduction is a process that manipulates collected audit information and organizes such information in a summary format that is more meaningful to analysts. The report generation capability provided by the application must support on-demand (i.e., customizable, ad-hoc, and as-needed) reports.

This requirement is specific to applications with audit reduction capabilities; however, applications need to support on-demand audit review and analysis.",None,SV-84083r1_rule,F-75637r1_fix,"Configure the application to generate soft copy, hard copy and/or screen-based reports based on the selected filtered event data.",C-69879r1_chk,"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.

Identify the application components and the logs associated with the components.

If the application utilizes a centralized logging system that provides the capability to generate reports based on filtered log events, this requirement is not applicable.

Using the relevant application features for generating reports and/or searching application data, (this is usually executed directly within a logging utility or within a reports feature or function) configure a filter based on any of the security criteria provided below.

Alternatively, you can use security-oriented criteria provided by the application administrator.

Once the data filter has been selected, filter the audit event data so only filtered data is displayed and generate the report.

The report can be any combination of screen-based, soft copy, or a printed report.

Criteria:
Users: e.g., specific users or groups
Event types:
Event dates and time:
System resources involved: e.g., application components or modules.
IP addresses:
Information objects accessed:
Event level categories: e.g., high, critical, warning, error

If the application does not provide on demand reports based on the filtered audit event data, this is a finding."
V-69577,medium,The application must allow the use of a temporary password for system logons with an immediate change to a permanent password.,"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.

Examples of situations where a user ID and password might be used include but are not limited to:

- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.

- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.

and

- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.

Without providing this capability, an account may be created without a password. Non-repudiation cannot be guaranteed once an account is created if a user is not forced to change the temporary password upon initial logon.

Temporary passwords are typically used to allow access to applications when new accounts are created or passwords are changed. It is common practice for administrators to create temporary passwords for user accounts which allow the users to log on, yet force them to change the password once they have successfully authenticated.",None,SV-84199r1_rule,F-75755r1_fix,Configure the application to specify when a password is temporary and change the temporary password on the first use.,C-69999r1_chk,"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.

If the application does not use passwords, the requirement is not applicable.

Access the application management interface and view the user password settings page.

Review user password settings and validate the application is configured to specify when a password is temporary and force a password change when the administrator either creates a new user account or changes a user’s password.

If the application can not specify a password as temporary and force the user to change the temporary password upon successful authentication, this is a finding."
V-26737,medium,"The application must enforce dual authorization, based on organizational policies and procedures for organization-defined privileged commands.","Dual authorization requires 2 distinct approving authorities to approve the use of an application  command prior to it being invoked.  This capability is typically reserved for specific application functionality where the application owner, data owner or organization requires an additional assurance that certain application commands are only invoked under the utmost authority. When a policy is defined stating that certain commands contained within an application require dual-authorization before they may be invoked, or when an organization defines a set of application related privileged commands requiring dual authorization, the application must support those requirements. 

Due to potential delays in obtaining secondary approvals prior to executing commands, dual authorization mechanisms should not be utilized when an immediate response is necessary in order to ensure public and/or environmental safety. If, after due consideration, it is determined the benefit of dual authorization outweighs identified risks, the organization must establish documented procedures, assign specific personnel to provide approvals and establish operational exercises assuring that any risks to public safety, environmental safety or otherwise, are minimized. ",None,SV-33985r1_rule,None,None,None,None
V-69431,medium,"The application must produce audit records containing enough information to establish which component, feature or function of the application triggered the audit event.","It is impossible to establish, correlate, and investigate the events relating to an incident if the details regarding the source of the event it not available.

In order to compile an accurate risk assessment, and provide forensic analysis, it is essential for security personnel to know where within the application the events occurred, such as which application component, application modules, filenames, and functionality.

Associating information about where the event occurred within the application provides a means of quickly investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.",None,SV-84053r1_rule,F-75607r1_fix,"Configure the application to log which component, feature or functionality of the application triggered the event.",C-69849r1_chk,"Review application administration and/or design documents.

Identify key aspects of application architecture objects and components, e.g., Web Server, Application server, Database server.

Interview the application administrator and identify the log locations.

Access the application logs and review the log entries for events that indicate the application is auditing the internal components, objects, or functions of the application.

Confirm the event logs provide information as to which component, feature, or functionality of the application triggered the event.

Examples of the types of events to look for are as follows:

- Application and Protocol events. e.g., Application loads or unloads and Protocol use.
- Data Access events. e.g., Database connections.

Events could include reference to database library or executable initiating connectivity:

- Middleware events. e.g., Source code initiating calls or being invoked.
- Name of application modules being loaded or unloaded.
- Library loads and unloads.
- Application deployment activity.

Events written into the log must be able to be traced back to the originating component, feature or function name, service name, application name, library name etcetera in order to establish which aspect of the application triggered the event.

If the audit logs do not contain enough data in the logs to establish which component, feature or functionality of the application triggered the event, this is a finding."
V-35328,medium,The application server must obscure feedback of authentication information during the authentication process to protect the information from possible exploitation/use by unauthorized individuals.,"To prevent the compromise of authentication information during the authentication process, the application server authentication screens must obfuscate input so an unauthorized user cannot view a password, PIN, or any other authenticator value as it is being typed.

This can occur when a user is authenticating to the application server through the web management interface or command line interface. The application server must obfuscate all passwords, PINs, or other authenticator information when typed. User ID is not required to be obfuscated.",None,SV-46615r3_rule,F-39874r2_fix,Configure the application server to obscure feedback of authentication information during the authentication process to protect the information from possible exploitation/use by unauthorized individuals.,C-43696r3_chk,"Review the application server documentation and configuration to determine if any interfaces which are provided for authentication purposes display the user's password when it is typed into the data entry field.

If authentication information is not obfuscated when entered, this is a finding."
V-27037,medium,Applications must preserve any organization-defined system state information in the event of a system failure.,"Failure in a known state can address safety or security in accordance with the mission/business needs of the organization. Failure in a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system. 

Preserving information system state information helps to facilitate system restart and return to the operational mode of the organization with less disruption of mission/business processes. ",None,SV-34331r1_rule,None,None,None,None
V-6143,medium,"The designer will ensure the application executes with no more privileges than necessary for proper operation.
",An application with unnecessary access privileges can give an attacker access to the underlying operating system.,['ECLP-1'],SV-6143r1_rule,F-4447r1_fix,Modify the application to remove unnecessary privileges.,C-3671r1_chk,"Identify the application user account(s) that the application uses to run.  These accounts include the application processes (defined by Control Panel Services (Windows) or ps –ef  (UNIX)) or for an n-tier application, the account that connects from one service (such as a web server) to another (such as a database server).
 
Determine the user groups in which each account is a member.  List the user rights assigned to these users and groups and evaluate whether any of them are unnecessary. 
 
1) If the rights are unnecessary, it is a finding.   
 
2) If the account is a member of the Administrators group (Windows) or has a User Identification (UID) of 0 (i.e., is equivalent to root in UNIX), it is a finding.  
 
3) If this account is a member of the SYSAdmin fixed server role in SQL Server, it is a finding.  
 
4) If the account has DDL (Data Definition Language) privileges (create, drop, alter), or other system privileges, it is a finding.  
 
Search the file system to determine if these users or groups have ownership or permissions to any files or directories.  
 
Review the list of files and identify any that are outside the scope of the application.  
 
5) If there are such files outside the scope of the application, it is a finding.  
 
Check ownership and permissions; identify permissions beyond the minimum necessary to support the application.  
 
6) If there are instances of unnecessary ownership or permissions, it is a finding.  
 
The finding details should note the full path of the file(s) and the associated issue (i.e., outside scope, permissions improperly granted to user X, etc.). 
 
7) If the target is a .NET application that executes with least privileges using code access security (CAS), this is not a finding."
V-57535,medium,The application server must employ approved cryptographic mechanisms to prevent unauthorized disclosure of information and/or detect changes to information during transmission.,"Preventing the disclosure or modification of transmitted information requires that application servers take measures to employ approved cryptography in order to protect the information during transmission over the network. This is usually achieved through the use of Transport Layer Security (TLS), SSL VPN, or IPSec tunnel.

If data in transit is unencrypted, it is vulnerable to disclosure and modification. If approved cryptographic algorithms are not used, encryption strength cannot be assured.

FIPS 140-2 approved TLS versions include TLS V1.0 or greater.

TLS must be enabled and non-FIPS-approved SSL versions must be disabled.  NIST SP 800-52 specifies the preferred configurations for government systems.",None,SV-71811r2_rule,F-62603r1_fix,Configure the application server to use AES 128 or AES 256 encryption for data in transit.,C-58243r1_chk,"Review application server documentation and configuration to determine if the application server employs approved cryptographic mechanisms to prevent unauthorized disclosure of information and/or detect changes to information during transmission.

If the application server does not employ approved cryptographic mechanisms, this is a finding."
V-70185,medium,The application must not be vulnerable to race conditions.,"A race condition is a timing event within an application that can become a security vulnerability.  A race condition can occur when a pair of programming calls operating simultaneously do not work in a sequential or coordinated manner.  A race condition is a timing event within software that can become a security vulnerability if the calls are not performed in the correct order.  

There are different types of race conditions and they are dependent upon the action that the application is undertaking when the race condition occurs.  Some examples of race conditions include but are not limited to:

- Time of check, time of use: the time in which a given resource is checked, and the time that resource is used.
- Thread based: two threads of execution use a resource simultaneously, resource may be invalid when used.
- Switch based: variable switches values while switch statement is in progress.

Developers must be cognizant of programming sequence and use sanity checks to validate data prior to acting upon it.

A code review or a static code analysis is the method used to identify race conditions.",None,SV-84807r1_rule,F-76421r1_fix,"Be aware of potential timing issues related to application programming calls when designing and building the application.

Validate that variable values do not change while a switch event is occurring.",C-70661r1_chk,"Review the application documentation and architecture.

If the application is a COTS application and the vendor will not provide code review test results that demonstrate the application has been tested and is not susceptible to race conditions, the requirement is NA.

Interview the application admin and identify the most recent code testing and analysis that has been conducted.

Review the test results; verify configuration of analysis tools are set to check for the existence of  race conditions.  

If race conditions are identified in the test results, verify the latest test results are being used, if not, ensure remediation has been completed.

If the test results show race conditions exist and no remediation evidence is presented, or if test results are not available, this is a finding."
V-27182,medium,The application must perform data origin authentication and data integrity verification on the name/address resolution responses the system receives from authoritative sources when requested by client systems.,"A recursive resolving or caching Domain Name System (DNS) server is an example of an information system providing name/address resolution service for local clients. 

Authoritative DNS servers are examples of authoritative sources. Information systems using technologies other than the DNS to map between host/service names and network addresses provide other means to enable clients to verify the authenticity and integrity of response data. ",None,SV-34481r1_rule,None,None,None,None
V-26884,medium,The application must notify the user of the number of unsuccessful login/access attempts occurring during an organization-defined time period.,"Users need to be aware of activity that occurs regarding their application account. Providing users with information regarding the number of unsuccessful attempts made to login to their account allows the user to determine if any unauthorized activity has occurred and gives them an opportunity to notify administrators.

This requirement is intended to cover both traditional logons to information systems and general accesses to information systems occurring in other types of architectural configurations (e.g., service oriented architectures). In order to inform the user of the number of unsuccessful login attempts made with the users account.",None,SV-34164r1_rule,None,None,None,None
V-26953,medium,The application must employ cryptographic mechanisms to protect the integrity and confidentiality of non-local maintenance and diagnostic communications.,"Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. 

The act of managing systems and applications includes the ability to access sensitive application information such as system configuration details, diagnostic information, user information, and potentially sensitive application data. 

When applications provide a remote management capability that is inherent to the application, the application needs to ensure the communication channels used to remotely access the system are adequately protected. ",None,SV-34236r1_rule,None,None,None,None
V-70363,high,The application must not contain embedded authentication data.,Authentication data stored in code could potentially be read and used by anonymous users to gain access to a backend database or application servers. This could lead to compromise of application data.,None,SV-84985r1_rule,F-76599r1_fix,"Remove embedded authentication data stored in code, configuration files, scripts, HTML file, or any ASCII files.",C-70817r1_chk,"Review the application documentation and any available source code; this includes configuration files such as global.asa, if present, scripts, HTML files, and any ASCII files.

Identify any instances of passwords, certificates, or sensitive data included in code.

If credentials were found, check the file permissions and ownership of the offending file.

If access to the folder hosting the file is not restricted to the related application process and administrative users, this is a finding.

The finding details should note specifically where the offending credentials or data were located and what resources they enabled."
V-27031,medium,Applications required to be non-modifiable must support organizational requirements to provide components that contain no writeable storage capability.  These components must be persistent across restart and/or power on/off.,Organizations may require applications or application components to be non-modifiable or to be stored and executed on non-writeable storage. Use of non-modifiable storage ensures the integrity of the software program from the point of creation of the read-only image and eliminates the possibility of malicious code insertion. ,None,SV-34325r1_rule,None,None,None,None
V-16793,medium,"The designer will ensure the application properly clears or overwrites all memory blocks used to process sensitive data, if required by the information owner, and clears or overwrites all memory blocks used for classified data.
",Sensitive and classified data in memory should be cleared or overwritten to protect data from the possibility of an attacker causing the application to crash and analyzing a memory dump of the application for sensitive information.,"['ECCR-1', 'ECCR-2', 'ECCR-3']",SV-17793r1_rule,F-17011r1_fix,"Clear memory blocks used for storing sensitive and classified data, before release.",C-17781r1_chk,"If the application does not contain sensitive or classified information this check is not applicable.

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.

Ask the application representative to demonstrate how the application clears and releases memory blocks. Microsoft Visual C++ provides SecureZeroMemory that will not be optimized out of code for clearing sensitive and classified data.
 
1) If the application releases objects before clearing them, it is a finding."
V-35318,medium,The application server must transmit only encrypted representations of passwords.,"Passwords need to be protected at all times, and encryption is the standard method for protecting passwords during transmission.  If passwords are not encrypted, they can be plainly read (i.e., clear text) and easily compromised.

Application servers have the capability to utilize either certificates (tokens) or user IDs and passwords in order to authenticate. When the application server transmits or receives passwords, the passwords must be encrypted.",None,SV-46605r3_rule,F-39864r2_fix,Configure the application server to transmit only encrypted representations of passwords.,C-43688r2_chk,"Review application server documentation and configuration to determine if the application server enforces the requirement to encrypt passwords when they are transmitted.

If the application server is not configured to meet this requirement, this is a finding."
V-70397,high,The application must be decommissioned when maintenance or support is no longer available.,"Unsupported software products should not be used because fixes to newly identified bugs will not be implemented by the vendor or development team. The lack of security updates can result in potential vulnerabilities.

When maintenance updates and patches are no longer available, the application is no longer considered supported, and should be decommissioned.",None,SV-85019r1_rule,F-76633r1_fix,Ensure there is maintenance for the application.,C-70851r1_chk,"Interview the application representative and determine if all the application components are under maintenance contract. The entire application may be covered by a single maintenance agreement. The application should be decommissioned if maintenance or security support is no longer being provided by the vendor or by the development staff of a custom developed application.

If the application or any of the application components are not being maintained, this is a finding."
V-69497,medium,The application must use cryptographic mechanisms to protect the integrity of audit information.,"Audit records may be tampered with; if the integrity of audit data were to become compromised, then forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

Protection of audit records and audit data is of critical importance. Cryptographic mechanisms are the industry established standard used to protect the integrity of audit data. An example of a cryptographic mechanism is the computation and application of a cryptographic-signed hash using asymmetric cryptography.

This requirement applies to applications that generate, process or manage audit records and is applied once audit processing has completed and the audit record is being stored.",None,SV-84119r1_rule,F-75673r1_fix,Configure the application to create an integrity check consisting of a cryptographic hash or one-way digest that can be used to establish the integrity when storing log files.,C-69915r1_chk,"Review the system documentation and interview the application administrator for details regarding application architecture, audit methods, and provided audit tools.

Identify the location of the application audit information.

If the application is configured to utilize a centralized audit log solution that uses cryptographic methods that meet this requirement such as creating cryptographic hash values or message digests that can be used to validate integrity of audit files, the requirement is not applicable.

Ask application administrator to demonstrate the cryptographic mechanisms used to protect the integrity of audit data.

Verify when application logs are stored on the file system, a process that includes the creation of an integrity check of the audit file being stored is utilized. This integrity check can be the creation of a checksum, message digest or other one-way cryptographic hash of the audit file that is created.

If an integrity check is not created to protect the integrity of the audit information, this is a finding."
V-26969,medium,The application must support and must not impede organizational requirements to conduct backups of system-level information contained in the information system per organization-defined frequency.,"Information system backup is a critical step in maintaining data assurance and availability. 

System-level information includes:  system-state information, operating system and application software, and licenses. 

Backups shall be consistent with organizational recovery time and recovery point objectives. ",None,SV-34256r1_rule,None,None,None,None
V-61351,medium,The application server must remove all export ciphers to protect the confidentiality and integrity of transmitted information.,"During the initial setup of a Transport Layer Security (TLS) connection to the application server, the client sends a list of supported cipher suites in order of preference.  The application server will reply with the cipher suite it will use for communication from the client list.  If an attacker can intercept the submission of cipher suites to the application server and place, as the preferred cipher suite, a weak export suite, the encryption used for the session becomes easy for the attacker to break, often within minutes to hours.",None,SV-75833r1_rule,F-67253r1_fix,Configure the application server to have export ciphers removed.,C-62281r2_chk,"Review the application server documentation and deployed configuration to determine if export ciphers are removed.

If the application server does not have the export ciphers removed, this is a finding."
V-57425,medium,"The application server must, at a minimum, transfer the logs of interconnected systems in real time, and transfer the logs of standalone systems weekly.","Information stored in one location is vulnerable to accidental or incidental deletion or alteration.  Protecting log data is important during a forensic investigation to ensure investigators can track and understand what may have occurred.  Off-loading should be set up as a scheduled task but can be configured to be run manually, if other processes during the off-loading are manual.

Off-loading is a common process in information systems with limited log storage capacity.",None,SV-71697r2_rule,F-62463r1_fix,Configure the application server to off-load interconnected systems in real time and standalone systems weekly.,C-58101r1_chk,"Verify the log records are being off-loaded, at a minimum of real time for interconnected systems and weekly for standalone systems.

If the application server is not meeting these requirements, this is a finding."
V-35143,medium,The application server must generate log records when successful/unsuccessful attempts to access subject privileges occur.,"Accessing a subject's privileges can be used to elevate a lower-privileged subject's privileges temporarily in order to cause harm to the application server or to gain privileges to operate temporarily for a designed purpose.  When these actions take place, the event needs to be logged.

Application servers either provide a local user store, or they integrate with enterprise user stores like LDAP.  When the application server provides the user store and enforces authentication, the application server must generate a log record when modification of privileges is successfully or unsuccessfully performed.",None,SV-46430r3_rule,F-39694r2_fix,Configure the application server to generate log records when privileges are successfully/unsuccessfully accessed.,C-43530r2_chk,"Review the application server documentation and the system configuration to determine if the application server generates log records when successful/unsuccessful attempts are made to access privileges.

If log records are not generated, this is a finding."
V-70205,high,The application must not expose session IDs.,"Authenticity protection provides protection against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.

Application communication sessions are protected utilizing transport encryption protocols, such as SSL or TLS. SSL/TLS provides web applications with a means to be able to authenticate user sessions and encrypt application traffic. Session authentication can be single (one-way) or mutual (two-way) in nature. Single authentication authenticates the server for the client, whereas mutual authentication provides a means for both the client and the server to authenticate each other.

This requirement applies to applications that utilize communications sessions. This includes, but is not limited to, web-based applications and Service-Oriented Architectures (SOA).

This requirement addresses communications protection at the application session, versus the network packet, and establishes grounds for confidence at both ends of communications sessions in ongoing identities of other parties and in the validity of information transmitted. Depending on the required degree of confidentiality and integrity, web services/SOA will require the use of SSL/TLS mutual authentication (two-way/bidirectional).",None,SV-84827r1_rule,F-76441r1_fix,Configure the application to protect session IDs from interception or from manipulation.,C-70681r1_chk,"Review the application documentation and configuration.

Interview the application administrator and obtain implementation documentation identifying system architecture.

Identify the application communication paths. This includes system to system communication and client to server communication that transmit session identifiers over the network.

Have the application administrator identify the methods and mechanisms used to protect the application session ID traffic. Acceptable methods include SSL/TLS both one-way and two-way and VPN tunnel.

The protections must be implemented on a point-to-point basis based upon the architecture of the application.

For example; a web application hosting static data will provide SSL/TLS encryption from web client to the web server. More complex designs may encrypt from application server to application server (if applicable) and application server to database as well.

If the session IDs are unencrypted across network segments, this is a finding."
V-27136,medium,"Applications involved in the production, control, and distribution of asymmetric cryptographic keys must use approved PKI Class 3 or class 4 certificates and hardware tokens that protect the users private key.","Cryptographic key management and establishment can be performed using manual procedures or automated mechanisms with supporting manual procedures. 

In addition to being required for the effective operation of a cryptographic mechanism, effective cryptographic key management provides protections to maintain the availability of the information in the event of the loss of cryptographic keys by users. ",None,SV-34435r1_rule,None,None,None,None
V-16830,medium,"The Test Manager will ensure flaws found during a code review are tracked in a defect tracking system.
","If flaws are not tracked they may possibly be forgotten to be included in a release.  Tracking flaws in the configuration management repository will help identify code elements to be changed, as well as the requested change.
",['DCSQ-1'],SV-17830r1_rule,F-17147r1_fix,Track flaws found during a code review.,C-17829r1_chk,"Ask the application representative to demonstrate that the configuration management repository captures flaws in the code review process. The configuration management repository may consist of a separate application for capturing code defects.

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.
 
1) If there is no configuration management repository or the code review flaws are not captured in the configuration management repository, it is a finding.
"
V-69433,medium,When using centralized logging; the application must include a unique identifier in order to distinguish itself from other application logs.,"Without establishing the source, it is impossible to establish, correlate, and investigate the events leading up to an outage or attack.

In the case of centralized logging, or other instances where log files are consolidated, there is risk that the application's log data could be co-mingled with other log data.  To address this issue, the application itself must be identified as well as the application host or client name. 

In order to compile an accurate risk assessment, and provide forensic analysis, it is essential for security personnel to know the source of the event, particularly in the case of centralized logging.

Associating information about the source of the event within the application provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.",None,SV-84055r1_rule,F-75609r1_fix,Configure the application logs or the centralized log storage facility so the application name and the hosts hosting the application are uniquely identified in the logs.,C-69851r1_chk,"If the application is logging locally and does not utilize a centralized logging solution, this requirement is not applicable.

Review system documentation and identify log location.  Access the application logs.

Review the application logs.

Ensure the application is uniquely identified either within the logs themselves or via log storage mechanisms.

Ensure the hosts or client names hosting the application are also identified.  Either hostname or IP address is acceptable.

If the application name and the hosts or client names are not identified, this is a finding."
V-70167,medium,The application must accept FICAM-approved third-party credentials.,"FICAM establishes a federated identity framework for the Federal Government. FICAM provides Government-wide services for common Identity, Credential and Access Management (ICAM) requirements.  The FICAM Trust Framework Solutions (TFS) is the federated identity framework for the U.S. federal government.
 The TFS is a process by which Industry Trust Frameworks (The codification of requirements for credentials and their issuance, privacy and security requirements, as well as auditing qualifications and processes) are evaluated and assessed for potential use by the Government.  

A Trust Framework that is comparable to federal standards is adopted through this process, which allows Federal Government Relying Parties (Federal Government web sites or RP's) to trust Credential Service Providers a.k.a. Identity Providers that have been assessed under that particular trust framework.  This allows federal government relying parties to trust such credentials at their approved assurance levels. 

This requirement only applies to applications that are intended to be accessible to non-federal government agencies and other partners through FICAM. 

Third-party credentials are those credentials issued by non-federal government entities approved by the Federal Identity, Credential, and Access Management (FICAM) Trust Framework Solutions initiative.",None,SV-84789r1_rule,F-76403r1_fix,Configure applications  intended to be accessible to non-federal government agencies to use FICAM-approved third-party credentials.,C-70643r1_chk,"Review the application documentation and interview the application administrator to identify application access methods.

If the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.

If the application is only deployed to SIPRNet, this requirement is not applicable.

If the application is not intended to be available to Federal government partners this requirement is not applicable.

Ask the application administrator to demonstrate how the application is configured to allow the use of third-party credentials, verify the third-party credentials are FICAM approved.

If the application does not accept FICAM approved credentials when accepting third-party credentials, this is a finding."
V-69395,medium,"The application must generate audit records when successful/unsuccessful attempts to modify categories of information (e.g., classification levels) occur.","Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Audit records can be generated from various components within the information system (e.g., module or policy filter).",None,SV-84017r1_rule,F-75569r1_fix,Configure the application to create an audit record for both successful and unsuccessful attempts to modify protected categories of information.,C-69811r1_chk,"Review the application documentation and interview the application administrator.

Identify where the application logs are stored.

Identify any data protections that are required.

Identify any categories of data or classification of data.

If the application requirements do not call for compartmentalized data and data protection, this requirement is not applicable.

Authenticate to the application as a regular user. Using application functionality, attempt to modify data that has been assigned to a protected category.

Perform two modification attempts, one successful and one unsuccessful.

Testing this will require obtaining access to test data that has been assigned to a protected category, or having an authorized user access the data for you.

Review the log data and ensure both the successful and unsuccessful modification attempts are logged.

If the application does not generate an audit record when successful and unsuccessful attempts to modify categories of information occur, this is a finding."
V-6159,medium,The designer will ensure unsigned Category 1A mobile code is not used in the application in accordance with DoD policy. ,Use of un-trusted Level 1 and 2 mobile code technologies can introduce security vulnerabilities and malicious code into the client system.  ,['DCMC-1'],SV-6159r1_rule,F-17119r1_fix,Sign Category 1 or Category 2 mobile code.,C-3037r1_chk,"The designer will ensure Category 1A mobile code used in an application is signed with a DoD-approved code-signing certificate.

The designer will ensure signed Category 1A mobile code used in an application is obtained from a trusted source and is designated as trusted.

The designer will ensure Category 1X mobile code is not used in applications. 

The designer will ensure signed Category 2 mobile code used in an application is signed with a DoD-approved code signing certificate.

The designer will ensure Category 2 mobile code not executing in a constrained execution environment is obtained from a trusted source over an assured channel using at least one of the following measures:

Interview the application representative and examine the application documentation to determine if Category 1A or 2 mobile code is used.
 
The URL of the application must be added to the Trusted Sites zone.  This is accomplished via the Tools, Internet Options, and Security Tab.  Select the Trusted Sites zone.
Click the sites button.  Enter the URL into the text box below the Add this site to this zone message.  Click Add.  Click OK.
 
Note: This requires administrator privileges to add URL to sites on a STIG compliant workstation.
 
Next, test the application.  This testing should include functional testing from all major components of the application.  If mobile code is in use, the browser will prompt to download the control.  At the download prompt, the browser will indicate that code has been digitally signed. 
 
1) If the code has not been signed or the application warns that a control cannot be invoked due to security settings, it is a finding.  
 
2) If the code has not been signed with a DoD approved PKI certificate, it is a finding.
"
V-70175,medium,Applications used for non-local maintenance sessions must implement cryptographic mechanisms to protect the integrity of non-local maintenance and diagnostic communications.,"Privileged access contains control and configuration information which is particularly sensitive, so additional protections are necessary. This is maintained by using cryptographic mechanisms to protect integrity.

Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.

This requirement applies to hardware/software diagnostic test equipment or tools. This requirement does not cover hardware/software components that may support information system maintenance, yet are a part of the system (e.g., the software implementing ""ping,"" ""ls,"" ""ipconfig,"" or the hardware and software implementing the monitoring port of an Ethernet switch).

The application can meet this requirement through leveraging a cryptographic module.",None,SV-84797r1_rule,F-76411r1_fix,Configure the application to encrypt remote application maintenance sessions.,C-70651r1_chk,"Review the application documentation and interview the application administrator to identify application maintenance functions.

If the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.

Identify the maintenance functions/capabilities that are provided by the application and performed by an individual which can be performed remotely.

For example, the application may provide the ability to clean up a folder of temporary files, add users, remove users, restart processes, backup certain files, manage logs, or execute diagnostic sessions.

Access the application in the appropriate role needed to execute maintenance tasks. Observe the manner in which the application is connecting and ensure the session is being encrypted.

For example, observe the browser to ensure the session is being encrypted with TLS/SSL.

If the application provides remote access to maintenance functions and capabilities and the remote access methods are not encrypted, this is a finding."
V-35306,medium,The application server must uniquely identify all network-connected endpoint devices before establishing any connection.,"Without identifying devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.

For distributed application servers and components, the decisions regarding the validation of identification claims may be made by services separate from the application server. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.",None,SV-46593r3_rule,F-39852r2_fix,Configure the application server to identify devices before allowing connections.,C-43675r2_chk,"Review application server documentation and configuration to ensure the application server identifies devices before allowing connections.

If the application server does not identify a device before connection, this is a finding."
V-69303,medium,"Unnecessary application accounts must be disabled, or deleted.","Test or demonstration accounts are sometimes created during the application installation process. This creates a security risk as these accounts often remain after the initial installation process and can be used to gain unauthorized access to the application. Applications must be designed and configured to disable or delete any unnecessary accounts that may be created. 

Care must be taken to ensure valid accounts used for valid application operations are not disabled or deleted when this requirement is applied.",None,SV-83925r1_rule,F-75477r1_fix,Design the application so unessential user accounts are not created during installation. Disable or delete all unnecessary application user accounts.,C-69715r1_chk,"Review the system documentation and identify any valid application accounts that are required in order for the application to operate. Accounts the application itself uses in order to function are not in scope for this requirement.

Have the application administrator generate a list of all application users. This should include relevant user metadata such as phone numbers or department identifiers.

Have the application administrator identify and validate all user accounts.

If any accounts cannot be validated and are deemed to be unnecessary, this is a finding."
V-27058,medium,Applications must employ cryptographic mechanisms to recognize changes to information during transmission unless otherwise protected by alternative physical measures.,"Ensuring the integrity of transmitted information requires that applications take measures to employ some form of cryptographic mechanism in order to recognize changes to information.  This is usually achieved through the use of checksums, cryptographic hash or message authentication. 

Alternative physical protection measures include, Protected Distribution Systems (PDS). PDS are used to transmit unencrypted classified NSI through an area of lesser classification or control. In as much as the classified NSI is unencrypted, the PDS must provide adequate electrical, electromagnetic, and physical safeguards to deter exploitation.

This is a requirement for PDS systems to use cryptographic mechanisms and is not an application requirement.",None,SV-34353r1_rule,None,None,None,None
V-26680,medium,"The application must display security attributes in human-readable form on each object output from the system to system output devices to identify an organization-identified set of special dissemination, handling, or distribution instructions using organization-identified human readable, standard naming conventions.","Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.  

These attributes are typically associated with internal data structures (e.g., records, buffers, files, registry keys) within the information system and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. 

Examples of application security attributes are classified, FOUO, sensitive,  etc. 

Security attributes need to be displayed in human readable form in order to determine how the data should be disseminated, handled and what distribution instructions apply to the data.  When applications generate or output data, the associated security attributes need to be displayed.

Objects output from the information system include pages, screens, or equivalent. 

Output devices include printers and video displays on computer terminals, monitors, screens on notebook/laptop computers and personal digital assistants. ",None,SV-33879r1_rule,None,None,None,None
V-26930,medium,Applications must ensure that PKI-based authentication maps the authenticated identity to the user account.,The cornerstone of the PKI is the private key used to encrypt or digitally sign information.  The key by itself is a cryptographic value that does not contain specific user information.,None,SV-34210r1_rule,None,None,None,None
V-6127,medium,"The designer will ensure applications requiring user authentication are PK-enabled and are designed and implemented to support hardware tokens (e.g., CAC  for NIPRNet).",Non PK-enabled applications can allow unauthorized persons or entities to intercept information.  A PK-enabled application gives assurance of the user accessing the application.,"['IATS-1', 'IATS-2']",SV-6127r1_rule,F-17017r1_fix,Modify the application to use certificate based authentication.,C-2938r1_chk,"This check is not applicable where application users are determined to have authorized access to the application and are not eligible to receive a CAC/DoD PKI certificate (e.g., retirees, dependents, etc.), as defined by DoDI 8520.2.

1) Ask the application representative if an application is PK-enabled.  If the answer is no, this a finding.  
 
If the application is in a production environment, the application representative should be able to login to the application with a CAC.
 
If the application resides on the SIPRNet, or in a test environment, the application representative may only have test certificates and should be able to login to the application with a soft certificate.
Note: The certificates for this check do not need to be DoD approved certificates.
 
2) If the application representative cannot log in to the application with either soft certificates or certificates from a CAC, it is a finding.
 
Ask the application representative where the certificate store is for the application and verify there are the correct test or production certificates for user authentication. Make certain a certificate is required for user authentication. Ask the application representative to temporarily remove the certificate from the certificate store and authenticate to the application.
 
For web application using Internet Explorer from the Tools Menu Select “Internet Options” 
Select “Content” tab
Select “Certificates”
Select “Remove”
Other applications certificate stores will have similar features.
 
3) If the application representative can login to the application without either soft certificates or certificates stored on a CAC or another authentication mechanism, this is a CAT I finding for check APP3460. This finding should not be recorded for this check.
 
4) Ask the application representative to demonstrate encryption is being used for authentication.  If the application representative cannot demonstrate encryption is being used, it is a finding."
V-57435,medium,The application server must compare internal application server clocks at least every 24 hours with an authoritative time source.,"Determining the correct time a particular application event occurred on a system is critical when conducting forensic analysis and investigating system events.

Synchronization of system clocks is needed in order to correctly correlate the timing of events that occur across multiple systems. To meet this requirement, the organization will define an authoritative time source and have each system compare its internal clock at least every 24 hours.",None,SV-71707r2_rule,F-62473r1_fix,Configure the application server to compare internal application server clocks at least every 24 hours with an authoritative time source.,C-58111r1_chk,"Review application server documentation and confirm that the application server compares internal application server clocks at least every 24 hours with an authoritative time source.

If the application server does not compare internal application server clocks to an authoritative source or if the frequency is greater than every 24 hours, this is a finding."
V-69399,medium,The application must generate audit records when successful/unsuccessful attempts to delete security levels occur.,"A security level denotes a permissions or authorization capability within the application. This is most often associated with a user role. Attempts to delete a security level can be construed as an attempt to change the configuration of the application so as to delete an existing security role. Some applications may or may not provide this capability.

Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Audit records can be generated from various components within the information system (e.g., module or policy filter).",None,SV-84021r1_rule,F-75573r1_fix,Configure the application to create an audit record for both successful and unsuccessful attempts to delete security levels.,C-69815r1_chk,"Review the application documentation and interview the application administrator.

Identify where the application logs are stored.

Identify application functionality that provides privilege escalation or access to additional security levels within the application.

This can be performing a function that escalates the privileges of the user, or accessing a protected area of the application that requires additional authentication in order to access.

Authenticate to the application as a regular user. Using application functionality, attempt to delete permissions of a different security level or domain within the application.

Perform two attempts, one successfully and one unsuccessfully.

Review the log data and ensure the deletion events, both successful and unsuccessful are logged.

If the application does not generate an audit record when successful and unsuccessful attempts to delete permissions regarding the security levels occur, this is a finding."
V-69463,medium,The application must provide an audit reduction capability that supports on-demand audit review and analysis.,"The ability to perform on-demand audit review and analysis, including after the audit data has been subjected to audit reduction, greatly facilitates the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.

Audit reduction is a technique used to reduce the volume of audit records in order to facilitate a manual review. Audit reduction does not alter original audit records. The report generation capability provided by the application must support on-demand (i.e., customizable, ad-hoc, and as-needed) reports.

This requirement is specific to applications with audit reduction capabilities; however, applications need to support on-demand audit review and analysis.",None,SV-84085r1_rule,F-75639r1_fix,Configure the application to log to a centralized auditing capability that provides on-demand reports based on the filtered audit event data or design or configure the application to meet the requirement.,C-69881r1_chk,"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.

Identify the application components and the logs associated with the components.

If the application utilizes a centralized logging system that provides the capability to generate reports based on filtered log events, this requirement is not applicable.

Using the relevant application features for generating reports and/or searching application data, (this is usually executed directly within a logging utility or within a reports feature or function) configure a filter based on any of the security criteria provided below.

Alternatively, you can use security-oriented criteria provided by the application administrator.

Once the data filter has been selected, filter the audit event data so only filtered data is displayed and generate the report.

The report can be any combination of screen-based, soft copy, or a printed report.

Criteria:
Users: e.g., specific users or groups
Event types:
Event dates and time:
System resources involved: e.g., application components or modules.
IP addresses:
Information objects accessed:
Event level categories: e.g., high, critical, warning, error

If the application does not provide an audit reduction capability that supports on-demand reports based on the filtered audit event data, this is a finding."
V-27039,medium,Applications must restrict the ability of users to launch Denial of Service (DoS) attacks against other information systems or networks.,"When it comes to DoS attacks most of the attention is paid to ensuring that systems and applications are not victims of these attacks.  

While it is true that those accountable for systems want to ensure they are not affected by a DoS attack, they also need to ensure their systems and applications are not used to launch such an attack against others.  To that extent, a variety of technologies exist to limit, or in some cases, eliminate the effects of DoS attacks. 

For example,  boundary protection devices can filter certain types of packets to protect devices from being directly affected by denial of service attacks. Limiting system resources that are allocated to any user to a bare minimum may also reduce the ability of users to launch some DoS attacks. 

Applications and application developers must take the steps needed to ensure that users cannot use these applications to launch DoS attacks against other systems and networks.  An example would be designing applications to include mechanisms that throttle network traffic so that users are not able to generate unlimited network traffic via the application. 

The methods employed to counter this risk will be dependent upon the potential application layer methods that can be used to exploit it.",None,SV-34333r1_rule,None,None,None,None
V-27089,medium,Applications must provide a report generation capability for audit reduction data.,"In support of Audit Review, Analysis, and Reporting requirements,  audit reduction is a technique used to reduce the volume of audit records in order to facilitate a manual review.  

Before a security review is conducted, information systems and/or applications with an audit reduction capability may remove many audit records known to have little security significance.  This is generally accomplished by removing records generated by specified classes of events, such as records generated by nightly backups. 

In order to identify and report on what (repetitive) data has been removed via the use of audit reduction, the application must provide a capability to generate reports containing what values were removed by the audit reduction. 

Audit reduction does not alter original audit records.  An audit reduction capability provides support for near real-time audit review and analysis based on policy based requirements and after-the-fact investigations of security incidents. 

Reporting tools employing audit reduction methods must not alter the original audit data.  An example of a tool employing audit reduction methods is the Windows Event Viewer tool which is used to view and analyze audit logs on Windows systems.",None,SV-34384r1_rule,None,None,None,None
V-26665,medium,The application must ensure that the screen display is obfuscated when an application session lock event occurs. ,"A session time-out lock is a temporary action taken when a user stops work and moves away from the immediate physical vicinity of the information system but does not log out because of the temporary nature of the absence. 

The session lock is implemented at the point where session activity can be determined. This is typically at the operating system-level, but may be at the application-level. 

When the application design specifies the application rather than the operating system will determine when to lock the session, the application session lock event must include an obfuscation of the display screen so as to prevent other users from reading what was previously displayed. 

An example of obfuscation is a screensaver creating a viewable pattern that overwrites the entire screen rendering the screen contents unreadable.  
",None,SV-33794r1_rule,None,None,None,None
V-26892,medium,The application must provide a real-time alert when organization-defined audit failure events occur.,"It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Audit processing failures include:  software/hardware errors, failures in the audit capturing mechanisms, and audit storage capacity being reached or exceeded. 

Organizations shall define audit failure events requiring an application to send an alarm.  When those defined events occur, the application will provide a real-time alert to the appropriate personnel.",None,SV-34172r1_rule,None,None,None,None
V-26790,medium,Applications must prevent encrypted data from bypassing content-checking mechanisms. ,"Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

Information flow enforcement mechanisms compare security attributes on all information (data content and data structure), source and destination objects, and respond appropriately (e.g., block, quarantine, alert administrator) when the mechanisms encounter information flows not explicitly allowed by the information flow policy. When data is encrypted, devices and software designed to examine data content so as to detect attacks or malicious code are unable to accomplish the task unless they are capable of unencrypting the data. Example includes decrypting email in order to scan attachments.",None,SV-34040r1_rule,None,None,None,None
V-70181,medium,The application must employ strong authenticators in the establishment of non-local maintenance and diagnostic sessions.,"If maintenance tools are used by unauthorized personnel, they may accidentally or intentionally damage or compromise the system. The act of managing systems and applications includes the ability to access sensitive application information, such as, system configuration details, diagnostic information, user information, and potentially sensitive application data.

Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.

Typically, strong authentication requires authenticators that are resistant to replay attacks and employ multifactor authentication. Strong authenticators include, for example, PKI where certificates are stored on a token protected by a password, passphrase, or biometric.

This requirement applies to hardware/software diagnostic test equipment or tools. This requirement does not cover hardware/software components that may support information system maintenance, yet are a part of the system (e.g., the software implementing ""ping,"" ""ls,"" ""ipconfig,"" or the hardware and software implementing the monitoring port of an Ethernet switch).",None,SV-84803r1_rule,F-76417r1_fix,Configure the application to use strong authentication (CAC) when accessing the application for maintenance purposes.,C-70657r1_chk,"Review the application documentation and interview the application administrator to identify application maintenance functions.

If the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.

Identify the maintenance functions/capabilities that are provided by the application, performed by an individual/admin and which can be performed remotely.

Examples include but are not limited to:

The application may provide the ability to clean up a folder of temporary files, add users, remove users, restart processes, backup certain files, manage logs, or execute diagnostic sessions.

Have the application admin authenticate to the application in an administrative role and verify that strong credentials (CAC) are required to access when performing application maintenance.

Have the application admin authenticate to the application host OS and verify that strong credentials (CAC) are required to access when performing application maintenance.

If the application administrator is prevented from accessing the OS by policy requirement or separation of duties requirements, this is not a finding.

If a CAC is not used when remotely accessing the application for maintenance or diagnostic sessions, this is a finding."
V-16803,medium,"The designer and IAO will ensure application resources are protected with permission sets which allow only an application administrator to modify application resource configuration files.
","If application resources are not protected with permission sets that allow only an application administrator to modify application resource configuration files, unauthorized users can modify configuration files allowing these users to capture data within the application, or turn off encryption, or change any configurable option in the application.",['ECCD-1'],SV-17803r1_rule,F-17084r1_fix,Correct access permissions restricting the modification of application resources.,C-17801r1_chk,"Ask the application representative to demonstrate the application resources have appropriate access permissions.

1) If the application representative cannot demonstrate all application resources have appropriate access permissions, it is a finding.
 
Review the locations of all configuration files used by the application. Ask the application representative to demonstrate configuration files used by the application are restricted to authorized users.
 
2) If access permissions to configuration files are not restricted to application administrators, it is a finding."
V-69525,medium,The application must require devices to reauthenticate when organization-defined circumstances or situations requiring reauthentication.,"Without reauthenticating devices, unidentified or unknown devices may be introduced; thereby facilitating malicious activity.

In addition to the reauthentication requirements associated with session locks, organizations may require reauthentication of devices, including (but not limited to), the following other situations:

(i) When authenticators change;
(ii) When roles change;
(iii) When security categories of information systems change;
(iv) After a fixed period of time;
or
(v) Periodically.

For distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of identification claims may be made by services separate from the services acting on those decisions. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.

Gateways and SOA applications are examples of where this requirement would apply.",None,SV-84147r1_rule,F-75699r1_fix,Configure the application to require reauthentication periodically.,C-69943r1_chk,"Review the application guidance and interview the application administrator.

Identify the methods and manner in which application devices such as an XML gateway, SOA application gateway, or application firewall is allowed to access the application. Most devices themselves will not change role or authenticators once they are established but will need to periodically re-authenticate.

Review the configuration setting in the application where the time period is set to force the device to reauthenticate.

Review local policy requirements to determine if reauthentication intervals are specified.

If the device is not forced to reauthenticate periodically, this is a finding."
V-69563,medium,The application must enforce password complexity by requiring that at least one special character be used.,"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.

Examples of situations where a user ID and password might be used include but are not limited to:

- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.

- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.

and

- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.

Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.

Password complexity is one factor of several that determine how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.",None,SV-84185r1_rule,F-75737r1_fix,Configure the application to require at least one special character in the password.,C-69981r1_chk,"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.

If the application does not use passwords, the requirement is not applicable.

Access the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.

When prompted to provide the password, attempt to create a password that does not have one special character.

If a password without at least one special character can be created, this is a finding."
V-19706,medium,"The designer will ensure the application is compliant with all DoD IT Standards Registry (DISR) IPv6 profiles.
","If the application has not been upgraded to execute on an IPv6-only network, there is a possibility the application will not execute properly, and as a result, a denial of service could occur.
",['DCSQ-1'],SV-21847r1_rule,F-23063r1_fix,"Design application to be compliant with all DISR IPv6 profiles.
",C-24103r1_chk,"Verify the application environment is compliant with all DoD IPv6 Standards Profile for IPv6 Capable Products guidance for servers.

1) If the application environment is not compliant with all DoD IPv6 Standards Profile for IPv6 Capable Products guidance for servers, this is a finding.
"
V-27017,medium,Applications providing a login capability must also provide a logout functionality to allow the user to manually terminate the session.,"Manually terminating an application session allows users to immediately depart the physical vicinity of the system they are logged into without the risk of subsequent system users reactivating or continuing their application session.  User's who log into applications must have the ability to manually terminate their application session.  

Without an observable manual logout capability provided by the application, the user will have no means of manually terminating their application session.  Their session could remain active until which time the inactivity period expires and the application automatically logs the user out.  This increases the likelihood that the next subsequent user of the system could pick up on the previous user's session and continue utilizing the application as the previous user.",None,SV-34311r1_rule,None,None,None,None
V-27035,medium,"Applications must not share resources used to interface with systems operating at different security levels.
","The purpose of this control is to prevent information, including encrypted representations of information, produced by the actions of a prior user/role (or the actions of a process acting on behalf of a prior user/role) from being available to any current user/role (or current process) that obtains access to a shared system resource (e.g., registers, main memory, secondary storage) after the resource has been released back to the information system. Shared resources include, memory, input/output queues, and network interface cards. ",None,SV-34329r1_rule,None,None,None,None
V-26679,medium,The  application must allow authorized users to associate security attributes with information.,"Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.  

These attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. 

Examples of application security attributes are classified, FOUO, sensitive,  etc. 

Throughout the course of normal usage, authorized users of applications that handle sensitive data will have the need to associate security attributes with information. Applications that maintain the binding of organization defined security attributes to data must ensure authorized users can associate security attributes with information.",None,SV-33878r1_rule,None,None,None,None
V-6158,medium,"The designer will ensure the application only embeds mobile code in e-mail which does not execute automatically when the user opens the e-mail body or attachment.
","The practice of opening e-mails with executable code renders the recipient vulnerable to Internet worms, malicious content, and other threats.",['DCMC-1'],SV-6158r1_rule,F-17125r1_fix,"Remove executable mobile code from email messages.
",C-3036r1_chk,"If the application does not send e-mail, this check is not applicable.  

If the application sends e-mail, ask for user documentation and test results of e-mail portion of application. Additionally, execute the email portion of the application.  If possible, configure mail to send to an established email account.  If network configurations prevent actual mail delivery, perform the check by examining the mail in the mail queue. Examine documentation and email output.  
 
1) If any email message contains files with the following extensions (.exe, .bat, .vbs, .reg, .jse, .js, .shs, .vbe, .wsc, .sct, .wsf, .wsh), it is a finding."
V-19702,high,"The designer will ensure when using WS-Security, messages use timestamps with creation and expiration times.
","The lack of timestamps could lead to the eventual replay of the message, leaving the application susceptible to replay events which may result in an immediate loss of confidentiality. 

Any vulnerability associated with a DoD Information system or system enclave, the exploitation of which, by a risk factor, will directly and immediately result in loss of Confidentiality, Availability or Integrity of the system
associated data.
","['ECTM-2', 'IAIA-2']",SV-55089r1_rule,F-23058r1_fix,"Design application using WS-Security messages to use timestamps with creation and expiration times.
",C-24099r1_chk,"Examine the contents of a SOAP message using WS Security, all messages should contain timestamps, sequence numbers, and expiration. 

1) If messages using WS Security do not contain timestamps, sequence numbers, and an expiration, it is a finding."
V-35322,medium,The application server must perform RFC 5280-compliant certification path validation.,"A certificate's certification path is the path from the end entity certificate to a trusted root certification authority (CA).  Certification path validation is necessary for a relying party to make an informed decision regarding acceptance of an end entity certificate.  Certification path validation includes checks such as certificate issuer trust, time validity and revocation status for each certificate in the certification path.  Revocation status information for CA and subject certificates in a certification path is commonly provided via certificate revocation lists (CRLs) or online certificate status protocol (OCSP) responses.",None,SV-46609r3_rule,F-39869r5_fix,Configure the application server to validate certificates in accordance with RFC 5280.,C-43693r4_chk,"Review the application server documentation and deployed configuration to determine whether the application server provides PKI functionality that validates certification paths in accordance with RFC 5280.

If PKI is not being used, this is NA.

If the application server is using PKI, but it does not perform this requirement, this is a finding."
V-16780,medium,"The Program Manager will ensure all levels of program management, designers, developers, and testers receive the appropriate security training pertaining to their job function. ","Well trained IT personnel are the first line of defense against attacks or disruptions to the information system. Lack of sufficient training can lead to security oversights thereby, leading to compromise or failure to take necessary actions to prevent disruptions to operations.",['PRTN-1'],SV-17780r1_rule,F-16977r1_fix,"Provide security training for managers, designers, developers, and testers. ",C-17757r1_chk,"Detailed Policy requirements:

The Program Manager will ensure all levels of program management receive security training regarding the necessity, impact, and benefits of integrating secure development practices into the development lifecycle. 

The Program Manager will ensure designers are provided training on secure design principles for the entire SDLC and newly discovered vulnerability types on, at least, an annual basis. 

The Program Manager will ensure developers are provided with training on secure design and coding practices on, at least, an annual basis. 

The Program Manager will ensure testers are provided training on at least an annual basis.

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.

Interview the application representative and ask for evidence of security training for application managers, designers, developers, and testers. Examples of evidence include course completion certificates and a class roster. At a minimum, security training should include Security Awareness Training.

1) If there is no evidence of security training, it is a finding."
V-35070,medium,The application server must limit the number of concurrent sessions to an organization-defined number for all accounts and/or account types.,"Application management includes the ability to control the number of sessions that utilize an application by all accounts and/or account types. Limiting the number of allowed sessions is helpful in limiting risks related to Denial of Service attacks.

Application servers host and expose business logic and application processes.

The application server must possess the capability to limit the maximum number of concurrent sessions in a manner that affects the entire application server or on an individual application basis.

Although there is some latitude concerning the settings themselves, the settings should follow DoD-recommended values, but the settings should be configurable to allow for future DoD direction.

While the DoD will specify recommended values, the values can be adjusted to accommodate the operational requirement of a given system.",None,SV-46335r3_rule,F-39623r4_fix,Configure the application server to limit the number of concurrent sessions for all accounts and/or account types to the organization-defined number.,C-43459r4_chk,"Review the application server product documentation and configuration to determine if the number of concurrent sessions can be limited to the organization-defined number of sessions for all accounts and/or account types.

If a feature to limit the number of concurrent sessions is not available, is not set, or is set to unlimited, this is a finding."
V-35098,medium,The application server management interface must retain the Standard Mandatory DoD Notice and Consent Banner on the screen until users acknowledge the usage conditions and take explicit actions to log on for further access.,"To establish acceptance of system usage policy, a click-through banner at the application server management interface logon is required. The banner shall prevent further activity on the application server unless and until the user executes a positive action to manifest agreement by clicking on a box indicating ""OK"".",None,SV-46385r3_rule,F-39650r3_fix,Configure the application server management interface to retain the logon banner on the screen until the user takes explicit action to logon to the server.,C-43486r3_chk,"Review application server management interface product documentation and configuration to determine that the logon banner can be displayed until the user takes action to acknowledge the agreement.

If the banner screen allows continuation to the application server without user interaction, this is a finding."
V-70261,high,The application must protect from command injection.,"A command injection attack is an attack on a vulnerable application where improperly validated input is passed to a command shell setup in the application. The result is the ability of an attacker to execute OS commands via the application.

A command injection allows an attacker to execute their own commands with the same privileges as the application executing.

The following is an example of a URL based command injection attack.

Before alteration:
http://sitename/cgi-bin/userData.pl?doc=user1.txt

Example URL modified: 
http://sitename/cgi-bin/userData.pl?doc=/bin/ls|

The result is the execution of the command “/bin/ls” which could allow the attacker to list contents of the directory via the browser.

The following is a list of functions vulnerable to command injection sorted according to language.  

Language Functions/Characters
- C/C++  - system(), popen(), execlp(), execvp(), ShellExecute(), ShellExecuteEx(), _wsystem()
- Perl - system, exec, `,open, |, eval, /e
- Python - exec, eval, os.system, os.popen, execfile, input, compile
- Java - Class.forName(), Class.newInstance(), Runtime.exec()",None,SV-84883r1_rule,F-76497r1_fix,Modify the application so as to escape/sanitize special character input or configure the system to protect against command injection attacks based on application architecture.,C-70737r1_chk,"Review the application documentation and the system configuration settings.

Interview the application administrator for details regarding security assessment including automated code review and vulnerability scans conducted to test for command injection.

Review the scan results from the entire application.

Verify scan configuration is set to check for command injection vulnerabilities.

If results indicate vulnerability, verify a subsequent scan has been run to ensure the issue has been remediated.

Manual test procedures are available on the OWASP website. Procedures may need to be modified to suit application architecture.

https://www.owasp.org/index.php/Testing_for_Command_Injection_%28OTG-INPVAL-013%29

If testing results are not provided demonstrating the vulnerability does not exist, or if the application representative cannot demonstrate how actions are taken to identify and protect from command injection vulnerabilities, this is a finding."
V-70311,medium,"The ISSO must ensure if a DoD STIG or NSA guide is not available, a third-party product will be configured by following available guidance.","Not all COTS products are covered by a STIG. Those products not covered by a STIG, should follow commercially accepted best practices, independent testing results and vendors lock down guides and recommendations if they are available.",None,SV-84933r1_rule,F-76547r1_fix,"Configure the application according to the product STIG or when a STIG is not available, utilize:

- commercially accepted practices,
- independent testing results, or
- vendor literature and lock down guides.",C-70787r1_chk,"Review the application documentation to identify application name, features and version.

Identify if a DoD STIG or NSA guide is available.

If no STIG is available for the product, the application and application components must be configured by the following as available: 

- commercially accepted practices, 
- independent testing results, or 
- vendor literature and lock down guides.

If the application and application components do not have DoD STIG or NSA guidance available and are not configured according to: 
commercially accepted practices, 
independent testing results,
or vendor literature and lock down guides, this is a finding."
V-69539,medium,"The application must use multifactor (e.g., CAC, Alt. Token) authentication for local access to non-privileged accounts.","To assure accountability, prevent unauthenticated access, and prevent misuse of the system, privileged users must utilize multifactor authentication for local access.

Multifactor authentication is defined as: using two or more factors to achieve authentication.

Factors include:
(i) Something a user knows (e.g., password/PIN);
(ii) Something a user has (e.g., cryptographic identification device, token); or
(iii) Something a user is (e.g., biometric).

A non-privileged account is defined as an information system account with authorizations of a regular or non-privileged user.

Local access is defined as access to an organizational information system by a user (or process acting on behalf of a user) communicating through a direct connection without the use of a network.

Applications integrating with the DoD Active Directory and utilize the DoD CAC are examples of compliant multifactor authentication solutions.",None,SV-84161r1_rule,F-75713r1_fix,Configure the application to require CAC or Alt. Token authentication for non-privileged network access.,C-69957r1_chk,"Review the application documentation and interview the application administrator to identify application access methods.

If the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.

Ask the application administrator to log on to the application. Have the application admin use their non-privileged credentials.

Validate the application prompts the user to provide a certificate from the CAC.

Validate the application requests the user to input their CAC PIN.

If the application allows access without requiring a CAC or Alt. Token, this is a finding."
V-26671,medium,Applications must ensure that users can directly initiate session lock mechanisms which prevent further access to the system. ,"A session lock is a temporary action taken when a user stops work and moves away from the immediate physical vicinity of the information system but does not want to log out because of the temporary nature of the absence. 

The session lock is implemented at the point where session activity can be determined. This is typically at the operating system-level, but may be at the application-level. Rather than be forced to wait for a period of time to expire before the user session can be locked, applications need to provide users with the ability to manually invoke a session lock so users may secure their application should the need arise for them to temporarily vacate the immediate physical vicinity.",None,SV-33818r1_rule,None,None,None,None
V-26959,medium,"Configuration management solutions must track unauthorized, security-relevant configuration changes.","Configuration settings are the configurable security-related parameters of information technology products that are part of the information system. 

Security-related parameters are those parameters impacting the security state of the system including parameters related to meeting other security control requirements. 

Security-related parameters include:  registry settings; account, file, and directory settings (i.e., permissions); and settings for services, ports, protocols, and remote connections.  

Incident Response teams require input from authoritative sources in order to investigate events that have occurred. Configuration management solutions are a logical source for providing information regarding system configuration changes.  Unauthorized, security-relevant configuration changes must be incorporated into the organization’s incident response capability to ensure such detected events are tracked for historical purposes.",None,SV-34244r1_rule,None,None,None,None
V-57431,medium,The application server must record time stamps for log records that can be mapped to Coordinated Universal Time (UTC) or Greenwich Mean Time (GMT).,"If time stamps are not consistently applied and there is no common time reference, it is difficult to perform forensic analysis.

Time stamps generated by the application include date and time. Time is commonly expressed in Coordinated Universal Time (UTC), a modern continuation of Greenwich Mean Time (GMT), or local time with an offset from UTC.",None,SV-71703r2_rule,F-62469r1_fix,Configure the application server to use time stamps for log records that can easily be mapped to UTC or GMT.,C-58107r1_chk,"Review the application server documentation and configuration files to determine if time stamps for log records can be mapped to UTC or GMT.

If the time stamp cannot be mapped to UTC or GMT, this is a finding."
V-69417,medium,The application must provide the capability for authorized users to select a user session to capture/record or view/hear.,This is a specialized requirement for monitoring applications. Not all applications will be required to capture/record or view/hear user sessions.,None,SV-84039r1_rule,F-75593r1_fix,Design and configure the application to allow authorized users to capture/record and view/hear user sessions.,C-69835r1_chk,"Examine the application documentation and interview the application administrator to identify session capture capabilities within the application.

If the application or mission requirements do not specify the capability for authorized users to select a user session to capture or hear user sessions, this requirement does not apply.

Access the application interface as an authorized user and access the area of the application management functionality that activates session monitoring. Follow application instructions on how to utilize and activate session monitoring capability.

Identify a test user account and activate the capture feature, then access as the test user and execute application functions.

Close the test user session and examine the monitoring results to verify all of the session activity was captured.

If the application does not capture/record or view/hear a user’s session as per application and mission requirements, this is a finding."
V-70349,medium,The application must not be hosted on a general purpose machine if the application is designated as critical or high availability by the ISSO.,"Critical applications should not be hosted on a multi-purpose server with other applications. Applications that share resources are susceptible to the other shared application security defects. Even if the critical application is designed and deployed securely, an application that is not designed and deployed securely, can cause resource issues and possibly crash effecting the critical application.",None,SV-84971r1_rule,F-76585r1_fix,Deploy mission critical applications on servers that are not shared by other less critical applications.,C-70803r1_chk,"Ask the application representative to review the servers where the application is deployed. 

Ask what other applications are deployed on those servers.

Identify the criticality of the applications installed on the system.

If a mission critical application is deployed onto the same server as non-mission critical applications, this is a finding."
V-70247,medium,"The application must implement cryptographic mechanisms to prevent unauthorized disclosure of information and/or detect changes to information during transmission unless otherwise protected by alternative physical safeguards, such as, at a minimum, a Protected Distribution System (PDS).","Data is subject to manipulation and other integrity related attacks whenever that data is transferred across a network. To protect data integrity during transmission, the application must implement mechanisms to ensure the integrity of all transmitted information.

All transmitted information means that the protections are not restricted to just the data itself. Protection mechanisms must be extended to include data labels, security parameters, or metadata if data protection requirements specify.

Modern web application data transfer methods can be complex and are not necessarily just point-to-point in nature. Service-Oriented Architecture (SOA) and RESTFUL web services allow for XML-based application data to be transmitted in a manner similar to network traffic wherein the application data is transmitted along multiple servers' hops.

In such cases, point-to-point protection methods like TLS or SSL may not be the best choice for ensuring data integrity and alternative data integrity protection methods like XML Integrity Signature protections where the XML payload itself is signed may be required as part of the application design.

Overall application design and architecture must always be taken into account when establishing data integrity protection mechanisms. Custom-developed solutions that provide a file transfer capability should implement data integrity checks for incoming and outgoing files. Transmitted information requires mechanisms to ensure the data integrity (e.g., digital signatures, SSL, TLS, or cryptographic hashing).",None,SV-84869r1_rule,F-76483r1_fix,Configure the application to use cryptographic protections to prevent unauthorized disclosure of application data based upon the application architecture.,C-70723r1_chk,"Review the application documentation, the application architecture designs and interview the application administrator.

Ask the application admin to identify the network path taken by the application data and demonstrate the application support integrity mechanisms for transmission of both incoming and outgoing files and any transmitted data.

For example, hashing/digital signature and cyclic redundancy checks (CRCs) can be used to confirm integrity on data streams and transmitted files.

Use of TLS can be used to assure integrity in point-to-point communication sessions.

When the application uses messaging or web services or other technologies where the data can traverse multiple hops, the individual message or packet must be encrypted to protect the integrity of the message.

If the application is not configured to provide cryptographic protections to application data while it is transmitted unless protected by alternative safety measures like a PDS, this is a finding."
V-27024,medium,Applications must take needed steps to protect data at rest and ensure confidentiality and integrity of application data. ,"This control is intended to address the confidentiality and integrity of
information at rest in non-mobile devices and covers user information and system information.  Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an organizational information system. Applications and application users generate information throughout the course of their application use.  

User data generated, as well as, application specific configuration data needs to be protected. Configurations and/or rule sets for firewalls, gateways, intrusion detection/prevention systems, and filtering routers and authenticator content are examples of system information likely requiring protection. Organizations may choose to employ different mechanisms to achieve confidentiality and integrity protections, as appropriate. ",None,SV-34318r1_rule,None,None,None,None
V-26768,medium,Applications providing information flow controls must provide the capability for privileged administrators to configure security policy filters to support different organizational security policies. ,"
Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

From an application perspective, flow control is established once application data flow modeling has been completed.  Data flow modeling can be described as:  the process of identifying, modeling and documenting how data moves around an information system. Data flow modeling examines processes (activities that transform data from one form to another), data stores (the holding areas for data), external entities (what sends data into a system or receives data from a system), and data flows (routes by which data can flow). 

Once the application data flows have been identified, corresponding flow controls can be applied at the appropriate points.

A few examples of flow control restrictions include: keeping export controlled information from being transmitted in the clear to the Internet and blocking information marked as classified but is being transported to an unapproved destination.  Information flow control policies and enforcement mechanisms are commonly employed by organizations to control the flow of information between designated sources and destinations (e.g., networks, individuals, devices) within information systems and between interconnected systems. Flow control is based on the characteristics of the information and/or the information path.

Application specific examples of flow control enforcement can be found in information protection software (e.g., guards, proxies, gateways and cross domain solutions) employing rule sets or establish configuration settings restricting information system services or provide message filtering capability based on content (e.g., using key word searches or document characteristics).  

A crucial part of any flow control solution is the ability to create policy filters. Policy filters serve to enact and enforce the organizational policy as it pertains to controlling data flow. 

Organization-defined security policy filters include, file type checking filters, structured data filters, unstructured data filters, metadata content filters, and hidden content filters. 

- Structured data permits the interpretation of its content by virtue of atomic elements that are understandable by an application and indivisible. 
- Unstructured data refers to masses of (usually) digital information does not have a data structure or does have a data structure that is not easily readable by a machine. Unstructured data consists of two basic categories: (i) bitmap objects that are inherently non language-based (i.e., image, video, or audio files); and (ii) textual objects based on a written or printed language (i.e., commercial off-the-shelf word processing documents, spreadsheets, or emails).

Applications providing information flow control must provide the capability for privileged administrators to configure security policy filters to support different security policies.",None,SV-34018r1_rule,None,None,None,None
V-69349,low,The application must display the Standard Mandatory DoD Notice and Consent Banner before granting access to the application.,"Display of the DoD-approved use notification before granting access to the application ensures privacy and security notification verbiage used is consistent with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.

System use notifications are required only for access via logon interfaces with human users and are not required when such human interfaces do not exist.

The banner must be formatted in accordance with DTM-08-060. Use the following verbiage for applications that can accommodate banners of 1300 characters:

""You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.

By using this IS (which includes any device attached to this IS), you consent to the following conditions:

-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.

-At any time, the USG may inspect and seize data stored on this IS.

-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.

-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.

-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.""

Use the following verbiage for operating systems that have severe limitations on the number of characters that can be displayed in the banner:

""I've read & consent to terms in IS user agreem't.""",None,SV-83971r2_rule,F-75523r1_fix,Configure the application to present the standard DoD-approved banner prior to granting access to the application.,C-69761r2_chk,"If the application has no interactive user interface, this requirement is not applicable.

Log on to the application as a user.

Observe the screen and ensure the DoD-approved banner is displayed prior to obtaining access to the application. Refer to the vulnerability discussion for the approved text.

If the only way to access the application is through the OS console, e.g., a fat client application installed on a GFE desktop or laptop, and that GFE is configured to display the DoD banner, an additional banner is not required at the application level.

If the standard DoD-approved banner is not displayed prior to obtaining access, this is a finding."
V-26915,medium,The application must support organizational requirements to enforce minimum password length.,"Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. 

Password length is one factor of several that helps to determine strength and how long it takes to crack a password. The shorter the password is, the lower the number of possible combinations that need to be tested before the password is compromised. 

Use of more characters in a password helps to exponentially increase the time and/or resources required to compromise the password. ",None,SV-34195r1_rule,None,None,None,None
V-19709,medium,"The designer will ensure the application is compliant with the IPv6 addressing scheme as defined in RFC 1884. 
","If the application is not compliant with the IPv6 addressing scheme,  the entry of IPv6 formats that are 128 bits long or hexadecimal notation including colons, could result in buffer overflows compromising the application and creating additional attack vectors.
",['DCSQ-1'],SV-21850r1_rule,F-23067r1_fix,"Design the application to be compliant with the IPv6 addressing scheme as defined in with RFC 1884. 
",C-24106r1_chk,"Ask the application representative for the design document. Review the design document for application services supporting IPv6.

Verify user interfaces, graphic user interface (GUI), and system management interfaces have been updated to support IPv6 addressing and functions.

1) If the application interfaces have not been upgraded to support IPv6 addressing and functions, it is a finding.
"
V-26882,medium,Applications must allocate audit record storage capacity.  ,"In order to ensure applications have a sufficient storage capacity in which to write the audit logs, applications need to be able to allocate audit record storage capacity. The task of allocating audit record storage capacity is usually performed during initial installation of the application and is closely associated with the DBA and system administrator roles.  The DBA or system administrator will usually coordinate the allocation of physical drive space with the application owner/installer and the application will prompt the installer to provide the capacity information, the physical location of the disk, or both.",None,SV-34162r1_rule,None,None,None,None
V-57411,medium,The application server must ensure remote sessions for accessing security functions and security-relevant information are logged.,"Logging must be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident.

Remote access by administrators requires that the admin activity be logged.

Application servers provide a web and command line-based remote management capability for managing the application server. Application servers must ensure that all actions related to administrative functionality such as application server configuration are logged.",None,SV-71683r2_rule,F-62449r1_fix,Configure the application server to log an event for each instance when the administrator accesses the system remotely.,C-58085r1_chk,"Review the application server product documentation to determine if the application server logs remote administrative sessions.

If the application server does not log remote sessions for the admin user, then this is a finding."
V-69567,high,The application must only store cryptographic representations of passwords.,"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.

Examples of situations where a user ID and password might be used include but are not limited to:

- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.

- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.

and

- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.

Passwords need to be protected at all times and using a strong one-way hashing encryption algorithm with a salt is the standard method for providing a means to validate a user's password without having to store the actual password.  

Performance and time required to access are factors that must be considered and the one way hash is the most feasible means of securing the password and providing an acceptable measure of password security.  If passwords are stored in clear text, they can be plainly read and easily compromised.

In many instances, verifying the user knows a password is performed using a password verifier. In its simplest form, a password verifier is a computational function that is capable of creating a hash of a password and determining if the value provided by the user matches the hash.  

A more secure version of verifying a user knowing a password is to store the result of an iterating hash function and a large random SALT value as follows:

H0 = H(pwd, H(salt))
Hn = H(Hn-1,H(salt))

Where n is a cryptographically-strong random [*3] number. Hn is stored, along with the salt. When the application wishes to verify that the user knows a password, it simply repeats the process and compares Hn with the stored Hn.

A SALT is essentially a fixed-length cryptographically-strong random value.  

Another method used is utilizing a keyed hash message authentication code (HMAC).  HMAC calculates a message authentication code via a cryptographic hash function used in conjunction with an encryption key.  The key must be protected as with any private key.
 
Applications must only store passwords that have been cryptographically protected.",None,SV-84189r1_rule,F-75741r1_fix,"Use strong cryptographic hash functions when creating password hash values.

Utilize random salt values when creating the password hash.

Ensure strong access control permissions on data files containing authentication data.",C-69985r1_chk,"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.

If the application does not use passwords, the requirement is not applicable.

Have the application administrator identify the application's password storage locations.  Potential locations include the local file system where the application is stored or in an application-related database table that should not be accessible to application users.

Review application files and folders using a text editor or by using a database tool that allows you to view data stored in database tables.  Look for indications of stored user information and review that information.  Determine if password strings are readable/discernable.

Determine if the application uses the MD5 hashing algorithm to create password hashes.

If the passwords are readable or there is no indication the application utilizes cryptographic hashing to protect passwords, or if the MD5 hash algorithm is used to create password hashes, this is a finding."
V-27052,medium,Applications providing remote connectivity must prevent remote devices that have established a non-remote connection with the system from communicating outside of the communications path with resources in external networks.,"This control enhancement is implemented within the remote device (e.g., notebook/laptop computer) via configuration settings that are not configurable by the user of that device. An example of a non-remote communications path from a remote device is a virtual private network. When a non-remote connection is established using a virtual private network, the configuration settings prevent split-tunneling. Split-tunneling might otherwise be used by remote users to communicate with the information system as an extension of that system and to communicate with local resources such as, a printer or file server. Since the remote device, when connected by a non-remote connection, becomes an extension of the information system, allowing dual communications paths such as split-tunneling would be, in effect, allowing unauthorized external connections into the system.",None,SV-34347r1_rule,None,None,None,None
V-69357,medium,The application must protect against an individual (or process acting on behalf of an individual) falsely denying having performed organization-defined actions to be covered by non-repudiation.,"Without non-repudiation, it is impossible to positively attribute an action to an individual (or process acting on behalf of an individual).

Non-repudiation services can be used to determine if information originated from a particular individual, or if an individual took specific actions (e.g., sending an email, signing a contract, approving a procurement request) or received specific information. Non-repudiation protects individuals against later claims by an author of not having authored a particular document, a sender of not having transmitted a message, a receiver of not having received a message, or a signatory of not having signed a document. The application will be configured to provide non-repudiation services for an organization-defined set of commands that are used by the user (or processes action on behalf of the user).

DoD PKI provides for non-repudiation through the use of digital signatures. Non-repudiation requirements will vary from one application to another and will be defined based on application functionality, data sensitivity, and mission requirements.",None,SV-83979r1_rule,F-75531r1_fix,Configure the application to provide users with a non-repudiation function in the form of digital signatures when it is required by the organization or by the application design and architecture.,C-69769r1_chk,"Review the application documentation, the design requirements if available and interview the application administrator.

Identify application services or application commands that are formerly required and designed to provide non-repudiation services (e.g., digital signatures).  

If the application documentation specifically states that non-repudiation services for application users are not defined as part of the application design, this requirement is not applicable.  

Email is one example of an application specifically required to provide non-repudiation services for application users within the DoD. 

Interview the application administrators and have them describe which aspect of the application, if any, is required to provide digital signatures.

Access the application as a test user or observe the application administrator as they demonstrate the applications signature capabilities.

If the application is required to provide non-repudiation services and does not, or if the non-repudiation functionality fails on demonstration, this is a finding."
V-69523,medium,The application must require users to reauthenticate when organization-defined circumstances or situations require reauthentication.,"Without reauthentication, users may access resources or perform tasks for which they do not have authorization.

When applications provide the capability to change security roles or escalate the functional capability of the application, it is critical the user reauthenticate.

In addition to the reauthentication requirements associated with session locks, organizations may require reauthentication of individuals and/or devices in other situations, including (but not limited to) the following circumstances:

(i) When authenticators change;
(ii) When roles change;
(iii) When security categories of information systems change;
(iv) When the execution of privileged functions occurs;
(v) After a fixed period of time;
or
(vi) Periodically.

Within the DoD, the minimum circumstances requiring reauthentication are privilege escalation and role changes.",None,SV-84145r1_rule,F-75697r1_fix,Configure the application to require reauthentication before user privilege is escalated and user roles are changed.,C-69941r1_chk,"Review the application guidance and interview the application administrator.

Identify the application user roles.

Identify the methods and manner in which an application user is allowed to escalate their privileges or change their role.

Create or utilize an account that has 2 roles within the application, both should be non-administrator.
Example: User role and Report Creator role.

Authenticate to the application as the user in the User role.

Access the application functionality that allows the user to change their role and change from the User role to the Report Creator role.

If the user is not prompted to reauthenticate before the user’s role is changed, this is a finding.

Log out of the application and log back in as the User role.

Access the application functionality that allows the user to escalate their privileges to an administrative user.

Attempt to escalate the privileges of the user.

If the user is not prompted to reauthenticate before the user is allowed to proceed with escalated privileges, this is a finding."
V-26851,medium,The application must produce audit records containing sufficient information to establish the sources of the events.,"Information system auditing capability is critical for accurate forensic analysis.   Audit record content that may be necessary to satisfy the requirement of this control, includes but is not limited to:  time stamps, source and destination IP addresses, user/process identifiers, event descriptions, application specific events, success/fail indications, filenames involved, access control or flow control rules invoked. 

Without information establishing the source of activity, the value of audit records from a forensics perspective is questionable.",None,SV-34131r1_rule,None,None,None,None
V-70353,medium,Recovery procedures and technical system features must exist so recovery is performed in a secure and verifiable manner. The ISSO will document circumstances inhibiting a trusted recovery.,"Without a disaster recovery plan, the application is susceptible to interruption in service due to damage within the processing site.

If the application is part of the site’s disaster recovery plan, ensure that the plan contains detailed instructions pertaining to the application. Verify that recovery procedures indicate the steps needed for secure and trusted recovery.",None,SV-84975r1_rule,F-76589r1_fix,Create and maintain a disaster recovery plan.,C-70807r1_chk,"Review disaster recovery plan.

Verify that a disaster recovery plan is in place for the application.

Verify that the recovery procedures include any special considerations for trusted recovery.

If the application is not part of the site’s disaster recovery plan, or if any special considerations for trusted recovery are not documented, this is a finding."
V-69375,medium,"The application must provide audit record generation capability for HTTP headers including User-Agent, Referer, GET, and POST.","HTTP header information is a critical component of data that is used when evaluating forensic activity.

Without the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Audit records can be generated from various components within the application (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.

DoD has defined the list of events for which the application will provide an audit record generation capability as the following:

(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);

(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities or other system level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and

(iii) All account creation, modification, disabling, and termination actions.",None,SV-83997r1_rule,F-75549r1_fix,Configure the web application and/or the web server to log HTTP headers.,C-69789r1_chk,"Review the application documentation and interview the application administrator to identify log locations for application session activity.

Open the log file that tracks user session activity.

Access the application as a regular user and identify the user session within the log files.

Perform several actions within the application in order to generate HTTP header traffic.

Review the logs to ensure the HTTP header information is recorded in the logs. Header information logged will vary based upon the application and environment. Examples of headers include but are not limited to:

User-Agent:
Referer:
X-Forwarded-For:
Date:
Expires:

If HTTP headers are not logged, this is a finding."
V-69553,medium,The application must disable device identifiers after 35 days of inactivity unless a cryptographic certificate is used for authentication.,"Device identifiers are used to identify hardware devices that interact with the application much like a user account is used to identify an application user.  Examples of hardware devices include but are not limited to mobile phones, application gateways or other types of smart hardware.  

This requirement does not apply to individual application user accounts.  

This requirement is not applicable to shared information system accounts, application groups, roles (e.g., guest and anonymous accounts) that are used by the application itself in order to function.  Care must be taken to not disable identifiers that are used by the application in order to function.

Inactive device identifiers pose a risk to systems and applications. Attackers that are able to exploit an inactive identifier can potentially obtain and maintain undetected access to the application. 

Applications need to track periods of device inactivity and disable the device identifier after 35 days of inactivity.  This is usually accomplished by disabling the account used by the device to access the application.

Applications that utilize cryptographic certificates for device authentication may use the expiration date assigned to the certificate to meet this requirement with the understanding that the certificate is created and managed in accordance with DoD PKI policy and can be revoked by a trusted CA.

To avoid having to build complex device management capabilities directly into their application, developers should leverage the underlying OS or other account management infrastructure (AD, LDAP) that is already in place within the organization and meets organizational user account management requirements.

Applications are encouraged to utilize a centralized data store such as Active Directory or LDAP to offload device management requirements and ensure compliance with policy requirements.",None,SV-84175r2_rule,F-75727r3_fix,Configure the application to disable device accounts after 35 days of inactivity or to utilize DoD PKI certificates that provide an expiration date.,C-69971r4_chk,"Review the application documentation and interview the application administrator.

If the application is not designed to authenticate devices (such as mobile phones, gateways or other smart devices), or uses DoD PKI certificates to authenticate these devices, this requirement is NA.

Access the user management interface for the application.

Identify application device IDs.

If the application utilizes approved certificates or a centralized authentication store (Active Directory or LDAP) as the authoritative source for application authentication, and the authentication store is configured to meet the requirement to disable device IDs after 35 days of inactivity, this is not a finding.

Accounts such as guest and anonymous as well as roles and groups or other identities used to operate the application or to provide limited guest access are not applicable.

Access the application user management interface and review the account settings that pertain to devices.

Verify the application is configured to disable device accounts that have not been active or logged into the application for the past 35 days.

If the application does not disable accounts used to authenticate devices after 35 days of inactivity, this is a finding."
V-6165,high,"The designer will ensure the application does not have buffer overflows, use functions known to be vulnerable to buffer overflows, and does not use signed values for memory allocation where permitted by the programming language.","Buffer overflow attacks occur when improperly validated input is passed to an application overwriting of memory. Usually, buffer overflow errors stop execution of the application causing a minimum of denial of service and possibly a system call to a command shell giving the attacker access to the underlying operating system.",['DCSQ-1'],SV-6165r2_rule,F-17110r1_fix,Modify the application to protect against buffer overflows vulnerabilities.,C-3049r3_chk,"Ask the application representative for code review or scan results from the entire application.  This can be provided as results from an automated code review or a vulnerability scanning tool.  See section 5.4 of the Application Security and Development STIG for additional details on code review and tools. 
 
If the results are provided from a manual code review, the results will need to describe how buffer overflow vulnerabilities and functions vulnerable to buffer overflows are identified during code reviews. 

1) If scan results are provided and buffer overflow vulnerabilities have been identified in the report, this is a finding.

2) If scan results are provided but do not include the scan configuration settings which show that the application was tested for buffer overflows, this is a finding.

3) If manual test results are provided and the report does not confirm the lack of buffer overflows and also describe how buffer overflows and functions vulnerable to buffer overflows are identified during the code review, this is a finding.
 
 
*Note: For IPV6 capable applications, check existing libraries to ensure they are capable of processing the increased size of IPv6 addresses to avoid buffer overflows."
V-26980,medium,Applications using multifactor authentication when accessing privileged accounts via the network must provide one of the factors by a device that is separate from the information system gaining access.  ,"Multifactor authentication is defined as: using two or more factors to achieve authentication. 

Factors include: 
(i) something a user knows (e.g., password/PIN); 
(ii) something a user has (e.g., cryptographic identification device, token); or 
(iii) something a user is (e.g., biometric). 

A privileged account is defined as an information system account with authorizations of a privileged user.  

Network access is defined as; any access to an information system by a user (or process acting on behalf of a user) where said access is obtained through a network connection.

Out Of Band 2 Factor Authentication (OOB2FA) is defined as:  when one of the authentication factors is provided by a device that is separate from the system that is used to gain access. 

For example, a mobile device such as a smart phone is registered within the application to an application user.  Upon a successful authentication, the system sends instructions to the registered mobile device in the form of on-screen prompts instructing the user on how to complete the login process.

OOB2FA employs separate communication channels where at least one is independently maintained and trusted to authenticate an end user.  

Applications using multifactor authentication when accessing privileged accounts via the network must provide one of the factors by a device separate from the information system gaining access. ",None,SV-34268r1_rule,None,None,None,None
V-57419,medium,The application server must provide centralized management and configuration of the content to be captured in log records generated by all application components.,"A clustered application server is made up of several servers working together to provide the user a failover and increased computing capability.  To facilitate uniform logging in the event of an incident and later forensic investigation, the record format and logable events need to be uniform.  This can be managed best from a centralized server.

Without the ability to centrally manage the content captured in the log records, identification, troubleshooting, and correlation of suspicious behavior would be difficult and could lead to a delayed or incomplete analysis of an ongoing attack.",None,SV-71691r2_rule,F-62457r1_fix,Configure the application server to allow centralized management and configuration of the content to be captured in log records.,C-58095r1_chk,"Review application server documentation and configuration to determine if the application server is part of a cluster.

If the application server is not part of a cluster, this requirement is NA.

If the application server is part of a cluster, verify that the log settings are managed and configured from a centralized management server.

If the log settings are not centrally managed, this is a finding."
V-70251,medium,The application must maintain the confidentiality and integrity of information during reception.,"Data is subject to manipulation and other integrity related attacks whenever that data is transferred across a network. To protect data integrity during transmission, the application must implement mechanisms to ensure the integrity of all transmitted information. All transmitted information means that the protections are not restricted to just the data itself. Protection mechanisms must be extended to include data labels, security parameters or metadata if data protection requirements specify. Modern web application data transfer methods can be complex and are not necessarily just point-to-point in nature. Service-Oriented Architecture (SOA) and RESTFUL web services allow for XML-based application data to be transmitted in a manner similar to network traffic wherein the application data is transmitted along multiple servers' hops. In such cases, point-to-point protection methods like TLS or SSL may not be the best choice for ensuring data integrity and alternative data integrity protection methods like XML Integrity Signature protections where the XML payload itself is signed may be required as part of the application design. Overall application design and architecture must always be taken into account when establishing data integrity protection mechanisms. Custom-developed solutions that provide a file transfer capability should implement data integrity checks for incoming and outgoing files. Transmitted information requires mechanisms to ensure the data integrity (e.g., digital signatures, SSL, TLS, or cryptographic hashing).",None,SV-84873r1_rule,F-76487r1_fix,Configure all of the application systems to require TLS encryption.,C-70727r1_chk,"Review the application documentation and interview the application administrator.

Identify web servers and associated network connections.

Access the application with a web browser.

Verify the web browser goes secure automatically by automatically redirecting the browser to a secure port running TLS encryption, or ensure the port used by the application uses TLS encryption by default.

For tiered applications, (web server, application server, database server) ensure the communication channels between the tiers is also encrypted.

If the application does not utilize TLS to protect the confidentiality and integrity of transmitted information, this is a finding."
V-70263,medium,The application must protect from canonical representation vulnerabilities.,"Canonical representation vulnerabilities can occur when a data conversion process does not convert the data to its simplest form resulting in the possible misrepresentation of the data.

The application may behave in an unexpected manner when acting on input that has not been sanitized or normalized.

Vulnerable application code is written to expect one form of data and executes its program logic on another form of data thereby creating instability or unexpected behavior.

The Open Web Application Security Project (OWASP) website provides test and remediation procedures that can be used for testing if vulnerability scan tools or results are not available.

The site is available by pointing your browser to https://www.owasp.org.",None,SV-84885r1_rule,F-76499r1_fix,"A suitable canonical form should be chosen and all user input canonicalized into that form before any authorization decisions are performed.

Security checks should be carried out after decoding is completed. Moreover, it is recommended to check that the encoding method chosen is a valid canonical encoding for the symbol it represents.",C-70739r1_chk,"Review the application documentation and interview the application administrator for details regarding security assessment code reviews or vulnerability scans.

Review the scan results from the entire application. This can be provided as results from an automated code review or a vulnerability scanning tool.

Review the scan results to determine if there are any existing canonical representation vulnerabilities.

Review web server and application configuration.

The OWASP website provides the following test procedures:

""Investigate the web application to determine if it asserts an internal code page, locale, or culture.

If the default character set, locale is not asserted it will be one of the following:

    HTTP Posts. Interesting tidbit: All HTTP posts are required to be ISO 8859-1, which will lose data for most double byte character sets. You must test your application with your supported browsers to determine if they pass in fully encoded double byte characters safely

    HTTP Gets. Depends on the previously rendered page and per-browser implementations, but URL encoding is not properly defined for double byte character sets. IE can be optionally forced to do all submits as UTF-8 which is then properly canonicalized on the server

    .NET: Unicode (little endian)

    JSP implementations, such as Tomcat: UTF8 - see “javaEncoding” in web.xml by many servlet containers

    Java: Unicode (UTF-16, big endian, or depends on the OS during JVM startup)

    PHP: Set in php.ini, ISO 8859-1”

If the results are not provided or the application representative cannot demonstrate that the application does not use Unicode encoding, this is a finding."
V-26871,medium,"To support DoD requirements to centrally manage the content of audit records, applications must provide the ability to write specified audit record content to a centralized audit log repository.  ","Information system auditing capability is critical for accurate forensic analysis.  Audit record content that may be necessary to satisfy the requirement of this control, includes but is not limited:  time stamps, source and destination IP addresses, user/process identifiers, event descriptions, application specific events, success/fail indications, filenames involved, access control or flow control rules invoked. 

Centralized management of audit records and logs provides for efficiency in maintenance and management of records, as well as the backup and archiving of those records.  When organizations define application components requiring centralized audit log management, applications need to support that requirement.",None,SV-34151r1_rule,None,None,None,None
V-6171,medium,"The IAO will ensure recovery procedures and technical system features exist so recovery is performed in a secure and verifiable manner.      

The IAO will document circumstances inhibiting a trusted recovery.     
","Without a disaster recovery plan, the application is susceptible to interruption in service due to damage within the processing site.","['CODP-1', 'CODP-2', 'CODP-3']",SV-6171r1_rule,F-4483r1_fix,Create and maintain a disaster recovery plan.,C-3057r1_chk,"Ensure that a disaster recovery plan is in place for the application.  If the application is part of the site’s disaster recovery plan, ensure that the plan contains detailed instructions pertaining to the application. Ensure that recovery procedures indicate the steps needed for secure recovery. 
 
1) If a disaster recovery plan does not exist or the application is not part of the site’s disaster recovery plan, it is a finding.
 
Verify that the recovery procedures include any special considerations for trusted recovery.
 
2) If any special considerations for trusted recovery are not documented, it is a finding."
V-26950,medium,The organization must protect non-local maintenance sessions by separating the maintenance session from other network sessions with the information system by either physically separated communications paths; or logically separated communications paths based upon encryption.,"This is a requirement that maintenance needs to be done on a separate interface or encrypted channel to segment maintenance activity from regular usage.

This does not address an application characteristic and does not apply.",None,SV-34233r1_rule,None,None,None,None
V-26921,medium,The application must support organizational requirements to enforce password complexity by the number of special characters used.,"Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. 

Password complexity is one factor in determining how long it takes to crack a password. 

The more complex the password is, the greater the number of possible combinations that need to be tested before the password is compromised. 

Use of a complex password helps to increase the time and resources required to compromise the password. ",None,SV-34201r1_rule,None,None,None,None
V-26755,medium,"Applications providing information flow control must use explicit security attributes on information, source, and destination objects as a basis for flow control decisions.","Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

From an application perspective, flow control is established once application data flow modeling has been completed.  Data flow modeling can be described as:  the process of identifying, modeling and documenting how data moves around an information system. Data flow modeling examines processes (activities that transform data from one form to another), data stores (the holding areas for data), external entities (what sends data into a system or receives data from a system), and data flows (routes by which data can flow). 

Once the application data flows have been identified, corresponding flow controls can be applied at the appropriate points.

A few examples of flow control restrictions include: keeping export controlled information from being transmitted in the clear to the Internet and blocking information marked as classified but is being transported to an unapproved destination.  Information flow control policies and enforcement mechanisms are commonly employed by organizations to control the flow of information between designated sources and destinations (e.g., networks, individuals, devices) within information systems and between interconnected systems. Flow control is based on the characteristics of the information and/or the information path.

Application specific examples of flow control enforcement can be found in information protection software (e.g., guards, proxies, gateways and cross domain solutions) employing rule sets or establish configuration settings restricting information system services or provide message-filtering capability based on content (e.g., using key word searches or document characteristics).  

Applications providing information flow control capabilities must use explicit security attributes on information, source, and destination objects as a basis for flow control decisions.",None,SV-34003r1_rule,None,None,None,None
V-27071,medium,"The application must automatically update malicious code protection mechanisms, including signature definitions. Examples include anti-virus signatures and malware data files employed to identify and/or block malicious software from executing.","Anti-virus and malicious software detection applications utilize signature definitions in order to identify viruses and other malicious software.  These signature definitions need to be constantly updated in order to identify the new threats that are discovered every day.  All anti-virus and malware software shall come with an update mechanism that automatically updates these signatures. The organization (including any contractor to the organization) is required to promptly install security-relevant malicious code protection software updates (e.g., anti-virus signature updates and hot fixes). Malicious code includes, viruses, worms, Trojan horses, and Spyware. ",None,SV-34366r1_rule,None,None,None,None
V-69423,medium,The application must log destination IP addresses.,The IP addresses of the systems that the application connects to are an important aspect of identifying application network related activity. Recording the IP addresses of the system the application connects to in the application logs provides forensic evidence and aids in investigating and correlating the sources of malicious behavior related to security events. Logging this information can be particularly useful for Service-Oriented Applications where there is application to application connectivity.,None,SV-84045r1_rule,F-75599r1_fix,Configure the application to record the destination IP address of the remote system.,C-69841r1_chk,"If the application design documentation indicates the application does not initiate connections to remote systems this requirement is not applicable.

Network connections to systems used for support services such as DNS, AD, or LDAP may be stored in the system logs. These connections are applicable.

Identify log source based upon application architecture, design documents and input from application admin.

Review and monitor the application or system logs.

Connect to the application and utilize the application functionality that initiates connections to a destination system.

If the application routinely connects to remote system on a regular basis you may simply allow the application to operate in the background while the logs are observed.

Observe the log activity and determine if the log includes an entry to indicate the IP address of the destination system.

If the IP address of the remote system is not recorded along with the event in the event log, this is a finding."
V-69353,low,The publicly accessible application must display the Standard Mandatory DoD Notice and Consent Banner before granting access to the application.,"Display of a standardized and approved use notification before granting access to the publicly accessible application ensures privacy and security notification verbiage used is consistent with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.

System use notifications are required only for access via logon interfaces with human users and are not required when such human interfaces do not exist.

The banner must be formatted in accordance with DTM-08-060. Use the following verbiage for desktops, laptops, and other devices accommodating banners of 1300 characters:

""You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.

By using this IS (which includes any device attached to this IS), you consent to the following conditions:

-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.

-At any time, the USG may inspect and seize data stored on this IS.

-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.

-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.

-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.""

Use the following verbiage for operating systems that have severe limitations on the number of characters that can be displayed in the banner:

""I've read & consent to terms in IS user agreem't.""",None,SV-83975r1_rule,F-75527r1_fix,Configure the application to present the standard DoD-approved banner prior to granting access to the application.,C-69765r1_chk,"This requirement only applies to publicly accessible applications. If the application is not publicly accessible, this requirement is not applicable.

Access the application and observe the screen to ensure the DoD-approved banner is displayed prior to obtaining full access to the application. Refer to the vulnerability discussion for the approved banner text.

If the standard DoD-approved banner is not displayed prior to obtaining access, this is a finding."
V-69527,high,The application must uniquely identify and authenticate organizational users (or processes acting on behalf of organizational users).,"To assure accountability and prevent unauthenticated access, organizational users must be identified and authenticated to prevent potential misuse and compromise of the system.

Organizational users include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors). 

Organizational users (and any processes acting on behalf of users) must be uniquely identified and authenticated for all accesses, except the following:

(i) Accesses explicitly identified and documented by the organization. Organizations document specific user actions that can be performed on the information system without identification or authentication; and 
(ii) Accesses that occur through authorized use of group authenticators without individual authentication. Organizations may require unique identification of individuals in group accounts (e.g., shared privilege accounts) or for detailed accountability of individual activity.",None,SV-84149r1_rule,F-75701r1_fix,Configure the application to uniquely identify and authenticate users and user processes.,C-69945r1_chk,"Review the application documentation and interview the application administrator to determine how organizational users access the application.

If the application is publicly available, providing access to publicly releasable data and the users are non-organizational users such as individuals who no longer have a CAC (e.g., retirees) or  members of the public with no requirement for DoD credentials, this requirement is not applicable.

The requirement still applies to DoD organizational users and admins when accessing the non-public data areas or system resources of the system.

Attempt to access the application and confirm that a unique user account and password or CAC token and pin are required in order to access the application.

If the application does not uniquely identify and authenticate users, this is a finding."
V-69547,medium,The application must utilize mutual authentication when endpoint device non-repudiation protections are required by DoD policy or by the data owner.,"Without identifying devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.

With one way SSL authentication which is the typical form of SSL authentication done between a web browser client and a web server, the client requests the server certificate to validate the server's identity and establish a secure connection.

When SSL mutual authentication is used, the server is configured to request the client’s certificate as well so the server can also identify the client.

For distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of identification claims may be made by services separate from the services acting on those decisions. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.

This requirement applies to applications that connect either locally, remotely, or through a network to an endpoint device (including but not limited to: workstations, printers, servers (outside a datacenter), VoIP Phones, VTC CODECs). Gateways and SOA applications are examples of where this requirement would apply.",None,SV-84169r1_rule,F-75721r1_fix,Configure the application to utilize mutual authentication when specified by data protection requirements.,C-69965r1_chk,"Review the application documentation and interview the application administrator.

Determine if mutual authentication is mandated by the data owner or by mission data protection objectives and data type.

Review application architecture and design documents.

Identify endpoint devices that interact with the application. These can be SOA gateways, VOIP phones, or other devices that are used to connect to and exchange data with the application.

If the design documentation specifies, this could potentially also include remote client workstations.

In order for two way SSL/mutual authentication to work properly, the server must be configured to request client certificates.

Access the applications management console.

Navigate to the SSL management utility or web page that is used to configure two way mutual authentication.

Verify endpoints are configured for client authentication (mutual authentication).

Some application architectures such as Java configure their settings in text/xml formatted files; in that case, have the application administrator identify the configuration files used by the application.
E.g., web.xml stored in WEB-INF/ sub directory of the application root folder.

Open the web.xml file using a text editor.

Verify the application deployment descriptor for the application and the resource requiring protection under the ""login-config"" element is set to CLIENT-CERT.

If SSL mutual authentication is required and is not being utilized, this is a finding."
V-57439,medium,The application server must generate log records when successful/unsuccessful attempts to modify privileges occur.,"Changing privileges of a subject/object may cause a subject/object to gain or lose capabilities.  When successful/unsuccessful changes are made, the event needs to be logged.  By logging the event, the modification or attempted modification can be investigated to determine if it was performed inadvertently or maliciously.",None,SV-71711r2_rule,F-62477r1_fix,Configure the application server to generate log records when privileges are successfully or unsuccessfully modified.,C-58115r1_chk,"Review the application server documentation and the system configuration to determine if the application server generates log records when successful/unsuccessful attempts are made to modify privileges.

If log records are not generated, this is a finding."
V-27155,medium,Applications must employ FIPS-validated or NSA-approved cryptography to implement digital signatures.,"Cryptography is only as strong as the encryption modules/algorithms employed to encrypt the data. Use of weak or un-tested encryption algorithms undermines the purposes of utilizing encryption to protect data. 

The integrity and reliability of the algorithms used to generate digital signatures is just as important as those used to encrypt data.  

Digital signatures provide non-repudiation and authenticity of a message or document, therefore, it is imperative that applications employ FIPS validated algorithms when generating digital signatures to be applied to unclassified data and NSA approved algorithms when generating signatures to be applied to classified data.

This application requirement is not applicable.  This requirement is addressed by CCI-001342 which requires applications to meet policy and legal requirements regarding the use of approved encryption technology.  CCI-001342 is a comprehensive cryptography requirement that mandates the use of FIPS-validation or NSA-approved cryptography when using digital signatures.",None,SV-34454r1_rule,None,None,None,None
V-70199,medium,The application user interface must be either physically or logically separated from data storage and management interfaces.,"Application management functionality includes functions necessary for administration and requires privileged user access. Allowing non-privileged users to access application management functionality capabilities increases the risk that non-privileged users may obtain elevated privileges.

The separation of user functionality from information system management functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, different network addresses, different TCP/UDP ports, virtualization techniques, combinations of these methods, or other methods, as appropriate.

An example of this type of separation is observed in web administrative interfaces that use separate authentication methods for users of any other information system resources. This may include isolating the administrative interface on a different security domain and with additional access controls.",None,SV-84821r1_rule,F-76435r1_fix,Configure the application so user interface to the application and management interface to the application is separated.,C-70675r1_chk,"Review the application documentation and interview the application administrator.

Review the design documents and the interfaces used by the application.

Verify that the application provides separate interfaces for user traffic and for management traffic. The separation may be virtual in nature (virtual host, virtual NIC, virtual network) or physically separate.

If the application user interface and the application management interface are shared, this is a finding."
V-26706,medium,Applications must support the requirement to automatically audit account modification.,"Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify an existing account. 

Auditing of account modification is one method and best practice for mitigating this risk. A comprehensive application account management process ensures an audit trail automatically documents the modification of application user accounts and, as required, notifies administrators, application owners, and/or appropriate individuals. Applications must provide this capability directly, leveraging complimentary technology providing this capability or a combination thereof.

Automated account auditing processes greatly reduces the risk that accounts will be surreptitiously modified and provides logging that can be used for forensic purposes.  

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality. 

Examples of enterprise level authentication/access mechanisms include but are not limited to, Active Directory and LDAP.",None,SV-33949r1_rule,None,None,None,None
V-69243,medium,The application must automatically terminate the non-privileged user session and log off non-privileged users after a 15 minute idle time period has elapsed.,"Leaving a user’s application session established for an indefinite period of time increases the risk of session hijacking.

Session termination terminates an individual user's logical application session after 15 minutes of application inactivity at which time the user must re-authenticate and a new session must be established if the user desires to continue work in the application.",None,SV-83865r1_rule,F-75413r1_fix,Design and configure the application to terminate the non-privileged users session after 15 minutes of inactivity.,C-69667r1_chk,"Ask the application representative to demonstrate the configuration setting where the idle time out value is defined.

Alternatively, logon with a regular application user account and let the session sit idle for 15 minutes.

Attempt to access the application after 15 minutes of inactivity.

If the configuration setting is not set to time out user sessions after 15 minutes of inactivity, or if the regular user session used for testing does not time out after 15 minutes of inactivity, this is a finding."
V-7013,medium,The designer will create and update the Design Document for each release of the application.,"The detailed functional architecture must be documented to ensure all risks are assessed and mitigated to the maximum extent practical. Failure to do so may result in unexposed risk, and failure to mitigate the risk leading to failure or compromise of the system.",['DCFA-1'],SV-7372r1_rule,F-16985r1_fix,"Create and maintain the Design Document for each release of the application and identify the following:
­- All external interfaces (from the threat model)
­- The nature of information being exchanged
­- Categories of sensitive information processed or stored and their specific protection plans
­- The protection mechanisms associated with each interface 
­- User roles required for access control 
­- Access privileges assigned to each role
­- Unique application security requirements
­- Categories of sensitive information processed or stored and  specific protection plans (e.g., Privacy Act, HIPAA, etc.) 
­- Restoration priority of subsystems, processes, or information.",C-3655r1_chk,"Ask the application representative for the design document for the application. Review the design document.

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.

Examine the design document and/or the threat model for the application and verify the following information is documented:
­- All external interfaces.
­- The nature of information being exchanged.
­- Any protections on the external interface. 
­- User roles required for access control and the access privileges assigned to each role. 
­- Unique security requirements (e.g., encryption of key data elements at rest).
­- Categories of sensitive information processed by the application, and their specific protection plans (e.g., PII, HIPAA).
­- Restoration priority of subsystems, processes, or information. 
­- Verify the organization includes documentation describing the design and implementation details of the security controls employed within the information system with sufficient detail.

1) If the design document is incomplete, it is a finding."
V-16796,high,"The designer will ensure the application transmits account passwords in an approved encrypted format.
",Passwords transmitted in clear text or with an unapproved format are vulnerable to network protocol analyzers. These passwords acquired with the network protocol analyzers can be used to immediately access the application.,['ECCT-1'],SV-17796r1_rule,F-17023r1_fix,Modify the application to encrypt all transmitted passwords.,C-17792r1_chk,"Ask the application representative to demonstrate that passwords are encrypted before they are transmitted. 
 
1) If the application does not use passwords for identification and authentication, this check is not applicable. 
 
2) If the application does not encrypt passwords before transmitting them, it is a finding.
"
V-57413,medium,The application server must control remote access methods.,"Application servers provide remote access capability and must be able to enforce remote access policy requirements or work in conjunction with enterprise tools designed to enforce policy requirements.  Automated monitoring and control of remote access sessions allows organizations to detect cyber attacks and also ensure ongoing compliance with remote access policies by logging connection activities of remote users.

Examples of policy requirements include, but are not limited to, authorizing remote access to the information system, limiting access based on authentication credentials, and monitoring for unauthorized access.",None,SV-71685r2_rule,F-62451r1_fix,Configure the application server to enforce remote connection settings.,C-58087r1_chk,"Review organization policy, application server product documentation and configuration to determine if the system enforces the organization's requirements for remote connections.

If the system is not configured to enforce these requirements, or the remote connection settings are not in accordance with the requirements, this is a finding."
V-27060,medium,Applications must protect the confidentiality of transmitted information.,"Ensuring the confidentiality of transmitted information requires that applications take feasible measures to employ security mechanisms during data transmission.  Examples include but are not limited to, SSL, TLS, IPSec, and VPN.   This requirement applies to communications across internal and external networks. If the organization is relying on a commercial service provider for transmission services as a commodity item rather than a fully dedicated service, it may be more difficult to obtain the necessary assurances regarding the implementation of needed security controls for transmission integrity. 

When it is infeasible or impractical to obtain the necessary security controls and assurances of control effectiveness through appropriate contracting vehicles, the organization either implements appropriate compensating security controls or explicitly accepts the additional risk. 
",None,SV-34355r1_rule,None,None,None,None
V-69313,low,The application must notify System Administrators and Information System Security Officers when accounts are created.,"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Notification of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.",None,SV-83935r1_rule,F-75487r1_fix,Configure the application to notify the system administrator and the ISSO when application accounts are created.,C-69725r1_chk,"Review the application and system documentation.

Interview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.

If the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.

Ensure the application is configured to notify system administrators when new accounts are created by identifying system administrators who will be notified when new accounts are created, creating a test account and checking with system administrator to verify notification was received.

If system administrators and ISSOs are not notified when accounts are created, this is a finding."
V-57409,medium,The application server must associate organization-defined types of security attributes having organization-defined security attribute values with information in transmission.,"The application server provides a framework for applications to communicate between each other to form an overall well-designed application to perform a task.  As the information is transmitted, the security attributes must be maintained.  Without the association of security attributes to information, there is no basis for the application to make security-related access control decisions.

Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

One example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing, but either way, it is imperative these assignments are maintained while the data is in transmission. If the security attributes are lost when the data is being transmitted, there is the risk of a data compromise.",None,SV-71681r2_rule,F-62447r1_fix,Configure the application server to associate organization-defined types of security attributes having organization-defined security attribute values with information in transmission.,C-58083r1_chk,"Review the application server documentation to determine if the application associates organization-defined types of security attributes with organization-defined security attribute values to information in transmission.

If the application server does not associate the security attributes to information in transmission or the feature is not implemented, this is a finding."
V-27171,medium,The application must validate the integrity of security attributes exchanged between systems.,"When data is exchanged between information systems, the security attributes associated with said data needs to be maintained.  

Security attributes are an abstraction representing the basic properties or characteristics of an entity with respect to safeguarding information, typically associated with internal data structures (e.g., records, buffers, files) within the information system and used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. 

Security attributes may be explicitly or implicitly associated with the information contained within the information system. ",None,SV-34470r1_rule,None,None,None,None
V-70201,medium,The application must set the HTTPOnly flag on session cookies.,"HTTPOnly is a flag included in a Set-Cookie HTTP response header. If the HTTPOnly flag is included in the HTTP response header, the cookie cannot be accessed through client side scripts like JavaScript.

If the HTTPOnly flag is set, even if a cross-site scripting (XSS) flaw in the application exists, and a user accidentally accesses a link that exploits this flaw, the browser will not reveal the cookie to a third party.

The HTTPOnly setting is browser dependent however most popular browsers support the feature. If a browser does not support HTTPOnly and a website attempts to set an HTTPOnly cookie, the HTTPOnly flag will be ignored by the browser, thus creating a traditional, script accessible cookie. As a result, the cookie (typically the session cookie) becomes vulnerable to theft or modification by a malicious script running on the client system.",None,SV-84823r1_rule,F-76437r1_fix,Configure the application to set the HTTPOnly flag on session cookies.,C-70677r1_chk,"Review the application documentation and interview the application administrator to identify when session cookies are created.

Identify any mitigating controls the application developer may have implemented. Examples include utilizing a separate Web Application Firewall that is configured to provide this capability or configuring the web server with Mod_Security or ESAPI WAF with the HTTPOnly flag directives enabled.

Reference the most recent vulnerability scan documentation.

Verify the configuration settings for the scan include web application checks including HTTPOnly tests.

Review the scan results and determine if vulnerabilities related to HTTPOnly flag not being set for session cookies have been identified.

Utilize a web browser or other web application diagnostic tool to view the session cookies the application sets on the client.

Internet Explorer versions 8, 9, and 10 includes a utility called Developer tools.

Access the application website and establish an application session.

Access the page that sets the session cookie.

Press “F12” to open Developer Tools.

Select ""cache"" and then ""view cookie information"".

Identify the session cookies. An example of an HTTPOnly session cookie is as follows:

Set-Cookie: SessionId=z5ymkk45aworjo2l31tlhqqv; path=/; HttpOnly

If the application does not set the HTTPOnly flag on session cookies or if the application administrator cannot demonstrate mitigating controls, this is a finding."
V-26701,medium,The application must provide a mechanism to automatically terminate accounts designated as temporary or emergency accounts after an organization-defined time period.,"Temporary application accounts could ostensibly be used in the event of a vendor support visit where a support representative requires a temporary unique account in order to perform diagnostic testing or conduct some other support related activity. When these types of accounts are created, there is a risk that the temporary account may remain in place and active after the support representative has left.  

To address this, in the event temporary application accounts are required, the application must ensure that accounts designated as temporary in nature shall automatically terminate these accounts after an organization-defined time period.  Such a process and capability greatly reduces the risk that accounts will be misused, hijacked, or data compromised. 

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality. 

Examples of enterprise level authentication/access mechanisms include but are not limited to, Active Directory and LDAP.
",None,SV-33944r1_rule,None,None,None,None
V-26902,medium,The application must allow designated organizational personnel to select which auditable events are to be audited by specific components of the system.,"Audit records can be generated from various components within the information system, such as network interfaces, hard disks, modems, etc. From an application perspective, certain specific application functionalities may be audited, as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked).

Organizations may define the organizational personal accountable for determining which application components shall provide auditable events.",None,SV-34182r1_rule,None,None,None,None
V-27178,medium,The application must separate user functionality (including user interface services) from information system management functionality.,"Information system management functionality includes, functions necessary to administer databases, network components, workstations, or servers, and typically requires privileged user access. 

The separation of user functionality from information system management functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, different network addresses, combinations of these methods, or other methods, as appropriate. 

An example of this type of separation is observed in web administrative interfaces that use separate authentication methods for users of any other information system resources. 

This may include isolating the administrative interface on a different domain and with additional access controls. ",None,SV-34477r1_rule,None,None,None,None
V-69299,medium,The application must automatically remove or disable temporary user accounts 72 hours after account creation.,"If temporary user accounts remain active when no longer needed or for an excessive period, these accounts may be used to gain unauthorized access. To mitigate this risk, automated termination of all temporary accounts must be set upon account creation.

Temporary accounts are established as part of normal account activation procedures when there is a need for short-term accounts without the demand for immediacy in account activation.

If temporary accounts are used, the application must be configured to automatically terminate these types of accounts after a DoD-defined time period of 72 hours starting from the point of account creation.

To address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.",None,SV-83921r1_rule,F-75471r1_fix,Configure temporary accounts to be automatically removed or disabled after 72 hours after account creation.,C-69709r1_chk,"If official documentation exist that disallows the use of temporary user accounts within the application, this requirement is not applicable.

Examine the application documentation or interview the application representative to identify how the application users are managed.

Navigate to the screen where user accounts are configured.

Create a test account and determine if there is a setting to specify the user account as being temporary in nature.

Determine if there is an available setting to expire the account after a period of time.

If the application has no ability to specify a user account as being temporary in nature, or if the account has no ability to automatically disable or remove the account after 72 hours after account creation, this is a finding."
V-69279,high,Messages protected with WS_Security must use time stamps with creation and expiration times.,"The lack of time stamps could lead to the eventual replay of the message, leaving the application susceptible to replay events which may result in an immediate loss of confidentiality.",None,SV-83901r1_rule,F-75449r1_fix,Design and configure applications using WS-Security messages to use time stamps with creation and expiration times and sequence numbers.,C-69687r1_chk,"Ask the application representative for the design document. Review the design document for web services using WS-Security tokens.

If the application does not utilize WS-Security tokens, this check is not applicable.

Examine the contents of a SOAP message using WS Security; all messages should contain time stamps, sequence numbers, and expiration.

If messages using WS Security do not contain time stamps, sequence numbers, and expiration, this is a finding."
V-70413,medium,Protections against DoS attacks must be implemented.,"Known DoS threats documented in the threat model should be mitigated, to prevent DoS type attacks.",None,SV-85035r1_rule,F-76649r1_fix,Implement mitigations from the threat model for DOS attacks.,C-70867r1_chk,"Ask the application representative for the threat model document.

Examine the threat model document and determine if DoS attacks are specified as a threat.

If there are no DoS threats identified in the threat model, the requirement is not applicable.

Verify the mitigations provided for DoS attacks are implemented from the threat model.

If mitigations for DoS attacks are identified in the threat model but are not implemented, this is a finding."
V-26853,medium,Applications must have the capability to limit the number of failed login attempts based upon an organization defined number of consecutive invalid attempts occurring within an organization defined time period.,"Anytime an authentication method is exposed so as to allow for the utilization of an application, there is a risk that attempts will be made to obtain unauthorized access. 

To defeat these attempts, organizations define the number of times a user account may consecutively fail a login attempt. The organization also defines the period of time in which these consecutive failed attempts may occur. 

By limiting the number of failed login attempts, the risk of unauthorized system access via user password guessing, otherwise known as brute forcing, is reduced. Limits are imposed by locking the account. ",None,SV-34133r1_rule,None,None,None,None
V-57501,medium,"The application server must prohibit or restrict the use of nonsecure ports, protocols, modules, and/or services as defined in the PPSM CAL and vulnerability assessments.","Some networking protocols may not meet organizational security requirements to protect data and components.

Application servers natively host a number of various features, such as management interfaces, httpd servers and message queues. These features all run on TCPIP ports. This creates the potential that the vendor may choose to utilize port numbers or network services that have been deemed unusable by the organization. The application server must have the capability to both reconfigure and disable the assigned ports without adversely impacting application server operation capabilities. For a list of approved ports and protocols, reference the DoD ports and protocols web site at https://powhatan.iiie.disa.mil/ports/cal.html.",None,SV-71777r2_rule,F-62569r1_fix,Configure the application server to disable any ports or protocols that are prohibited by the PPSM CAL and vulnerability assessments.,C-58209r1_chk,"Review the application server documentation and deployment configuration to determine which ports and protocols are enabled.

Verify that the ports and protocols being used are not prohibited and are necessary for the operation of the application server and the hosted applications.

If any of the ports or protocols is prohibited or not necessary for the application server operation, this is a finding."
V-69355,low,The application must display the time and date of the users last successful logon.,"Providing a last successful logon date and time stamp notification to the user when they authenticate and access the application allows the user to determine if their application account has been used without their knowledge. 

Armed with that information, the user can notify the application administrator and initiate a forensics investigation to identify root cause.  Without providing this information to the user, a potential compromise of user accounts could go unnoticed.",None,SV-83977r1_rule,F-75529r1_fix,Design and configure the application to display the date and time when the user was last successfully granted access to the application.,C-69767r1_chk,"Review the application documentation and interview the application administrator.

If the application does not provide a user interface, this requirement is not applicable.

Logon to the application as a test user and verify successful authentication by creating test data, navigating the application functionality or otherwise utilizing the application.

Note the date and time access was granted.

Log out of the application.

Re-authenticate to the application as the same user.

Validate the last logon date and time is displayed in the user interface. 

If the date and time the user account was last granted access to the application is not displayed in the user interface, this is a finding."
V-27079,medium,"The organization must employ malicious code protection mechanisms at workstations, servers, or mobile computing devices on the network to detect and eradicate malicious code transported by electronic mail, electronic mail attachments, web accesses, removable media, or other common means.","In order to minimize potential negative impact to the organization that can be caused by malicious code, it is imperative that malicious code is identified and eradicated. Malicious code includes viruses, worms, Trojan horses, and Spyware. 

Applications providing malicious code protection must support organizational requirements to employ malicious code protection mechanisms at workstations, servers, or mobile computing devices on the network to detect and eradicate malicious code transported by electronic mail, electronic mail attachments, web accesses, removable media, or other common means.  

The requirement states that malicious code protection mechanisms such as anti-virus must be used on workstations, servers and mobile computing devices.  This does not apply to applications.",None,SV-34374r1_rule,None,None,None,None
V-70227,medium,The application must implement approved cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest on organization-defined information system components.,"Applications handling data requiring ""data at rest"" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest.

Selection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields).",None,SV-84849r1_rule,F-76463r1_fix,"Identify data elements that require protection.

Document the data types and specify encryption requirements.

Encrypt data according to DoD policy or data owner requirements.",C-70703r1_chk,"Review the documentation and interview the application administrator.

Identify the data processed by the application and the accompanying data protection requirements.

Determine if the data owner has specified data protection encryption requirements regarding modification of data.

Determine if the application is processing publicly releasable, FOUO or classified data.

Determine if the application configuration information contains sensitive information.

If the data is strictly publicly releasable information and system documentation specifies no data encryption is required for any hosted application data, this is not applicable.

Access the data repository and have the application administrator identify the encryption protections that are utilized.

If the application processes classified data or if the data owner has specified encryption requirements and the application administrator is unable to demonstrate how the data is encrypted, this is a finding."
V-27048,medium,Applications designed to enforce protocol formats must employ automated mechanisms to enforce strict adherence to protocol format.  ,"Automated mechanisms used to enforce protocol formats include, deep packet inspection firewalls and XML gateways. These devices verify adherence to the protocol specification (e.g., IEEE) at the application layer and serve to identify significant vulnerabilities that cannot be detected by devices operating at the network or transport layer.  It is impractical to expect protocol format inspection to be conducted manually.",None,SV-34343r1_rule,None,None,None,None
V-27176,medium,Applications designed to enforce policy pertaining to organizational use of mobile code must prevent the download and execution of prohibited mobile code.,"Decisions regarding the employment of mobile code within organizational information systems are based on the potential for the code to cause damage to the system if used maliciously. 

Mobile code technologies include:  Java, JavaScript, ActiveX, PDF, Postscript, Shockwave movies, Flash animations, and VBScript. Usage restrictions and implementation guidance apply to both the selection and use of mobile code installed on organizational servers and mobile code downloaded and executed on individual workstations. ",None,SV-34475r1_rule,None,None,None,None
V-26821,medium,Applications must support organizational requirements to implement separation of duties through assigned information access authorizations.,"Separation of duties is a prevalent Information Technology control that is implemented at different layers of the information system including the operating system and in applications. It serves to eliminate or reduce the possibility that a single user may carry out a prohibited action. Separation of duties requires that the person accountable for approving an action is not the same person who is tasked with implementing or carrying out that action.  

Additionally, the person or entity accountable for monitoring the activity must be separate as well. To meet this requirement, applications, when applicable, shall be divided where functionality is based on roles and duties. Examples of separation of duties include: (i) mission functions and distinct information system support functions are divided among different individuals/roles; (ii) different individuals perform information system support functions (e.g., system management, systems programming, configuration management, quality assurance and testing, network security); (iii) security personnel who administer access control functions do not administer audit functions; and (iv) different administrator accounts for different roles.  ",None,SV-34071r1_rule,None,None,None,None
V-16783,medium,"The Program Manager will ensure procedures are implemented to assure physical handling and storage of information is in accordance with the data’s sensitivity.

",Failure to have proper workplace security procedures can lead to the loss or compromise of classified or sensitive information.,['PESP-1'],SV-17783r1_rule,F-16981r1_fix,"Implement policy and procedures to ensure the proper handling and storage of information, such as end-of-day security checks, unannounced security checks, and, where appropriate, the imposition of a two-person rule within the computing facility.
Establish a system of security checks at the close of each working day to ensure that the area is secure. An SF 701: Activity Security Checklist shall be used to record such checks. This form may be modified to suit the individual security (or safety) needs of the organization i.e., entries for STU-III CIK secured or coffee pot turned off. An SF 702: Security Container Check Sheet shall be used to record the use of all vaults, secure rooms, and containers used for the storage of classified material.",C-17759r1_chk,"Determine the sensitivity of the data of the application by reviewing the confidentiality levels for which the system was designed.  

If a traditional review is being conducted at the same time as the application review, this check is not applicable.

For sensitive data, the following security guidelines must be followed:  
• Verify the existence of policy and procedures to ensure the proper handling and storage of information at the site.
• Verify system media (e.g., tapes, printouts, etc.) is controlled and the pickup, delivery, receipt, and transfer of system media is restricted to authorized personnel (NIST MP-5).
• Verify there is a policy that addresses output handling and retention (NIST SI-12).
• Verify policy that addresses output handling and retention is being followed (NIST SI-12).

1) If sensitive data security guidelines do not exist or not followed, it is a finding.

For classified data, the following security guidelines must be followed:  
• Verify the existence of policy and procedures to ensure the proper handling and storage of information at the site. (e.g., end-of-day, security checks, unannounced security checks, and, where appropriate, the imposition of a two-person rule). 
• Verify the existence of a system of security checks at the close of each working day to ensure that the area is secure.
• An SF 701: Activity Security Checklist, is required to record such checks. 
• An SF 702: Security Container Check Sheet, is requires to record the use of all vaults, secure rooms, and containers used for the storage of classified material.
• Verify system media (e.g. tapes, printouts, etc.) is controlled and the pickup, delivery, receipt and transfer of system media is restricted to authorized personnel (NIST MP-5).
• Verify there is a policy that addresses output handling and retention (NIST SI-12).
• Verify policy that addresses output handling and retention is being followed (NIST SI-12).
 
2) If classified data security guidelines do not exist or are not followed, it is a finding."
V-69385,medium,The application must generate audit records when successful/unsuccessful attempts to access security levels occur.,"A security level denotes a permissions or authorization capability within the application. This is most often associated with a user role. Attempts to access a security level can occur when a user attempts an action such as escalating their privilege from within the application itself. Attempts to access a security level can be construed as an attempt to change your user role from within the application. 

Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one. Audit records can be generated from various components within the information system (e.g., module or policy filter).",None,SV-84007r1_rule,F-75559r1_fix,Configure the application to create an audit record for both successful and unsuccessful attempts to access security levels.,C-69799r1_chk,"Review the application documentation and interview the application administrator. Identify where the application logs are stored.

Identify application functionality that provides privilege escalation or access to additional security levels within the application.

This can be performing a function that escalates the privileges of the user, or accessing a protected area of the application that requires additional authentication in order to access.

Authenticate to the application as a regular user. Using application functionality, attempt to access a different security level or domain within the application.

Perform two attempts, one successfully and one unsuccessfully.

Review the log data and ensure both the successful and unsuccessful access attempts are logged.

If the application does not generate an audit record when successful and unsuccessful attempts to access security levels occur, this is a finding."
V-70409,medium,The designer must ensure uncategorized or emerging mobile code is not used in applications.,"By definition, mobile code is software obtained from remote systems outside the enclave boundary, transferred across a network, and then downloaded and executed on a local system without explicit installation or execution by the recipient.  

For a complete list of mobile code categorizations, refer to the overview document included with this STIG.
Categorized mobile code includes but is not limited to:

- ActiveX
- Windows Scripting Host when used as mobile code
- Unix Shell Scripts when used as mobile code
- DOS batch scripts when used as mobile code
- Java applets and other Java mobile code
- Visual Basic for Applications (VBA)
- LotusScript
- PerfectScript
- Postscript
- JavaScript (including Jscript and ECMAScript variants)
- VBScript
- Portable Document Format (PDF)
- Shockwave/Flash
- Rich Internet Applications

The following technologies are not currently designated as mobile code:

- XML
- SMIL
- QuickTime
- VRML (exclusive of any associated Java applets or JavaScript scripts)

The following are outside the scope of the mobile code requirements:

- Scripts and applets embedded in or linked to web pages and executed in the context of the web server.  Examples of this are Java servlets, Java Server pages, CGI, Active Server Pages, CFML, PHP, SSI, server-side JavaScript, server-side LotusScript.
- Local programs and command scripts 
- Distributed object-oriented programming systems (e.g., CORBA, DCOM).
- Software patches, updates, including self-extracting updates - software updates that must be invoked explicitly by the user are outside the mobile code policy.  Examples of technologies in this area include: Netscape SmartUpdate, Microsoft Windows Update, Netscape web browser plug-ins and Linux.

If other types of mobile code technologies are present that are not listed here, a written waiver must be granted by the CIO (allowing use of emerging mobile code technology). Also uncategorized mobile code must be submitted for AO approval.",None,SV-85031r2_rule,F-76645r1_fix,Remove uncategorized or emerging mobile code from the application or obtain a waiver and risk acceptance to operate.,C-70863r2_chk,"Review the application documentation and interview application administrator.

Determine what mobile code types are used by the application.

If uncategorized mobile code types are found, ask the application administrator to provide the documented waiver and risk acceptance. If the application is using uncategorized or emerging mobile code and there is no waiver provided, this is a finding."
V-27120,medium,Applications must support organizational requirements to employ cryptographic mechanisms to protect information in storage.,"When data is written to digital media such as, hard drives, mobile computers, external/removable hard drives, personal digital assistants, flash/thumb drives, etc., there is risk of data loss and data compromise. 

An organizational assessment of risk guides the selection of media and associated information contained on that media requiring restricted access. Organizations need to document in policy and procedures, the media requiring restricted access, individuals authorized to access the media, and the specific measures taken to restrict access. 

Fewer protection measures are needed for media containing information determined by the organization to be in the public domain, to be publicly releasable, or to have limited or no adverse impact if accessed by other than authorized personnel. In these situations, it is assumed the physical access controls where the media resides provide adequate protection. 

As part of a defense-in-depth strategy, the organization considers routinely encrypting information at rest on selected secondary storage devices. The employment of cryptography is at the discretion of the information owner/steward. The selection of the cryptographic mechanisms used is based upon maintaining the confidentiality and integrity of the information. 

The strength of mechanisms is commensurate with the classification and sensitivity of the information.",None,SV-34417r1_rule,None,None,None,None
V-27027,medium,Applications must meet organizational requirements to implement an information system isolation boundary that minimizes the number of non-security functions included within the boundary containing security functions.,"The information system isolates security functions from non-security functions by means of an isolation boundary (implemented via partitions and domains) controlling access to and protecting the integrity of, the hardware, software, and firmware that perform those security functions. The information system maintains a separate execution domain (e.g., address space) for each executing process.",None,SV-34321r1_rule,None,None,None,None
V-70345,medium,"A Configuration Control Board (CCB) that meets at least every release cycle, for managing the Configuration Management (CM) process must be established.","Software Configuration Management (SCM) is very important in tracking code releases, baselines, and managing access to the configuration management repository. The SCM plan identifies what should be under configuration management control. Without an SCM plan code, and a CCB, releases can be tracked and vulnerabilities can be inserted intentionally or unintentionally into the code base of the application.

This requirement is intended to be applied to application developers or organizations responsible for code management or who have and operate an application CM repository.",None,SV-84967r1_rule,F-76581r1_fix,Setup and maintain a Configuration Control Board.,C-70799r1_chk,"Interview the application representative and determine if application development is performed on site by the organization.

If application development is not done in house, the requirement is not applicable.

If so, determine if a CCB exists. Ask about the membership of the CCB, and identify the primary members. Ask if there is CCB charter documentation.

Interview the application representative and determine how often the CCB meets.

Ask if there is CCB charter documentation. The CCB charter documentation should indicate how often the CCB meets.

If there is no charter documentation, ask when the last time the CCB met and when was the last release of the application.

CCBs do not have to physically meet, and the CCB chair may authorize a release based on phone and/or e-mail conversations.

If there is no evidence of CCB activity or meetings prior to the last release cycle, this is a finding."
V-26925,medium,Applications must enforce password minimum lifetime restrictions.,"Password minimum lifetime is defined as:  the minimum period of time, (typically in days) a user's password must be in effect before the user can change it. 

Restricting this setting limits the user's ability to change their password. Passwords need to be changed at specific policy based intervals, however if the application allows the user to immediately and continually change their password then the password could be repeatedly changed in a short period of time so as to defeat the organizations policy regarding password reuse.

This would allow users to keep using the same password over and over again by immediately changing their password X number of times.  This would effectively negate password policy. ",None,SV-34205r1_rule,None,None,None,None
V-57527,medium,The application server must provide a log reduction capability that supports on-demand reporting requirements.,"The ability to generate on-demand reports, including after the log data has been subjected to log reduction, greatly facilitates the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.

Log reduction is a process that manipulates collected log information and organizes such information in a summary format that is more meaningful to analysts. The report generation capability provided by the application must support on-demand (i.e., customizable, ad-hoc, and as-needed) reports.

To fully understand and investigate an incident within the components of the application server, the application server, when providing a reduction capability, must provide an on-demand reporting capability.",None,SV-71803r2_rule,F-62595r1_fix,Configure the application server to provide and utilize log reduction with on-demand reporting.,C-58235r1_chk,"Review application server product documentation and server configuration to determine if the application server provides a log reduction capability with on-demand report.

If the application server does not provide log reduction with on-demand reporting, this is a finding."
V-69455,medium,The application must shut down by default upon audit failure (unless availability is an overriding concern).,"It is critical that when the application is at risk of failing to process audit logs as required, it take action to mitigate the failure. Audit processing failures include: software/hardware errors; failures in the audit capturing mechanisms; and audit storage capacity being reached or exceeded. Responses to audit failure depend upon the nature of the failure mode.

When availability is an overriding concern, other approved actions in response to an audit failure are as follows: 

(i) If the failure was caused by the lack of audit record storage capacity, the application must continue generating audit records if possible (automatically restarting the audit service if necessary), overwriting the oldest audit records in a first-in-first-out manner.

(ii) If audit records are sent to a centralized collection server and communication with this server is lost or the server fails, the application must queue audit records locally until communication is restored or until the audit records are retrieved manually. Upon restoration of the connection to the centralized collection server, action should be taken to synchronize the local audit data with the collection server.",None,SV-84077r1_rule,F-75631r1_fix,Configure the application to cease processing if the audit system fails or configure the application to continue logging in a manner that compensates for the audit failure.,C-69873r1_chk,"Review system documentation and interview application administrator for details regarding logging configuration.

Identify application shut down capability regarding audit processing failure events.  Locate and verify application logging settings that specify the application will halt processing on detected audit failure.

If ISSO approval to continue operating and not shut down the application upon an audit failure exists and is documented, validate the application is configured as follows:

If logging locally and the failure is attributed to a lack of disk space:

Ensure the application is configured to overwrite the oldest logs first so as to maintain the most up to date audit events in the event of an audit failure.

When logging centrally:

Ensure the application is configured to locally spool/queue audit events in the event an audit failure is detected with the centralized system.

If the application does not shut down processing when an audit failure is detected, or if the application does not take steps needed to ensure audit events are not lost due to audit failure, this is a finding."
V-26907,medium,The application must use organization-defined replay-resistant authentication mechanisms for network access to privileged accounts.,"An authentication process resists replay attacks if it is impractical to achieve a successful authentication by recording and replaying a previous authentication message. 

Techniques used to address this include protocols using nonce's (e.g., numbers generated for a specific one time use) or challenges (e.g., TLS, WS_Security), and time synchronous or challenge-response one-time authenticators. ",None,SV-34187r1_rule,None,None,None,None
V-70301,medium,The ISSO must report all suspected violations of IA policies in accordance with DoD information system IA procedures.,"Violations of IA policies must be reviewed and reported. If there are no policies regarding the reporting of IA violations, IA violations may not be tracked or addressed in a proper manner.",None,SV-84923r1_rule,F-76537r1_fix,Create and maintain a policy to report IA violations.,C-70777r1_chk,"Interview the application representative and review the SOPs to ensure that violations of IA policies are analyzed and reported.
 
If there is no policy for reporting IA violations, this is a finding."
V-70289,medium,Unsigned Category 1A mobile code must not be used in the application in accordance with DoD policy.,"Use of un-trusted Level 1A mobile code technologies can introduce security vulnerabilities and malicious code into the client system.

1A code is defined as:

- ActiveX controls
- Mobile code script (JavaScript, VBScript)
- Windows Scripting Host (WSH) (downloaded via URL or email)

When JavaScript and VBScript execute within the browser they are Category 3, however, when they execute in WSH, they are 1A.",None,SV-84911r1_rule,F-76525r1_fix,Configure the application so Category 1A mobile code is signed.,C-70765r1_chk,"Review the application documentation and interview the application administrator to identify any mobile code that is provided by the application for client consumption.

If the application does not contain mobile code, or if the mobile code executes within the client browser, this is not applicable.

The URL of the application must be added to the Trusted Sites zone. This is accomplished via the Tools, Internet Options, and “Security” Tab.

Select the “Trusted Sites” zone.
Click the “sites” button.
Enter the URL into the text box below the “Add this site to this zone” message.
Click ""Add”.
Click “OK”.

Note: This requires administrator privileges to add URL to sites on a STIG compliant workstation.

Next, test the application. This testing should include functional testing from all major components of the application.

If mobile code is in use, the browser will prompt to download the control. At the download prompt, the browser will indicate that code has been digitally signed.

If the code has not been signed or the application warns that a control cannot be invoked due to security settings, this is a finding."
V-70173,low,"The application must have a process, feature or function that prevents removal or disabling of emergency accounts. ","Emergency accounts are administrator accounts which are established in response to crisis situations where the need for rapid account activation is required. Therefore, emergency account activation may bypass normal account authorization processes.

If these accounts are automatically disabled, system maintenance during emergencies may not be possible, thus adversely affecting system availability.

Emergency accounts are different from infrequently used accounts (i.e., local logon accounts used by system administrators when network or normal logon/access is not available). Infrequently used accounts also remain available and are not subject to automatic termination dates. However, an emergency account is normally a different account which is created for use by vendors or system maintainers.

To address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.",None,SV-84795r1_rule,F-76409r1_fix,Identify accounts that are created in an emergency situation and ensure procedures or processes are in place to prevent disabling or deleting the account while the emergency is underway.,C-70649r1_chk,"Review the application documentation and interview the application administrator. Identify if emergency accounts are ever used. 

If emergency accounts are not used, this requirement is not applicable.

If emergency accounts are used, validate a procedure, process, feature or function exists that will prevent the emergency account from being deleted or disabled during a crisis situation.

Examples include but are not limited to adding a flag to the account to ensure it is not deleted during a specified emergency period or placing the account in a designated group that is monitored and controlled in accordance with the crisis.

If a process, procedure, function or feature designed to prevent emergency accounts from being  deleted or disabled during a crisis situation is not available, this is a finding."
V-26730,medium,The application must automatically audit account disabling actions and notify appropriate individuals.,"When application accounts are disabled, user accessibility is affected.  Accounts are utilized for identifying individual application users or for identifying the application processes themselves. 

In order to detect and respond to events affecting user accessibility and application processing, applications must audit account disabling actions and, as required, notify the appropriate individuals, so they can investigate the event.  

Such a capability greatly reduces the risk that application accessibility will be negatively affected for extended periods of time and provides logging that can be used for forensic purposes.  

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms meeting or exceeding access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality. 

Examples of enterprise level authentication/access mechanisms include but are not limited to, Active Directory and LDAP.",None,SV-33978r1_rule,None,None,None,None
V-6142,medium,"The designer will ensure all access authorizations to data are revoked prior to initial assignment, allocation or reallocation to an unused state.","DoD data may be compromised if applications do not protect residual data in objects when they are allocated to an unused state. Access authorizations to data should be revoked prior to initial assignment, allocation or reallocation to an unused state because subsequent use of the object could allow access to the residual data.",['ECRC-1'],SV-6142r1_rule,F-17013r1_fix,"Revoke access authorizations to data revoked prior to initial assignment, allocation, or reallocation, to an unused state.",C-2956r1_chk,"Ask the application for the design document. Review the design document to ensure the application handles objects so that no residual data exists when reusing objects.  No information, including encrypted representations of information, produced by a prior actions is available to any subsequent use of the object. There should be no residual data from the former object.

Verify the design document objects which are reused within the application do not contain any residual information.

1) If the design document does not exist or does not address object reuse, it is a finding."
V-57405,medium,The application server management interface must display an explicit logout message to users indicating the reliable termination of authenticated communications sessions.,"Providing a logout capability to the user allows the user to explicitly close a session and free those resources used during the session.

If a user cannot explicitly end an application session, the session may remain open and be exploited by an attacker; this is referred to as a zombie session.

The attacker will then have access to the application server management functions without going through the user authentication process.

To inform the user that the session has been reliably closed, a logout message must be displayed to the user.",None,SV-71677r2_rule,F-62443r1_fix,Configure the application server management interface to display an explicit logout message to users.,C-58079r1_chk,"Review application server documentation and configuration settings to determine if the application server management interface displays a logout message.

If the application server management interface does not display a logout message, this is a finding."
V-69291,medium,"The application must ensure if a OneTimeUse element is used in an assertion, there is only one of the same used in the Conditions element portion of an assertion.","Multiple <OneTimeUse> elements used in a SAML assertion can lead to elevation of privileges, if the application does not process SAML assertions correctly.",None,SV-83913r1_rule,F-75461r1_fix,"When using OneTimeUse elements in a SAML assertion only allow one, OneTimeUse element to be used in the conditions element of a SAML assertion.",C-69699r1_chk,"Ask the application representative for the design document.

Review the design document for web services using SAML assertions.

If the application does not utilize SAML assertions, this check is not applicable.

Examine the contents of a SOAP message using the OneTimeUse element; all messages should contain only one instance of a <OneTimeUse> element in a SAML assertion. This can be accomplished using a protocol analyzer such as Wireshark.

If SOAP message uses more than one, OneTimeUse element in a SAML assertion, this is a finding."
V-21500,medium,"The designer will ensure the application does not have CSRF vulnerabilities.  
","Cross Site Request Forgery (CSRF) is an attack where an end user is previously authenticated to a specific website and the user through social engineering (e.g., e-mail or chat) launches a hyperlink which executes unwanted actions on a website. A CSRF attack may execute any web site request on behalf of the user leading to compromise of the user’s data.",['DCSQ-1'],SV-23685r1_rule,F-22999r1_fix,Add a nonce to web forms every time the URL is requested.  The nonce is in addition to the standard session identifier.,C-25722r1_chk,"Ask the application representative for code review results from the entire application. This can be provided as results from an automated code review tool.  
 
If the results are provided from a manual code review, the application representative will need to demonstrate how CSRF vulnerabilities are identified during code reviews. 
 
1) If the results are not provided or the application representative cannot demonstrate how manual code reviews are performed to identify CSRF, it is a finding.
 

"
V-16794,medium,The designer will ensure the application uses mechanisms assuring the integrity of all transmitted information (including labels and security parameters).,"Data is subject to manipulation and other integrity related attacks whenever that data is transferred across a network.  To protect data integrity during transmission, the application must implement mechanisms to ensure the integrity of all transmitted information.  All transmitted information means that the protections are not restricted to just the data itself.  Protection mechanisms must be extended to include data labels, security parameters or metadata if data protection requirements specify.  Modern web application data transfer methods can be complex and are not necessarily just point to point in nature.  Service Oriented Architecture (SOA) and RESTFUL web services allow for XML based application data to be transmitted in a manner similar to network traffic wherein the application data is transmitted along multiple servers hops.  In such cases, point to point protection methods like TLS or SSL may not be the best choice for ensuring data integrity and alternative data integrity protection methods like XML Integrity Signature protections where the XML payload itself is signed may be required as part of the application design.   Overall application design and architecture must always be taken into account when establishing data integrity protection mechanisms.  Custom-developed solutions that provide a file transfer capability should implement data integrity checks for incoming and outgoing files.  Transmitted information requires mechanisms to ensure the data integrity (e.g. digital signatures, SSL, TLS or cryptographic hashing).  ","['ECTM-1', 'ECTM-2']",SV-17794r2_rule,F-17015r1_fix,Implement integrity mechanisms for transmission of both incoming and outgoing data.,C-17782r2_chk,"Ask the application representative to demonstrate the application support mechanisms assuring the integrity of all transmitted information to include labels and security parameters. Ask the application representative to login and demonstrate the application support integrity mechanisms for transmission of both incoming and outgoing files and any transmitted data. For example, hashing/digital signature and cyclic redundancy checks (CRCs) can be used to confirm integrity on data streams and transmitted files. 
 
1) If the application does not support integrity mechanisms for any transmitted data, this is a finding.

2) If the application does not support integrity mechanisms for file transmission, this is a finding. 

*Note: These checks apply to all data transmitted by REST-styled or SOAP-based Web Services."
V-27087,medium,Applications providing malicious code protection must support organizational requirements to be configured to perform organization-defined action(s) in response to malicious code detection.,"Malicious code protection mechanisms include but are not limited to anti-virus and malware detection software. In order to minimize potential negative impact to the organization that can be caused by malicious code, it is imperative that malicious code is identified and eradicated. 

Applications providing this capability must be able to perform actions in response to detected malware.  Responses include, but are not limited to, quarantine, deletion, and alerting.

Malicious code includes, viruses, worms, Trojan horses, and Spyware. ",None,SV-34382r1_rule,None,None,None,None
V-26777,medium,Applications must uniquely identify destination domains for information transfer.,"The application enforces approved authorizations for controlling the flow of information within the system and between interconnected systems in accordance with applicable policy. 

Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

Specific examples of flow control enforcement can be found in boundary protection devices (e.g., proxies, gateways, guards, encrypted tunnels, firewalls, and routers) employing rule sets or establish configuration settings restricting information system services, provide a packet-filtering capability based on header information, or message-filtering capability based on content (e.g., using key word searches or document characteristics). 

Attribution, (e.g., the ability to attribute actions to certain individuals) is a critical component of a security concept of operations. The ability to identify source and destination points for information flowing in an information system, allows forensic reconstruction of events when required, and increases policy compliance by attributing policy violations to specific organizations/individuals.  
",None,SV-34027r1_rule,None,None,None,None
V-16791,low,The designer will ensure transaction based applications implement transaction rollback and transaction journaling.,"Transaction based systems must have transaction rollback and transaction journaling, or technical equivalents implemented to ensure the system can recover from an attack or faulty transaction data. Otherwise,  a denial of service condition could result. ",['ECDC-1'],SV-17791r1_rule,F-17008r1_fix,Implement rollback and journaling features in the application or incorporate products with rollback and journaling features.,C-17779r1_chk,"If the application is not a transaction based application that stores and retrieves data, this check is not applicable. 
 
Ask the application representative if the application uses a database to store information. If the application utilizes Oracle, SYBASE, or Microsoft SQL Server, then support for journaling and rollback is already present in the tools. 
 
Note: Microsoft Access does not support journaling and rollback.  If Microsoft Access is used, ask the application representative to demonstrate the rollback and journaling features of the application.
 
1) If the application representative cannot demonstrate support for journaling and rollback, it is a finding."
V-35415,medium,The application server must invalidate session identifiers upon user logout or other session termination.,"If communications sessions remain open for extended periods of time even when unused, there is the potential for an adversary to hijack the session and use it to gain access to the device or networks to which it is attached. Terminating sessions after a logout event or after a certain period of inactivity is a method for mitigating the risk of this vulnerability. When a user management session becomes idle, or when a user logs out of the management interface, the application server must terminate the session.",None,SV-46702r3_rule,F-39959r2_fix,Configure the application server to terminate administrative sessions upon logout or any other organization- or policy-defined session termination events.,C-43761r2_chk,"Review the application server configuration and organizational policy to determine if the system is configured to terminate administrator sessions upon administrator logout or any other organization- or policy-defined session termination events, such as idle time limit exceeded.

If the configuration is not set to terminate administrator sessions per defined events, this is a finding."
V-70381,medium,The changes to the application must be assessed for IA and accreditation impact prior to implementation.,"When changes are made to an application, either in the code or in the configuration of underlying components such as the OS or the web or application server, there is the potential for security vulnerabilities to be opened up on the system.

IA assessment of proposed changes is necessary to verify security integrity is maintained within the application.",None,SV-85003r1_rule,F-76617r1_fix,Review IA impact to the system prior to implementing changes.,C-70835r1_chk,"Interview the application and system administrators and determine if changes to the application are assessed for IA impact prior to implementation.

Review the CCB process documentation to ensure potential changes to the application are evaluated to determine impact. An informal group may be tasked with impact assessment of upcoming version changes.

If IA impact analysis is not performed, this is a finding."
V-70237,medium,"XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways.","DoS is a condition when a resource is not available for legitimate users. When this occurs, the organization either cannot accomplish its mission or must operate at degraded capacity.

XML-based applications are susceptible to DoS attacks due to the nature of XML parsing being processor intensive and complicated.

Best practice for parsing XML to avoid DoS include:

- Using a proven XML parser
- Using an XML gateway that provides DoS protection
- Using parser options that provide limits on recursive payloads, oversized payloads, and entity expansion.

This requirement addresses the configuration of applications to mitigate the impact of DoS attacks that have occurred or are ongoing on application availability. For each application, known and potential DoS attacks must be identified and solutions for each type implemented. A variety of technologies exist to limit or, in some cases, eliminate the effects of DoS attacks (e.g., limiting processes or restricting the number of sessions the application opens at one time). Employing increased capacity and bandwidth, combined with service redundancy, may reduce the susceptibility to some DoS attacks.",None,SV-84859r1_rule,F-76473r1_fix,"Implement:

- Validation against recursive payloads
- Validation against oversized payloads
- Protection against XML entity expansion
- Validation against overlong element names
- Optimized configuration for maximum message throughput in order to ensure DoS attacks against web services are limited.",C-70713r1_chk,"Review the application architecture documentation and interview the application administrator to identify what steps have been taken to protect the XML aspect of the application from DoS attacks.

If the application does not contain or utilize XML, the requirement is not applicable.

Ask the application administrator to demonstrate how the application is configured to provide the following protections:

- Validation against recursive payloads
- Validation against oversized payloads
- Protection against XML entity expansion
- Validation against overlong element names
- Optimized configuration for maximum message throughput

If the application administrator cannot demonstrate how these protections are implemented either within the application itself or by third-party tools or utilities like an XML gateway, this is a finding."
V-26788,medium,Applications must enforce information flow using dynamic control based on policy that allows or disallows information flow based on changing conditions or operational considerations.,"Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

A few examples of flow control restrictions include: keeping export controlled information from being transmitted in the clear to the Internet, blocking outside traffic claiming to be from within the organization and not passing any web requests to the Internet that are not from the internal web proxy. Information flow control policies and enforcement mechanisms are commonly employed by organizations to control the flow of information between designated sources and destinations (e.g., networks, individuals, devices) within information systems and between interconnected systems. 

Flow control is based on the characteristics of the information and/or the information path. Flow control is also based on the characteristics of the information and/or the information path. Specific examples of flow control enforcement can be found in boundary protection devices (e.g., proxies, gateways, guards, encrypted tunnels, firewalls, and routers) employing rule sets or establish configuration settings restricting information system services, provide a packet-filtering capability based on header information, or message-filtering capability based on content (e.g., using key word searches or document characteristics).  ",None,SV-34038r1_rule,None,None,None,None
V-16847,medium,"The IAO will ensure an account management process is implemented, verifying only authorized users can gain access to the application, and individual accounts designated as inactive, suspended, or terminated are promptly removed. 
","A comprehensive account management process will ensure that only authorized users can gain access to applications and that individual accounts designated as inactive, suspended, or terminated are promptly deactivated. Such a process greatly reduces the risk that accounts will be misused, hijacked, or data compromised.",['IAAC-1'],SV-17847r1_rule,F-17169r1_fix,Establish an account management process.,C-17860r1_chk,"Interview the application representative to verify that a documented process exists for user and system account creation, termination, and expiration.

Obtain a list of recently departed personnel and verify that their accounts were removed or deactivated on all systems in a timely manner (e.g., less than two days).
 
1) If a documented account management process does not exist or unauthorized users have active accounts, it is a finding."
V-26786,medium,"Applications must enforce information flow control using protected processing domains (e.g., domain type-enforcement) as a basis for flow control decisions.","Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

Information flow enforcement mechanisms compare security attributes on all information (data content and data structure), source and destination objects, and respond appropriately (e.g., block, quarantine, alert administrator) when the mechanisms encounter information flows not explicitly allowed by the information flow policy. Information flow enforcement using explicit security attributes can be used, for example, to control the release of certain types of information. ",None,SV-34036r1_rule,None,None,None,None
V-69509,medium,"The application must have the capability to prevent the installation of patches, service packs, or application components without verification the software component has been digitally signed using a certificate that is recognized and approved by the organization.","Changes to any software components can have significant effects on the overall security of the application. Verifying software components have been digitally signed using a certificate that is recognized and approved by the organization ensures the software has not been tampered with and that it has been provided by a trusted vendor.

Accordingly, patches, service packs, or application components must be signed with a certificate recognized and approved by the organization.

Verifying the authenticity of the software prior to installation validates the integrity of the patch or upgrade received from a vendor. This ensures the software has not been tampered with and that it has been provided by a trusted vendor. Self-signed certificates are disallowed by this requirement. The application should not have to verify the software again. This requirement does not mandate DoD certificates for this purpose; however, the certificate used to verify the software must be from an approved CA.

If this capability is not present, the vendor must provide a cryptographic hash value that can be verified by a system administrator prior to installation.",None,SV-84131r1_rule,F-75683r1_fix,"Design and configure the application to have the capability to prevent unsigned patches and packages from being installed.

Provide a cryptographic hash value that can be verified by a system administrator prior to installation.",C-69927r1_chk,"Review the application documentation and interview the application administrator to determine the process and commands used for patching the application.

Access application configuration settings.

Review commands and procedures used to patch the application and ensure a capability exists to prevent unsigned patches from being applied.

If the application is not capable of preventing installation of patches and packages that are not signed, or if the vendor does not provide a cryptographic hash value that can be manually checked prior to installation, this is a finding."
V-27023,medium,Only a Honey Pot information system and/or application must include components that proactively seek to identify web-based malicious code. Honey Pot systems must be not be shared or used for any other purpose other than described.,"A Honey Pot is an organization designated information system and/or application that includes components specifically designed to be the target of malicious attacks for the purpose of detecting, deflecting, and analyzing such attacks. ",None,SV-34317r1_rule,None,None,None,None
V-69321,medium,The application must automatically audit account enabling actions.,"When application accounts are enabled, user accessibility is affected. Accounts are utilized for identifying individual application users or for identifying the application processes themselves. In order to detect and respond to events affecting user accessibility and application processing, applications must audit account removal actions and, as required, notify the appropriate individuals, so they can investigate the event. Such a capability greatly reduces the risk that application accessibility will be negatively affected for extended periods of time and provides logging that can be used for forensic purposes.

Application developers are encouraged to integrate their applications with enterprise-level authentication/access/audit mechanisms such as Syslog, Active Directory or LDAP.",None,SV-83943r1_rule,F-75495r1_fix,"Configure the application to write a log entry when a user account is enabled. 

At a minimum, ensure account name, date and time of the event are recorded.",C-69733r1_chk,"Examine the application documentation or interview the application representative to identify how the application users are managed.

Identify the location of the audit logs and review the end of the logs.

Access the user account management functionality and enable a test user account.

Examine the log file again and determine if the account enable event was logged. The information logged should, at a minimum, include enough detail to determine which account was enabled and when.

If the account enabling event information was not logged, this is a finding."
V-69307,medium,The application must automatically audit account modification.,"One way for an attacker to establish persistent access is for the attacker to modify or copy an existing account. Auditing of account modification is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail documents the modification of application user accounts. Such a process greatly reduces the risk that accounts will be surreptitiously modified and provides logging that can be used for forensic purposes.

To address account requirements and to ensure application accounts follow requirements consistently, application developers are strongly encouraged to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.",None,SV-83929r1_rule,F-75481r1_fix,"Configure the application to write a log entry when a user account is modified.

At a minimum, ensure account name, date and time of the event are recorded.",C-69719r1_chk,"Examine the application documentation to identify how the application users are managed.

Interview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.

If the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.

Identify the location of the audit logs and review the end of the logs.

Access the user account management functionality and modify a test user account.

Examine the log file again and determine if the account event was logged. The information logged should, at a minimum, include enough detail to determine which account was modified and when.

If the account modification event information was not logged, this is a finding."
V-69493,medium,The application must protect audit tools from unauthorized deletion.,"Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.

Applications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit tools.

Audit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.",None,SV-84115r1_rule,F-75669r1_fix,Configure the application to protect audit tools from unauthorized deletions. Limit users to roles that are assigned the rights to edit or delete audit tools and establish file permissions that control access to the audit tools and audit tool capabilities and configuration settings.,C-69911r1_chk,"Review the system documentation and interview the application administrator for details regarding application architecture, audit methods and provided audit tools.

Identify the application audit tools and their locations.

If the application does not provide a distinct audit tool oriented functionality that is a separate tool with an ability to view and manipulate log data, this requirement is not applicable.

Identify the methods used for implementing an audit tool functionality that is separate from the application. Typical methods are file-oriented in nature, e.g., the application includes a separate executable file or library that when invoked allows users to view and manipulate logs.

Identify the users with the rights to delete the audit tools. This capability is normally reserved for admin staff.

Review file system permissions to ensure the application audit components such as executable files and libraries are protected by adequate file permission restrictions.

File permissions must be configured to limit access to only those users who have been identified and whose access has been approved.

If file permissions are configured to allow unapproved deletions of the audit tools, this is a finding."
V-26735,medium,The application must enforce approved authorizations for logical access to the system in accordance with applicable policy.,"Strong access controls are critical to securing application data. Access control policies (e.g., identity-based policies, role-based policies, attribute-based policies) and access enforcement mechanisms (e.g., access control lists, access control matrices, cryptography) must be employed by applications, when applicable, to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, domains) in the information system.

Consideration should be given to the implementation of an audited, explicit override of automated mechanisms in the event of emergencies or other serious events. If encryption of stored information is employed as an access enforcement mechanism, the cryptography used is FIPS 140-2 (as amended) compliant.
",None,SV-33983r1_rule,None,None,None,None
V-57427,medium,"The application server must provide an immediate warning to the SA and ISSO, at a minimum, when allocated log record storage volume reaches 75% of maximum log record storage capacity.","It is critical for the appropriate personnel to be aware if a system is at risk of failing to process logs as required.  Log processing failures include software/hardware errors, failures in the log capturing mechanisms, and log storage capacity being reached or exceeded.  Notification of the storage condition will allow administrators to take actions so that logs are not lost.  This requirement can be met by configuring the application server to utilize a dedicated logging tool that meets this requirement.",None,SV-71699r2_rule,F-62465r1_fix,Configure the application server to provide an alert to the SA and ISSO when allocated log record storage volume reaches 75% of maximum log record storage capacity.,C-58103r1_chk,"Review the configuration settings to determine if the application server logging system provides a warning to the SA and ISSO when 75% of allocated log record storage volume is reached.

If designated alerts are not sent, or the application server is not configured to use a dedicated logging tool that meets this requirement, this is a finding."
V-26933,medium,The application must protect the audit records generated as a result of remote accesses to privileged accounts and the execution of privileged functions.,"Protection of audit records and audit data is of critical importance.  Care must be taken to ensure privileged users cannot circumvent audit protections put in place. 

Auditing might not be reliable when performed by an information system which the user being audited has privileged access to. 

The privileged user could inhibit auditing or directly modify audit records.  To prevent this from occurring, privileged access shall be further defined between audit-related privileges and other privileges, thus, limiting the users with audit-related privileges. 

Reducing the risk of audit compromises by privileged users can also be achieved, for example, by performing audit activity on a separate information system where the user in question has limited access or by using storage media that cannot be modified (e.g., write-once recording devices).",None,SV-34213r1_rule,None,None,None,None
V-16849,medium,"The IAO will ensure the application's users do not use shared accounts. 
",Group or shared accounts for application access may be used only in conjunction with an individual authenticator. Group accounts do not allow for proper auditing of who is accessing the application and security incidents cannot be attributed to specific individuals. ,['IAGA-1'],SV-17849r1_rule,F-17171r1_fix,Remove group or shared accounts.,C-17862r1_chk,"Ask the application representative if a group of users share login information to the system.  
 
1) If an account that belongs to a group that can login to the system, this is a finding.  

2) If there is a login shared by more than one user, this is a finding."
V-57487,medium,"The application server must provide the capability for organization-identified individuals or roles to change the logging to be performed on all application components, based on all selectable event criteria within organization-defined time thresholds.","Log records can be generated from various components within the application server. The list of logged events is the set of events for which logs are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating log records (i.e., logable events).  Application server log events may include, but are not limited to, HTTP, Database, and XML parsing activity.

The application server must be capable of allowing defined individuals or roles to change the logging to be performed on all application server components, based on all selectable event criteria during a defined time threshold.  The time threshold can be defined by such events as a change in the threat environment.  The ability to change logging parameters during the threat would allow important forensic information to be gathered during the time duration of the threat.",None,SV-71763r2_rule,F-62555r1_fix,"Configure the application server to provide the capability for organization-identified individuals or roles to change the logging to be performed on all application components, based on all selectable event criteria within organization-defined time thresholds.",C-58195r1_chk,"Review the application server configuration to determine if the application server provides the capability for organization-identified individuals or roles to change the logging to be performed on all application components, based on all selectable event criteria within organization-defined time thresholds.

If the application server cannot meet this requirement, this is a finding."
V-26978,medium,The application must use multifactor authentication for local access to non-privileged accounts.,"Multifactor authentication is defined as: using two or more factors to achieve authentication. 

Factors include: 
(i) something a user knows (e.g., password/PIN); 
(ii) something a user has (e.g., cryptographic identification device, token); or 
(iii) something a user is (e.g., biometric). 

A non-privileged account is defined as an information system account with authorizations of a regular or non-privileged user. 

Local Access is defined as access to an organizational information system by a user (or process acting on behalf of a user) communicating through a direct connection without the use of a network. ",None,SV-34266r1_rule,None,None,None,None
V-69555,high,The application must enforce a minimum 15-character password length.,"The shorter the password, the lower the number of possible combinations that need to be tested before the password is compromised.

Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.

Examples of situations where a user ID and password might be used include but are not limited to:

- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.

- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.

and

- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.

Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. Password length is one factor of several that helps to determine strength and how long it takes to crack a password. The shorter the password, the lower the number of possible combinations that need to be tested before the password is compromised.

Use of more characters in a password helps to exponentially increase the time and/or resources required to compromise the password.",None,SV-84177r1_rule,F-75729r1_fix,Configure the application to require 15 characters in the password.,C-69973r1_chk,"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.

If the application does not use passwords, the requirement is not applicable.

Access the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.

When prompted to provide the password, attempt to create a password shorter than 15 characters in length.

If a password shorter than 15 characters can be created, this is a finding."
V-70407,medium,"If the application contains classified data, a Security Classification Guide must exist containing data elements and their classification.","Without a classification guide the marking, storage, and output media of classified material can be inadvertently mixed with unclassified material, leading to its possible loss or compromise.",None,SV-85029r1_rule,F-76643r1_fix,Create and maintain a security classification guide.,C-70861r1_chk,"If the application does not process classified information, this check is not applicable.
 
The application may already be covered by a higher level program or other classification guide. If the classification guide is not written specifically to the application, the sensitive application data should be reviewed to determine whether it is contained in the classification guide.

DoD 5200.01R identifies requirements for security classification and/or declassification guides.

http://www.dtic.mil/whs/directives/corres/pdf/520001_vol1.pdf

Security classification guides shall provide the following information:

Identify specific items, elements, or categories of information to be protected.

State the specific classification to be assigned to each item or element of information and, when useful, specify items of information that are unclassified.

Provide declassification instructions for each item or element of information, to include the applicable exemption category for information exempted from automatic declassification.

State a concise reason for classification for each item, element, or category of information that, at a minimum, cites the applicable classification categories in Section 1.5 of E.O. 12958.

Identify any special handling caveats that apply to items, elements, or categories of information.

Identify, by name or personal identifier and position title, the original classification authority approving the guide and the date of that approval.

Provide a point-of-contact for questions about the guide and suggestions for improvement.

For information exempted from automatic declassification because its disclosure would reveal foreign government information or violate a statute, treaty, or international agreement, the security classification guide will identify the government or specify the applicable statute, treaty, or international agreement, as appropriate.

If the security classification guide does not exist, or does not contain application data elements and their classification, this is a finding."
V-19693,medium,"The designer will ensure execution flow diagrams are created and used to mitigate deadlock and recursion issues.
","To prevent web services from becoming deadlocked, an execution flow diagram should be documented.
",['DCSQ-1'],SV-21834r1_rule,F-23046r1_fix,Create and maintain web service execution flow diagrams.,C-24090r1_chk,"Ask the application representative for execution flow diagrams. Review the execution flow diagrams and determine if all web services are covered in the flow diagrams.

1) If execution flow diagrams do not exist or are not complete, this is a finding."
V-69513,medium,An application vulnerability assessment must be conducted.,"An application vulnerability assessment is a test conducted in order to identify weaknesses and security vulnerabilities that may exist within an application.  The testing must cover all aspects and components of the application architecture.  If an application consists of a web server and a database, then both components must be tested for vulnerabilities to the fullest extent possible.

Vulnerability assessment tests normally utilize a combination of specialized software called application vulnerability scanners as well as custom scripts and manual tests.  In some instances, multiple tools are required in order to test all aspects of application features, functions and architecture.  The vulnerability scanner is typically configured to communicate with the application through the user interface or via an applications communication port.  In addition to using automated tools, manual tests conducted from the OS console such as executing custom scripts or reviewing configuration settings for known vulnerabilities may also be included as part of the test.

Testers will typically utilize application user test accounts in order to test application features and functionality such as adding content, executing queries and completing transactions. The vulnerability testing software utilizes user actions and access as well as a list of known security vulnerabilities in order to detect and identify weak security controls or misconfigurations that could potentially be manipulated by the user or create a security vulnerability.

The Open Web Application Security Project (OWASP) top 10 for 2013 includes the following top issues that should be tested.  The site is available by pointing your browser to https://www.owasp.org. 

A1 Injection
A2 Weak authentication and session management
A3 XSS
A4 Insecure Direct Object References
A5 Security Misconfiguration
A6 Sensitive Data Exposure
A7 Missing Function Level Access Control
A8 Cross Site Request Forgery
A9 Using Components with Known Vulnerabilities
A10 Unvalidated Redirects and Forwards

The OWASP top 10 are categories of tests that can be applied to most but not necessarily all applications and are provided as an example of what to test for.  Scanning tools include a multitude of tests that fall under these categories but may refer to these tests by a different name.

Testing must be conducted on a periodic basis while the application is in production and subsequent to system changes to ensure any changes made to the system do not introduce new security vulnerabilities.",None,SV-84135r1_rule,F-75687r1_fix,"Configure the application vulnerability scanners to test all components of the application, conduct vulnerability scans on a regular basis and remediate identified issues.  Retain scan results for compliance verification.",C-69931r1_chk,"Review the application documentation to understand application architecture.

Interview the application administrator, obtain and review their application vulnerability scanning process.

Request the latest scan results including scan configuration settings.

Review scan configurations and ensure coverage of all application architecture has been tested.  The proper scanning tool or combination of tools must be utilized in order to ensure the full range of application features and functionality is tested. 

For example, if the application includes a web interface and a SQL database, then ensure test results for web and SQL vulnerabilities are provided.  Although web and SQL applications are included as examples and are the prevalent types of applications, this requirement is not intended to be limited to just the aforementioned application architectures.   Ensure test results are provided from all testing tools employed during vulnerability testing.

If high risk security vulnerabilities are identified in the scan results, request subsequent test results that indicate the issues have been fixed or mitigated.

If the high risk issues identified in the report have not been fixed or mitigated to a level accepted by the ISSO and the ISSM, or if the application administrator cannot produce vulnerability security testing results that cover the range of application functionality, this is a finding."
V-57489,medium,"The application server must provide the capability for authorized users to remotely view/hear, in real time, all content related to an established user session.","Without the capability to remotely view/hear all content related to a user session, investigations into suspicious user activity would be hampered. Real-time monitoring allows authorized personnel to take action before additional damage is done. The ability to observe user sessions as they are happening allows for interceding in ongoing events that after-the-fact review of captured content would not allow.",None,SV-71765r2_rule,F-62557r1_fix,"Configure the application server to provide the capability for authorized users to remotely view/hear, in real time, all content related to an established user session.",C-58197r1_chk,"Review the application server documentation to determine if the application server can be configured by authorized users to remotely view/hear, in real time, all content related to an established user session.

If the application server does not have the capability to allow authorized users to remotely view/hear all content related to an established user session, this is a finding."
V-16841,low,"The IAO will review audit trails periodically based on system documentation recommendations or immediately upon system security events. 
","Without access control the data is not secure. It can be compromised, misused, or changed by unauthorized access at any time.",['ECCD-2'],SV-17841r1_rule,F-17162r1_fix,Review audit logs on a periodic basis.,C-17848r1_chk,"Interview application representative and ask for the system documentation that states how often audit logs are reviewed. Also, determine when the audit logs were last reviewed.

1) If the application representative cannot provide system documentation identifying how often the auditing logs are reviewed, or has not audited within the last time period stated in the system documentation, it is a finding."
V-27181,medium,"Applications, when operating as part of a distributed, hierarchical namespace, must provide the means to indicate the security status of child subspaces and (if the child supports secure resolution services) enable verification of a chain of trust among parent and child domains.","This control enables remote clients to obtain origin authentication and integrity verification assurances for the host/service name to network address resolution information obtained through the service.

 A Domain Name System (DNS) server is an example of an information system providing name/address resolution service. Digital signatures and cryptographic keys are examples of additional artifacts. DNS resource records are examples of authoritative data. 

Information systems using technologies other than the DNS to map between host/service names and network addresses provide other means to assure the authenticity and integrity of response data. The DNS security controls are consistent with, and referenced from, OMB Memorandum 08-23. ",None,SV-34480r1_rule,None,None,None,None
V-26908,medium,The application must use organization-defined replay-resistant authentication mechanisms for network access to non-privileged accounts.,"An authentication process resists replay attacks if it is impractical to achieve a successful authentication by recording and replaying a previous authentication message. 

Techniques used to address this include protocols using nonce's (e.g., numbers generated for a specific one time use) or challenges (e.g., TLS, WS_Security), and time synchronous or challenge-response one-time authenticators. ",None,SV-34188r1_rule,None,None,None,None
V-69435,medium,The application must produce audit records that contain information to establish the outcome of the events.,"Without information about the outcome of events, security personnel cannot make an accurate assessment as to whether an attack was successful or if changes were made to the security state of the system.

Event outcomes can include indicators of event success or failure and event-specific results (e.g., the security state of the information system after the event occurred). As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response.

Successful application events are expected to far outnumber errors.   Therefore, success events may be implied by default and not specified in the logs if this behavior is documented.",None,SV-84057r1_rule,F-75611r1_fix,Configure the application to include the outcome of application functions or events.,C-69853r1_chk,"Review system and application documentation to identify application operation and function.

Access the application logs and review the logs to determine if the results of application operations are logged.

Successful application events are expected to far outnumber errors.   Therefore, success events may be implied by default and not specified in the logs if this behavior is documented.

The outcome will be a log record that displays the application event/operation that occurred followed by the result of the operation such as ""ERROR"", ""FAILURE"", ""SUCCESS"" or ""PASS"".

Operation outcomes may also be indicated by numeric code where a ""1"" might indicate success and a ""0"" may indicate operation failure.

If the application does not produce audit records that contain information regarding the results of application operations, this is a finding."
V-26961,medium,Applications must adhere to the principles of least functionality by providing only essential capabilities.,"Information systems are capable of providing a wide variety of functions and services.  Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).  

It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives.  Examples include, but are not limited to:  installing advertising software, demo's or browser plugins not related to requirements or providing a wide array of functionality not required for every mission, yet cannot be disabled. 

Applications must adhere to the principles of least functionality by providing only essential capabilities.",None,SV-34246r1_rule,None,None,None,None
V-69403,medium,"The application must generate audit records when successful/unsuccessful attempts to delete categories of information (e.g., classification levels) occur.","Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Audit records can be generated from various components within the information system (e.g., module or policy filter).",None,SV-84025r1_rule,F-75577r1_fix,Configure the application to create an audit record for both successful and unsuccessful attempts to delete protected categories of information.,C-69819r1_chk,"Review the application documentation and interview the application administrator.

Identify where the application logs are stored.

Identify any data protections that are required.

Identify any categories of data or classification of data.

If the application requirements do not call for compartmentalized data and data protection, this requirement is not applicable.

Authenticate to the application as a regular user. Using application functionality, attempt to delete data that has been assigned to a protected category.

Perform two modification attempts, one successful and one unsuccessful.

Testing this will require obtaining access to test data that has been assigned to a protected category, or having an authorized user access the data for you.

Review the log data and ensure both the successful and unsuccessful deletion attempts are logged.

If the application does not generate an audit record when successful and unsuccessful attempts to delete categories of information occur, this is a finding."
V-26771,medium,"Applications, when transferring information between different security domains, must implement or incorporate policy filters that constrain data object and structure attributes according to organizational security policy requirements. ","Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

Specific examples of flow control enforcement can be found in boundary protection devices (e.g., proxies, gateways, guards, encrypted tunnels, firewalls, and routers) employing rule sets or establish configuration settings restricting information system services, provide a packet-filtering capability based on header information, or message-filtering capability based on content (e.g., using key word searches or document characteristics). 

Examples of constraints include ensuring: (i) character data fields only contain printable ASCII; (ii) character data fields only contain alpha-numeric characters;  (iii) character data fields do not contain special characters; (iv) maximum field sizes and file lengths are enforced based upon organization-defined security policy.",None,SV-34021r1_rule,None,None,None,None
V-26945,medium,The organization must employ automated mechanisms to restrict the use of maintenance tools to authorized personnel only.,"The intent of this control is to address the security-related issues arising from the software brought into the information system specifically for diagnostic and repair actions (e.g., a software packet sniffer introduced for the purpose of a particular maintenance activity).  

This is an organizational requirement to utilize automated mechanisms in order to prevent maintenance tools from being utilized by unauthorized personnel. This requirement does not address application characteristics and does not apply.",None,SV-34227r1_rule,None,None,None,None
V-26964,medium,"The organization must employ automated mechanisms, per organization-defined frequency, to detect the addition of unauthorized components/devices into the information system.","Information deemed to be necessary by the organization to achieve effective property accountability can include: hardware inventory specifications (manufacturer, type, model, serial number, physical location), software license information, information system/component owner, and for a networked component/device, the machine name and network address. 

This is not an application requirement. This requirement is regarding information system component inventory.  The purpose is to require organizations to employ an automated mechanism to inventory and detect when new devices and components are installed into information systems. 
",None,SV-34249r1_rule,None,None,None,None
V-27051,medium,Any software application designed to function as a firewall must be capable employing a default deny all configuration. ,"A firewall default deny is a firewall configuration setting that will force the administrator to explicitly allow network or application traffic rather than allowing all traffic by default.  The purpose is to prevent unmanaged access into the internal network or in the case of an application firewall, to application content, features, or functionality.  ",None,SV-34346r1_rule,None,None,None,None
V-27117,medium,Applications must respond to security function anomalies in accordance with organization-defined responses and alternative action(s).,"The need to verify security functionality applies to all security functions. 

For those security functions not able to execute automated self-tests the organization either implements compensating security controls or explicitly accepts the risk of not performing the verification as required. Information system transitional states include, startup, restart, shutdown, and abort.",None,SV-34414r1_rule,None,None,None,None
V-57399,medium,"The application server must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures.","Preventing non-privileged users from executing privileged functions mitigates the risk that unauthorized individuals or processes may gain unnecessary access to information or privileges.

Restricting non-privileged users also prevents an attacker, who has gained access to a non-privileged account, from elevating privileges, creating accounts, and performing system checks and maintenance.",None,SV-71671r2_rule,F-62437r1_fix,Configure the application server to deny non-privileged users access to and execution of privileged functions.,C-58073r1_chk,"Review application server documentation and configuration to verify that non-privileged users cannot access or execute privileged functions.

Have a user logon as a non-privileged user and attempt to execute privileged functions.

If the user is capable of executing privileged functions, this is a finding."
V-26956,medium,Configuration management applications must employ automated mechanisms to centrally apply configuration settings.,"Configuration settings are the configurable security-related parameters of information technology products that are part of the information system. 

Security-related parameters are those parameters impacting the security state of the system including parameters related to meeting other security control requirements. 

Security-related parameters include: registry settings; account, file, and directory settings (i.e., permissions); and settings for services, ports, protocols, and remote connections.  

Rather than visiting each and every system when making configuration changes, organizations will employ automated tools that can make changes across all systems.  This greatly increases efficiency and manageability of systems and applications in a large scale environment.  

Centrally apply means to apply settings from a centralized location.  In order to accommodate large scale environments, centralized solutions may also employ distributed systems used as configuration management proxies.  This is allowable as long as these systems are centrally managed and controlled as part of the overall configuration management solution.

To support this requirement, configuration management applications will employ automated mechanisms to centrally apply configuration settings and applications in general will ensure they do not hinder the use of such tools.",None,SV-34241r1_rule,None,None,None,None
V-26938,medium,The application must support the organizational requirement to employ automated mechanisms enforcing access restrictions.,"When dealing with access restrictions pertaining to change control, it should be noted, any changes to the hardware, software, and/or firmware components of the information system and/or application can potentially have significant effects on the overall security of the system. 

Accordingly, only qualified and authorized individuals should be allowed to obtain access to information system components for the purposes of initiating changes, upgrades, and modifications.  

Access restrictions for change also include application software libraries. 

Examples of access restrictions include, physical and logical access controls, workflow automation, media libraries, abstract layers (e.g., changes are implemented into a third-party interface rather than directly into the information system component), and change windows (e.g., changes occur only during specified times, making unauthorized changes outside the window easy to discover). ",None,SV-34218r1_rule,None,None,None,None
V-35212,medium,The application server must protect log information from unauthorized deletion.,"If log data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. 

Application servers contain admin interfaces that allow reading and manipulation of log records. Therefore, these interfaces should not allow for unfettered access to those records. Application servers also write log data to log files which are stored on the OS, so appropriate file permissions must also be used to restrict access.

Log information includes all information (e.g., log records, log settings, transaction logs, and log reports) needed to successfully log information system activity. Application servers must protect log information from unauthorized deletion.",None,SV-46499r3_rule,F-39758r2_fix,Configure the application server to protect log information from unauthorized deletion.,C-43584r2_chk,"Review the configuration settings to determine if the application server log features protect log information from unauthorized deletion.

Review file system settings to verify the application server sets secure file permissions on log files to prevent unauthorized deletion.

If the application server does not protect log information from unauthorized deletion, this is a finding."
V-27056,medium,The information system must connect to external networks or information systems only through managed interfaces consisting of boundary protection devices arranged in accordance with an organizational security architecture.,"Managed interfaces employing boundary protection devices include:  proxies, gateways, routers, firewalls, guards, or encrypted tunnels arranged in an effective security architecture (e.g., routers protecting firewalls and application gateways residing on a protected sub-network commonly referred to as a demilitarized zone or DMZ).

This is a boundary control requirement to route traffic through managed firewalls and proxies deployed according to an architectural design.  This is a network configuration issue not an application requirement.",None,SV-34351r1_rule,None,None,None,None
V-26912,medium,Applications managing network connectivity must have the capability to authenticate devices before establishing network connections by using bidirectional authentication that is cryptographically based.,"Device authentication is a solution enabling an organization to manage both users and devices.  

It is an additional layer of authentication ensuring only specific pre-authorized devices operated by specific pre-authorized users can access the network. 

Device authentication requires unique identification and authentication that may be defined by type, by specific device, or by a combination of type and device as deemed appropriate by the organization. 

The application typically uses either shared known information (e.g., Media Access Control [MAC] or Transmission Control Protocol/Internet Protocol [TCP/IP] addresses) for identification or an organizational authentication solution (e.g., IEEE 802.1x and Extensible Authentication Protocol [EAP], Radius server with EAP-Transport Layer Security [TLS] authentication, Kerberos) to identify and authenticate devices on local and/or wide area networks. 

The required strength of the device authentication mechanism is determined by the security categorization of the information system.  

Bidirectional authentication provides a means for both connecting parties to mutually authenticate one another and cryptographically based authentication provides a secure means of authenticating without the use of clear text passwords. ",None,SV-34192r1_rule,None,None,None,None
V-70415,medium,The system must alert an administrator when low resource conditions are encountered.,"In order to prevent DoS type attacks, applications should be monitored when resource conditions reach a predefined threshold. This could indicate the onset of a DoS attack or could be the precursor to an application outage.",None,SV-85037r2_rule,F-76651r1_fix,Implement mechanisms to alert system administrators about a low resource condition.,C-70869r1_chk,"Review the system documentation and interview the application and system administrators.

Examine the system to determine if an automated, continuous on-line monitoring and audit trail creation capability is present with the capability to immediately alert personnel of any unusual or inappropriate activity with potential IA implications, and with a user configurable capability to automatically disable the system if serious IA violations are detected.

If this monitoring capability does not exist, this is a finding."
V-6173,medium,"The IAO will ensure application audit trails are retained for at least 1 year for applications without SAMI data, and 5 years for applications including SAMI data.
",Log files are a requirement to trace intruder activity or to audit user activity.,['ECRR-1'],SV-6173r1_rule,F-4485r1_fix,Retain application audit log files for one year and five years for SAMI data.,C-3059r1_chk,"Ensure a process is in place to retain application audit log files for one year and five years for SAMI data.

 
1) If audit logs have not been retained for one year or five years for SAMI data, this is a finding."
V-26687,medium,The application must ensure remote sessions for accessing an organization-defined list of security functions and security-relevant information are audited.,"Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.  

Remote network and system access is accomplished by leveraging common communication protocols to establish a remote connection.  These connections will typically originate over either the public Internet or the Public Switched Telephone Network (PSTN).  Neither of these internetworking mechanisms is private or secure and they do not by default restrict access to networked resources once connectivity is established.  

Numerous best practices are employed to protect remote connections such as utilizing encryption to protect data sessions and firewalls to restrict and control network connectivity. In addition to these protections, auditing must also be utilized in order to track system activity, assist in diagnosing system issues and provide evidence needed for forensic investigations post security incident.  

When organizations define security related application functions or security-related application information, it is incumbent upon the application providing access to that data to ensure auditing of remote connectivity to those resources occurs in support of organizational requirements. 

Remote access to security functions (e.g., user management, audit log management, etc.) and security relevant information requires the activity be audited by the organization. Any application providing remote access must support organizational requirements to audit access or organization-defined security functions and security-relevant information.",None,SV-33910r1_rule,None,None,None,None
V-26970,medium,The application must alert designated organizational officials in the event of an audit processing failure.,"It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Audit processing failures include;  software/hardware errors, failures in the audit capturing mechanisms, and audit storage capacity being reached or exceeded.",None,SV-34257r1_rule,None,None,None,None
V-27029,medium,Applications must meet organizational requirements to implement security functions as a layered structure minimizing interactions between layers of the design and avoiding any dependence by lower layers on the functionality or correctness of higher layers.,"The information system isolates security functions from non-security functions by means of an isolation boundary (implemented via partitions and domains) controlling access to and protecting the integrity of, the hardware, software, and firmware that perform those security functions. The information system maintains a separate execution domain (e.g., address space) for each executing process.",None,SV-34323r1_rule,None,None,None,None
V-35376,medium,The application server must separate hosted application functionality from application server management functionality.,"The application server consists of the management interface and hosted applications.  By separating the management interface from hosted applications, the user must authenticate as a privileged user to the management interface before being presented with management functionality.  This prevents non-privileged users from having visibility to functions not available to the user.  By limiting visibility, a compromised non-privileged account does not offer information to the attacker to functionality and information needed to further the attack on the application server.

Application server management functionality includes functions necessary to administer the application server and requires privileged access via one of the accounts assigned to a management role.  The hosted application and hosted application functionality consists of the assets needed for the application to function, such as the business logic, databases, user authentication, etc.

The separation of application server administration functionality from hosted application functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, network addresses, network ports, or combinations of these methods, as appropriate.",None,SV-46663r3_rule,F-39923r2_fix,Configure the application server so that admin management functionality and hosted applications are separated.,C-43739r2_chk,"Review the application server documentation and configuration to verify that the application server separates admin functionality from hosted application functionality.

If the application server does not separate application server admin functionality from hosted application functionality, this is a finding."
V-27061,medium,The application must employ cryptographic mechanisms preventing the unauthorized disclosure of information during transmission unless the transmitted data is otherwise protected by alternative physical measures.,"Preventing the disclosure of transmitted information requires that applications take measures to employ some form of cryptographic mechanism in order to protect the information during transmission.  This is usually achieved through the use of Transport Layer Security (TLS), SSL VPN, or IPSEC tunnel. 

Alternative physical protection measures include, Protected Distribution Systems (PDS). PDS are used to transmit unencrypted classified NSI through an area of lesser classification or control. In as much as the classified NSI is unencrypted, the PDS must provide adequate electrical, electromagnetic, and physical safeguards to deter exploitation. Refer to NSTSSI No. 7003 for additional details on a PDS.
",None,SV-34356r1_rule,None,None,None,None
V-69533,medium,The application must electronically verify Personal Identity Verification (PIV) credentials.,"The use of PIV credentials facilitates standardization and reduces the risk of unauthorized access.

DoD has mandated the use of the CAC to support identity management and personal authentication for systems covered under HSPD 12, as well as a primary component of layered protection for national security systems.

If the application does not verify the credentials provided, user authentication cannot be established which places the integrity and confidentiality of the application at risk.",None,SV-84155r1_rule,F-75707r1_fix,Configure the application to require CAC authentication.,C-69951r1_chk,"Review the application documentation and interview the application administrator to identify application access methods.

If the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.

Ask the application administrator to log on to the application.

Validate the application prompts the user to provide a certificate from the CAC.

Validate the application requests the user to input their CAC PIN.

If the application allows access without requiring a CAC, this is a finding."
V-57499,medium,"The application server must be configured in accordance with the security configuration settings based on DoD security configuration or implementation guidance, including STIGs, NSA configuration guides, CTOs, and DTMs.","Configuring the application to implement organization-wide security implementation guides and security checklists ensures compliance with federal standards and establishes a common security baseline across DoD that reflects the most restrictive security posture consistent with operational requirements.

Configuration settings are the set of parameters that can be changed that affect the security posture and/or functionality of the system. Security-related parameters are those parameters impacting the security state of the application, including the parameters required to satisfy other security control requirements.",None,SV-71775r2_rule,F-62567r1_fix,"Configure the application server to be in accordance with the security configuration settings based on DoD security configuration or implementation guidance, including STIGs, NSA configuration guides, CTOs, and DTMs.",C-58207r1_chk,"Review the application server documentation and configuration to determine if the application server is configured in accordance with the security configuration settings based on DoD security configuration or implementation guidance, including STIGs, NSA configuration guides, CTOs, and DTMs.

If the application server is not configured in accordance with security configuration settings, this is a finding."
V-27068,medium,Applications providing patch management capabilities must support the organizational requirements to install software updates automatically.,"Security faults with software applications and operating systems are discovered daily. Vendors are constantly updating and patching their products to address newly discovered security vulnerabilities. Organizations (including any contractor to the organization) are required to promptly install security-relevant software updates (e.g., patches, service packs, and hot fixes). Flaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling, must also be  addressed expeditiously. 

Anytime new software code is introduced to a system there is the potential for unintended consequences. There have been documented instances where the application of a patch has caused problems with system integrity or availability.  Due to information system integrity and availability concerns, organizations must give careful consideration to the methodology used to carry out automatic updates. ",None,SV-34363r1_rule,None,None,None,None
V-69335,medium,The application must enforce approved authorizations for controlling the flow of information between interconnected systems based on organization-defined information flow control policies.,"A mechanism to detect and prevent unauthorized communication flow must be configured or provided as part of the system design. If information flow is not enforced based on approved authorizations, the system may become compromised. Information flow control regulates where information is allowed to travel within a system and between interconnected systems. The flow of all system information must be monitored and controlled so it does not introduce any unacceptable risk to the systems or data.

Application specific examples of enforcement occurs in systems that employ rule sets or establish configuration settings that restrict information system services, or message-filtering capability based on message content (e.g., implementing key word searches or using document characteristics).

This is usually established by identifying if there are rulesets, policies or other configurations settings provided by the application which serve to control the flow of information within the system. Control of data flow is established by using labels on data and data subsets, evaluating the destination of the data within or without the system (similar security domain) and referencing a corresponding policy that is used to control the flow of data.

Applications providing information flow control must be able to enforce approved authorizations for controlling the flow of information within the system in accordance with applicable policy.",None,SV-83957r1_rule,F-75509r1_fix,Configure the application to enforce data flow control in accordance with data flow control policies.,C-69747r1_chk,"Review the application documentation and interview the application and system administrators.

Identify application features and functions to determine if the application is designed to control the flow of information between interconnected systems.

Identify:

- rulesets,
- data labels
- policies
- systems

to determine if the application is designed to control the flow of data between interconnected systems.

If the application does not provide data flow control capabilities, the requirement is not applicable.

Access the system as a user with access rights allowing the creation of test data or use of existing test data.

Create a test data set and label the data with a data label provided with or by the application (for example, a Personally Identifiable Information (PII) data label).

Review the policy settings to determine where the PII labeled data is allowed and is not allowed.

Using application features and functions, attempt to transmit the labeled data to an interconnected system that is prohibited by policy.

Verify the flow control policy was enforced and the data was not transmitted.

If the application does not enforce the approved authorizations for controlling data flow, this is a finding."
V-69519,medium,The application must be configured to disable non-essential capabilities.,"It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. These unnecessary capabilities or services are often overlooked and therefore may remain unsecured. They increase the risk to the platform by providing additional attack vectors.

Applications are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).

Examples of non-essential capabilities include, but are not limited to, advertising software or browser plug-ins not related to requirements or providing a wide array of functionality not required for every mission, but cannot be disabled.",None,SV-84141r1_rule,F-75693r1_fix,Disable application extraneous application functionality that is not required in order to fulfill the application's mission.,C-69937r1_chk,"Review the application guidance, application requirements documentation, and interview the application administrator.

Identify the application's operational requirements and what services the application is intended to provide users.

Review the overall application features and functionality via the user interface.

Review and identify installed application software modules via configuration settings.

Using the relevant OS commands, identify services running on the system and have the application administrator identify the services related to the application.

If the application is operating with extraneous capabilities that have not been defined as required in order to meet mission objectives, this is a finding."
V-69389,medium,The application must generate audit records when successful/unsuccessful attempts to modify privileges occur.,"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Audit records can be generated from various components within the information system (e.g., module or policy filter).",None,SV-84011r1_rule,F-75563r1_fix,Configure the application to audit successful and unsuccessful attempts to modify privileges.,C-69805r1_chk,"Review the application documentation and interview the application admin to identify application management interfaces and features.

Access the application management utility and create a test user account or use the account of a regular privileged user who is cooperating with the testing.

Access and open the auditing logs.

Using an admin account, modify the privileges of a privileged user.

Attempt to modify privileges in a manner that will cause a failure event such as attempting to modify a user’s privileges with an account that doesn't have the rights to do so.

Review the application logs and ensure both events were captured in the logs. The event data should include the user’s identity and the privilege that was granted and the privilege that failed to be granted.

If the application does not log when successful and unsuccessful attempts to modify privileges occur, this is a finding."
V-16828,low,"The Test Manager will ensure code coverage statistics are maintained for each release of the application.
","Code coverage statistics describes the how much of the source code has been executed based on the test procedures.
",['DCSQ-1'],SV-17828r1_rule,F-17145r1_fix,Create and maintain code coverage statistics for the application.,C-17827r1_chk,"Ask the application representative to provide code coverage statistics maintained for the application.

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.
 
1) If these code coverage statistics do not exist, it is a finding.
"
V-27040,medium,"Applications must manage excess capacity, bandwidth, or other redundancy to limit the effects of information flooding types of Denial of Service (DoS) attacks.","In the case of application DoS attacks, care must be taken when designing the application so as to ensure that the application makes the best use of system resources.  SQL queries have the potential to consume large amounts of CPU cycles if they are not tuned for optimal performance.  Web services containing complex calculations requiring large amounts of time to complete can bog down if too many requests for the service are encountered within a short period of time.  

The methods employed to meet this requirement will vary depending upon the technology the application utilizes.  However, a variety of technologies exist to limit, or in some cases, eliminate the effects of application related DoS attacks.  Employing increased capacity and bandwidth combined with specialized application layer protection devices and service redundancy may reduce the susceptibility to some DoS attacks. ",None,SV-34334r1_rule,None,None,None,None
V-16848,high,"The IAO will ensure passwords generated for users are not predictable and comply with the organization's password policy.
","Predictable passwords may allow an attacker to gain immediate access to new user accounts which would result in a loss of integrity.

Any vulnerability associated with a DoD Information system or system enclave, the exploitation of which, by a risk factor, will directly and immediately result in loss of Confidentiality, Availability or Integrity of the system
associated data.
","['IAIA-1', 'IAIA-2']",SV-17848r1_rule,F-17170r1_fix,"Generate passwords to comply with the organization's password policy.
",C-17861r1_chk,"Ask the application representative to examine the organization's password policy.
 
1) If non-human/service accounts are used and are not included in the password policy, it is a finding.
 
2) If non-human/service accounts policy does not require these accounts to change yearly or when someone with access to the password leaves the duty assignment, it is a finding.
 
The configuration interface may not reveal information related to all the required elements.  If this is the case, attempt to violate each element to determine if the policy is enforced.  For example, attempt to change a password to one that does not meet the requirements. 
 
3) If there are any shortcomings in the password policy or the configured behavior of any user account, it is a finding. 
 
The finding details should note which user accounts are impacted, which of the password parameters are deficient, the current values of these parameters, and the relevant required values.
 
Also, ask the application representative to generate two user account passwords.
 
4) If there is a recognizable pattern in password generation, it is a finding."
V-69465,medium,The application must provide an audit reduction capability that supports after-the-fact investigations of security incidents.,"If the audit reduction capability does not support after-the-fact investigations, it is difficult to establish, correlate, and investigate the events leading up to an outage or attack, or identify those responses for one. This capability is also required to comply with applicable Federal laws and DoD policies.

Audit reduction capability must support after-the-fact investigations of security incidents either natively or through the use of third-party tools.

This requirement is specific to applications with audit reduction capabilities.",None,SV-84087r1_rule,F-75641r1_fix,Configure the application to provide an audit reduction capability that supports forensic investigations.,C-69883r1_chk,"Review application documentation and interview application administrator for details regarding audit reduction (log record event filtering).

Access the application with user rights sufficient to read and filter audit records.

Navigate the application user interface and select the application functionality that provides access and interface to audit records and audit reduction (event filtering).

If the application uses a centralized logging solution that performs the audit reduction (event filtering) functions, the requirement is not applicable.

Examine the log files; take note of dates and times of events such as logon events.

Note: dates and times as well as the original content and any unique record identifiers.

Record the identifying information as well as the dates and times and content of the audit records.

Apply filters to reduce the amount of audit records displayed to just the logon events for the day.

Review the records and ensure the application provides the ability to filter on audit events.

If the application does not provide an audit reduction (event filtering) capability, this is a finding."
V-57433,medium,The application server must record time stamps for log records that meet a granularity of one second for a minimum degree of precision.,"To investigate an incident, the log records should be easily put into chronological order.  Without sufficient granularity of time stamps, the chronological order cannot be determined.

Time stamps generated by the application server include date and time.  Granularity of time measurements refers to the degree of synchronization between information system clocks and reference clocks.",None,SV-71705r2_rule,F-62471r1_fix,Configure the application server to use time stamps for log records that can meet a granularity of one second.,C-58109r1_chk,"Review the application server documentation and configuration files to determine if time stamps for log records meet a granularity of one second.

If the time stamp cannot generate to a one-second granularity, this is a finding."
V-70187,medium,The application must terminate all network connections associated with a communications session at the end of the session.,"Networked applications routinely open connections to and from other systems as part of their design and function.  When connections are opened by the application, system resources are consumed.  Terminating the network connection at the end of the application session frees up these resources for later use and aids in maintaining system stability. 

Terminating network connections associated with communications sessions includes, for example, de-allocating associated TCP/IP address/port pairs at the operating system level, or de-allocating networking assignments at the application level if multiple application sessions are using a single, operating system level network connection. 

This does not mean that the application terminates all sessions or network access; it only ends the inactive session and releases the resources associated with that session.

Many applications rely on the underlying OS to control the network connection aspect of the application which is perfectly acceptable.

Additionally, application specific operational issues may occasionally be encountered which dictate exceptions be granted to this requirement in order to ensure continuity of operations and application availability.

When the aforementioned type of situation occurs, the root cause of the issue as well as the mitigations implemented in order to prevent a loss of availability must be documented.   Common mitigation procedures include but are not limited to stopping and restarting application or system services in order to manually release system resources.",None,SV-84809r1_rule,F-76423r1_fix,Configure or design the application to terminate application network sessions at the end of the session.,C-70663r1_chk,"Review the application documentation and interview the system administrator to determine how the application is designed and configured to terminate network connections at the end of the application session.

Identify any documented exceptions to the requirement and review associated mitigations.

If the application provides a management interface for controlling or monitoring application network sessions, access that management interface.  Monitor application network activity.  

If the application utilizes the underlying OS to control network connections, access the command prompt of the OS.  Run the OS command for observing network connections at the OS.  For Windows and Unix OS's, use the ""netstat"" command.  Include command parameters that identify the application and/or process ID. netstat /? or -h provides the list of available parameters.

Observe network activity and associate application processes with network connections.  Repeat use of the command to identify changing network state.

Determine if application session network connections are being terminated at the end of the session by observing the ""state"" column of the netstat command output with each iteration.

If the application does not terminate network connections when application sessions end, this is a finding.

If exceptions are documented with no mitigation this is a finding."
V-27078,medium,"The organization must employ malicious code protection mechanisms at information system entry and exit points to detect and eradicate malicious code transported by electronic mail, electronic mail attachments, web accesses, removable media, or other common means. ","In order to minimize potential negative impact to the organization that can be caused by malicious code, it is imperative that malicious code is identified and eradicated prior to entering protected enclaves via information system entry and exit points. 

Information system entry and exit points include:  firewalls, electronic mail servers, web servers, proxy servers, and remote-access servers. Malicious code includes viruses, worms, Trojan horses, and Spyware. 

The requirement states that anti-virus and malware protection applications must be used at entry and exit points. This does not apply to applications. ",None,SV-34373r1_rule,None,None,None,None
V-70307,medium,Execution flow diagrams and design documents must be created to show how deadlock and recursion issues in web services are being mitigated.,"In order to understand data flows within web services, the process flow of data must be developed and documented.

There are several different ways that web service deadlock occurs, many times it is due to when a client invokes a synchronous method on a web service, the client will block waiting for the method to complete. If attempts to call the client (invoke a callback) while the client is waiting for the original method to complete, then each party will deadlock waiting for the other.

This is referred to as deadlock. The same situation could occur if a callback handler attempted to call a synchronous method on its caller.

Applications that utilize web services must account for and document how they deal with a deadlock issue. This can be accomplished by documenting data flow and specifically accounting for the risk in the design of the application.",None,SV-84929r1_rule,F-76543r1_fix,Develop web services to account for deadlock issues.,C-70783r1_chk,"Review the application documentation and the system diagrams detailing application system to system and service to service communication methods.

Interview the application admin to identify any application web services that are deployed by the application.

If the application does not deploy web services, the requirement is not applicable.

If the application consumes web services but is not responsible for development of the services, the requirement is not applicable.

Review the data flow diagrams and the system documentation to determine if the issue of web service deadlock is addressed.

If the issue is not addressed in the documentation or configuration settings, ask the application admin to demonstrate how deadlock issues are addressed.

If deadlock issues are not being addressed via documented web service configuration or design, this is a finding."
V-30592,medium,Applications utilizing Discretionary Access Control (DAC) must enforce a policy that limits propagation of access rights.,"Discretionary Access Control  (DAC) is based on the premise that individual users are ""owners"" of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment.

DAC allows the owner to determine who will have access to objects they control.  An example of DAC includes user controlled file permissions.  DAC models have the potential for the access controls to propagate without limit resulting in unauthorized access to said objects.

When applications provide a discretionary access control mechanism, the application must be able to limit the propagation of those access rights.",None,SV-40339r1_rule,None,None,None,None
V-30589,medium,The application must use cryptographic mechanisms to protect the integrity of audit tools.,"Protecting the integrity of the tools used for auditing purposes is a critical step to ensuring the integrity of audit data.  Audit data includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.  

It is not uncommon for attackers to replace the audit tools or inject code into the existing tools with the purpose of providing the capability to hide or erase system activity from the audit logs.  

To address this risk, audit tools must be cryptographically signed in order to provide the capability to identify when the audit tools have been modified, manipulated or replaced.  An example is a checksum hash of the file or files.

Applications that function as audit tools must use cryptographic mechanisms to protect the integrity of the tools or allow cryptographic protection mechanisms to be applied to their tools.  All applications must not impede or hamper this requirement.",None,SV-40333r1_rule,None,None,None,None
V-69503,medium,The application must prohibit user installation of software without explicit privileged status.,"Allowing regular users to install software, without explicit privileges, creates the risk that untested or potentially malicious software will be installed on the system. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceeds the rights of a regular user.

Application functionality will vary, and while users are not permitted to install unapproved applications, there may be instances where the organization allows the user to install approved software packages such as from an approved software repository.

The application must enforce software installation by users based upon what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree with regard to being potentially malicious is unknown or suspect) by the organization.

This requirement applies, for example, to applications that provide the ability to extend application functionality (e.g., plug-ins, add-ons) and software management applications.",None,SV-84125r1_rule,F-75677r1_fix,Configure the application to prohibit user installation of software without explicit permission.,C-69921r1_chk,"Review the application documentation and interview the application administrator to determine the capabilities of the application as it relates to software installation or product function extension.

Identify any software configuration change capabilities which are allowed by design and incorporated into the user interface. An example is utilizing a known software repository of tested and approved extensions, plugins or modules which can be used by application users to extend application features or functions.

If the application does not provide the ability to install software components, modules, plugins, or extensions, the requirement is not applicable.

Access the application user interface as a regular user, navigate to the application screen that provides the software installation function and attempt to install software components, modules, extensions, or plugins.

If the application utilizes an approved repository of approved software that has been tested and approved for all application users to install, this is not a finding.

If the application allows regular users to install untested or unapproved software components, extensions, modules, or plugins without explicit authorization, this is a finding."
V-35445,medium,The application server must use cryptographic mechanisms to protect the integrity of log tools.,"Protecting the integrity of the tools used for logging purposes is a critical step in ensuring the integrity of log data. Log data includes all information (e.g., log records, log settings, and log reports) needed to successfully log information system activity. 

It is not uncommon for attackers to replace the log tools or inject code into the existing tools for the purpose of providing the capability to hide or erase system activity from the logs. 

To address this risk, log tools must be cryptographically signed in order to provide the capability to identify when the log tools have been modified, manipulated or replaced. An example is a checksum hash of the file or files.

Application server log tools must use cryptographic mechanisms to protect the integrity of the tools or allow cryptographic protection mechanisms to be applied to their tools.",None,SV-46732r4_rule,F-39989r2_fix,Configure the application server log tools to be cryptographically signed to protect the integrity of the tools.,C-43799r2_chk,"Review the application server configuration to determine if the application server log tools have been cryptographically signed to protect the integrity of the tools.

If the application server log tools have not been cryptographically signed, this is a finding."
V-35190,medium,The application server must shut down by default upon log failure (unless availability is an overriding concern).,"It is critical that, when a system is at risk of failing to process logs, it detects and takes action to mitigate the failure. Log processing failures include software/hardware errors, failures in the log capturing mechanisms, and log storage capacity being reached or exceeded.  During a failure, the application server must be configured to shut down unless the application server is part of a high availability system.

When availability is an overriding concern, other approved actions in response to a log failure are as follows: 

(i) If the failure was caused by the lack of log record storage capacity, the application must continue generating log records if possible (automatically restarting the log service if necessary), overwriting the oldest log records in a first-in-first-out manner.

(ii) If log records are sent to a centralized collection server and communication with this server is lost or the server fails, the application must queue log records locally until communication is restored or until the log records are retrieved manually. Upon restoration of the connection to the centralized collection server, action should be taken to synchronize the local log data with the collection server.",None,SV-46477r3_rule,F-39736r3_fix,"If the application server is a high availability system, this finding is NA.

Configure the application server to shut down on a log failure.",C-43568r4_chk,"If the application server is a high availability system, this finding is NA.

Review the application server configuration settings to determine if the application server is configured to shut down on a log failure.

If the application server is not configured to shut down on a log failure, this is a finding."
V-26681,medium,Applications providing remote access capabilities must utilize approved cryptography to protect the confidentiality of remote access sessions. ,"Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.  

Remote network access is accomplished by leveraging common communication protocols and establishing a remote connection.  These connections will typically occur over either the public Internet or the Public Switched Telephone Network (PSTN).  Since neither of these internetworking mechanisms are private nor secure, if cryptography is not used, then the session data traversing the remote connection could be intercepted and compromised.  Cryptography provides a means to secure the remote connection so as to prevent unauthorized access to the data traversing the remote access connection thereby providing a degree of confidentiality. The encryption strength of mechanism is selected based on the security categorization of the information traversing the remote connection.",None,SV-33881r1_rule,None,None,None,None
V-70377,low,Code coverage statistics must be maintained for each release of the application.,"This requirement is meant to apply to developers or organizations that are doing application development work.

Code coverage statistics describes the overall functionality provided by the application and how much of the source code has been tested during the release cycle.

To avoid the potential for testing the same pieces of code over and over again, code coverage statistics are used to track which aspects or modules of the application are tested.

Some applications are so large that it is not feasible to test every last bit of the application code on one release cycle. In those instances, it is acceptable to prioritize and identify the modules that are critical to the applications security posture and test those first. Rolling over to test other modules later as resources permit. E.g., testing functionality that performs authentication and authorization before testing printing capabilities.

Application developers should keep statistics that show all of the modules of the application and identify which modules were tested and when. This will help testers to keep track of what has been tested and help to verify all functionality is tested.

The developer makes sure that flaws are documented in a defect tracking system.

If the application is smaller in nature and all aspects of the application can be tested, the code coverage statistics would be 100%.",None,SV-84999r1_rule,F-76613r1_fix,Track application testing and maintain statistics that show how much of the application function was tested.,C-70831r1_chk,"If the organization does not do or manage the application development work for the application, this requirement is not applicable.

Ask the application representative to provide code coverage statistics maintained for the application.

If these code coverage statistics do not exist, this is a finding."
V-26860,medium,The application must produce audit records that contain sufficient information to establish the outcome (success or failure) of the events.,"Information system auditing capability is critical for accurate forensic analysis.   Audit record content that may be necessary to satisfy the requirement of this control, includes but is not limited to: time stamps, source and destination IP addresses, user/process identifiers, event descriptions, application specific events, success/fail indications, filenames involved, access control or flow control rules invoked. 

Success and failure indicators ascertain the outcome of a particular event.  As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response.",None,SV-34140r1_rule,None,None,None,None
V-35441,medium,The application server must restrict error messages only to authorized users.,"If the application provides too much information in error logs and administrative messages to the screen, this could lead to compromise. The structure and content of error messages need to be carefully considered by the organization and development team. The extent to which the information system is able to identify and handle error conditions is guided by organizational policy and operational requirements.

Application servers must protect the error messages that are created by the application server. All application server users' accounts are used for the management of the server and the applications residing on the application server. All accounts are assigned to a certain role with corresponding access rights. The application server must restrict access to error messages so only authorized users may view them. Error messages are usually written to logs contained on the file system. The application server will usually create new log files as needed and must take steps to ensure that the proper file permissions are utilized when the log files are created.",None,SV-46728r3_rule,F-39985r2_fix,Configure the application server to restrict access to error messages so only authorized users may view or otherwise access them.,C-43795r3_chk,"Review the application server configuration and documentation to determine if the application server will restrict access to error messages so only authorized users may view or otherwise access them.

If the application server cannot be configured to restrict access to error messages to only authorized users, this is a finding."
V-27102,medium,Applications providing IDS and prevention capabilities must prevent non-privileged users from circumventing intrusion detection and prevention capabilities.,"Any application providing intrusion detection and prevention capabilities must be architected and implemented so as to prevent non-privileged users from circumventing such protections. This can be accomplished through the use of user roles, use of proper systems permissions, auditing, logging, etc.",None,SV-34397r1_rule,None,None,None,None
V-70313,medium,"New IP addresses, data services, and associated ports used by the application must be submitted to the appropriate approving authority for the organization, which in turn will be submitted through the DoD Ports, Protocols, and Services Management (DoD PPSM).","Failure to comply with DoD Ports, Protocols, and Services (PPS) Vulnerability Analysis and associated PPS mitigations may result in compromise of enclave boundary protections and/or functionality of the application.",None,SV-84935r1_rule,F-76549r1_fix,"Verify the accreditation documentation lists all interfaces and the ports, protocols, and services used.

Verify that all ports, protocols, and services are used in accordance with the DoD PPSM.",C-70789r1_chk,"All application ports, protocols, and services needed for application operation need to be in compliance with the DoD Ports and Protocols guidance.

Check:

http://iase.disa.mil/ppsm/Pages/index.aspx

to verify the ports, protocols, and services are in compliance with the PPS CAL.

Check all necessary ports and protocols needed for application operation (only those accessed from outside the local enclave) are checked against the DoD Ports and Protocols guidance to ensure compliance.

Identify the ports needed for the application:

- Look at System Security Plan/Accreditation documentation
- Ask System Administrator
- Go to Network Administrator
- Go to Network Reviewer
- If a network scan is available, use it
- Use netstat/task manager
- Check /etc./services

If the application is not in compliance with DoD Ports and Protocols guidance, this is a finding."
V-69427,medium,The application must log user actions involving changes to data.,"When users change/modify application data, there is risk of data compromise if the account used to access is compromised or access is granted improperly. To be able to investigate which account accessed data, the account making the data changes must be logged. Without establishing when the data change event occurred, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Associating event types with detected events in the application and audit logs provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.",None,SV-84049r1_rule,F-75603r1_fix,Configure the application to log all changes to application data.,C-69845r1_chk,"Review and monitor the application logs. When modifying data, the logs are most likely database logs.

If the application design documents include specific data elements that require protection, ensure any changes to those specific data elements are logged. Otherwise, a random check is sufficient.

If the application uses a database configured to use Transaction SQL logging this is not a finding if the application admin can demonstrate a process for reviewing the transaction log for data changes. The process must include using the transaction log and some form of query capability to identify users and the data they changed within the application and vice versa.

Utilize the application as a regular user and operate the application so as to modify a data element contained within the application.

Observe and determine if the application log includes an entry to indicate the users data change event was recorded.

If successful changes/modifications to application data elements are not recorded in the logs, this is a finding."
V-69393,medium,The application must generate audit records when successful/unsuccessful attempts to modify security levels occur.,"A security level denotes a permissions or authorization capability within the application. This is most often associated with a user role. Attempts to modify a security level can be construed as an attempt to change the configuration of the application so as to create a new security role or modify an existing security role. Some applications may or may not provide this capability.

Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Audit records can be generated from various components within the information system (e.g., module or policy filter).",None,SV-84015r1_rule,F-75567r1_fix,Configure the application to create an audit record for both successful and unsuccessful attempts to modify security levels.,C-69809r1_chk,"Review the application documentation and interview the application administrator.

Identify where the application logs are stored.

Identify application functionality that provides privilege escalation or access to additional security levels within the application.

This can be performing a function that escalates the privileges of the user, or accessing a protected area of the application that requires additional authentication in order to access.

Authenticate to the application as a regular user. Using application functionality, attempt to modify the permissions of a different security level or domain within the application.

Perform two attempts, one successfully and one unsuccessfully.

Review the log data and ensure the modify events, both successful and unsuccessful, are logged.

If the application does not generate an audit record when successful and unsuccessful attempts to modify the permissions regarding the security levels occur, this is a finding."
V-35215,medium,The application server must protect log tools from unauthorized deletion.,"Protecting log data also includes identifying and protecting the tools used to view and manipulate log data. 

Depending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. 

It is, therefore, imperative that access to log tools be controlled and protected from unauthorized modification. If an attacker were to delete log tools, the application server administrator would have no way of managing or viewing the logs. 

Application servers provide a web- and/or a command line-based management functionality for managing the application server log capabilities. In addition, subsets of log tool components may be stored on the file system as jar, class or xml configuration files. The application server must ensure that in addition to protecting any web-based log tools, any file system-based tools are protected from unauthorized deletion as well.",None,SV-46502r3_rule,F-39761r2_fix,Configure the application server or the OS to protect log tools from unauthorized deletion.,C-43587r2_chk,"Review the application server documentation and server configuration to determine if the application server protects log tools from unauthorized deletion.

Locate binary copies of log tool executables that are located on the file system and attempt to delete using unprivileged credentials.

If the application server does not protect log tools from unauthorized deletion, this is a finding."
V-70347,medium,The application services and interfaces must be compatible with and ready for IPv6 networks.,"If the application has not been upgraded to execute on an IPv6-only network, there is a possibility the application will not execute properly, and as a result, a denial of service could occur.

In order to operate on an IPV6 network, the application must be capable of making IPV6 compatible network socket calls.",None,SV-84969r1_rule,F-76583r5_fix,Design application to be compliant with all Department of Defense (DoD) Information Technology Standards Registry (DISR) IPv6 profiles.,C-70801r1_chk,"Verify the application environment is compliant with all DoD IPv6 Standards Profile for IPv6 Capable Products guidance for servers.

If the application environment is not compliant with all DoD IPv6 Standards Profile for IPv6 Capable Products guidance for servers, this is a finding."
V-27125,medium,Application software used to detect the presence of unauthorized software must employ automated detection mechanisms and notify designated organizational officials in accordance with the organization-defined frequency.,"Scanning software is purpose built to check for vulnerabilities in the information system and hosted applications and is also used to enumerate platforms, software flaws, and improper configurations.  

Organizations are required to scan for vulnerabilities in information systems and hosted applications on an organization defined frequency and/or randomly in accordance with an organization defined process. 

Scanning software includes the capability to scan for specific functions, applications, ports, protocols, and services that should not be accessible to users or devices and for improperly configured or incorrectly operating information flow mechanisms.  ",None,SV-34422r1_rule,None,None,None,None
V-27179,medium,"The application must prevent the presentation of information system management-related functionality at an interface utilized by general (i.e., non-privileged) users.","Information system management functionality includes, functions necessary to administer databases, network components, workstations, or servers, and typically requires privileged user access. 

The separation of user functionality from information system management functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, different network addresses, combinations of these methods, or other methods as appropriate. 

An example of this type of separation is observed in web administrative interfaces that use separate authentication methods for users of any other information system resources. This may include isolating the administrative interface on a different domain and with additional access controls. ",None,SV-34478r1_rule,None,None,None,None
V-26685,medium,Applications providing remote access must have capabilities that allow all remote access to be routed through managed access control points.,"This requirement relates to the use of applications providing remote access services.  Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.  

Remote network access is accomplished by leveraging common communication protocols and establishing a remote connection.  These connections will typically occur over either the public Internet or the Public Switched Telephone Network (PSTN).   

Please note, utilization of a virtual private network when adequately provisioned with appropriate security controls, is considered an internal network and is not considered remote access.

Without centralized control of inbound connections, management of these access points is difficult at best.  It is critical that applications providing or offering remote access capabilities also have the capability to route the access through managed access control points. 

One example is the use of software applications such as PCAnywhere or Terminal Services.  Rather than having PCAnywhere installed on multiple systems, remote access software must have the capability to be centrally managed and controlled so there are not multiple disparate access points into the environment.

Applications providing remote access must have capabilities that allow all remote access to be routed through managed access control points.",None,SV-33908r1_rule,None,None,None,None
V-16819,medium,"The designer will ensure development of new mobile code includes measures to mitigate the risks identified. 
",New mobile code types may introduce unknown vulnerabilities if a risk assessment is not completed prior to the use of mobile code. ,['DCMC-1'],SV-17819r1_rule,F-17127r1_fix,Remove mobile code or perform a risk assessment on mobile code.,C-17818r1_chk,"Interview the designer and determine if new mobile code is in development.  

If no new mobile code is in development, this check is not applicable. 
 
1) If new code is being developed determine and a risk assessment has not been performed, it is a finding. "
V-69571,medium,The application must enforce 24 hours/1 day as the minimum password lifetime.,"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.

Examples of situations where a user ID and password might be used include but are not limited to:

- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.

- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.

and

- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.

Enforcing a minimum password lifetime helps prevent repeated password changes to defeat the password reuse or history enforcement requirement.

Restricting this setting limits the user's ability to change their password. Passwords need to be changed at specific policy-based intervals; however, if the application allows the user to immediately and continually change their password, then the password could be repeatedly changed in a short period of time to defeat the organization's policy regarding password reuse.",None,SV-84193r1_rule,F-75747r1_fix,Configure the application to have a minimum password lifetime of 24 hours.,C-69991r1_chk,"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.

If the application does not use passwords, the requirement is not applicable.

Access the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.

Attempt to change the password more than once.

If a password can be changed more than once within 24 hours, the minimum lifetime setting is not set and this is a finding."
V-57553,medium,"The application server must fail to a secure state if system initialization fails, shutdown fails, or aborts fail.","Fail-secure is a condition achieved by the application server in order to ensure that in the event of an operational failure, the system does not enter into an unsecure state where intended security properties no longer hold.  Preserving information system state information also facilitates system restart and return to the operational mode of the organization with less disruption of mission-essential processes.",None,SV-71829r2_rule,F-62621r1_fix,"Configure the application server to fail to a secure state if system initialization fails, shutdown fails, or aborts fail.",C-58261r1_chk,"Review application server documentation and configuration to determine if the application server fails to a secure state if system initialization fails, shutdown fails, or aborts fail.

If the application server cannot be configured to fail securely, this is a finding."
V-69499,medium,Application audit tools must be cryptographically hashed.,"Protecting the integrity of the tools used for auditing purposes is a critical step to ensuring the integrity of audit data. Audit data includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

Audit tools include, but are not limited to, vendor provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.

It is not uncommon for attackers to replace the audit tools or inject code into the existing tools with the purpose of providing the capability to hide or erase system activity from the audit logs.

To address this risk, audit tools must be cryptographically signed/hashed and the resulting value securely stored in order to provide the capability to identify when the audit tools have been modified, manipulated or replaced.

Some OSs provide a native command line tool capable of extracting or creating a hash value. Care must be taken to ensure any hashing algorithm strength used is acceptable.  An example is UNIX OS variants that provide the ""shasum"" utility with SHA256 capabilities.  Windows is not known to provide a native cryptographic tool that utilizes an acceptable hashing algorithm.  The Windows fciv.exe checksum tool currently only utilizes MD5 and SHA1 which are not acceptable hashing algorithms.",None,SV-84121r1_rule,F-76663r1_fix,Cryptographically hash the audit tool files used by the application. Store and protect the generated hash values for future reference.,C-69917r1_chk,"Review the system documentation and interview the application administrator for details regarding application architecture, audit methods, and provided audit tools.

Identify the location of the application audit tools.

Separate audit tools will be file-oriented in nature, e.g., the application includes a separate executable file or library that when invoked allows users to view and manipulate logs.

If the application does not provide a separate tool in the form of a file which provides an ability to view and manipulate application log data, query data, or generate reports, this requirement is not applicable.

If the system hosting the application has a separate file monitoring utility installed that is configured to identify changes to audit tools and alarm on changes to audit tools, this is not applicable.

Ask application administrator to demonstrate the cryptographic hashing mechanisms used to create the one way hashes that can be used to validate the integrity of audit tools.

For example, ""shasum /path/to/file > checksum.filename"".

Ask the application administrator to provide the list of checksum values and the associated file names of the audit tools.

If a cryptographic checksum or hash value of the audit tool file is not created for future reference, this is a finding."
V-27072,medium,The application must prevent non-privileged users from circumventing malicious code protection capabilities. ,"Malicious code protection software must be protected so as to prevent a non-privileged user or malicious piece of software from disabling the protection mechanism. A common tactic of malware is to identify the type of malicious code protection software running on the system and deactivate it. Malicious code includes, viruses, worms, Trojan horses, and Spyware. 

Examples include the capability for non-administrative user's to turn off or otherwise disable anti-virus.",None,SV-34367r1_rule,None,None,None,None
V-69449,medium,The application must provide an immediate warning to the SA and ISSO (at a minimum) when allocated audit record storage volume reaches 75% of repository maximum audit record storage capacity.,"If security personnel are not notified immediately upon storage volume utilization reaching 75%, they are unable to plan for storage capacity expansion.

Due to variances in application usage and audit records storage usage, the SA and the ISSO may evaluate usage patterns and determine if a higher percentage of usage is warranted before an alarm is sent.  The intent of the requirement is to provide a warning that will allow the SA and ISSO ample time to plan and implement an audit storage capacity expansion that will provide for the increased audit log storage requirements without forcing an emergency or otherwise negatively impacting the recording of audit events.

The requirement will take into account a reasonable amount of processing time such as 1 or 2 minutes that may be required of the system in order to satisfy the requirement.",None,SV-84071r1_rule,F-75625r1_fix,Configure the application to send an immediate alarm to the application admin/SA and the ISSO when the allocated log storage capacity exceeds 75% of usage or exceeds the capacity value the SA and ISSO have determined will provide adequate time to plan for capacity expansion.,C-69867r1_chk,"Review system documentation and interview application administrator for details regarding logging configuration.  

If the application utilizes a centralized logging system that provides storage capacity alarming, this requirement is not applicable.

Identify application alarming capability relating to storage capacity alarming for the log repository.  Coordinate with the appropriate personnel regarding the generation of test alarms.

Review log alarm settings and ensure audit log storage capacity alarming is enabled and set to alarm when the storage threshold exceeds 75% of disk storage capacity or the capacity value the SA and ISSO have determined will provide adequate time to plan for capacity expansion.

Ensure the alarm will be sent to the ISSO and the application administrator when the utilization threshold is exceeded by changing the threshold settings to below the current disk space utilization. An alarm should be triggered at that point and forwarded to the ISSO and the SA/application admin.

If the application is not configured to send an alarm when storage volume exceeds 75% of disc capacity or if the designated alarm recipients did not receive an alarm when the test was conducted, this is a finding."
V-22029,high,"The designer shall use both the <NotBefore> and <NotOnOrAfter> elements or <OneTimeUse> element when using the <Conditions> element in a SAML assertion.
","When a SAML assertion is used with a <Conditions> element, a begin and end time for the <Conditions> element should be set to prevent reuse of the message at a later time. Not setting a specific time period for the <Conditions> element, the possibility exists of granting immediate access or elevated privileges to an attacker which result in an immediate loss of confidentiality.

Any vulnerability associated with a DoD Information system or system enclave, the exploitation of which, by a risk factor, will directly and immediately result in loss of Confidentiality, Availability or Integrity of the system
associated data.
",['DCSQ-1'],SV-25355r1_rule,F-23099r1_fix,Implement the use of the NotBefore and NotOnOrAfter or OneTimeUse when using the Conditions element in a SAML assertion.,C-27025r1_chk,"Examine the contents of a SOAP message using the <Conditions> element, all messages should contain the NotBefore and NotOnOrAfter or OneTimeUse element when in a SAML Assertion. This can be accomplished using a protocol analyzer such as WireShark

1) If SOAP using the <Conditions> element do not contain NotBefore and NotOnOrAfter or OneTimeUse elements, it is a finding."
V-70287,low,The application must notify the ISSO and ISSM of failed security verification tests.,"If personnel are not notified of failed security verification tests, they will not be able to take corrective action and the unsecure condition(s) will remain.

Security function is defined as the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based. Security functionality includes, but is not limited to, establishing system accounts, configuring access authorizations (i.e., permissions, privileges), setting events to be audited, and setting intrusion detection parameters.

Notifications provided by information systems include messages to local computer consoles, and/or hardware indications, such as lights.

This requirement applies to applications performing security functions and the applications performing security function verification/testing.",None,SV-84909r1_rule,F-76523r1_fix,Configure the application to send notices to the ISSO and ISSM indicating the application failed a verification test.,C-70763r1_chk,"Review the application documentation and interview the system administrator to determine if the application performs security function testing.

If the application is not designed or intended to perform security function testing, the requirement is not applicable.

Access the application design documents or have the system administrator provide proof the application is designed to verify the correct operation of security functions.

Review application logs and take note of log entries that indicate security function testing is being performed and verified on startup, restart, or on command by an authorized user.

Review logs to identify if the application has sent notifications to ISSO and ISSM when security verification tests fail.

Review application features and function to identify areas of the management interfaces that specify where failed security verifications tests are to be sent and validate the ISSO and ISSM are configured as recipients.
 
If the application is designed to perform security function testing and does not notify the ISSO and ISSM of failed verification tests, this is a finding."
V-27137,medium,Applications utilized for integrity verification must detect unauthorized changes to software and information.,"Organizations are required to employ integrity verification applications on information systems to look for evidence of information tampering, errors, and omissions. The organization is also required to employ good software engineering practices with regard to commercial off-the-shelf integrity mechanisms (e.g., parity checks, cyclical redundancy checks, and cryptographic hashes) and uses tools to automatically monitor the integrity of the information system and the applications it hosts.",None,SV-34436r1_rule,None,None,None,None
V-69339,high,The application must execute without excessive account permissions.,"Applications are often designed to utilize a user account.  The account represents a means to control application permissions and access to OS resources, application resources or both.  

When the application is designed and installed, care must be taken not to assign excessive permissions to the user account that is used by the application.  

An application operating with unnecessary privileges can potentially give an attacker access to the underlying operating system or if the privileges required for application execution are at a higher level than the privileges assigned to organizational users invoking such applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.

Applications must be designed and configured to operate with only those permissions that are required for proper operation.",None,SV-83961r1_rule,F-75513r3_fix,Configure the application accounts with minimalist privileges. Do not allow the application to operate with admin credentials.,C-69751r1_chk,"Review the system documentation or interview the application representative and identify if the application utilizes an account in order to operate.

Determine the OS user groups in which each application account is a member.  List the user rights assigned to these users and groups using relevant OS commands and evaluate whether any of them provide admin rights or if they are unnecessary or excessive. 

If the application connects to a database, open an admin console to the database and view the database users, their roles and group rights.

Locate the application user account used to access the database and examine the accounts privileges. This includes group privileges.

If the application user account has excessive OS privileges such as being in the admin group, database privileges such as being in the DBA role, has the ability to create, drop, alter the database (not application database tables), or if the application user account has other excessive or undefined system privileges, this is a finding."
V-26862,medium,The application must retain the notification message or banner on the screen until users take explicit actions to logon to or further access.,"To establish acceptance of system usage policy, a click-through banner at application logon is required. The banner shall prevent further activity on the application unless and until the user executes a positive action to manifest agreement by clicking on a box indicating ""OK"". The text of this banner should be customizable in the event of future user agreement changes. ",None,SV-34142r1_rule,None,None,None,None
V-69419,medium,The application must initiate session auditing upon startup.,"If the application does not begin logging upon startup, important log events could be missed.",None,SV-84041r1_rule,F-75595r1_fix,Configure the application to begin logging application events as soon as the application starts up.,C-69837r1_chk,"Examine the application design documentation and interview the application administrator to identify application logging behavior.

If the application is writing to an existing log or log file:

Open and monitor the application log.

Start the application service and view the log entries. 

Log entries indicating the application is starting should commence as soon as the application starts. Determine if the log events correlate with the time the application was started and if event log entries include an application start up sequence of events.

If the application writes events to a new log on startup: 

Identify location logs are written to, start the application and then identify and access the new log.

Determine if the log events correlate with the time the application was started and if event log entries include an application start up sequence of events.

If the application does not begin logging events upon start up, this is a finding."
V-16809,high,"The designer will ensure the application does not contain format string vulnerabilities.
","Format string vulnerabilities usually occur when unvalidated input is entered and is directly written into  the format string used to format data in the print style family of C/C++ functions. If an attacker can manipulate a format string, this may result in a buffer overflow causing a denial of service for the application. Format string vulnerabilities may lead to information disclosure vulnerabilities. Format string vulnerabilities may be used to execute arbitrary code. ",['DCSQ-1'],SV-17809r1_rule,F-17100r1_fix,Modify the application to protect against format string attacks.,C-17807r1_chk,"Ask the application representative for code review or scan results from the entire application.  This can be provided as results from an automated code review or a vulnerability scanning tool.  See section 5.4 of the Application Security and Development STIG for additional details.
 
If the results are provided from a manual code review, the application representative will need to demonstrate how format string vulnerabilities are identified during code reviews. 
 
1) If the results are not provided or the application representative cannot demonstrate how manual code reviews are performed to identify format string vulnerabilities, it is a finding.
 
Examples of format string vulnerabilities can be obtained from the OWASP website.

"
V-35423,medium,The application server must be configured to perform complete application deployments.,"Failure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system.

When an application is deployed to the application server, if the deployment process does not complete properly and without errors, there is the potential that some application files may not be deployed or may be corrupted and an application error may occur during runtime.

The application server must be able to perform complete application deployments. A partial deployment can leave the server in an inconsistent state. Application servers may provide a transaction rollback function to address this issue.",None,SV-46710r3_rule,F-39967r2_fix,Configure the application server to detect errors that occur during application deployment and to prevent deployment if errors are encountered.,C-43774r2_chk,"Review the application server configuration and documentation to ensure the system is configured to perform complete application deployments.

If the application server is not configured to ensure complete application deployments or provides no rollback functionality, this is a finding."
V-57497,medium,The application server must be capable of reverting to the last known good configuration in the event of failed installations and upgrades.,"Any changes to the components of the application server can have significant effects on the overall security of the system.

In order to ensure a prompt response to failed application installations and application server upgrades, the application server must provide an automated rollback capability that allows the system to be restored to a previous known good configuration state prior to the application installation or application server upgrade.",None,SV-71773r2_rule,F-62565r1_fix,Configure the application server to automatically rollback to a known good configuration in the event of failed application installations and application server upgrades.,C-58205r1_chk,"Check the application server documentation and configuration to determine if the application server provides an automated rollback capability to a known good configuration in the event of a failed installation and upgrade.

If the application server is not configured to meet this requirement, this is a finding."
V-27153,medium,Applications must employ NSA-approved cryptography to protect classified information.,"Cryptography is only as strong as the encryption modules/algorithms employed to encrypt the data. Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. 

NSA has developed Type 1 algorithms for protecting classified information. The Committee on National Security Systems (CNSS) National Information Assurance Glossary (CNSS Instruction No. 4009) defines Type 1 products as:

“Cryptographic equipment, assembly or component classified or certified by NSA for encrypting and decrypting classified and sensitive national security information when appropriately keyed.
Developed using established NSA business processes and containing NSA approved algorithms
are used to protect systems requiring the most stringent protection mechanisms.”

NSA-approved cryptography is required to be used for classified information system processing.",None,SV-34452r1_rule,None,None,None,None
V-69311,medium,The application must automatically audit account removal actions.,"When application accounts are removed, user accessibility is affected. Accounts are utilized for identifying individual application users or for identifying the application processes themselves. In order to detect and respond to events affecting user accessibility and application processing, applications must audit account removal actions and, as required, notify the appropriate individuals, so they can investigate the event. Such a capability greatly reduces the risk that application accessibility will be negatively affected for extended periods of time and provides logging that can be used for forensic purposes.

Application developers are encouraged to integrate their applications with enterprise-level authentication/access/audit mechanisms such as Syslog, Active Directory or LDAP.",None,SV-83933r1_rule,F-75485r1_fix,"Configure the application to write a log entry when a user account is removed.

At a minimum, ensure account name, date and time of the event are recorded.",C-69723r1_chk,"Examine the application documentation to identify how the application users are managed.

Interview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.

If the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.

Identify the location of the audit logs and review the end of the logs.

Access the user account management functionality and remove a test user account.

Examine the log file again and determine if the account removal event was logged. The information logged should, at a minimum, include enough detail to determine which account was disabled and when.

If the account removal event information was not logged, this is a finding."
V-6155,medium,"The designer will ensure the application provides a capability to terminate a session and log out.
","If a user cannot log out of the application, subsequent users of a shared system could continue to use the previous user's session to the application.",['DCSQ-1'],SV-6155r1_rule,F-17075r1_fix,"Implement a capability to terminate a session and logout.
",C-3034r1_chk,"Log on to the application and then attempt to log out.  If this option is not available, ask the application representative to explain how this function is performed.  

1) If the ability to log out is absent or is hidden to the extent most users cannot reasonably expect to easily find it, it is a finding."
V-6133,medium,"The IAO will ensure unnecessary built-in application accounts are disabled.
","Default passwords and properties of built-in accounts are often publicly available.  Anyone with necessary knowledge, internal or external, can compromise an application using built-in accounts.",['IAIA-1'],SV-6133r1_rule,F-4425r1_fix,Disable unnecessary built-in userids,C-3051r1_chk,"If the user accounts used in the application are only operating system or database accounts, this check is Not Applicable.
 
Built-in accounts are those that are added as part of the installation of the application software.  These accounts exist for many common commercial off-the-shelf (COTS) or open source components of enterprise applications (e.g., OS, web browser or database software).   If SRRs are performed for these components, this is not applicable because the other SRRs will capture the relevant information and findings.  If not, read the installation documentation to identify the built-in accounts.  Also peruse the account list for obvious examples (e.g., accounts with vendor names such as Oracle or Tivoli).  Verify that these accounts have been removed or disabled.  If enabled built-in accounts are present, ask the application representative the reason for their existence.  
 
1) If these accounts are not necessary to run the application, it is a finding.  
 
2) If any of these accounts are privileged, it is a finding.
"
V-27168,medium,The application must support the requirement to back up audit data and records onto a different system or media than the system being audited on an organization-defined frequency.,"Protection of log data includes assuring log data is not accidentally lost or deleted.  Backing up audit records to a different system or onto separate media than the system being audited on an organizationally defined frequency helps to assure in the event of a catastrophic system failure, the audit records will be retained. ",None,SV-34467r1_rule,None,None,None,None
V-26811,medium,Applications must use security policy filters as a basis for making information flow control decisions.,"Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

Information flow enforcement mechanisms compare security attributes on all information (data content and data structure), source and destination objects, and respond appropriately (e.g., block, quarantine, alert administrator) when the mechanisms encounter information not explicitly allowed by the information flow policy. 

Security policy filters are defined by the organization and include, dirty word filters, file type checking filters, structured data filters, unstructured data filters, metadata content filters, and hidden content filters. 

- Structured data typically describes data intended for storage in a data management system such as a relational database.
- Unstructured data refers to masses of digital information that do not have a data structure such as word processing documents, email, pictures, audio, and video.
- In the case of unstructured data, metadata is considered to be data about the data in question. 
- In the case of structured data, metadata is considered to be data about the containers of the data. 
",None,SV-34061r1_rule,None,None,None,None
V-26940,medium,The application must support the employment of automated mechanisms supporting the auditing of enforcement actions.,"Any changes to the hardware, software, and/or firmware components of the information system and/or application can potentially have significant effects on the overall security of the system. 

Accordingly, only qualified and authorized individuals are allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications. 

Access restrictions for change also include software libraries. 

Examples of access restrictions include:  physical and logical access controls, workflow automation, media libraries, abstract layers (e.g., changes are implemented into a third-party interface rather than directly into the information system component), and change windows (e.g., changes occur only during specified times, making unauthorized changes outside the window easy to discover). ",None,SV-34220r1_rule,None,None,None,None
V-29189,medium,Applications must isolate security functions enforcing access and information flow control from both non-security functions and from other security functions.,"Application functionality is typically broken down into modules that perform various tasks or roles.  Examples of non-privileged application functionality include, but are not limited to, application modules written for displaying data or printing reports. 

Application security functionality that performs security tasks such as enforcing access and information flow control requires additional system privilege and can have a large impact on the security of the application and its data.  Rather than allowing the entire application access to this security functionality, application developers must isolate these critical functions from non-privileged application functions and other security functions.",None,SV-37460r1_rule,None,None,None,None
V-26913,medium,"Web services applications establishing identities at run-time for previously unknown entities must dynamically manage identifiers, attributes, and associated access authorizations.","Web services are web applications providing a method of communication between two or more different electronic devices.  They are normally used by applications to provide each other with data.  

The W3C defines a web service as:
""a software system designed to support interoperable machine to machine interaction over a network. It has an interface described in a machine processable format (specifically Web Services Description Language or WSDL). Other systems interact with the web service in a manner prescribed by its description using SOAP messages typically conveyed using HTTP with an XML serialization in conjunction with other web-related standards"".

Web services provide different challenges in managing access than what is presented by typical user based applications. In contrast to conventional access control approaches which employ static information system accounts and predefined sets of user privileges, many service-oriented architecture implementations rely on run time access control decisions facilitated by dynamic privilege management.  While user identities remain relatively constant over time, user privileges may change more frequently based on the ongoing mission/business requirements and operational needs of the organization. 

In contrast to conventional approaches to identification and authentication which employ static information system accounts for preregistered users, many service-oriented architecture implementations rely on establishing identities at run time for entities that were previously unknown. Dynamic establishment of identities and association of attributes and privileges with these identities are anticipated and provisioned. Pre-established trust relationships and mechanisms with appropriate authorities to validate identities and related credentials are essential.",None,SV-34193r1_rule,None,None,None,None
V-26886,medium,Applications must notify users of  organization-defined security-related changes to the user’s account occurring during the organization-defined time period.,"Some organizations may define certain security events as events requiring user notification.  An organization may define an event such as a password change to a user's account occurring outside of normal business hours as a security related event requiring that the application user be notified. In those instances, where organizations define such events, the application must notify the affected user or users.",None,SV-34166r1_rule,None,None,None,None
V-70275,medium,"The application must reveal error messages only to the ISSO, ISSM, or SA.","Only authorized personnel should be aware of errors and the details of the errors. Error messages are an indicator of an organization's operational state or can identify application components. Additionally, Personally Identifiable Information (PII) and operational information must not be revealed through error messages to unauthorized personnel or their designated representatives.

The structure and content of error messages must be carefully considered by the organization and development team. The extent to which the information system is able to identify and handle error conditions is guided by organizational policy and operational requirements.

Error messages should not include variable names, variable types, SQL strings, or source code. Errors that contain field names from the screen and a description of what should be in the field should not be considered a finding.",None,SV-84897r1_rule,F-76511r1_fix,"Configure the server to only send error messages containing system information or sensitive data to privileged users.

Use generic error messages for non-privileged users.",C-70751r1_chk,"Review the application documentation and interview the application administrator for details regarding how the application displays error messages.

Authenticate to the application as a non-privileged user and attempt to execute functionality that will generate error messages.

Review the error messages displayed to ensure no sensitive information is provided to end users.

Authenticate as a privileged user and repeat tests.

If error messages are designed to provide users with just enough detail to pass along to support staff in order to aid in troubleshooting such as date, time or other generic information, this is not a finding.

If detailed error messages are provided to privileged users, this is not a finding.

If variable names, SQL strings, system path information, or source or program code are displayed in error messages sent to non-privileged users, this is a finding."
V-70423,low,The application must generate audit records when concurrent logons from different workstations occur.,"When an application provides users with the ability to concurrently logon, an event must be recorded that indicates the user has logged on from different workstations. It is important to ensure that audit logs differentiate between the two sessions.

The event data must include the user ID, the workstation information and application session information that provides the details necessary to determine which application session executed what action on the system.",None,SV-85045r1_rule,F-76659r1_fix,Configure the application to log concurrent logons from different workstations.,C-70877r1_chk,"Review the application documentation and interview the application administrator to identify where log records are stored.

Access log records then log on to the application as a regular user from one workstation. Take note of workstation IP address and confirm the address as the source workstation.

Have the application administrator log on to the application from another workstation using the same account.

Validate the IP address of the second workstation is recorded in the logs.

If the application does not create an audit record when concurrent logons occur from different workstations, this is a finding."
V-19707,medium,"The designer will ensure supporting application services and interfaces have been designed, or upgraded for, IPv6 transport. 
","If the application's supporting services (e.g., software update, security update, driver updating, and automatic patching services) have not been updated to retrieve updates over a IPv6  network connection,  there is a possibility the application will not execute properly, and as a result, a denial of service could occur.
",['DCSQ-1'],SV-21848r1_rule,F-23064r1_fix,Upgrade supporting application services and interfaces for IPv6 transport.,C-24104r1_chk,"Ask the application representative for the design document. Review the design document for application services supporting IPv6.

Verify supporting application layer services (such as, File Transfer Protocol (FTP), Network File system (NFS), Hyper Text Transfer Protocol (HTTP)) have been upgraded and tested for IPv6.

1) If the supporting application layer services have not been upgraded and tested for IPv6, it is a finding.

Verify security functions have been updated for IPv6 addressing and network services.

2) If security functions have not been updated for IPv6 addressing and network services, it is a finding.

Verify all software update, security update, driver updating, and automatic patching services which retrieve updates over a network connection have been updated to run over IPv6 transport.

3) If all software update, security update, driver updating, and automatic patching have not been updated to run over IPv6 transport, it is a finding.

Verify all client-facing server interfaces have been upgraded for IPv6.

4) If all client-facing server interfaces have not been upgraded for IPv6, it is a finding."
V-26666,medium,The application must support the requirement to initiate a session lock after an organization defined time period of system or application inactivity has transpired. ,"A session time-out lock is a temporary action taken when a user stops work and moves away from the immediate physical vicinity of the information system but does not log out because of the temporary nature of the absence.  Rather than relying on the user to manually lock their application session prior to vacating the vicinity, applications need to be able to identify when a user's application session has idled and take action to initiate the session lock.

The session lock is implemented at the point where session activity can be determined and/or controlled. This is typically at the operating system-level and results in a system lock, but may be at the application-level where the application interface window is secured instead. The organization defines the period of inactivity that shall pass before a session lock is initiated so this must be configurable.  ",None,SV-33797r1_rule,None,None,None,None
V-57503,medium,The application server must accept Personal Identity Verification (PIV) credentials to access the management interface.,"The use of PIV credentials facilitates standardization and reduces the risk of unauthorized access.

PIV credentials are only used in an unclassified environment.

DoD has mandated the use of the CAC to support identity management and personal authentication for systems covered under HSPD 12, as well as its use as a primary component of layered protection for national security systems.

The application server must support the use of PIV credentials to access the management interface and perform management functions.",None,SV-71779r2_rule,F-62571r1_fix,Configure the application server to accept PIV credentials to access the management interface.,C-58211r1_chk,"Review application server documentation and configuration to ensure the application server accepts PIV credentials to the management interface.

If PIV credentials are not accepted, this is a finding."
V-57493,medium,The application server must log the enforcement actions used to restrict access associated with changes to the application server.,"Without logging the enforcement of access restrictions against changes to the application server configuration, it will be difficult to identify attempted attacks, and a log trail will not be available for forensic investigation for after-the-fact actions.  Configuration changes may occur to any of the modules within the application server through the management interface, but logging of actions to the configuration of a module outside the application server is not logged.

Enforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. Enforcement action methods may be as simple as denying access to a file based on the application of file permissions (access restriction). Log items may consist of lists of actions blocked by access restrictions or changes identified after the fact.",None,SV-71769r2_rule,F-62561r1_fix,Configure the application server to log the enforcement actions used to restrict access associated with changes to the application server.,C-58201r1_chk,"Check the application server documentation and logs to determine if enforcement actions used to restrict access associated with changes to the application server are logged.

If these actions are not logged, this is a finding."
V-30590,medium,The application must employ automated mechanisms to alert security personnel of inappropriate or unusual activities with security implications.,"Applications will typically utilize logging mechanisms for maintaining a historical log of activity that occurs within the application.  This information can then be used for diagnostic purposes, forensics purposes or other purposes relevant to ensuring the availability and integrity of the application.  

While it is important to log events identified as being critical and relevant to security, it is equally important to notify the appropriate personnel in a timely manner so they are able to respond to events as they occur.

Solutions that include a manual notification procedure do not offer the reliability and speed of an automated notification solution. Applications must employ automated mechanisms to alert security personnel of inappropriate or unusual activities that have security implications.  If this capability is not built directly into the application, the application must be able to integrate with existing security infrastructure that provides this capability.",None,SV-40335r1_rule,None,None,None,None
V-16838,low,"Procedures are not in place to notify users when an application is decommissioned.
","When maintenance no longer exists for an application, there are no individuals responsible for making security updates.  The application should maintain procedures for decommissioning.
",['DCSD-1'],SV-17838r1_rule,F-17158r1_fix,"Create and establish procedures to notify users when an application is decommissioned.
",C-17844r1_chk,"Interview the application representative to determine if provisions are in place to notify users when an application is decommissioned.
 
1) If provisions are not in place to notify users when an application is decommissioned, it is a finding."
V-27021,medium,Applications must be built to fail to a known safe state for defined types of failures.,"Failure in a known state can address safety or security in accordance with the mission/business needs of the organization. 

Failure in a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system. 

Failure in a known safe state helps prevent systems from failing to a state that may cause loss of data or unauthorized access to system resources. Applications or systems that fail suddenly and with no incorporated failure state planning may leave the hosting system available but with a reduced security protection capability.  Preserving information system state information also facilitates system restart and return to the operational mode of the organization with less disruption of mission/business processes. 

An example is a firewall that blocks all traffic rather than allowing all traffic when a firewall component fails.  This prevents an attacker from forcing a failure of the system in order to obtain access.
",None,SV-34315r1_rule,None,None,None,None
V-70241,medium,The web service design must include redundancy mechanisms when used with high-availability systems.,"DoS is a condition when a resource is not available for legitimate users. When this occurs, the organization either cannot accomplish its mission or must operate at degraded capacity.

In the case of application DoS attacks, care must be taken when designing the application to ensure the application makes the best use of system resources. SQL queries have the potential to consume large amounts of CPU cycles if they are not tuned for optimal performance. Web services containing complex calculations requiring large amounts of time to complete can bog down if too many requests for the service are encountered within a short period of time.

The methods employed to meet this requirement will vary depending upon the technology the application utilizes. However, a variety of technologies exist to limit or, in some cases, eliminate the effects of application related DoS attacks. Employing increased capacity and bandwidth combined with specialized application layer protection devices and service redundancy may reduce the susceptibility to some DoS attacks.",None,SV-84863r1_rule,F-76477r1_fix,Build the application to address issues that are found in a redundant environment and utilize redundancy mechanisms to provide high availability.,C-70717r1_chk,"Interview the application administrator and review the system documentation to determine if the application has been designated as a high availability system and if the application is designed to operate in a high availability environment.

If the application has not been designated as a high availability system, this requirement is not applicable.

Review the application architecture documentation and identify solutions that provide application DoS protections. 

Verify the application has been built to work in a clustered or otherwise high availability environment in accordance with documented availability requirements.

This includes:

- load balancers
- redundant systems such as multiple web, application servers or DB servers
- high bandwidth or redundant data circuits
- multiple data centers (geographic dispersal)
- server clusters

If the application has been designated as high availability but the architecture is not built to high availability standards, this is a finding."
V-57445,medium,The application server must generate log records for privileged activities.,"Without generating log records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.

Privileged activities would occur through the management interface.  This interface can be web-based or can be command line utilities.  Whichever method is utilized by the application server, these activities must be logged.",None,SV-71717r2_rule,F-62483r1_fix,Configure the application server to generate log records for privileged activities.,C-58121r1_chk,"Review the application server documentation and the system configuration to determine if the application server generates log records for privileged activities.

If log records are not generated for privileged activities, this is a finding."
V-69515,medium,"The application must prevent program execution in accordance with organization-defined policies regarding software program usage and restrictions, and/or rules authorizing the terms and conditions of software program usage.","Control of application execution is a mechanism used to prevent execution of unauthorized applications in order to follow the rules of least privilege. Some applications may provide a capability that runs counter to the mission or provides users with functionality that exceeds mission requirements.

Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions). Removal of executable programs is not always possible; therefore, establishing a method of preventing program execution is critical to maintaining a secure system baseline.

Software program restrictions include restricting execution of programs in certain environments, while preventing execution in other environments; or limiting execution of certain application functionality based on organization-defined criteria (e.g., privileges, subnets, sandboxed environments, security managers, roles).",None,SV-84137r1_rule,F-75689r1_fix,"Restrict application execution in accordance with the policy, terms, and conditions specified.",C-69933r1_chk,"Review the application documentation and interview the application administrator to determine if policies, rules, or restrictions exist regarding application usage or terms which authorize the conditions of application use.

If the policy, terms, or conditions state there are no usage restrictions, this requirement is not applicable.

Interview the application administrator, review policy, terms, and conditions documents to determine what the terms and conditions of application usage are.

Have the application administrator demonstrate how the program execution is restricted in accordance with the policy terms and conditions. Typical methods include but are not limited to the use of Windows Group Policy, AppLocker, Software Restriction Policies, Java Security Manager, and Role-Based Access Control (RBAC).

If application requirements or policy documents specify application execution restriction requirements and the execution of the application or its subcomponents are not restricted in accordance with requirements or policy, this is a finding."
V-57551,medium,The application server must only allow the use of DoD PKI-established certificate authorities for verification of the establishment of protected sessions.,"Untrusted Certificate Authorities (CA) can issue certificates, but they may be issued by organizations or individuals that seek to compromise DoD systems or by organizations with insufficient security controls. If the CA used for verifying the certificate is not a DoD-approved CA, trust of this CA has not been established.

The DoD will only accept PKI certificates obtained from a DoD-approved internal or external certificate authority. Reliance on CAs for the establishment of secure sessions includes, for example, the use of SSL/TLS certificates.  The application server must only allow the use of DoD PKI-established certificate authorities for verification.",None,SV-71827r2_rule,F-62619r1_fix,Configure the application server to allow the use of DoD PKI-established certificate authorities for verification of the establishment of protected sessions.,C-58259r1_chk,"Review the application server documentation and configuration to determine if the application server only allows the use of DoD PKI-established certificate authorities.

If the application server allows other certificate authorities for verification, this is a finding."
V-6170,low,"The Program Manager and designer will ensure any IA, or IA enabled, products used by the application are NIAP approved or in the NIAP approval process.

","IA or IA enabled products that have not been evaluated by NIAP may degrade the security posture of the enclave, if they do not operate as expected, be configured incorrectly, or have hidden security flaws. ",['DCAS-1'],SV-6170r1_rule,F-16974r1_fix,"Limit the acquisition of all IA, and IA enabled Commercial-off-the-Shelf (COTS) IT products, to products that have been evaluated or validated through The International Common Criteria (CC) for Information Security Technology Evaluation Mutual Recognition Arrangement or  The NIAP Evaluation and Validation Program.  IA and IA enabled COTS IT Products containing encryption capabilities are required to be evaluated and validated through The FIPS Validation Program",C-2963r1_chk,"List all IA or IA enabled products that are part of the application.  Such products must be satisfactorily evaluated and validated either prior to purchase or as a condition of purchase; i.e., vendors will warrant, in their responses to a solicitation and as a condition of the contract, that the vendor's products will be satisfactorily validated within a period of time specified in the solicitation and the contract. Purchase contracts shall specify that product validation will be maintained for updated versions or modifications by subsequent evaluation or through participation in the National IA Partnership (NIAP) / Common Criteria Evaluated Products.
 
1) If the products have not been evaluated or are in the process of being evaluated, it is a finding.
 
According to NSTISSP 11, an IA enabled product is a product or technology whose primary role is not security, but which provides security services as an associated feature of its intended operating capabilities. To meet the intent of NSTISSP 11, acquired IA enabled products must be evaluated if the IA features are going to be used to perform one of following security services: availability, integrity, confidentiality, authentication, or non-repudiation. Therefore, the determination of whether an IA enabled product must be evaluated will be dependent upon how that particular product will be used within the consumer's system architecture. Examples of such products include security enabled web browsers, screening routers, and security enabled messaging systems. Although NSTISSP 11 uses both terms, the policy as stated applies equally to both types of products. 

A list of certified products is available on the common criteria website: http://www.commoncriteriaportal.org/products.html

Below are definitions of IA and IA enabled products from DoD Instruction 8500.2.
 
IA Product - Product or technology whose primary purpose is to provide security services e.g., confidentiality, authentication, integrity, access control or non-repudiation of data; correct known vulnerabilities; and/or provide layered defense against various categories of non-authorized or malicious penetrations of information systems or networks. Examples include such products as data/network encryptors, firewalls, and intrusion detection devices.
 
IA Enabled Product - Product or technology whose primary role is not security, but which provides security services as an associated feature of its intended operating capabilities. Examples include such products as security-enabled web browsers, screening routers, trusted operating systems, and security-enabled messaging systems."
V-26935,medium,"The application must use mechanisms for authentication to a cryptographic module that meet the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance for such authentication.","Encryption is only as good as the encryption modules utilized. Unapproved cryptographic module algorithms cannot be verified, and cannot be relied upon to provide confidentiality or integrity and DoD data may be compromised due to weak algorithms. 

Applications utilizing encryption are required to use approved encryption modules that meet the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.  

FIPS 140-2 is the current standard for validating cryptographic modules and NSA Type-X (where X=1, 2, 3, 4) products are NSA certified hardware based encryption modules. ",None,SV-34215r1_rule,None,None,None,None
V-6162,medium,"The designer will ensure uncategorized or emerging mobile code is not used in applications. 
",Mobile code does not require any traditional software acceptance testing or security validation.  Mobile code needs to follow sound policy to maintain a reasonable level of trust.  Mobile code that does not fall into existing policy cannot be trusted.,['DCMC-1'],SV-6162r1_rule,F-4470r1_fix,Remove uncategorized mobile code.,C-3040r1_chk,"Ask the application representative for design documentation and examine the documentation to determine if additional mobile code types are being used that have not been defined in the mobile code policy. 
 
By definition, mobile code is software obtained from remote systems outside the enclave boundary, transferred across a network, and then downloaded and executed on a local system without explicit installation or execution by the recipient.  
 
In order to determine if an emerging technology is covered by the current policy, excerpts of the DoD Mobile Code Policy dated 23 October 2006, and policy memorandum are included so the reviewer knows what types of technologies are included, which he or she must know to determine what is outside the scope of the policy.  

The memorandum containing the Mobile Code Technologies Risk Category List is available here:

https://powhatan.iiie.disa.mil/mcp/mobile-code-memo-2011Mar14.pdf
 
Items covered by the policy include:
 
• ActiveX
• Windows Scripting Host when used as mobile code
• Unix Shell Scripts when used as mobile code
• DOS batch scripts when used as mobile code
• Java applets and other Java mobile code
• Visual Basic for Applications (VBA)
• LotusScript
• PerfectScript
• Postscript
• JavaScript (including Jscript and ECMAScript variants)
• VBScript
• Portable Document Format (PDF)
• Shockwave/Flash
• Rich Internet Applications

Currently the following are not designated as mobile code by the policy:
 
• XML
• SMIL
• QuickTime
• VRML (exclusive of any associated Java applets or JavaScript scripts)
 
The following are outside the scope of the DoD Mobile Code Policy:
 
• Scripts and applets embedded in or linked to web pages and executed in the context of the web server.  Examples of this are Java servlets, Java Server pages, CGI, Active Server Pages, CFML, PHP, SSI, server-side JavaScript, server-side LotusScript.
• Local programs and command scripts  
• Distributed object-oriented programming systems (e.g., CORBA, DCOM).
• Software patches, updates, including self-extracting updates - software updates that must be invoked explicitly by the user are outside the mobile code policy.  Examples of technologies in this area include: Netscape SmartUpdate, Microsoft Windows Update, Netscape web browser plug-ins and Linux.
 
If other types of mobile code technologies are present that are not covered by the policy, a written waiver must be granted by the CIO (allowing use of emerging mobile code technology).  Also uncategorized mobile code must be submitted for approval.  
 
1) If the application representative is unable to present the written waiver granted by the CIO, it is finding.  
 
2) If the application representative provides acceptable written waiver granted by the CIO, it is not a finding."
V-19701,medium,"The designer will ensure SOAP messages requiring integrity, sign the following message elements:
-Message ID
-Service Request
-Timestamp
-SAML Assertion (optionally included in messages)
","Digitally signed SOAP messages provide message integrity and authenticity of the signer of the message independent of the transport layer. Service requests may be intercepted and changed in transit and the data integrity may be at risk if the SOAP message is not digitally signed. 
",['ECTM-1'],SV-21842r1_rule,F-23098r1_fix,"Sign the following message elements for SOAP messages requiring integrity:
-Message ID
-Service Request
-Timestamp
-SAML Assertion.
",C-24098r1_chk,"If the application does not utilize SOAP messages, this check is not applicable.

Ask the application representative for the design document. Review the design document for web services using SOAP messages. Review the design document and verify the message elements Message ID, Service Request, Timestamp and SAML Assertion are signed.
 
1) If the design document does not exists or does not indicate the entire SOAP messages requiring integrity do not have the appropriate fields, it is a finding."
V-70217,medium,"The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality.","Sequentially generated session IDs can be easily guessed by an attacker. Employing the concept of randomness in the generation of unique session identifiers helps to protect against brute-force attacks to determine future session identifiers.

Unique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session. If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.

This requirement focuses on communications protection for the application session rather than for the network packet.

This requirement applies to applications that utilize communications sessions. This includes, but is not limited to, web-based applications and Service-Oriented Architectures (SOA).",None,SV-84839r1_rule,F-76453r1_fix,"Configure the application to use FIPS 140-2-validated cryptographic modules when the application implements encryption, key exchange, digital signatures, random number generators, and hash functionality.",C-70693r1_chk,"Review the application documentation and interview the application administrator.

Identify if the application implements encryption, key exchange, digital signature, or hash functionality.

Identify the cryptographic modules utilized by the application for these functions. The application may be designed to use the crypto functionality of the underlying OS or it may be a product of the application itself.

Identify the cryptographic service provider utilized by the application and reference the NIST validation website to ensure the algorithms utilized are approved.

http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140val-all.htm

If the application does not use FIPS 140-2-approved encryption algorithms, this is a finding."
V-70403,high,Default passwords must be changed.,Default passwords can easily be compromised by attackers allowing immediate access to the applications.,None,SV-85025r1_rule,F-76639r1_fix,"Configure the application to use strong authenticators instead of passwords when possible. Otherwise, change default passwords to a DoD-approved strength password and follow all guidance for passwords.",C-70857r1_chk,"Identify the application name and version and do an Internet search for the product name and the string ""default password"".

If default passwords are found, attempt to authenticate with the published default passwords.

If authentication is successful, this is a finding."
V-69541,medium,The application must ensure users are authenticated with an individual authenticator prior to using a group authenticator.,"To assure individual accountability and prevent unauthorized access, application users must be individually identified and authenticated. Individual accountability mandates that each user is uniquely identified.

A group authenticator is a shared account or some other form of authentication that allows multiple unique individuals to access the application using a single account.

If an application allows or provides for group authenticators, it must first individually authenticate users prior to implementing group authenticator functionality.

Some applications may not have the need to provide a group authenticator; this is considered a matter of application design. In those instances where the application design includes the use of a group authenticator, this requirement will apply.

There may also be instances when specific user actions need to be performed on the information system without unique user identification or authentication. An example of this type of access is a web server which contains publicly releasable information.",None,SV-84163r1_rule,F-75715r1_fix,Design and configure the application to individually authenticate group account members prior to allowing access.,C-69959r1_chk,"Review the application documentation, examine user accounts, group membership and interview the application administrator to identify group or shared accounts. Document the group or shared account information.

If the application does not use group or shared accounts, this requirement is not applicable.

Create a test account or use an existing group member account.

Ensure the test account is not authenticated to the application and attempt to access the application with the group account credentials.

If the application allows access without first requiring the group member to authenticate with their individual credentials, this is a finding."
V-57491,medium,The application server must enforce access restrictions associated with changes to application server configuration.,"When dealing with access restrictions pertaining to change control, it should be noted that any changes to the software, and/or application server configuration can potentially have significant effects on the overall security of the system.

Access restrictions for changes also include application software libraries.

If the application server provides automatic code deployment capability, (where updates to applications hosted on the application server are automatically performed, usually by the developers' IDE tool), it must also provide a capability to restrict the use of automatic application deployment. Automatic code deployments are allowable in a development environment, but not in production.",None,SV-71767r2_rule,F-62559r1_fix,"Configure the application server to enforce access restrictions associated with changes to the application server configuration to include code deployment, library updates, and changes to application server configuration settings.",C-58199r1_chk,"Review the application server documentation and configuration to determine if the system employs mechanisms to enforce restrictions on application server configuration changes.

Configuration changes include, but are not limited to, automatic code deployments, software library updates, and changes to configuration settings within the application server.

If the application server does not enforce access restrictions for configuration changes, this is a finding."
V-27085,medium,The application must provide an audit reduction capability.,"Audit reduction is used to reduce the volume of audit records in order to facilitate manual review.  Before a security review information systems and/or applications with an audit reduction capability may remove many audit records known to have little security significance. 

This is generally accomplished by removing records generated by specified classes of events, such as records generated by nightly backups. Audit reduction does not alter original audit records. 

An audit reduction capability provides support for near real-time audit review and analysis requirements and after-the-fact investigations of security incidents. ",None,SV-34380r1_rule,None,None,None,None
V-16814,medium,"The designer will ensure the application does not disclose unnecessary information to users.
","Applications should not disclose information not required for the transaction.  (e.g., a web application should not divulge the fact there is a SQL server database and/or its version) This provides attackers additional information which they can use to find other attack avenues, or tailor specific attacks, on the application.",['ECCD-1'],SV-17814r1_rule,F-17231r1_fix,Remove unnecessary information displayed by the application.,C-17813r1_chk,"Ask the application representative to demonstrate the application does not disclose any information about the application which could be used by an attacker to gain access to the application. UDDI registries should also not provide any information about the application which could be used by an attacker to gain access to the web service. WSDL should not provide unnecessary information (especially debugging features).

Ask the application representative to login as a non-privileged user and review all screens of the application to identify any potential data that should not be disclosed to the user.
 
1) If the application displays any data that should not be disclosed, this is a finding."
V-70259,medium,The application must protect from Cross-Site Request Forgery (CSRF) vulnerabilities.,"Cross-Site Request Forgery (CSRF) is an attack where a website user is forced to execute an unwanted action on a website that he or she is currently authenticated to. An attacker, through social engineering (e.g., e-mail or chat) creates a hyperlink which executes unwanted actions on the website the victim is authenticated to and sends it to the victim. If the victim clicks on the link, the action is executed unbeknownst to the victim.

A CSRF attack executes a website request on behalf of the user which can lead to a compromise of the user’s data. What is needed to be successful is for the attacker to know the URL, an authenticated application user, and trick the user into clicking the malicious link.

While XSS is not needed for a CSRF attack to work, XSS vulnerabilities can provide the attacker with a vector to obtain information from the user that may be used in mitigating the risk. The application must not be vulnerable to XSS as an XSS attack can be used to help defeat token, double-submit cookie, referrer and origin-based CSRF defenses.",None,SV-84881r1_rule,F-76495r1_fix,Configure the application to use unpredictable challenge tokens and check the HTTP referrer to ensure the request was issued from the site itself.  Implement mitigating controls as required such as using web reputation services.,C-70735r1_chk,"Review the application documentation, the code review reports and the vulnerability assessment scan results from the automated vulnerability assessment tools.

Verify scan configuration settings include web-based application settings which include XSS tests.

Review the scan results for CSRF vulnerabilities.

If the scan results indicate aspects of the application are vulnerable to CSRF, request subsequent scan data that shows the CSRF vulnerabilities previously detected have been fixed.

If results that show compliance are not available, request proof of any steps that have been taken to mitigate the risk.

Mitigation steps include using web reputation filters to identify sources of exploits delivered via CSRF, web application firewalls that validate cookie and the referrer field in the HTTP headers, or product specific IPS filters that identify and intercept known CSRF vulnerabilities in web-based applications.

If scan results are not available ask the application administrator to provide evidence that shows the application is designed to address CSRF security issues. There are various methods for mitigating the risk, including using a challenge token that is tied to the users session.

If application scan results show an unremediated CSRF vulnerability, or if no scan results are available, or no mitigations have been enabled, this is a finding."
V-70421,medium,Connections between the DoD enclave and the Internet or other public or commercial wide area networks must require a DMZ.,"In order to protect DoD data and systems, all remote access to DoD information systems must be mediated through a managed access control point, such as a remote access server in a DMZ.",None,SV-85043r1_rule,F-76657r1_fix,Setup a DMZ between DoD and public networks.,C-70875r1_chk,"Interview the application representative and determine if the application is publicly accessible.

If the application is publicly accessible and traffic is not being routed through a DMZ, this is a finding."
V-69443,medium,The application must provide centralized management and configuration of the content to be captured in audit records generated by all application components.,"Without the ability to centrally manage the content captured in the audit records, identification, troubleshooting, and correlation of suspicious behavior would be difficult and could lead to a delayed or incomplete analysis of an ongoing attack.

This requirement requires that the content captured in audit records be managed from a central location (necessitating automation). Centralized management of audit records and logs provides for efficiency in maintenance and management of records, as well as the backup and archiving of those records. Application components requiring centralized audit log management must have the capability to support centralized management.

This requirement applies to centralized management applications or similar types of applications designed to manage and configure audit record capture.",None,SV-84065r1_rule,F-75619r1_fix,Configure the application to utilize a centralized log management system that provides the capability to configure the content of audit records.,C-69861r1_chk,"Review the application documentation and interview the application administrator to determine the logging architecture of the application.

If the application is configured to log application event entries to a centralized, enterprise based logging solution that meets this requirement, the requirement is not applicable.

Review the application components and the log management capabilities of the application.

Verify the application log management interface includes the ability to centrally manage the configuration of what is captured in the logs of all application components. 

If the application does not provide the ability to centrally manage the content captured in the audit logs, this is a finding."
V-70257,high,The application must protect from Cross-Site Scripting (XSS) vulnerabilities.,"XSS attacks are essentially code injection attacks against the various language interpreters contained within the browser. XSS can be executed via HTML, JavaScript, VBScript, ActiveX; essentially any scripting language a browser is capable of processing.

XSS vulnerabilities are created when a website does not properly sanitize, escape, or encode user input. For example, ""&lt;"" is the HTML encoding for the ""<"" character. If the encoding is performed, the script code will not execute.

There are 3 parties involved in an XSS attack, the attacker, the trusted and vulnerable website, and the victim. An attacker will take advantage of a vulnerable website that does not properly validate user input by inserting malicious code into any data entry field.

When the victim visits the trusted website and clicks on the malicious link left by the attacker, the attacker’s script is executed in the victims browser with the trust permissions assigned to the site.

There are several different types of XSS attack and the complete details regarding XSS cannot be described completely here.

To address the issue of XSS, web application developers must escape, encode or otherwise validate all user input that is processed and output by the web server. They should also use web templates or a web development framework that provides the capability to encode or otherwise validate user input.

Examples of XSS vulnerabilities can be obtained from the Open Web Application Security Project (OWASP) website.
  
The site is available by pointing your browser to https://www.owasp.org.",None,SV-84879r1_rule,F-76493r1_fix,"Verify user input is validated and encode or escape user input to prevent embedded script code from executing.

Develop your application using a web template system or a web application development framework that provides auto escaping features rather than building your own escape logic.",C-70733r1_chk,"Review the application documentation and the vulnerability assessment scan results from automated vulnerability assessment tools.

Verify scan configuration settings include web-based applications settings which include XSS tests.
 
Review scan results for XSS vulnerabilities.

If the scan results indicate aspects of the application are vulnerable to XSS, request subsequent scan data that shows the XSS vulnerabilities previously detected have been fixed.

If results that show compliance are not available, request proof of any steps that have been taken to mitigate the risk. This can include using network-based IPS to detect and prevent XSS attacks from occurring.

If scan results are not available, perform manual testing in various data entry fields to determine if XSS exist.

Navigate through the web application as a regular user and identify any data entry fields where data can be input.

Input the following strings:

<script>alert('hello')</script>
<img src=x onerror=""alert(document.cookie);""

If the script pop up box is displayed, or if scan reports show unremediated XSS results and no mitigating steps have been taken, this is a finding."
V-27165,medium,The application must protect audit tools from unauthorized deletion.,"Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. 

Depending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data.  If the tools are deleted, it would affect the administrator’s ability to access and review log data.  

Audit tools include but are not limited to OS provided audit tools, vendor provided audit tools, and open source audit tools needed to successfully view and manipulate audit information system activity and records.",None,SV-34464r1_rule,None,None,None,None
V-26939,medium,Applications that are designed and intended to address incident response scenarios must provide a configurable capability to automatically disable an information system if any of the organization defined security violations are detected.,"When responding to a security incident a capability must exist allowing authorized personnel to disable a particular system if the system exhibits a security violation and the organization determines an action is warranted. 

Organizations shall define a list of security violations that warrant an immediate disabling of a system.",None,SV-34219r1_rule,None,None,None,None
V-35424,medium,The application server must provide a clustering capability.,"This requirement is dependent upon system MAC and confidentiality. If the system MAC and confidentiality levels do not specify redundancy requirements, this requirement is NA.

Failure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system. When application failure is encountered, preserving application state facilitates application restart and return to the operational mode of the organization with less disruption of mission/business processes.

Clustering of multiple application servers is a common approach to providing fail-safe application availability when system MAC and confidentiality levels require redundancy.",None,SV-46711r3_rule,F-39968r2_fix,"This requirement is dependent upon system MAC and confidentiality.

If the system MAC and confidentiality levels do not specify redundancy requirements, this requirement is NA.

Configure the application server to provide application failover or participate in an application cluster which provides failover.",C-43775r2_chk,"This requirement is dependent upon system MAC and confidentiality.

If the system MAC and confidentiality levels do not specify redundancy requirements, this requirement is NA.

Review the application server configuration and documentation to ensure the application server is configured to provide clustering functionality.

If the application server is not configured to provide clustering or some form of failover functionality, this is a finding."
V-70253,medium,The application must not disclose unnecessary information to users.,"Applications should not disclose information not required for the transaction. (e.g., a web application should not divulge the fact there is a SQL server database and/or its version).

These events usually occur when the web application has not been configured to send specific error messages for error events. Instead, when a processing anomaly occurs, the application displays technical information about the type of application server, database in use, or other technical details.

This provides attackers additional information which they can use to find other attack avenues, or tailor specific attacks, on the application.",None,SV-84875r1_rule,F-76489r1_fix,Configure the application to not display technical details about the application architecture on error events.,C-70729r1_chk,"Review the application system documentation and interview the application administrators.

Ask them to demonstrate how the web server and application configuration does not disclose any information about the application which could be used by an attacker to gain access to the application.

Ask the application representative to logon as a non-privileged user and review all screens of the application to identify any potential data that should not be disclosed to the user.

Review web server configuration and determine if custom error pages are configured to display on error events.

Review error pages sent to application users to verify the pages are generic in nature and provide no technical details related to application architecture.

If the application displays any application technical data such as database version, application server information, or any other technical details that should not be disclosed to a regular user, this is a finding."
V-69253,medium,The application must associate organization-defined types of security attributes having organization-defined security attribute values with information in process.,"Without the association of security attributes to information, there is no basis for the application to make security related access-control decisions.

Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.

One example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing but either way, it is imperative these assignments are maintained while the data is in process. If the security attributes are lost when the data is being processed, there is the risk of a data compromise.",None,SV-83875r1_rule,F-75423r1_fix,Design and configure the application to retain the data marking when processing data.,C-69677r1_chk,"Review the application documentation and interview the application administrator.

Identify if the application requirements include data marking.  Also determine if the application processes classified, FOUO or other data that is required to be marked.

If the application does not contain classified, FOUO or have data marking requirements, this requirement is not applicable.

Access the user interface for the application and navigate through the application. Perform several application actions that will manipulate data contained within the application.

For example, create a test record and assign a data marking to the data element. Save the test record, close the data entry fields and navigate to display the test record. Perform an edit action on the test data that does not edit the marking itself or perform any other form of data processing such as assigning the data to another users work queue for review or printing the data, ensure the data marking is retained throughout the data processing actions.

If application data required to be marked does not retain its marking while it is being processed by the application, this is a finding."
V-69569,high,The application must transmit only cryptographically-protected passwords.,"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.

Examples of situations where a user ID and password might be used include but are not limited to:

- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.

- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.

and

- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.

Passwords need to be protected at all times and encryption is the standard method for protecting passwords. If passwords are not encrypted, they can be plainly read (i.e., clear text) and easily compromised.

Applications can accomplish this by making direct function calls to encryption modules or by leveraging operating system encryption capabilities.",None,SV-84191r1_rule,F-75745r1_fix,Configure the application to encrypt passwords when they are being transmitted.,C-69989r1_chk,"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.

If the application does not use passwords, the requirement is not applicable.

Identify when the application transmits passwords. This will most likely be when the user authenticates to the application or when the application authenticates to another resource.

Access the application management interface with a test account and access the functionality that requires a password be provided. If the interface is via a web browser, verify the web browser has gone secure prior to entering any password or authentication information.

This can be done by viewing the browser and observing a “lock” icon displayed somewhere in the browser as well as an https:// to indicate an SSL connection. Most browsers display this in the upper left hand corner.

If the application is transmitting the password rather than the user, obtain design documentation from the application admin that provides the details on how they are protecting the password during transmission. This will usually be via a TLS/SSL tunneled connection or VPN.

If the passwords are not encrypted when being transmitted, this is a finding."
V-6166,medium,The designer will ensure the application is not subject to error handling vulnerabilities.,"Unhandled exceptions leaves users with no means to properly respond to errors.  Mishandled exceptions can transmit information that can be used in future security breaches.   Properly handled errors allow applications to follow security procedures and guidelines in an informed manner.  If too much information is revealed in the error message, it can be used as the basis for an attack.",['DCSQ-1'],SV-6166r1_rule,F-16994r1_fix,Add code to properly handle or trap errors.,C-3042r1_chk,"Use the error messages generated from APP3510 as input into this check.  Ensure that the application provides error handling processes.  The application code should not rely on internal system generated error handling.  
 
1) If the errors are not being handled by the application, and are being processed by the underlying internal system, this is a CAT III finding.
 
Inspect the verbiage of the message.  Ensure that the application does not provide information that can be used by an attacker.  
 
2) If any of the following types of errors are displayed, this is a CAT II finding.  
 
Error messages should not include variable names, variable types, SQL strings, or source code.  Errors that contain field names from the screen and a description of what should be in the field should not be considered a finding."
V-69491,medium,The application must protect audit tools from unauthorized modification.,"Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.

Applications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the modification of audit tools.

Audit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.",None,SV-84113r1_rule,F-75667r1_fix,Configure the application to protect audit tools from unauthorized modifications. Limit users to roles that are assigned the rights to edit or update audit tools and establish file permissions that control access to the audit tools and audit tool capabilities and configuration settings.,C-69909r1_chk,"Review the system documentation and interview the application administrator for details regarding application architecture, audit methods, and provided audit tools.

Identify the application audit tools and their locations.

If the application does not provide a distinct audit tool oriented functionality that is a separate tool with an ability to view and manipulate log data, this requirement is not applicable.

Identify the methods used for implementing an audit tool functionality that is separate from the application. Typical methods are file-oriented in nature, e.g., the application includes a separate executable file or library that when invoked allows users to view and manipulate logs.

Identify the users with the rights to modify the audit tools. This capability will usually be reserved for admin staff.

Review file system permissions to ensure the application audit components such as executable files and libraries are protected by adequate file permission restrictions.

File permissions must be configured to limit access to only those users who have been identified and whose access has been approved.

If file permissions are configured so as to allow unapproved modifications to the audit tools, this is a finding."
V-6198,medium,"The Program Manager and IAO will ensure development systems, build systems, test systems, and all components comply with all appropriate DoD STIGs, NSA guides, and all applicable DoD policies. 
The Test Manager will ensure both client and server machines are STIG compliant.

","Applications developed on a non STIG compliant platform may not function when deployed to a STIG compliant platform, and therefore cause a potential denial of service to the users and the application, or require lessening security requirements on the client side of the application. ","['DCCS-1', 'DCCS-2', 'ECSC-1']",SV-6198r1_rule,F-16983r1_fix,"Configure application client, application development, as well as test and build systems using the approved DoD security guidance (e.g., DoD STIGs, NSA Guides, etc.) ",C-2962r1_chk,"The application and the application client (e.g., web browser, C++ application, etc.) must be designed to work on a STIG compliant platform. Vulnerabilities are discovered frequently and security updates must be applied constantly and may not be reflected in the latest baseline of a secure image of the operating system. Any finding required to make the application client operate correctly will be documented in this check.

Conduct a review of the application and the application client platform using the SRR process or utilize an up to date application/client platform SRR if available. Ensure the application client platform was included in the overall application SRR review. Ensure the SRR was completed after the most recent system updates or changes. If the client is Windows based and the application uses either a browser interface or an MS Office Product, a Desktop Application review must also be conducted.

1) If the review of the application client platform produces findings indicating that the application client will not operate correctly in a STIG compliant environment, it is a finding.

Ensure the application review includes test and build systems. All deployment, development, as well as test and build systems should be included in the application review to ensure the applicable DoD approved or other acceptable security configuration documents have been applied.

2) If the application review does not include all deployment, development, as well as test and build systems, it is a finding."
V-26849,medium,The application must produce audit records containing sufficient information to establish where the events occurred.,"Information system auditing capability is critical for accurate forensic analysis.   Audit record content that may be necessary to satisfy the requirement of this control, includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked. 

Without sufficient information establishing where the audit events occurred, investigation into the cause of events is severely hindered.",None,SV-34129r1_rule,None,None,None,None
V-27047,medium,Boundary protection applications must prevent discovery of specific system components (or devices) composing a managed interface.,Firewall control requirement for isolating and preventing the discovery of management interfaces. This control enhancement is intended to protect the network addresses of information system components that are part of the managed interface from discovery through common tools and techniques used to identify devices on a network.,None,SV-34342r1_rule,None,None,None,None
V-27095,medium,"The organization must employ a wireless intrusion detection system to detect attack attempts to the information system.
","Wireless intrusion detection monitors wireless network traffic for known attack patterns and notifies IA staff members when possible attacks are detected.

This is a network monitoring traffic analysis requirement to deploy wireless IDS. This does not apply to applications. ",None,SV-34390r1_rule,None,None,None,None
V-26916,medium,The application must support organizational requirements to prohibit password reuse for the organization-defined number of generations.,"Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. 

To meet password policy requirements, passwords need to be changed at specific policy based intervals.  

If the information system or application allows the user to consecutively reuse their password when that password has exceeded its defined lifetime, the end result is a password that is not changed as per policy requirements.  ",None,SV-34196r1_rule,None,None,None,None
V-69413,medium,The application must generate audit records for all direct access to the information system.,"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

When an application provides direct access to underlying OS features and functions, that access must be audited.
Audit records can be generated from various components within the information system (e.g., module or policy filter).",None,SV-84035r1_rule,F-75589r1_fix,Configure the application to log all direct access to the system.,C-69831r1_chk,"Review the application documentation and interview the application administrator.

Identify if the application implements a direct access feature or function that allows users to directly access the underlying OS.

Direct access includes but is not limited to: executing OS commands, navigating the file system, manipulating system resources such as print queues, or reading files hosted on the OS that are not specifically shared or made available on the website.

If the application does not provide direct access to the system, this requirement is not applicable.

Access the application logs.

Access the application as a user or test user with appropriate permissions and attempt to execute application features and functions that provide direct access to the system.

Review the logs and ensure the actions executed were logged.

Log information must include the user responsible for executing the action, the action executed, and the result of the action.

If the application does not log all direct access to the system, this is a finding."
V-70213,medium,Applications must not use URL embedded session IDs.,"Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.

Using a session ID that is copied to the URL introduces the risks that the session ID information will be written to log files, made available in browser history files, or made publicly available within the URL.

Using cookies to establish session ID information is desired.",None,SV-84835r1_rule,F-76449r1_fix,Configure the application to transmit session ID information via cookies.,C-70689r1_chk,"Review the application documentation and interview the application administrator.

Identify how the application generates session IDs.

If using a web development framework, ask the application administrator to provide details on the framework's session configuration.

Review the framework configuration setting to determine how the session identifiers are created.

Identify any compensating controls that may be leveraged to minimize risk to user sessions.

If the framework or the application is configured to transmit cookies within the URL or via URL rewriting, or if the session ID is created using a GET method and there are no compensating controls configured to address user session security, this is a finding."
V-26941,medium,Applications related to incident tracking must support organizational requirements to employ automated mechanisms to assist in the tracking of security incidents.,"Incident tracking is a method of monitoring networks and systems for activity indicative of viral infection or system attack. 

Monitoring for this type of activity provides the organization with the capability to proactively detect and respond to attacks. Automated mechanisms for tracking security incidents and collecting/analyzing incident information include, the Einstein network monitoring device and monitoring online Computer Incident Response Centers (CIRCs) or other electronic databases of incidents. ",None,SV-34222r1_rule,None,None,None,None
V-57557,medium,The application server must implement cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest on organization-defined information system components.,"Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an application server.  Alternative physical protection measures include protected distribution systems.

In order to prevent unauthorized disclosure or modification of the information, application servers must protect data at rest by using cryptographic mechanisms.

Selection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields).",None,SV-71833r2_rule,F-62625r1_fix,Configure the application server to implement cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest on organization-defined information system components.,C-58265r1_chk,"Review application server documentation and configuration to determine if the application server implements cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest on organization-defined information system components.

If the application server does not implement cryptographic mechanisms to prevent unauthorized modification, this is a finding."
V-26920,medium,The application must support organizational requirements to enforce password complexity by the number of numeric characters used.,"Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. 

Password complexity is one factor of several that determine how long it takes to crack a password. 

The more complex the password is, the greater the number of possible combinations that need to be tested before the password is compromised. 

Use of a complex password helps to increase the time and resources required to compromise the password. ",None,SV-34200r1_rule,None,None,None,None
V-35167,medium,The application server must produce log records containing sufficient information to establish where the events occurred.,"Application server logging capability is critical for accurate forensic analysis.  Without sufficient and accurate information, a correct replay of the events cannot be determined. 

Ascertaining the correct location or process within the application server where the events occurred is important during forensic analysis.  To determine where an event occurred, the log data must contain data such as application components, modules, session identifiers, filenames, host names, and functionality.",None,SV-46454r3_rule,F-39717r2_fix,Configure the application server logging system to log where the event took place.,C-43549r3_chk,"Review the logs on the application server to determine if the logs contain information that establishes where within the application server the event occurred.  The data in the log file should establish the component, module, session identifier, filename, host name, and functionality within the application server where an event occurred.

If the application server does not log where within the application server the event took place, this is a finding."
V-27082,medium,Applications providing malicious code protection must support organizational requirements to update malicious code protection mechanisms (including signature definitions) whenever new releases are available in accordance with organizational configuration management policy and procedures.,"Malicious code protection mechanisms include, but are not limited to, anti-virus and malware detection software. In order to minimize potential negative impact to the organization caused by malicious code, it is imperative that malicious code is identified and eradicated. 

Malicious code includes, viruses, worms, Trojan horses, and Spyware. ",None,SV-34377r1_rule,None,None,None,None
V-69557,medium,The application must enforce password complexity by requiring that at least one upper-case character be used.,"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.

Examples of situations where a user ID and password might be used include but are not limited to:

- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.

- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.

and

- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.

Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.

Password complexity is one factor of several that determine how long it takes to crack a password. The more complex the password is, the greater the number of possible combinations that need to be tested before the password is compromised.",None,SV-84179r1_rule,F-75731r1_fix,Configure the application to require at least one upper-case character in the password.,C-69975r1_chk,"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.

If the application does not use passwords, the requirement is not applicable.

Access the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.

When prompted to provide the password, attempt to create a password that does not have one upper-case character.

If a password without at least one upper-case character can be created, this is a finding."
V-16846,medium,The IAO will ensure a disaster recovery plan exists in accordance with DoD policy based on the Mission Assurance Category (MAC).,Well thought out recovery plans are essential for system recovery and/or business restoration in the event of catastrophic failure or disaster.,"['CODB-1', 'CODB-2', 'CODP-3']",SV-17846r1_rule,F-17168r1_fix,Create and maintain the disaster recovery plan.,C-17858r1_chk,"All applications should document disaster recovery procedures to include business recovery plans, system contingency plans, facility disaster recovery plans, and plan acceptance.

Ask the application representative to review these plans.  
 
For MAC 1 applications, verify the disaster plan exists and provides for the smooth transfer of all mission or business essential functions to an alternate site for the duration of an event with little or no loss of operational continuity.
 
For MAC 2 applications, verify the disaster plan exists and provides for the resumption of mission or business essential functions within 24 hours activation.
 
For MAC 3 applications, verify the disaster plan exists and provides for the partial resumption of mission or business essential functions within 5 days of activation. 
 
1) If the disaster plan does not exist or does not meet the MAC level requirements, this is a finding."
V-69293,medium,The application must ensure messages are encrypted when the SessionIndex is tied to privacy data.,"When the SessionIndex is tied to privacy data (e.g., attributes containing privacy data) the message should be encrypted. If the message is not encrypted there is the possibility of compromise of privacy data.",None,SV-83915r1_rule,F-75465r1_fix,Encrypt messages when the SessionIndex is tied to privacy data.,C-69703r1_chk,"Ask the application representative for the design document.

Review the design document for web services using SAML assertions.

If the application does not utilize SAML assertions, this check is not applicable.

Examine the contents of a SOAP message using a SessionIndex in the SAML element AuthnStatement. Verify the information which is tied to the SessionIndex.

If the SessionIndex is tied to privacy information, and it is not encrypted, this is a finding."
V-26664,medium,"The application must be able to define the maximum number of concurrent sessions for an application account globally, by account type, by account, or a combination thereof. ","Application management includes the ability to control the number of users and user sessions that utilize an application. Limiting the number of allowed users and sessions per user is helpful in limiting risks related to Denial of Service attacks.

This requirement addresses concurrent session control for a single information system account and does not address concurrent sessions by a single user via multiple system accounts. 

This requirement may be met via the application or by utilizing information system session control provided by a web server with specialized session management capabilities.  If it has been specified that this requirement will be handled by the application, the capability to limit the maximum number of concurrent single user sessions must be designed and built into the application.  

The organization will need to define the maximum number of concurrent sessions for an information system account globally, by account type, by account, or a combination thereof and the application shall enforce that requirement.

",None,SV-33786r1_rule,None,None,None,None
V-6149,medium,"The designer will ensure the application does not contain source code that is never invoked during operation, except for software components and libraries from approved third-party products.
","Unused libraries increase a program size without any benefits. and may expose an enclave to possible malware.  They can be used by a worm as program space, and increase the risk of a buffer overflow attack.  As code evaluations are performed, to identify potential vulnerabilities or to identify security enhancements, unused code will not be evaluated and therefore, adds additional unknown risk. ",['DCSQ-1'],SV-6149r1_rule,F-16987r1_fix,Establish a formal process is in place to remove unnecessary software and libraries.,C-2961r1_chk,"Ask the application representative if there is a documented process to remove code when it is no longer executed. Also ask if there is a documented process to ensure unnecessary code is not included into a release.

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.

The process may include the following:
 · Source code analysis tools
 · Development environments that indicate unused source code
 · Compiler options that detect unreachable code
 
For a web-based application, conduct a spot check of the code directory (e.g., .html, .asp, .jsp, and .php files), sampling at least four files, and ensure the code is executed for the application. If a documented process is not in place, check at least 10 pieces of code. Search for possible 'include files' and scripts. Determine if the 'include files' and scripts exist.

Examples of 'include files' and scripts:
 
jsp
<%@ include file=""include.jsp"" %>

php
<?php include(""include.php""); ?>
 
asp
<!--#include file=""include.html""--> 

js
<script src=""include.js"" type=""text/javascript""></script> 

1) If 'include files' and scripts do not exist, it is a finding.

2) If other code is found that is not being used, this is a finding.   
 
Document the name of the file containing the offending code in the finding details.

For Visual Basic or C/C++ and other applications verify that a documented process is in place to prevent unused source code from being introduced into the application. Verify the process by source code analysis tools results, development environment tools, compiler options or the mechanism documented by process that enforces unused source from being introduced into the application.
 
3) If the application representative does not have a documented policy or there is no evidence that mechanisms are in place to prevent the introduction of unused code into the application, this is a finding."
V-35772,medium,The application server must protect log information from unauthorized modification.,"If log data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to log records provides information an attacker could potentially use to his or her advantage.

Application servers contain admin interfaces that allow reading and manipulation of log records. Therefore, these interfaces should not allow unfettered access to those records.  Application servers also write log data to log files which are stored on the OS, so appropriate file permissions must also be used to restrict access.

Log information includes all information (e.g., log records, log settings, transaction logs and log reports) needed to successfully log information system activity.  Application servers must protect log information from unauthorized modification.",None,SV-47059r3_rule,F-40317r2_fix,Configure the application server to protect log information from unauthorized modification.,C-44117r2_chk,"Review the configuration settings to determine if the application server log features protect log information from unauthorized modification.

Review file system settings to verify the application server sets secure file permissions on log files to prevent unauthorized modification.

If the application server does not protect log information from unauthorized modification, this is a finding."
V-69287,high,The application must use the NotOnOrAfter condition when using the SubjectConfirmation element in a SAML assertion.,"SAML is a standard for exchanging authentication and authorization data between security domains.  SAML uses security tokens containing assertions to pass information about a principal (usually an end user) between a SAML authority, (identity provider), and a SAML consumer, (service provider).  SAML assertions are usually made about a subject, (user) represented by the <Subject> element.

When a SAML assertion is used with a <SubjectConfirmation> element, a begin and end time for the <SubjectConfirmation> should be set to prevent reuse of the message at a later time. Not setting a specific time period for the <SubjectConfirmation>, may grant immediate access to an attacker and result in an immediate loss of confidentiality.",None,SV-83909r1_rule,F-75457r1_fix,Design and configure the application to use the <NotOnOrAfter> condition when using the <SubjectConfirmation> element in a SAML assertion.,C-69695r1_chk,"Ask the application representative for the design document.

Review the design document for web services using SAML assertions.

If the application does not utilize SAML assertions, this check is not applicable.

Examine the contents of a SOAP message using the <SubjectConfirmation> element. All messages should contain the <NotOnOrAfter> element. This can be accomplished if the application allows the ability to view XML messages or via a protocol analyzer like Wireshark.

If SOAP messages do not contain <NotOnOrAfter> elements, this is a finding."
V-19698,medium,"The designer and IAO will ensure UDDI publishing is restricted to authenticated users.

",Ficticious or false entries could result if someone other than an authenticated user is able to create or modify the UDDI registry. The data integrity would be questionable if anonymous users are able to write to the repository.,['DCSQ-1'],SV-21839r1_rule,F-23052r1_fix,"Restrict UDDI publishing only to authenticated users.
",C-24095r1_chk,"If the application does not utilize UDDI registries, this check is not applicable.

Ask the application representative to demonstrate UDDI publishing is restricted to authenticated users.   

1) If application representative is unable to demonstrate UDDI publishing is restricted to authenticated users, it is a finding.
"
V-35170,medium,The application server must produce log records containing sufficient information to establish the sources of the events.,"Application server logging capability is critical for accurate forensic analysis.  Without sufficient and accurate information, a correct replay of the events cannot be determined.

Ascertaining the correct source, e.g., source IP, of the events is important during forensic analysis.  Correctly determining the source will add information to the overall reconstruction of the logable event.  By determining the source of the event correctly, analysis of the enterprise can be undertaken to determine if the event compromised other assets within the enterprise.

Without sufficient information establishing the source of the logged event, investigation into the cause of event is severely hindered.  Log record content that may be necessary to satisfy the requirement of this control includes, but is not limited to, time stamps, source and destination IP addresses, user/process identifiers, event descriptions, application-specific events, success/fail indications, file names involved, access control, or flow control rules invoked.",None,SV-46457r3_rule,F-39720r4_fix,Configure the application server to generate the source of each logable event.,C-43552r3_chk,"Review the application server documentation and deployment configuration to determine if the application server is configured to generate sufficient information to resolve the source, e.g., source IP, of the log event.

Request a user access the application server and generate logable events, and then review the logs to determine if the source of the event can be established.

If the source of the event cannot be determined, this is a finding."
V-27011,medium,The application must perform data origin authentication and data integrity verification on the name/address resolution responses the system receives from authoritative sources when requested by client systems.,"A recursive resolving or caching Domain Name System (DNS) server is an example of an information system providing name/address resolution service for local clients. 

Authoritative DNS servers are examples of authoritative sources. Information systems using technologies other than the DNS to map between host/service names and network addresses provide other means to enable clients to verify the authenticity and integrity of response data. ",None,SV-34305r1_rule,None,None,None,None
V-35135,medium,The application server must protect against an individual (or process acting on behalf of an individual) falsely denying having performed organization-defined actions to be covered by non-repudiation.,"Non-repudiation of actions taken is required in order to maintain application integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. 

Non-repudiation protects individuals against later claims by an author of not having authored a particular document, a sender of not having transmitted a message, a receiver of not having received a message, or a signatory of not having signed a document. 

Typical application server actions requiring non-repudiation will be related to application deployment among developers/users and administrative actions taken by admin personnel.",None,SV-46422r3_rule,F-39687r2_fix,"Configure the application server to protect against an individual's (or process acting on behalf of an individual) falsely denying having performed organization-defined actions to be covered by non-repudiation. 
",C-43523r2_chk,"Review application server product documentation and server configuration to determine if the system does protect against an individual's (or process acting on behalf of an individual) falsely denying having performed organization-defined actions to be covered by non-repudiation.

If the application does not meet this requirement, this is a finding."
V-26962,medium,"The application must support the organizational requirements to specifically prohibit or restrict the use of unauthorized functions, ports, protocols, and/or services.","Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions). 

Additionally, it is sometimes convenient to provide multiple services from a single component of an information system (e.g., email and web services)  but doing so increases risk over limiting the services provided by any one component.  

To support the requirements and principles of least functionality the application must support the organizational requirements providing only essential capabilities and limiting the use of ports, protocols, and/or services to only those required, authorized, and approved to conduct official business or to address authorized quality of life issues.",None,SV-34247r1_rule,None,None,None,None
V-69457,medium,The application must provide the capability to centrally review and analyze audit records from multiple components within the system.,"Successful incident response and auditing relies on timely, accurate system information and analysis in order to allow the organization to identify and respond to potential incidents in a proficient manner. If the application does not provide the ability to centrally review the application logs, forensic analysis is negatively impacted.

Segregation of logging data to multiple disparate computer systems is counterproductive and makes log analysis and log event alarming difficult to implement and manage, particularly when the system or application has multiple logging components written to different locations or systems.

Automated mechanisms for centralized reviews and analyses include, for example, Security Information Management products.",None,SV-84079r1_rule,F-75633r1_fix,Configure the application so all of the applications logs are available for review from one centralized location.,C-69875r1_chk,"Review system documentation and interview application administrator for details regarding application architecture and logging configuration.  Identify the application components, the logs that are associated with the components and the locations of the logs.

If the application utilizes a centralized logging system that provides the capability to review the log files from one central location, this requirement is not applicable.

Access the application's log management utility and review the log files.  Ensure all of the applications logs are reviewable from within the centralized log management function and access to other systems in order to review application logs are not required.

If all of the application logs are not reviewable from a central location, this is a finding."
V-26858,medium,Applications must display an approved system use notification message or banner before granting access to the system.  ,"Applications are required to display an approved system use notification message or banner before granting access to the system providing privacy and security notices consistent with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance and states that: 

(i) users are accessing a U.S. Government information system; 
(ii) system usage may be monitored, recorded, and subject to audit; 
(iii) unauthorized use of the system is prohibited and subject to criminal and civil penalties; and 
(iv) the use of the system indicates consent to monitoring and recording.

System use notification messages can be implemented in the form of warning banners displayed when individuals log in to the information system. 

System use notification is intended only for information system access including an interactive login interface with a human user and is not intended to require notification when an interactive interface does not exist.  

Use this banner for desktops, laptops, and other devices accommodating banners of 1300 characters. The banner shall be implemented as a click-through banner at logon (to the extent permitted by the operating system), meaning it prevents further activity on the information system unless and until the user executes a positive action to manifest agreement by clicking on a box indicating “OK”.

""You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.
By using this IS (which includes any device attached to this IS), you consent to the following conditions:
-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.
-At any time, the USG may inspect and seize data stored on this IS.
-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.
-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.
-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.""
                                                                               

For Blackberries and other PDAs/PEDs with severe character limitations use the following:

""I've read & consent to terms in IS user agreem't.""
",None,SV-34138r1_rule,None,None,None,None
V-69317,low,The application must notify System Administrators and Information System Security Officers of account disabling actions.,"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Notification of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes. 

To address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.",None,SV-83939r1_rule,F-75491r1_fix,Configure the application to notify the system administrator and the ISSO when application accounts are disabled.,C-69729r1_chk,"Review the application and system documentation.

Interview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.

If the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.

Ensure application is configured to notify system administrators when accounts are disabled by identifying system administrators who will be notified when accounts are disabled.

Disable a test account and check with a system administrator to verify notification was received.

If system administrators and ISSOs are not notified when accounts are disabled, this is a finding."
V-26754,medium,Applications providing information flow control must enforce approved authorizations for controlling the flow of information between interconnected systems in accordance with applicable policy. ,"Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

From an application perspective, flow control is established once application data flow modeling has been completed.  Data flow modeling can be described as:

the process of identifying, modeling and documenting how data moves around an information system. Data flow modeling examines processes (activities that transform data from one form to another), data stores (the holding areas for data), external entities (what sends data into a system or receives data from a system, and data flows (routes by which data can flow). 

Once the application data flows have been identified, corresponding flow controls can be applied at the appropriate points.

A few examples of flow control restrictions include: keeping export controlled information from being transmitted in the clear to the Internet and blocking information that is marked as classified but is being transported to an unapproved destination.  Information flow control policies and enforcement mechanisms are commonly employed by organizations to control the flow of information between designated sources and destinations (e.g., networks, individuals, devices) within information systems and between interconnected systems. Flow control is based on the characteristics of the information and/or the information path.

Application specific examples of flow control enforcement can be found in information protection software (e.g., guards, proxies, gateways and cross domain solutions) employing rule sets or establishing configuration settings restricting information system services or provide message-filtering capability based on content (e.g., using key word searches or document characteristics).  

Applications providing information flow control must be able to enforce approved authorizations for controlling the flow of information between interconnected systems in accordance with applicable policy.",None,SV-34002r1_rule,None,None,None,None
V-26914,medium,Applications must support organizational requirements to disable user accounts after an organization-defined time period of inactivity.,"Users are often the first line of defense within an application.  Active users take notice of system and data conditions and are usually the first to notify systems administrators when they notice a system or application related anomaly, particularly if the anomaly is related to their own account. 

Inactive user accounts pose a risk to systems and applications. Owners of inactive accounts will not notice if unauthorized access to their user account has been obtained.  

Attackers that are able to exploit an inactive user account can potentially obtain and maintain undetected access to an application. Applications need to track periods of user inactivity and disable application accounts after an organization-defined period of inactivity. Such a process greatly reduces the risk that accounts will be misused, hijacked, or will have data compromised. 

Management of user identifiers is not applicable to shared information system accounts (e.g., guest and anonymous accounts). It is commonly the case that a user account is the name of an information system account associated with an individual.

To avoid having to build complex user management capabilities directly into their application, wise developers leverage the underlying OS or other user account management infrastructure (AD, LDAP) that is already in place within the organization and meets organizational user account management requirements. ",None,SV-34194r1_rule,None,None,None,None
V-70317,medium,The application must be registered with the DoD Ports and Protocols Database.,"Failure to register the applications usage of ports, protocols, and services with the DoD PPS Database may result in a Denial of Service (DoS) because of enclave boundary protections at other end points within the network.",None,SV-84939r1_rule,F-76553r1_fix,Register the application and ports in the Ports and Protocols Database.,C-70791r1_chk,"Verify registration of the application and ports in the Ports and Protocols Database for a production site.

If the application requires registration, and is not registered or all ports used have not been identified in the database, this is a finding."
V-69319,low,The application must notify System Administrators and Information System Security Officers of account removal actions.,"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Notification of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.",None,SV-83941r1_rule,F-75493r1_fix,Configure the application to notify the system administrator and the ISSO when application accounts are removed.,C-69731r1_chk,"Review the application and system documentation.

Interview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.

If the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.

Ensure application is configured to notify system administrators when accounts are removed by identifying system administrators who will be notified when accounts are removed.

Remove a test account and check with a system administrator to verify notification was received.

If system administrators and ISSOs are not notified when accounts are removed, this is a finding."
V-69467,medium,The application must provide a report generation capability that supports on-demand audit review and analysis.,"The report generation capability must support on-demand review and analysis in order to facilitate the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.

Report generation must be capable of generating on-demand (i.e., customizable, ad-hoc, and as-needed) reports. On-demand reporting allows personnel to report issues more rapidly to more effectively meet reporting requirements. Collecting log data and aggregating it to present the data in a single, consolidated report achieves this objective.

Audit reduction and report generation capabilities do not always reside on the same information system or within the same organizational entities conducting auditing activities. The audit reduction capability can include, for example, modern data mining techniques with advanced data filters to identify anomalous behavior in audit records. The report generation capability provided by the information system can generate customizable reports. Time ordering of audit records can be a significant issue if the granularity of the time stamp in the record is insufficient.

This requirement is specific to applications with report generation capabilities; however, applications need to support on-demand audit review and analysis.",None,SV-84089r1_rule,F-75643r1_fix,Design or configure the application to provide an immediate audit review capability or utilize a centralized utility designed for the purpose of on-demand log management and reporting.,C-69885r1_chk,"Review the application documentation and interview the application administrator for details regarding audit reduction (log record event filtering).

Access the application with user rights sufficient to read and filter audit records.

Navigate the application user interface and select the application functionality that provides access and interface to audit records and audit reporting.

If the application uses a centralized logging solution that provides immediate, customizable audit review and analysis functions, the requirement is not applicable.

Create an event report. Report data can be based on date ranges, times or events, or other criteria that could be used in an investigation. Use of data from previous checks for audit reduction is encouraged.

Review the report and ensure the data in the report coincides with event filters used to create the report.

If the application does not provide an immediate, ad-hoc audit review and analysis capability, this is a finding."
V-57429,medium,The application server must provide an immediate real-time alert to authorized users of all log failure events requiring real-time alerts.,"It is critical for the appropriate personnel to be aware if a system is at risk of failing to process logs as required.  Log processing failures include software/hardware errors, failures in the log capturing mechanisms, and log storage capacity being reached or exceeded.  Notification of the failure event will allow administrators to take actions so that logs are not lost.",None,SV-71701r2_rule,F-62467r1_fix,Configure the application server to provide a real-time alert to authorized users when log failure events occur that require real-time alerts.,C-58105r1_chk,"Review the configuration settings to determine if the application server log system provides a real-time alert to authorized users when log failure events occur requiring real-time alerts.

If designated alerts are not sent to authorized users, this is a finding."
V-19694,medium,"The IAO will ensure an XML firewall is deployed to protect web services. 
","Web Services are vulnerable to many types of attacks.  XML based firewalls can be used to prevent common attacks.
",['DCSQ-1'],SV-21835r1_rule,F-23072r1_fix,"Deploy XML Firewall  to protect web services.

",C-24091r1_chk,"Ask the application representative to verify whether XML based web services are used within the application.  If no XML based web services are used in the application, this check is not applicable. 

If XML based web services are used within the application, ask the application representative for a network diagram identifying the XML firewall placement. Review the network diagrams and determine if all web services are protected by the XML firewall.

1) If network diagrams do not exist or all web services are not protected by the XML firewall, it is a finding."
V-26981,medium,"Applications using multifactor authentication when accessing non-privileged accounts via the network must provide one of the factors by a device separate from the information system gaining access. 
","Multifactor authentication is defined as: using two or more factors to achieve authentication. 

Factors include: 
(i) something a user knows (e.g., password/PIN); 
(ii) something a user has (e.g., cryptographic identification device, token); or 
(iii) something a user is (e.g., biometric). 

A non-privileged account is defined as an information system account with authorizations of a non-privileged user or simply, a regular user.

Network access is defined as any access to an information system by a user (or process acting on behalf of a user) where said access is obtained through a network connection.

Out Of Band 2 Factor Authentication is defined as: when one of the authentication factors is provided by a device that is separate from the system that is used to gain access. 

For example, a mobile device such as a smart phone is registered within the application to an application user.  Upon a successful authentication, the system sends instructions to the registered mobile device in the form of on-screen prompts instructing the user on how to complete the login process.

OOB2FA employs separate communication channels where at least one is independently maintained and trusted to authenticate an end user.  

Applications using multifactor authentication when accessing non-privileged accounts via the network must provide one of the factors by a device separate from the information system gaining access. ",None,SV-34270r1_rule,None,None,None,None
V-16827,medium,"The Test Manager will ensure test procedures are created and at least annually executed to ensure system initialization, shutdown, and aborts are configured to ensure the system remains in a secure state.
","Secure state assurance cannot be accomplished without testing the system state at least annually to ensure the system remains in a secure state upon intialization, shutdown and abort.",['DCSS-2'],SV-17827r1_rule,F-17144r1_fix,"Correct errors in initialization, shutdown, and aborts leaving the system in an unsecure state.",C-17826r1_chk,"Ask the application representative to provide tests plans, procedures and results to ensure system initialization, shutdown, and aborts keep the system in a secure state.

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.

1) If test plans, procedures, and results do not exist ,or at least executed annually, it is a finding."
V-27134,medium,"Applications involved in the production, control, and distribution of  asymmetric cryptographic keys must use must use approved PKI Class 3 certificates or prepositioned keying material.","Cryptographic key management and establishment can be performed using manual procedures or automated mechanisms with supporting manual procedures. 

In addition to being required for the effective operation of a cryptographic mechanism, effective cryptographic key management provides protections to maintain the availability of the information in the event of the loss of cryptographic keys by users. ",None,SV-34433r1_rule,None,None,None,None
V-69325,medium,Application data protection requirements must be identified and documented.,"Failure to protect organizational information from data mining may result in a compromise of information. In order to assign the appropriate data protections, application data must be identified and then protection requirements assigned. Access to sensitive data and sensitive data objects should be restricted to those authorized to access the data.

Examples of sensitive data include but are not limited to; Social Security Numbers, Personally Identifiable Information, or any other data that is has been identified as being sensitive in nature by the data owner.

Data storage objects include, for example, databases, database records, and database fields.

Data mining prevention and detection techniques include, for example: limiting the types of responses provided to database queries; limiting the number/frequency of database queries to increase the work factor needed to determine the contents of such databases; and notifying organizational personnel when atypical database queries or accesses occur.

Protection methods include but are not limited to data encryption, Role-Based Access Controls and access authentication.",None,SV-83947r1_rule,F-75499r1_fix,Identify and document the application data elements and the data protection requirements.,C-69737r1_chk,"Ask the application representative for the documentation that identifies the application data elements, the protection requirements, and any associated steps that are being taken to protect the data.

If the application data protection requirements are not documented, this is a finding."
V-27049,medium,Boundary protection applications must fail securely in the event of an operational failure.,"Fail secure is a condition achieved by the application of a set of information system mechanisms to ensure that in the event of an operational failure of a boundary protection device at a managed interface (e.g., router, firewall, guard, application gateway residing on a protected sub network commonly referred to as a demilitarized zone), the system does not enter into an unsecure state where intended security properties no longer hold. A failure of a boundary protection device cannot lead to, or cause information external to the boundary protection device to enter the device, nor can a failure permit unauthorized information release.",None,SV-34344r1_rule,None,None,None,None
V-70425,medium,"The Program Manager must verify all levels of program management, designers, developers, and testers receive annual security training pertaining to their job function.","Many application team members may not be aware of the security implications regarding the code that they design, write and test.  To address this concern, the Program Manager will ensure all levels of program management receive security training regarding the necessity, impact, and benefits of integrating secure development practices into the development lifecycle.  

This training is in addition to DoD 8570 training requirements as DoD 8570 annual security training does not presently cover application SDLC security concerns.

The Program Manager will ensure development team members are provided training on secure design principles for the entire SDLC and newly discovered vulnerability types on, at least, an annual basis. 

Development team members include:

- Designers/Application Architects
- Developers/Programmers
- Testers
- Application managers

This requirement applies to development teams or individual application developers and does not apply when reviewing a COTS application or an application hosted at a DECC or other hosting facility when the application team is not available to interview.",None,SV-85047r2_rule,F-76661r1_fix,"Provide application development/operational related security specific annual training for managers, designers, developers, and testers.",C-70879r1_chk,"This requirement is meant to be applied to developers and development teams only, otherwise, this requirement is not applicable.  

Interview the application representative.

Ask for evidence of annual security training for application managers, designers, developers, and testers. 

Examples of evidence include course completion certificates and a class roster. At a minimum, security training should include security awareness training pertaining to overall principles of secure application development.

Training must be in addition to DoD 8570 training requirements as DoD 8570 annual security training does not presently cover application SDLC security concerns. 

If there is no evidence of security training, this is a finding."
V-69365,medium,The application must provide audit record generation capability for the destruction of session IDs.,"Applications should destroy session IDs at the end of a user session in order to terminate user access to the application session and to reduce the possibility of an unauthorized attacker high jacking the session and impersonating the user. It is important to log when session IDs are destroyed for forensic purposes.

Web based applications will often utilize an application server that creates, manages and logs session IDs.  It is acceptable for the application to delegate this requirement to the application server.",None,SV-83987r1_rule,F-75539r1_fix,Enable session ID destruction event auditing.,C-69779r1_chk,"Access the management interface for the application or configuration file and evaluate the log/audit management settings.

Determine if the setting that enables session ID destruction event auditing is activated.

Terminate a user session within the application and review the logs to ensure the session destruction event was recorded.

If the application is not configured to log session ID destruction events, or if the application has no means to enable auditing of session ID destruction events, this is a finding.

If a web-based application delegates session ID destruction to an application server, this is not a finding. 

If the application generates audit logs by default when session IDs are destroyed, and that behavior cannot be disabled, this is not a finding."
V-69331,medium,The application must enforce organization-defined discretionary access control policies over defined subjects and objects.,"Discretionary Access Control allows users to determine who is allowed to access their data. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems (e.g., networks, web servers, and web portals) must be properly configured to incorporate access control methods that do not rely solely on the possession of a certificate for access. Successful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement.

Access control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.

This requirement is applicable to access control enforcement applications (e.g., authentication servers) and other applications that perform information and system access control functions.",None,SV-83953r1_rule,F-75505r1_fix,Design and configure the application to enforce discretionary access control policies.,C-69743r1_chk,"Review the application documentation and interview the application administrator.

Review application data protection requirements and application integrated access control methods.

Identify if the application implements discretionary access control to application resources. Discretionary Access Controls (DAC) allows application users to determine and set permissions on application data and application objects. The result is the user is given the ability to control who has access to the data they control.

If the application does not implement discretionary access controls, this requirement is not applicable.

Resources can be a URL, a folder, a file, a process, a database record, or any other application asset that warrants sharing or authorization permission reassignment.

Create 3 test accounts.

Using test account 1 set protection control on a test user 1 controlled resource.

Grant access to test user 2 and only test user 2.

Authenticate as test user 3 and attempt to access the application resource where test user 1 and test user 2 are granted access. Access should be denied.

If the enforcement of configured access restrictions is not performed, this is a finding."
V-69397,medium,The application must generate audit records when successful/unsuccessful attempts to delete privileges occur.,"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Audit records can be generated from various components within the information system (e.g., module or policy filter).",None,SV-84019r1_rule,F-75571r1_fix,Configure the application to audit successful and unsuccessful attempts to delete privileges.,C-69813r1_chk,"Review the application documentation and interview the application admin to identify application management interfaces and features.

Access the application management utility and create a test user account or use the account of a regular privileged user who is cooperating with the testing.

Access and open the auditing logs.

Using an admin account, delete some or all of the privileges of a privileged user.

Attempt to delete privileges in a manner that will cause a failure event such as attempting to delete a user’s privileges with an account that doesn't have the rights to do so.

Review the application logs and ensure both events were captured in the logs. The event data should include the user’s identity and the privilege that was granted and the privilege that failed to be granted.

If the application does not log when successful and unsuccessful attempts to delete privileges occur, this is a finding."
V-70367,low,"Prior to each release of the application, updates to system, or applying patches; tests plans and procedures must be created and executed.","Without test plans and procedures for application releases or updates, unexpected results may occur which could lead to a denial of service to the application or components.

This requirement is meant to apply to developers or organizations that are doing development work when releasing a version update or a patch to the application.",None,SV-84989r1_rule,F-76603r1_fix,Execute tests plans prior to release or patch update.,C-70821r1_chk,"If the review is not being done with the developer of the application, this requirement is not applicable.

Ask the application representative to provide tests plans, procedures, and results to ensure they are updated for each application release or updates to system patches.

If test plans, procedures, and results do not exist, or are not updated for each application release, this is a finding."
V-6152,medium,"The designer will ensure the application is capable of displaying a customizable click-through banner at logon which prevents further activity on the information system unless and until the user executes a positive action to manifest agreement by clicking on a box indicating ""OK.”
","A logon banner is used to warn users against unauthorized entry and the possibility of legal action for unauthorized users, and advise all users that system use constitutes consent to monitoring, recording, and auditing, and that they have no expectation of privacy. Failure to display a logon warning banner without this type of information could adversely impact the ability to prosecute unauthorized users and users who abuse the system.",['ECWM-1'],SV-6152r1_rule,F-17077r1_fix,Modify or configure the application to present the DoD warning banner at login.,C-3030r1_chk,"Logon to the application. If a warning message appears, compare it to the two following banners: (Use the following banner for desktops, laptops, and other devices accommodating banners of 1300 characters)
 
You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.
 
By using this IS (which includes any device attached to this IS), you consent to the following conditions:
 
The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.
 
At any time, the USG may inspect and seize data stored on this IS.
 
Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.
 
This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.
 
Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.
 
(For Blackberries and other PDAs/PEDs with severe character limitations use the following banner):
 
I've read & consent to terms in IS user agreem't.
 
These banners are mandatory and deviations are not permitted except as authorized in writing by the Deputy Assistant Secretary of Defense for Information and Identity Assurance.
 
1) If the login banner is not one of the above banners or the login banner is missing this is a finding.
 
If the only way to access the application is through the OS, then an additional banner is not required at the application level. "
V-70225,medium,The application must protect the confidentiality and integrity of stored information when required by DoD policy or the information owner.,"Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive and tape drive) within an organizational information system. Mobile devices, laptops, desktops, and storage devices can be either lost or stolen, and the contents of their data storage (e.g., hard drives and non-volatile memory) can be read, copied, or altered. 

Applications and application users generate information throughout the course of their application use, including data that is stored in areas of volatile memory.  Volatile memory must not be overlooked when assigning protections.

This requirement addresses protection of user-generated data, as well as, operating system-specific configuration data. 

Applications must employ mechanisms to achieve confidentiality and integrity protections, as appropriate, in accordance with the security category and/or classification of the information.

This can include segmenting and controlling access to the data such as utilizing file permissions to restrict access, using role based controls to restrict access or applying a cryptographic hash to the data and evaluating hash values for changes made to data.",None,SV-84847r1_rule,F-76461r1_fix,Identify data elements that require protection. Document the data types and specify protection requirements and methods used.,C-70701r1_chk,"Review the application documentation and interview the application administrator.

Identify the data processed by the application and the accompanying data protection requirements.

Determine if the data owner has specified stored data protection requirements.

Determine if the application is processing publicly releasable, FOUO or classified stored data.

Determine if the application configuration information contains sensitive information.

Access the data repository and have the application administrator, application developer or designer identify the data integrity and confidentiality protections utilized to protect stored data.

If the application processes classified data or if the data owner has specified data protection requirements and the application administrator is unable to demonstrate how the data is protected, this is a finding."
V-27145,medium,"Applications must provide the capability to automatically process audit records for events of interest based upon selectable, event criteria.","Audit reduction is used to reduce the volume of audit records in order to facilitate manual review.  Before a security review information systems and/or applications with an audit reduction capability may remove many audit records known to have little security significance. 

This is generally accomplished by removing records generated by specified classes of events, such as records generated by nightly backups. 

An audit reduction capability provides support for near real-time audit review and analysis based on policy requirements regarding what must be audited on the system and after-the-fact investigations of security incidents.  It is important to recognize audit reduction does not alter original audit records.  

Audit reduction and reporting tools do not alter original audit records. 

To leverage the complete capability of audit reduction, the application must possess the ability to specify and automatically process certain event criteria that are selectable in nature.  In other words, a system administrator (SA) may be performing a manual review of audit data to identify a particular problem. The SA has determined that backup activity and network connections from a particular host comprise the bulk of the events.  However, these events are not related to the activity being investigated.  The application must be able to automatically process these audit records for audit reduction purposes rather than making the administrator manually process them.",None,SV-34444r1_rule,None,None,None,None
V-16781,medium,"The Program Manager will  ensure a vulnerability management process is in place to include ensuring a mechanism is in place to notify users, and users are provided with a means of obtaining security updates for the application.

","If there is no mechanism (e.g., e-mail list, patch server) to provide updates for an application that is already deployed, security flaws can never be addressed.  Also, if there is no comprehensive vulnerability management process or policy for the systematic identification and mitigation of software vulnerabilities, security vulnerabilities may go unnoticed, unreported, or unmitigated.  ","['DCCT-1', 'VIVM-1']",SV-17781r1_rule,F-16979r1_fix,"Provide a distribution mechanism for obtaining updates to the application.
",C-17873r1_chk,"The Program Manager will:
- Ensure users are provided with a means of obtaining updates for the application. 
- Ensure a mechanism is in place to notify users of security
flaws, and to provide users with the availability of patches. 
- Ensure a comprehensive vulnerability management  process, including systematic identification and mitigation of software vulnerabilities, is in place.

Interview the application representative to determine if users are provided with a means of obtaining updates for the application.

1) If users are not provided with a means of obtaining updates for the application, it is a finding.
 
2) If updates are transmitted over a LAN, and is not IPv6 capable, it is a finding.
 
Interview the application representative to determine if users are provided a mechanism to be notified of security flaws and the availability of patches.
 
3) If users are not provided security flaw and patch notifications for the application, it is a finding.
  
4) If security flaws and patch notifications are transmitted over a LAN, and is not IPv6 capable, it is a finding.

Interview the application representative and determine if a vulnerability management process exists. 
 
5) If no vulnerability management process or policy exists, it is a finding.
 
Interview the application representative to determine maintenance is available for production applications.
 
6) If maintenance is not available for an application, it is a finding."
V-26751,medium,"The application must prevent access to organization-defined security-relevant information except during secure, non-operable system states.","Security-relevant information is any information within the information system that can potentially impact the operation of security functions in a manner possibly resulting in failure to enforce the system security policy or maintain isolation of code and data.  Organizations may define specific security relevant information requiring protection.

Filtering rules for routers and firewalls, cryptographic key management information, key configuration parameters for security services, and access control lists are examples of security-relevant information. 

Secure, non-operable system states are states in which the information system is not performing mission/business-related processing (e.g., the system is off-line for maintenance, troubleshooting, boot-up, shutdown). 

Access to these types of data is to be prevented unless the system is in a maintenance mode or has otherwise been brought off-line.  The goal is to minimize the potential a security configuration or data may be dynamically and perhaps, surreptitiously overwritten or changed (without going through a formal system change process that can document the changes).",None,SV-33999r1_rule,None,None,None,None
V-26954,medium,The application must employ strong identification and authentication techniques when establishing non-local maintenance and diagnostic sessions,"Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. 

The act of managing systems and applications includes the ability to access sensitive application information, such as, system configuration details, diagnostic information, user information and potentially sensitive application data. 

When applications provide a remote management capability that is inherent to the application, the application needs to ensure the identification and authentication techniques used to remotely access the system are strong enough to protect the system. ",None,SV-34237r1_rule,None,None,None,None
V-27131,medium,"Applications involved in the production, control, and distribution of  symmetric cryptographic keys must use NIST-approved or NSA-approved key management technology and processes.","Cryptographic key management and establishment can be performed using manual procedures or automated mechanisms with supporting manual procedures. 

In addition to being required for the effective operation of a cryptographic mechanism, effective cryptographic key management provides protections to maintain the availability of the information in the event of the loss of cryptographic keys by users. ",None,SV-34429r1_rule,None,None,None,None
V-26926,medium,Applications must enforce password maximum lifetime restrictions.,"Password maximum lifetime is defined as:  the maximum period of time, (typically in days) a user's password may be in effect before the user is forced to change it. 

Passwords need to be changed at specific policy based intervals as per policy.  Any password no matter how complex can eventually be cracked.  

One method of minimizing this risk is to use complex passwords and periodically change them. If the application does not limit the lifetime of passwords and force users to change their passwords there is the risk that the system and/or application passwords could be compromised.  ",None,SV-34206r1_rule,None,None,None,None
V-19689,medium,"The designer will ensure web services are designed and implemented to recognize and react to the attack patterns associated with application-level DoS attacks.
","Because of potential denial of service, web services should be designed to recognize potential attack patterns.
",['DCSQ-1'],SV-21830r1_rule,F-23043r1_fix,"Design Web services to recognize attacks.
",C-24086r1_chk,"Ask the application representative for design documentation, review the design documentation and ensure the application employs methods for XML schema validation and disables use of inline XML Document Type Definition (DTD) schemas in XML parsing objects.  Managing DTD parsing behavior is a key to preventing the invocation of XML bombs. DTD parsing is controlled within the .Net application framework in .NET applications.

1) If the design document does not exist or address the specified web service, it is a finding.

2) If the Application does not employ any method of schema validation, it is a finding.

3) If the Application does not disable the use of inline XML Document Type Definition (DTD) schemas it is a finding.
"
V-19703,high,"The designer will ensure validity periods are verified on all messages using WS-Security or SAML assertions. 
","When using WS-Security in SOAP messages, the application should check the validity of the timestamps with creation and expiration times. Unvalidated timestamps may lead to a replay event and provide immediate unauthorized access of the application.  Unauthorized access results in an immediate loss of confidentiality. 

Any vulnerability associated with a DoD Information system or system enclave, the exploitation of which, by a risk factor, will directly and immediately result in loss of Confidentiality, Availability or Integrity of the system
associated data.
",['IAIA-2'],SV-21844r1_rule,F-23059r1_fix,"Design the application to use validity periods are verified on all WS-Security token profiles and SAML Assertions 
",C-24100r1_chk,"Ask the application representative for the design document. Review the design document for web services. Review the design document and verify validity periods are checked on all messages using WS-Security or SAML assertions.

1) If the design document does not exist, or does not indicate validity periods are checked on messages using WS-Security or SAML assertions, it is a finding."
V-27043,medium,"The application must be capable of implementing host-based boundary protection mechanisms for servers, workstations, and mobile devices.","A host-based boundary protection mechanism is a host-based firewall. Host-based boundary protection mechanisms are employed on mobile devices, such as notebook/laptop computers, and other types of mobile devices where such boundary protection mechanisms are available. 
",None,SV-34338r1_rule,None,None,None,None
V-27064,medium,The application must identify potentially security-relevant error conditions.,The structure and content of error messages need to be carefully considered by the organization and development team. The extent to which the application is able to identify and handle error conditions is guided by organizational policy and operational requirements. ,None,SV-34359r1_rule,None,None,None,None
V-69453,medium,The application must alert the ISSO and SA (at a minimum) in the event of an audit processing failure.,"It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Without this notification, the security personnel may be unaware of an impending failure of the audit capability and system operation may be adversely affected. 

Audit processing failures include software/hardware errors, failures in the audit capturing mechanisms, and audit storage capacity being reached or exceeded.

This requirement applies to each audit data storage repository (i.e., distinct information system component where audit records are stored), the centralized audit storage capacity of organizations (i.e., all audit data storage repositories combined), or both.",None,SV-84075r1_rule,F-75629r1_fix,Configure the application to send an alarm in the event the audit system has failed or is failing.,C-69871r1_chk,"Review system documentation and interview application administrator for details regarding logging configuration.

If the application utilizes a centralized logging system that provides the audit processing failure alarms, this requirement is not applicable.

Identify application alarming capability regarding audit processing failure events.

Verify the application is configured to alarm when the auditing system fails.

Example alarm events include but are not limited to: 

hardware failure events
failures to capture audit record events
audit storage errors

If the application is not configured to alarm on alerts that indicate the audit system has failed or is failing, this is a finding."
V-26952,medium,Applications must automatically implement organization-defined safeguards and countermeasures if security functions (or mechanisms) are changed inappropriately.,"Any changes to the application components of the information system can potentially have significant effects on the overall security of the system. 

Accordingly, only qualified and authorized individuals shall be allowed to obtain access to the application components for purposes of initiating changes, including upgrades and modifications.

In order to ensure a prompt response to unauthorized changes to application security functions or security mechanisms, organizations may define countermeasures and safeguards that monitoring applications must undertake in the event these types of changes occur.  This degree of functionality is typically built into a support architecture providing change management and/or system monitoring capabilities.  

Automatic implementation of safeguards and countermeasures includes:  reversing the change; halting the system; or triggering an audit alert when an unauthorized modification to a critical security file or process occurs.  

Examples of such support architecture include but are not limited to: HIDS, change management software or file/process monitoring software. ",None,SV-34235r1_rule,None,None,None,None
V-16777,medium,"The Program Manager will ensure COTS IA and IA enabled products, comply with NIAP/NSA endorsed  protection profiles.

","The security posture of the enclave could be compromised if applications are not at the approved NIAP/NSA protection profile.  GOTS, or COTS IA and IA enabled IT products, must be in compliance with NIAP/NSA protection profiles in order to protect classified information when the information transits networks which are at a lower classification level than the information being transported.","['DCSR-1', 'DCSR-2', 'DCSR-3']",SV-17777r1_rule,F-16975r1_fix,"Use products with suitable NIAP/NSA protection profiles.
",C-17754r1_chk,"The Program Manager will ensure COTS IA, and IA enabled products, are used to protect sensitive information when the information transits non DoD owned networks, or the system handling the information is accessible by individuals who are not authorized to access the information on the system, comply with NIAP/NSA approved protection profiles.

The Program Manager will ensure COTS IA, and IA enabled products, are used to protect classified information when the information transits networks, which are at a lower classification level than the information being transported, comply with NIAP/NSA approved protection profiles.

Interview the application representative and determine the IA, and IA enabled COTS products, used in the application. Also, review the confidentiality level for the application.
Public releasable data requires a NIAP/NSA approved protection profile for IA, and IA enabled, COTS products.
Sensitive data requires a NIAP/NSA approved protection profile for IA, and IA enabled, COTS products.
Classified information, when the information transits networks which are at a lower classification level than the information being transported, requires NIAP/NSA approved protection profiles for IA, and IA enabled, COTS products.

The accreditation documentation should list the products that are used. A list of validated products and protection profiles is available on the common criteria website: 
http://www.niap-ccevs.org/cc-scheme/pp/index.cfm

1) Compare that list against the approved products.  If any of the third party products are not listed or are below the NIAP/NSA approved protection profiles required by the application, it is a finding."
V-57517,medium,The application server must electronically verify Personal Identity Verification (PIV) credentials from other federal agencies to access the management interface.,"Personal Identity Verification (PIV) credentials are those credentials issued by federal agencies that conform to FIPS Publication 201 and supporting guidance documents. OMB Memorandum 11-11 requires federal agencies to continue implementing the requirements specified in HSPD-12 to enable agency-wide use of PIV credentials.  PIV credentials are only used in an unclassified environment.

If PIV credentials are not electronically verified before accessing the management interface, unauthorized users may gain access to the system and data the user has not been granted access to.",None,SV-71793r3_rule,F-62585r1_fix,Configure the unclassified application server to electronically verify PIV credentials from other federal agencies before granting access to the management interface.,C-58225r3_chk,"The CAC is the standard DoD authentication token;the PIV is the standard authentication token used by federal/civilian agencies.
 
If access to the application server is limited to DoD personnel accessing the system via CAC; and PIV access is not warranted or allowed as per the system security plan, the PIV requirement is NA.

Review the application server documentation and configuration to determine if the application server electronically verifies PIV credentials from other federal agencies to access the management interface.

If the application server does not electronically verify other federal agency PIV credentials to access the management interface, this is a finding."
V-26917,medium,The application must enforce configurable traffic volume thresholds representing auditing capacity for network traffic.,"It is critical when a system is at risk of failing to process audit logs as required; actions are automatically taken to mitigate the failure. Audit processing failures include:  software/hardware errors, failures in the audit capturing mechanisms, and audit storage capacity being reached or exceeded. 

One method used to thwart the auditing system is for an attacker to attempt to overwhelm the auditing system with large amounts of irrelevant data.  The end result being audit logs that are either overwritten and activity thereby erased or disk space that is exhausted and any future activity is no longer logged.  Applications and/or logging mechanisms employed by applications must take steps to enforce configurable volume thresholds representing the auditing capacity for network traffic.",None,SV-34197r1_rule,None,None,None,None
V-16831,medium,The IAO will ensure active vulnerability testing is performed.,"Use of automated scanning tools accompanied with manual testing/validation which confirms or expands on the automated test results is an accepted best practice when performing application security testing.  Automated scanning tools expedite and help to standardize security testing, they can incorporate known attack methods and procedures, test for libraries and other software modules known to be vulnerable to attack and utilize a test method known as ""fuzz testing"".  Fuzz testing is a testing process where the application is provided invalid, unexpected, or random data. Poorly designed and coded applications will become unstable or crash. Properly designed and coded applications will reject improper and unexpected data input from application clients and remain stable.   

Many vulnerability scanning tools provide automated fuzz testing capabilities for the testing of web applications.  All of these tools help to identify a wide range of application vulnerabilities including, but not limited to; buffer overflows, cross-site scripting flaws, denial of service format bugs and SQL injection, all of which can lead to a successful compromise of the system or result in a denial of service.  

Due to changes in the production environment, it is a good practice to schedule periodic active testing of production web applications.  Ideally, this will occur prior to deployment and after updates or changes to the application production environment. 

It is imperative that automated scanning tools are configured properly to ensure that all of the application components that can be tested are tested.  In the case of web applications, some of the application code base may be accessible on the web site and could potentially be corrected by a knowledgeable system administrator.  Active testing is different from code review testing in that active testing does not require access to the application source code base. A code review requires complete code base access and is normally performed by the development team.

If vulnerability testing is not conducted, there is the distinct potential that security vulnerabilities could be unknowingly introduced into the application environment.

The following website provides an overview of fuzz testing and examples:

http://www.owasp.org/index.php/Fuzzing

The following website provides information on web application vulnerability scanner tools.  Reference the “Related Links” section at the bottom of the page for a list of available commercial and open source tools.  

http://samate.nist.gov/index.php/Web_Application_Vulnerability_Scanners.html
Please note that reference to these tools does not imply that they have been tested and approved for use by DISA.
",['DCSQ-1'],SV-55789r2_rule,F-17148r3_fix,Perform active vulnerability and fuzz testing of the application.  Ensure the vulnerability scanning tool is configured to test all application components and functionality. Address discovered vulnerabilities.,C-17830r2_chk,"Ask the application representative to provide vulnerability test procedures and vulnerability test results.  

Ask the application representative to provide the settings that were used to conduct the vulnerability testing.  

Verify the automated vulnerability scanning tool was appropriately configured to assure as complete a test as possible of the application architecture components.  E.g. if the application includes a web server, web server tests must be included.
 
1) If the application test procedures and test results do not include active vulnerability and fuzz testing this is a finding.

2) If the vulnerability scan results include critical vulnerabilities, this is a finding.

3) If the vulnerability scanning tests are not relevant to the architecture of the application, it is a finding.

4) If the vulnerability scan report includes informational and/or non-critical results this is not a finding. 

5) If previously identified vulnerabilities have subsequently been resolved, this is not a finding."
V-57505,medium,The application server must electronically verify Personal Identity Verification (PIV) credentials for access to the management interface.,"The use of Personal Identity Verification (PIV) credentials facilitates standardization and reduces the risk of unauthorized access.

PIV credentials are only used in an unclassified environment.

DoD has mandated the use of the CAC to support identity management and personal authentication for systems covered under HSPD 12, as well as its use as a primary component of layered protection for national security systems.

The application server must electronically verify the use of PIV credentials to access the management interface and perform management functions.",None,SV-71781r2_rule,F-62573r1_fix,Configure the application server to electronically verify PIV credentials to access the management interface.,C-58213r1_chk,"Review application server documentation and configuration to ensure the application server electronically verifies PIV credentials to the management interface.

If PIV credentials are not electronically verified, this is a finding."
V-57509,medium,"The application server must authenticate all endpoint devices before establishing a local, remote, and/or network connection using bidirectional authentication that is cryptographically based.","Device authentication requires unique identification and authentication that may be defined by type, by specific device, or by a combination of type and device.

Bidirectional authentication provides stronger safeguards to validate the identity of other devices for connections that are of greater risk.

Device authentication is performed when the application server is providing web services capabilities and data protection requirements mandate the need to establish the identity of the connecting device before the connection is established.

Because of the challenges of applying this requirement on a large scale, organizations are encouraged to only apply the requirement to those limited number (and type) of devices that truly need to support this capability.",None,SV-71785r2_rule,F-62577r1_fix,"If data protection requirements do not mandate the need to establish the identity of the connecting device before the connection is established, this requirement is NA.

Configure the application server to authenticate all endpoint devices before establishing a local, remote, and/or network connection using bidirectional authentication that is cryptographically based.",C-58217r1_chk,"If data protection requirements do not mandate the need to establish the identity of the connecting device before the connection is established, this requirement is NA.

Review application server documentation and configuration to determine if the application server authenticates all endpoint devices before establishing a local, remote, and/or network connection using bidirectional authentication that is cryptographically based.

If the application server does not meet this requirement, this is a finding."
V-57437,medium,The application server must synchronize internal application server clocks to an authoritative time source when the time difference is greater than the organization-defined time period.,"Determining the correct time a particular application event occurred on a system is critical when conducting forensic analysis and investigating system events.

Synchronization of internal application server clocks is needed in order to correctly correlate the timing of events that occur across multiple systems. To meet this requirement, the organization will define an authoritative time source and have each system synchronize when the time difference is greater than a defined time period.  The industry standard for the threshold is 1ms.",None,SV-71709r2_rule,F-62475r1_fix,Configure the application server to reset internal information system clocks when the time difference is greater than a defined time period with the authoritative time source.,C-58113r1_chk,"Review application server documentation and configuration to determine if the application server is configured to reset internal information clocks when the difference is greater than a defined threshold with an authoritative time source.

If the application server cannot synchronize internal application server clocks to the authoritative time source when the time difference is greater than the organization-defined time period, this is a finding."
V-27118,medium,Applications employed to write data to portable digital media must use cryptographic mechanisms to protect and restrict access to information on portable digital media. ,"When data is written to portable digital media such as thumb drives, floppy diskettes, compact disks, magnetic tape, etc., there is risk of data loss. 

An organizational assessment of risk guides the selection of media and associated information contained on that media requiring restricted access. 

Organizations need to document in policy and procedures, the media requiring restricted access, individuals authorized to access the media, and the specific measures taken to restrict access. Fewer protection measures are needed for media containing information determined by the organization to be in the public domain, to be publicly releasable, or to have limited or no adverse impact if accessed by other than authorized personnel. 

In these situations, it is assumed the physical access controls where the media resides provide adequate protection. The employment of cryptography is at the discretion of the information owner/steward. 

The selection of the cryptographic mechanisms used is based upon maintaining the confidentiality and integrity of the information. 

The strength of mechanisms is commensurate with the classification and sensitivity of the information. 

When the organization has determined the risk warrants it, data written to portable digital media must be encrypted.  ",None,SV-34415r1_rule,None,None,None,None
V-27121,medium,Applications must provide notification of failed automated security tests.,"The need to verify security functionality applies to all security functions. 

For those security functions not able to execute automated self-tests the organization either implements compensating security controls or explicitly accepts the risk of not performing the verification as required. Information system transitional states include, startup, restart, shutdown, and abort.",None,SV-34418r1_rule,None,None,None,None
V-26779,medium,The application must bind security attributes to information to facilitate information flow policy enforcement.,"The application enforces approved authorizations for controlling the flow of information within the system and between interconnected systems in accordance with applicable policy. Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information.  

Attribution is a critical component of a security concept of operations. The ability to identify source and destination points for information flowing in an information system, allows forensic reconstruction of events when required, and increases policy compliance by attributing policy violations to specific organizations/individuals.  Binding security attributes to information allows policy enforcement mechanisms to act on that information and enforce policy.
",None,SV-34029r1_rule,None,None,None,None
V-57533,medium,The application server must protect the confidentiality and integrity of transmitted information through the use of an approved TLS version.,"Preventing the disclosure of transmitted information requires that the application server take measures to employ some form of cryptographic mechanism in order to protect the information during transmission.  This is usually achieved through the use of Transport Layer Security (TLS).

Transmission of data can take place between the application server and a large number of devices/applications external to the application server.  Examples are a web client used by a user, a backend database, a log server, or other application servers in an application server cluster.

If data is transmitted unencrypted, the data then becomes vulnerable to disclosure.  The disclosure may reveal user identifier/password combinations, website code revealing business logic, or other user personal information.

FIPS 140-2 approved TLS versions include TLS V1.0 or greater.

TLS must be enabled and non-FIPS-approved SSL versions must be disabled.  NIST SP 800-52 specifies the preferred configurations for government systems.",None,SV-71809r2_rule,F-62601r1_fix,Configure the application server to use a FIPS-2 approved TLS version to maintain the confidentiality and integrity of transmitted information and to disable all non-FIPS-approved SSL versions.,C-58241r1_chk,"Review the application server documentation and deployed configuration to determine which version of TLS is being used.

If the application server is not using TLS to maintain the confidentiality and integrity of transmitted information or non-FIPS-approved SSL versions are enabled, this is a finding."
V-35738,medium,The application server must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies.,"Strong access controls are critical to securing the application server. Access control policies (e.g., identity-based policies, role-based policies, attribute-based policies) and access enforcement mechanisms (e.g., access control lists, access control matrices, cryptography) must be employed by the application server to control access between users (or processes acting on behalf of users) and objects (e.g., applications, files, records, processes, application domains) in the application server.

Without stringent logical access and authorization controls, an adversary may have the ability, with very little effort, to compromise the application server and associated supporting infrastructure.",None,SV-47025r3_rule,F-40281r2_fix,Configure the application server to enforce access control policies for logical access to the system in accordance with applicable policy.,C-44081r2_chk,"Review application server product documentation and configuration to determine if the system enforces authorization requirements for logical access to the system in accordance with applicable policy.

If the application server is not configured to utilize access controls or follow access control policies, this is a finding."
V-27034,medium,Applications must prevent unauthorized and unintended information transfer via shared system resources.,"The purpose of this control is to prevent information, including encrypted representations of information, produced by the actions of a prior user/role (or the actions of a process acting on behalf of a prior user/role) from being available to any current user/role (or current process) that obtains access to a shared system resource (e.g., registers, main memory, secondary storage) after the resource has been released back to the information system. Control of information in shared resources is also referred to as object reuse. ",None,SV-34328r1_rule,None,None,None,None
V-26791,medium,Applications must enforce organization-defined limitations on the embedding of data types within other data types.,"Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

Information flow enforcement mechanisms compare security attributes on all information (data content and data structure), source and destination objects, and respond appropriately (e.g., block, quarantine, alert administrator) when the mechanisms encounter information flows not explicitly allowed by the information flow policy. 

Embedding of data within other data is often used for the surreptitious transfer of data.  For example, embedding data within an image file (e.g., .jpg) is referred to as Steganography and is used to circumvent protections in place to protect information.",None,SV-34041r1_rule,None,None,None,None
V-30597,medium,The application must prevent the execution of prohibited mobile code.,"Decisions regarding the utilization of mobile code within organizational information systems needs to include evaluations which help determine the potential for the code to cause damage to the system if used maliciously. 

Mobile code technologies include, for example, Java, JavaScript, ActiveX, PDF, Postscript, Shockwave movies, Flash animations, and VBScript. Usage restrictions and implementation guidance apply to both the selection and use of mobile code installed on organizational servers and mobile code downloaded and executed on individual workstations.

Applications can prevent the execution of prohibited mobile code by leveraging architectures that provide a virtual execution environment sometimes referred to as a ""sandbox"".  The mobile code is executed within this isolated environment apart from the hosts indigenous operating environment which allows for mobile code capability restrictions and helps to prevent malicious code from accessing system resources and data. 

Policy and procedures related to mobile code address preventing the introduction of unacceptable mobile code within the information system.  The DoDI 8552.01 policy pertains to the use of mobile code technologies within DoD information systems. 

The application must prevent the execution of prohibited mobile code.
",None,SV-40348r1_rule,None,None,None,None
V-69473,medium,The application must provide an audit reduction capability that does not alter original content or time ordering of audit records.,"If the audit reduction capability alters the content or time ordering of audit records, the integrity of the audit records is compromised, and the records are no longer usable for forensic analysis. Time ordering refers to the chronological organization of records based on time stamps. The degree of time stamp precision can affect this.

Audit reduction is a process that manipulates collected audit information and organizes such information in a summary format that is more meaningful to analysts.

This requirement is specific to applications with audit reduction capabilities; however, applications need to support on-demand audit review and analysis.",None,SV-84095r1_rule,F-75649r1_fix,Configure the application to not alter original log content or time ordering of audit records.,C-69891r1_chk,"Review the application documentation and interview the application administrator for details regarding audit reduction (log record event filtering).

Access the application with user rights sufficient to read and filter audit records.

Navigate the application user interface and select the application functionality that provides access and interface to audit records and audit reduction (event filtering).

If the application uses a centralized logging solution that performs the audit reduction (event filtering) functions, the requirement is not applicable.

Examine the log files; take note of dates and times of events such as logon events.

Note: dates and times as well as the original content and any unique record identifiers.

Record the identifying information as well as the dates and times and content of the audit records.

Apply filters to reduce the amount of audit records displayed to just the logon events for the day.

Review the records and ensure nothing in the records has changed. Once validated, clear the filter and review the records again to validate nothing changed within the audit record itself.

If the application of event filters modifies the original log records, this is a finding."
V-69295,medium,The application must provide automated mechanisms for supporting account management functions.,"Enterprise environments make application account management challenging and complex. A manual process for account management functions adds the risk of a potential oversight or other error.

Manual examples include but are not limited to admin staff logging into the system or systems and manually performing step by step actions affecting user accounts that could otherwise be automated.  This does not include any manual steps taken to initiate automated processes or the use of automated systems.

A comprehensive application account management process that includes automation helps to ensure accounts designated as requiring attention are consistently and promptly addressed. Examples include, but are not limited to, using automation to take action on multiple accounts designated as inactive, suspended or terminated or by disabling accounts located in non-centralized account stores such as multiple servers. This requirement applies to all account types, including individual/user, shared, group, system, guest/anonymous, emergency, developer/manufacturer/vendor, temporary, and service.

The application must be configured to automatically provide account management functions and these functions must immediately enforce the organization's current account policy. The automated mechanisms may reside within the application itself or may be offered by the operating system or other infrastructure providing automated account management capabilities. Automated mechanisms may be comprised of differing technologies that when placed together contain an overall automated mechanism supporting an organization's automated account management requirements.

Account management functions include: assignment of group or role membership; identifying account type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and administrative alerts. The use of automated mechanisms can include, for example: using email or text messaging to automatically notify account managers when users are terminated or transferred; using the information system to monitor account usage; and using automated telephonic notification to report atypical system account usage.",None,SV-83917r1_rule,F-75467r1_fix,Use automated processes and mechanisms for account management functions.,C-69705r1_chk,"Review the application documentation and interview the application administrator.

Identify the account management methods, processes and procedures that are used.

If the application is utilizing a centralized authentication mechanism such as Active Directory or LDAP, verify all user account activity is conducted via that solution and no local user accounts that circumvent the automated solution are used.

Determine if automated mechanisms are used when managing application user accounts and taking management action on application user accounts. Automated methods include but are not limited to:

Taking action on accounts that have been determined to be inactive, suspended, terminated, or disabled.

Automated action examples include: deleting such accounts, reactivating accounts in conjunction with a validation or verification process, or sending notifications or reminders to the account holders that their account is about to be disabled or deleted.

Verify the action that is taken is automated and repeatable.

If the account management process is manual in nature, this is a finding."
V-16834,medium,"The IAO shall ensure if a DoD STIG or NSA guide is not available, a third-party product will be configured by the following in descending order as available: 1) commercially accepted practices, (2) independent testing results, or (3) vendor literature.","Not all COTS products are covered by a STIG.  Those products not covered by a STIG, should be minimally configured to vendors recommendation guidelines.
",['DCCS-1'],SV-17834r1_rule,F-17151r1_fix,"If a DoD STIG or NSA guide is not available, configured the application using the following in descending order as available: (1) commercially accepted practices, (2) independent testing results, or (3) vendor literature. ",C-17840r1_chk,"If a DoD STIG or NSA guide is not available, application and application components will be configured by the following in descending order as available: (1) commercially accepted practices, (2) independent testing results, or (3) vendor literature.

1) If the application and application components do not have DoD STIG or NSA guidance available and not configured by (1) commercially accepted practices, (2) independent testing results, or (3) vendor literature, it is a finding."
V-16839,medium,"The IAO will ensure protections against DoS attacks are implemented.
","Known threats documented in the threat model should be mitigated, to prevent DoS type attacks.
",['DCSQ-1'],SV-17839r1_rule,F-17159r1_fix,Implement mitigations from the threat model for DOS attacks.,C-17845r1_chk,"Ask the application representative to review the threat model for DoS attacks. Verify the mitigation for DoS attacks are implemented from the threat model.

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.
 
1) If the mitigation from the threat model for DoS attacks are not implemented, it is a finding."
V-69549,medium,The application must authenticate all network connected endpoint devices before establishing any connection.,"Without authenticating devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.

For distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of authentication claims may be made by services separate from the services acting on those decisions.

In such situations, it is necessary to provide authentication decisions (as opposed to the actual authenticators) to the services that need to act on those decisions.

This requirement applies to applications that connect either locally, remotely, or through a network to an endpoint device (including but not limited to: workstations, printers, servers (outside a datacenter), VoIP Phones, VTC CODECs).

Gateways and SOA applications are examples of where this requirement would apply.

End point devices are not:
Client desktop workstations only offer browser-based web application access where the user authenticates at the app layer.

Device authentication is a solution enabling an organization to manage devices. It is an additional layer of authentication ensuring only specific pre-authorized devices can access the system.",None,SV-84171r1_rule,F-75723r1_fix,Configure the application to authenticate all network connected endpoint devices/service consumers before establishing connections.,C-69967r1_chk,"Review the application documentation, implementation documentation and interview the application administrator.

Identify if the application utilizes Web Services/Service-Oriented Architecture (SOA). Using the web services framework that has been implemented, have the application administrator identify the remote devices allowed to communicate to the service provider.

If the application is designed to provide end-user, interactive application access only and does not use web services or allow connections from remote devices, this requirement is not applicable.

Identify the authentication mechanism used to authenticate the remote consumers/devices. Commonly available authentication methods are Client Certificate Authentication and Basic Authentication.

The Basic Authentication method provides insufficient protection for authentication sessions and is not allowed.

If no authentication mechanism is used to authenticate remote service consumers/devices, or if Basic Authentication is used to authentication remote service consumers/devices, this is a finding."
V-69347,medium,The application administrator must follow an approved process to unlock locked user accounts.,"Once a user account has been locked, it must be unlocked by an administrator.

An ISSM and ISSO approved process must be created and followed to ensure the user requesting access is properly authenticated prior to access being re-established.

The process must include having the user provide information only the user would know and having the administrator verify the accuracy of the information prior to unlocking the account. This means having the user provide this information when their account is created so the information can be referenced when they are locked out.    

The process utilized may be manual in nature, however it is recognized that password resets are a time consuming task. To minimize helpdesk resource constraints related to user lockout requests, procedures may be automated by administrators in order to unlock the account or reset the password.  

Authentication process examples include having the user provide personal information known only by the user and provided when the account was created and/or using Out-of-Band or side channel communication methods such as text messages to the users established cell phone number in order to provide a temporary password or token that can be used to logon once and reset the password.

The OWASP site provides an acceptable password reset process that can be used as a reference.  https://www.owasp.org/index.php/Forgot_Password_Cheat_Sheet.  

Automated procedures should follow industry standards and best practice for securely automating password reset/account unlocks and must be reviewed, tested, and then approved by the ISSM and ISSO.",None,SV-83969r1_rule,F-75521r1_fix,"Create a standard approved process for unlocking locked application accounts which includes validating user identity prior to unlocking the account.

Use that process when unlocking application user accounts.",C-69759r1_chk,"Interview the application administrator and identify the approved process for unlocking user accounts.

The process may involve a manual or automated reset after the locked out user has identified themselves using standard user identification processes outlined in the vulnerability discussion.

If the admin does not unlock the account following the approved process, and if the process does not have documented ISSO and ISSM approvals, this is a finding."
V-16798,medium,"The designer will ensure the application protects access to authentication data by restricting access to authorized users and services.
","If authentication is not properly restricted using access controls list, unauthorized users of the server where the authentication data is stored may be able to use the authentication data to access unauthorized servers or services.",['ECCD-1'],SV-17798r1_rule,F-17027r1_fix,Restrict access to authentication data.,C-17794r1_chk,"Identification and authentication information must be protected by appropriate file permissions.  Only administrators and the application or OS process that access the information should have any permissions to access identification and authentication information.  In many cases, local backups of the accounts database exist so these must be included in the scope of the review.  
 
1) If non-privileged users have the permission to read or write password files, other than resetting their own password, this is a CAT II finding.  

2) If non-privileged users can read user information (e.g., list users but not passwords), this is a CAT III finding. "
V-70277,high,The application must not be vulnerable to overflow attacks.,"A buffer overflow occurs when a program exceeds the amount of data allocated to a buffer. The buffer is a sequential section of memory and when the data is written outside the memory bounds, the program can crash or malicious code can be executed.

Security safeguards employed to protect memory include, for example, data execution prevention and address space layout randomization. Data execution prevention safeguards can either be hardware-enforced or software-enforced with hardware providing the greater strength of mechanism.

Buffer overflows can manifest as stack overflows, heap overflows integer overflows and format string overflows. Each type of overflow is dependent upon the underlying application language and the context in which the overflow is executed.

Integer overflows can lead to infinite looping when loop index variables are compromised and cause a denial of service.  If the integer is used in data references, the data can become corrupt. Also, using the integer in memory allocation can cause buffer overflows, and a denial of service.  Integers used in access control mechanisms can potentially trigger buffer overflows, which can be used to execute arbitrary code. 

Almost all known web servers, application servers, and web application environments are susceptible to buffer overflows. Proper validation of user input is required to mitigate the risk. Notably, limiting the size of the strings a user is allowed to input to a program to a predetermined, acceptable length.

A code review, static code analysis or active vulnerability or fuzz testing are methods used to identify overflows within application code.",None,SV-84899r1_rule,F-76513r1_fix,"Design the application to use a language or compiler that performs automatic bounds checking.

Use an abstraction library to abstract away risky APIs.

Use compiler-based canary mechanisms such as StackGuard, ProPolice, and the Microsoft Visual Studio/GS flag.

Use OS-level preventative functionality and control user input validation.

Patch applications when overflows are identified in vendor products.",C-70753r1_chk,"Review the application documentation and architecture.

Interview the application admin and identify the most recent code testing and analysis that has been conducted.

Review the test results; verify configuration of analysis tools are set to check for the existence of overflows.  This includes but is not limited to buffer overflows, stack overflows, heap overflows, integer overflows and format string overflows.

If overflows are identified in the test results, verify the latest test results are being used, if not, ensure remediation has been completed.

If the test results show overflows exist and no remediation evidence is presented, or if test results are not available, this is a finding."
V-6161,medium,The designer will ensure signed Category 1A and Category 2 mobile code signature is validated before executing.,Untrusted mobile code may contain malware or malicious code and digital signatures provide a source of the content which is crucial to authentication and trust of the data. ,['DCMC-1'],SV-6161r1_rule,F-17121r1_fix,Verify mobile code before executing.,C-3039r1_chk,"Ask the application representative and examine the documentation to determine if the application accepts file inputs via e-mail, ftp, file uploads or other automated mechanisms.  
 
If the application does not accept file uploads, this check is not applicable.  
 
If the application accepts inputs, investigate the process that is used to process the request.  If the process could contain mobile code, a mechanism must exist to ensure that before mobile code is executed, its signature must be validated.  
 
The following examples are intended to show determination of the finding:  
 
Non-finding example:  The application allows upload of data.  The data file is parsed looking for specific pieces of information in an expected format.  An application program in accordance with established business rules then processes the data.  This situation would be not a finding.
 
Finding example:  The application allows upload of data.  The data file is sent directly to an execution module for processing.  This example could include a .doc file that is sent directly to MS Word for processing.  Using this example, if there was a process in place to ensure that the document was digitally signed and validated to be a DoD approved PKI certificate before processing, this would be not a finding."
V-26769,medium,"Applications providing flow control must identify data type, specification and usage when transferring information between different security domains so policy restrictions may be applied.","Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

An example of flow control restrictions includes: keeping export controlled information from being transmitted in the clear to the Internet. Information flow control policies and enforcement mechanisms are commonly employed by organizations to control the flow of information between designated sources and destinations (e.g., users, networks, devices) within information systems and between interconnected systems. 

Application specific examples of flow control enforcement can be found in information protection software (e.g., guards, proxies, application layer gateways and cross domain solutions) employing rule sets or establish configuration settings restricting information system services or provide message-filtering capability based on content (e.g., using key word searches or document characteristics).  

Flow control is based on the characteristics of the information and/or the information path. Applications providing flow control must identify data type, specification, and usage when transferring information between different security domains so policy restrictions may be applied.

A Security domain is defined as a domain implementing a security policy and is administered by a single authority.

Data type, specification and usage includes, using file naming to reflect the type of data being transferred and limiting data transfer based on file type. ",None,SV-34019r1_rule,None,None,None,None
V-26944,medium,Applications scanning for malicious code must scan all media used for system maintenance prior to use.,"There are security-related issues arising from software brought into the information system specifically for diagnostic and repair actions (e.g., a software packet sniffer installed on a system in order to troubleshoot system traffic, or a vendor installing or running a diagnostic application in order to troubleshoot an issue with a vendor supported system).

This requirement ensures the media containing the application is scanned for malicious code prior to use. ",None,SV-34225r1_rule,None,None,None,None
V-70269,high,The application must not be vulnerable to XML-oriented attacks.,"Extensible Markup Language (XML) is widely employed in web technology and applications like web services (SOAP, REST, and WSDL) and is also used for configuration files. XML vulnerability examples include XML injection, XML Spoofing, XML-based Denial of Service attacks and information disclosure attacks.

When utilizing XML, web applications must take steps to ensure they are addressing XML-related security issues. This is accomplished by choosing well-designed application components, building application code that follows security best practices and by patching application components when vulnerabilities are identified.

XML firewalls or gateways may be employed to assist in protecting applications by controlling access to XML-based applications, filtering XML content, rate-limiting requests, and validating XML traffic.",None,SV-84891r1_rule,F-76505r1_fix,"Design the application to utilize components that are not vulnerable to XML attacks.

Patch the application components when vulnerabilities are discovered.",C-70745r1_chk,"Review the application documentation, the application architecture and interview the application administrator.

Identify any XML-based web services or XML functionality performed by the application.

Determine if an XML firewall is deployed to protect application from XML-related attacks.

If the application does not process XML, the requirement is not applicable.

Review the latest application vulnerability assessment and verify the scan was configured to test for XML-related vulnerabilities and security issues.

Examples include but are not limited to:

XML Injection
XML related Denial of Service
XPATH injection
XML Signature attacks
XML Spoofing

If an XML firewall is deployed, request configuration information regarding the application and validate the firewall is configured to protect the application.

If the vulnerability scan is not configured to scan for XML-oriented vulnerabilities, if no scan results exist, or if the XML firewall is not configured to protect the application, this is a finding."
V-26972,medium,The application must uniquely identify and authenticate organizational users (or processes acting on behalf of organizational users). ,"To assure accountability and prevent unauthorized access, organizational users shall be identified and authenticated. 

Organizational users include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors, guest researchers, individuals from allied nations). 

Users (and any processes acting on behalf of users) are uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization which outlines specific user actions that can be performed on the information system without identification or authentication. ",None,SV-34260r1_rule,None,None,None,None
V-26750,medium,"The application must enforce Discretionary Access Control (DAC) policy allowing users to specify and control sharing by named individuals, groups of individuals, or by both, limiting propagation of access rights and includes or excludes access to the granularity of a single user.","Access control policies (e.g., identity-based policies, role-based policies, attribute-based policies) and access enforcement mechanisms (e.g., access control lists, access control matrices, cryptography) are employed by organizations to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, domains). 

DAC is a type of access control methodology serving as a means of restricting access to objects and data based on the identity of subjects and/or groups to which they belong.  It is discretionary in the sense that application users with the appropriate permissions to access an application resource or data have the discretion to pass that permission on to another user either directly or indirectly.

Data protection requirements may result in a DAC policy being specified as part of the application design.  Discretionary access controls would be employed at the application level to restrict and control access to application objects and data thereby providing increased information security for the organization.  

When DAC controls are employed, those controls must limit sharing to named application users, groups of users or both.  The application DAC controls must also limit the propagation of access rights and have the ability to exclude access to data down to the granularity of a single user.

",None,SV-33998r1_rule,None,None,None,None
V-16782,medium,"The Program Manager will ensure a security incident response process for the application is established that defines reportable incidents and outlines a standard operating procedure for incident response to include Information Operations Condition (INFOCON).

","Without a plan, training, and assistance, users will not know what actions needs to be taken in the event of system attack or system/application compromise. This could result in additional compromise and theft, or degraded system capability.","['VIIR-1', 'VIIR-2']",SV-17782r1_rule,F-16980r1_fix,"Fully participate in the DOD CNDSP Program as described in DoD Instruction 8530.2 or develop an Incident response Plan.
Exercise the Incident Response Plan annually.
Provide for user incident response training.
Provide an incident support resource that offers advice and assistance to users for the handling and reporting of security incidents.
The support resource must be an integral part of the organization's incident response capability.",C-17758r1_chk,"Verify that the organization provides or uses an incident support resource that offers advice and assistance to users of the information system for the handling and reporting of security incidents. The support resource must be an integral part of the organization’s incident response capability. This capability is addressed by the DOD CNDSP Program but participation at the organization level must be verified.

Interview the application representative to determine if a security incident response process for the application is established.

1) If a security incident response process for the application is not documented, it is a finding.

Interview the application representative to determine if a security incident response process contains the following:
Identified CNDSP.
Reportable incidents are defined.
INFCON outlined in the incident response standard operating procedures.
A provision exists for user training and annual refresher training.
Establishment of an incident response team.
Procedure for the plan to be exercised annually.

2) If a security incident response process is not adequate, it is a finding.

Interview the application representative to determine if a security incident response process for the application is followed.
 
3) If a security incident response process for the application is not followed, it is a finding."
V-26881,medium,"In order to inform the user of failed login attempts made with the users account, the application upon successful logon/access must display to the user the number of unsuccessful logon/access attempts since the last successful logon/access. ","Users need to be aware of activity that occurs regarding their application account. Providing users with information regarding the number of unsuccessful attempts made to login to their account allows the user to determine if any unauthorized activity has occurred and gives them an opportunity to notify administrators. 

This requirement is intended to cover both traditional logons to information systems and general accesses to information systems that occur in other types of architectural configurations (e.g., service oriented architectures). ",None,SV-34161r1_rule,None,None,None,None
V-70379,medium,Flaws found during a code review must be tracked in a defect tracking system.,"This requirement is meant to apply to developers or organizations that are doing application development work.

If flaws are not tracked they may possibly be forgotten to be included in a release. Tracking flaws in the configuration management repository will help identify code elements to be changed, as well as the requested change.",None,SV-85001r1_rule,F-76615r1_fix,Track software defects in a defect tracking system.,C-70833r1_chk,"This requirement is meant to apply to developers or organizations that are doing application development work.

If application development is not being done or managed by the organization, this requirement is not applicable.

Ask the application representative to demonstrate that the configuration management repository captures flaws in the code review process. The configuration management repository may consist of a separate application for capturing code defects.

If there is no configuration management repository or the code review flaws are not captured in the configuration management repository, this is a finding."
V-27164,medium,The application must protect audit tools from unauthorized modification.,"Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. 

Depending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data.  

If the tools are compromised it could provide attackers with the capability to manipulate log data. It is, therefore, imperative that audit tools be controlled and protected from unauthorized modification. 

Audit tools include but are not limited to OS provided audit tools, vendor provided audit tools, and open source audit tools needed to successfully view and manipulate audit information system activity and records. ",None,SV-34463r1_rule,None,None,None,None
V-27077,medium,Applications must support organizational requirements restricting users from introducing removable media into the information system. ,"Malicious code is known to propagate via removable media such as, floppy disks, USB or flash drives, and removable hard drives.  

In order to prevent propagation and potential infection due to malware contained on removable media, the information system must be able to restrict and/or limit the use of removable media. Applications must not be designed so as to circumvent or otherwise disable this protection requirement. 

This is a requirement to restrict users from inserting removable media into a system.  This is not an application requirement.",None,SV-34372r1_rule,None,None,None,None
V-27103,medium,Applications providing notifications regarding suspicious events must include the capability to notify an organization-defined list of response personnel who are identified by name and/or by role.,"Incident response applications are by their nature designed to monitor, detect, and alarm on defined events occurring on the system or on the network.  A large part of their functionality is accurate and timely notification of events.  Notifications can be made more efficient by the creation of notification groups containing members who would be responding to a particular alarm or event.  ",None,SV-34398r1_rule,None,None,None,None
V-69383,medium,The application must generate audit records when successful/unsuccessful attempts to access security objects occur.,"Security objects represent application objects that provide or require security protections or have a security role within the application. Examples include but are not limited to, files, application modules, folders, and database records. Essentially, if permissions are assigned to protect it, it can be considered a security object. Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Audit records can be generated from various components within the information system (e.g., module or policy filter).",None,SV-84005r1_rule,F-75557r1_fix,Configure the application to create an audit record for both successful and unsuccessful attempts to access security objects.,C-69797r1_chk,"Review the application documentation and interview the application administrator.

Identify where the application logs are stored.

Identify application functionality that provides privilege or permission settings to security objects within the application.
This can be an application function that assigns privileges to an application object or data element.

Authenticate to the application as a regular user. Using application functionality, attempt to access the security object within the application.

Perform two attempts, one successfully and one unsuccessfully.

Review the log data and ensure both the successful and unsuccessful access attempts are logged.

If the application does not generate an audit record when successful and unsuccessful attempts to access security objects occur, this is a finding."
V-35176,medium,The application server must produce log records that contain sufficient information to establish the outcome of events.,"Information system logging capability is critical for accurate forensic analysis. Log record content that may be necessary to satisfy the requirement of this control includes, but is not limited to, time stamps, source and destination IP addresses, user/process identifiers, event descriptions, application-specific events, success/fail indications, filenames involved, access control or flow control rules invoked.

Success and failure indicators ascertain the outcome of a particular application server event or function. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response.  Event outcome may also include event-specific results (e.g., the security state of the information system after the event occurred).",None,SV-46463r3_rule,F-39725r2_fix,Configure the application server logging system to log the event outcome.,C-43557r2_chk,"Review application server documentation and the log files on the application server to determine if the logs contain information that establishes the outcome of event data.

If the application server is not configured to meet this requirement, this is a finding."
V-57407,medium,The application server must associate organization-defined types of security attributes having organization-defined security attribute values with information in process.,"The application server provides a framework for applications to communicate between each other to form an overall well-designed application to perform a task.  As the information traverses the application server and the components, the security attributes must be maintained.  Without the association of security attributes to information, there is no basis for the application server or hosted applications to make security-related access control decisions.  The security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

One example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing, but either way, it is imperative these assignments are maintained while the data is in process. If the security attributes are lost when the data is being processed, there is the risk of a data compromise.",None,SV-71679r2_rule,F-62445r1_fix,Configure the application server to associate organization-defined types of security attributes having organization-defined security attribute values with information in process.,C-58081r1_chk,"Review the application server documentation to determine if the application associates organization-defined types of security attributes with organization-defined security attribute values to information in process.

If the application server does not associate the security attributes to information in process or the feature is not implemented, this is a finding."
V-69351,low,The application must retain the Standard Mandatory DoD Notice and Consent Banner on the screen until users acknowledge the usage conditions and take explicit actions to log on for further access.,"The banner must be acknowledged by the user prior to allowing the user access to the application. This provides assurance that the user has seen the message and accepted the conditions for access. If the consent banner is not acknowledged by the user, DoD will not be in compliance with system use notifications required by law.

To establish acceptance of the application usage policy, a click-through banner at application logon is required. The application must prevent further activity until the user executes a positive action to manifest agreement by clicking on a box indicating ""OK"".",None,SV-83973r2_rule,F-75525r1_fix,Configure the application to retain the standard DoD-approved banner until the user accepts the usage conditions prior to granting access to the application.,C-69763r3_chk,"If the application has no interactive user interface, this requirement is not applicable.

If the user interface is only available via the OS console, e.g., a fat client application installed on a GFE desktop or laptop, and that GFE is configured to display the DoD banner, this requirement is not applicable.

Access the application and authenticate if necessary. Verify the banner is displayed and action must be taken to accept terms of use.

If the banner is not displayed or no action must be taken to accept terms of use, this is a finding."
V-57507,medium,The application server must authenticate all network-connected endpoint devices before establishing any connection.,"Device authentication requires unique identification and authentication that may be defined by type, by specific device, or by a combination of type and device.

Device authentication is accomplished via the use of certificates and protocols such as SSL mutual authentication.

Device authentication is performed when the application server is providing web services capabilities and data protection requirements mandate the need to establish the identity of the connecting device before the connection is established.",None,SV-71783r2_rule,F-62575r1_fix,Configure the application server to perform mutual authentication of network-connected endpoint devices before the connection is established.,C-58215r1_chk,"Review application server documentation, application data protection requirements, and configuration to ensure the application server provides an SSL mutual authentication capability and the authentication is completed before the connection is fully established.

If data protection requirements require mutual authentication and the application server is not configured to meet this requirement, this is a finding."
V-70389,medium,Threat models must be documented and reviewed for each application release and updated as required by design and functionality changes or when new threats are discovered.,"Threat modeling is an approach for analyzing the security of an application. It is a structured approach that enables you to identify, quantify, and address the security risks associated with an application. Threat modeling is not an approach to reviewing code, but it does complement the security code review process.

Threat modeling can optimize application security by identifying objectives and vulnerabilities, and then defining countermeasures to prevent, or mitigate the effects of, threats to the system.

The lack of threat modeling will potentially leave unidentified threats for attackers to utilize to gain access to the application. To execute a threat model you should do the following:

- Decompose the Application. The first step in the threat modeling process is gaining an understanding of the application and how it interacts with external entities. This includes identifying application components such as web server, application server, database server and languages used by the application. It also includes identifying network connections and the means utilized to access the application.

- Determine and rank threats. Use a threat categorization methodology to understand the different threat categories.
E.g., Auditing, authentication, configuration management and data protection. The goal of the threat categorization is to help identify threats both from the attacker perspective and the defensive perspective.

- Determine countermeasures and mitigation. A lack of protection against a threat might indicate a vulnerability whose risk exposure could be mitigated with the implementation of a countermeasure.

Countermeasures could include using application firewalls, IDS/IPS to block or identify known attacks against the architecture and alarming on audit log events.

Refer to the OWASP website for additional details on application threat modeling.

https://www.owasp.org/index.php/Application_Threat_Modeling",None,SV-85011r1_rule,F-76625r1_fix,Establish and maintain threat models and review for each application release and when new threats are discovered. Identify potential mitigations to identified threats. Verify mitigations are implemented to threats based on their risk analysis.,C-70843r1_chk,"This requirement is meant to apply to developers or organizations that are doing application development work.

If the organization operating the application is not doing the development or is not managing the development of the application, the requirement is not applicable.

Review the threat model document and identify the following sections are present:

- Identified threats
- Potential vulnerabilities
- Counter measures taken
- Potential mitigations
- Mitigations selected based on risk analysis

Review the identified threats, vulnerabilities, and countermeasures.
Countermeasures could include implementing application firewalls or IDS/IPS and configuring certain IDS filters.

Review the application documentation.
Verify the architecture and components of the application match with the components in the threat model document.
Verify identified threats and vulnerabilities are addressed or mitigated and the ISSO and ISSM have reviewed and approved the document.

If the described threat model documentation does not exist, this is a finding."
V-26905,medium,"The application must provide the capability to capture, record, and log all content related to a user session.","While a great deal of effort is made to secure applications so as to prevent unauthorized access, in certain instances there can be valid requirements to capture, record, and log all content related to a particular user's application session.  

These instances are reserved for monitoring or investigative purposes supported through policy and are officially sanctioned.  Session auditing activities are developed, integrated, and used in consultation with legal counsel in accordance with applicable federal laws, Executive Orders, directives, policies, or regulations. 

These monitoring events occur at the application layer and as such maybe required to be conducted at a host system however in some cases network monitoring may be involved as well.

Applications must support valid monitoring requirement capabilities performed in accordance with applicable federal laws, Executive Orders, directives, policies, or regulations.  This includes the capability to capture, record, and log all content related to an established user session. ",None,SV-34185r1_rule,None,None,None,None
V-27101,medium,"Applications that detect and alarm on security events such as Intrusion Detection, Firewalls, Anti-Virus, or Malware must provide near real-time alert notification.  ","When an intrusion detection security event occurs it is imperative the application that has detected the event immediately notify the appropriate support personnel so they can respond accordingly.  

Lack of this capability increases the risk that attacks will go unnoticed or responses will be delayed.",None,SV-34396r1_rule,None,None,None,None
V-69425,medium,The application must log user actions involving access to data.,"When users access application data, there is risk of data compromise or seepage if the account used to access is compromised or access is granted improperly. To be able to investigate which account accessed data, the account access must be logged. Without establishing when the access event occurred, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Associating event types with detected events in the application and audit logs provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.",None,SV-84047r1_rule,F-75601r1_fix,Identify the specific data elements requiring protection and audit access to the data.,C-69843r1_chk,"Review and monitor the application logs. When accessing data, the logs are most likely database logs.

If the application design documents include specific data elements that require protection, ensure user access to those data elements are logged.

Utilize the application as a regular user and operate the application so as to access data elements contained within the application. This includes using the application user interface to browse through data elements, query/search data elements and using report generation capability if it exists.

Observe and determine if the application log includes an entry to indicate the user’s access to the data was recorded.

If successful access to application data elements is not recorded in the logs, this is a finding."
V-57401,medium,The application server must automatically terminate a user session after organization-defined conditions or trigger events requiring a session disconnect.,"An attacker can take advantage of user sessions that are left open, thus bypassing the user authentication process.

To thwart the vulnerability of open and unused user sessions, the application server must be configured to close the sessions when a configured condition or trigger event is met.

Session termination terminates all processes associated with a user's logical session except those processes that are specifically created by the user (i.e., session owner) to continue after the session is terminated.

Conditions or trigger events requiring automatic session termination can include, for example, periods of user inactivity, targeted responses to certain types of incidents, and time-of-day restrictions on information system use.",None,SV-71673r2_rule,F-62439r1_fix,Configure the application server to terminate user sessions on defined conditions or trigger events.,C-58075r1_chk,"Review application server documentation and configuration settings to determine if the application server is configured to close user sessions after defined conditions or trigger events are met.

If the application server is not configured or cannot be configured to disconnect users after defined conditions and trigger events are met, this is a finding."
V-22028,high,"The designer shall use the NotOnOrAfter condition when using the SubjectConfirmation element in a SAML assertion.
","When a SAML assertion is used with a <SubjectConfirmation> element, a begin and end time for the <SubjectConfirmation> should be set to prevent reuse of the message at a later time. Not setting a specific time period for the <SubjectConfirmation>, may grant immediate access to an attacker and results in an immediate loss of confidentiality.

Any vulnerability associated with a DoD Information system or system enclave, the exploitation of which, by a risk factor, will directly and immediately result in loss of Confidentiality, Availability or Integrity of the system
associated data.
",['DCSQ-1'],SV-55088r1_rule,F-23093r2_fix,"Use the NotOnOrAfter condition when using the SubjectConfirmation element in a SAML assertion.
",C-27024r2_chk,"Examine the contents of a SOAP message using the SubjectConfirmation element. All messages should contain the NotOnOrAfter element.  This can be accomplished with a protocol analyzer like Wireshark. 

1) If SOAP messages do not contain NotOnOrAfter elements, it is a finding"
V-16837,high,The IAO will ensure the application is decommissioned when maintenance or support is no longer available.,"When maintenance no longer exists for an application, there are no individuals responsible for providing security updates.  The application is no longer supported, and should be decommissioned.
","['DCSD-1', 'ECSC-1']",SV-17837r1_rule,F-17157r1_fix,"Ensure there is maintenance for the application.
",C-17843r1_chk,"Interview the application representative and determine if all the application components are under maintenance.  The entire application may be covered by a single maintenance agreement. The application should be decommissioned if maintenance or security support is no longer being provided by the vendor or by the development staff of a custom developed application.
 
1) If the application or any of the application components are not being maintained, it is a finding.

"
V-26903,medium,Applications must generate audit records for the DoD selected list of auditable events. ,"Audit records can be generated from various components within the information system. The list of audited events is the set of events for which audits are to be generated. 

This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events). 

DoD shall select the list of auditable events and applications must generate audit records for those events.",None,SV-34183r1_rule,None,None,None,None
V-26896,medium,The application must provide the capability to compile audit records from multiple components within the system into a system-wide (logical or physical) audit trail that is time-correlated to within organization-defined level of tolerance.,"Audit generation and audit records can be generated from various components within the information system. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events). 

The events occurring must be time-correlated on order to conduct accurate forensic analysis.  In addition, the correlation must meet a certain tolerance criteria.  For instance, the organization may define that the time stamps of different audited events must not differ by any amount greater than ten seconds.",None,SV-34176r1_rule,None,None,None,None
V-27086,medium,"Applications providing malicious code protection must support organizational requirements to configure malicious code protection mechanisms to perform real-time scans of files from external sources as the files are downloaded, opened, or executed in accordance with organizational security policy.","Malicious code protection mechanisms include but are not limited to anti-virus and malware detection software. In order to minimize potential negative impact to the organization that can be caused by malicious code, it is imperative that malicious code is identified and eradicated. 

Malicious code includes, viruses, worms, Trojan horses, and Spyware. ",None,SV-34381r1_rule,None,None,None,None
V-6147,medium,"The Test Manager will ensure the application does not modify data files outside the scope of the application.
","Modifying data or files outside the scope of the application could lead to system instability in the event of an application problem.  Also, a problem with this application could effect the operation of another application.",['ECRC-1'],SV-6147r1_rule,F-17140r1_fix,"Restrict the application to modify data files within the scope of the application. 
",C-3054r1_chk,"On each computer in the application infrastructure, search the file system for files created or modified in the past week.  If the response is too voluminous (more than 200 files), find the files created or modified in the past day.  Search through the list for files and identify those that appear to be outside the scope of the application.  Ask the application representative how the file relates to the application.  
 
If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.

1) If the creation or modification of the file does not have a clear purpose, it is a finding.  
 
The finding details should include the full path of the file.
 
The method described above may not catch all instances of out-of-scope modifications because the file(s) may have been modified prior to the threshold date or because the files may be residing on a system other than those examined.  If additional information is obtained later in the review regarding improper modification of files, revisit this check.  This information may be uncovered when the reviewer obtains more detailed knowledge of how the application works during subsequent checks."
V-69485,medium,The application must protect audit information from unauthorized modification.,"If audit data were to become compromised, then forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized modification.

This requirement can be achieved through multiple methods, which will depend upon system architecture and design. Some commonly employed methods include ensuring log files receive the proper file system permissions, and limiting log data locations.

Applications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights that the user enjoys in order to make access decisions regarding the modification of audit data.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.",None,SV-84107r1_rule,F-75661r1_fix,Configure the application to protect audit data from unauthorized modification and changes. Limit users to roles that are assigned the rights to edit audit data and establish permissions that control access to the audit logs and audit configuration settings.,C-69903r1_chk,"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.

Identify the application components and the logs associated with the components.

Identify the roles and users allowed to modify audit information and the circumstances in which they are allowed to modify the data.

Identify the methods used to manage audit records and audit components. Typical methods are file system-based, via an application user interface via database access or a combination thereof.

For file system access: Review file system permissions to ensure the audit logs and the application audit components such as executable files and libraries are protected by adequate file permission restrictions.

Permissions must be configured to limit write/modify access to only those who have been identified and whose access has been approved.

If file permissions are configured to allow unapproved write/modify access, this is a finding.

For application oriented and database access: Identify the application module that provides access to audit settings and audit data. Attempt to access audit configuration features and logs by using a regular non-privileged application or database user account. Once access has been established, attempt to modify an audit record and attempt to modify the audit settings.

If a non-privileged user account is allowed to modify the audit data or the audit configuration settings, this is a finding."
V-27150,medium,Applications must employ FIPS-validated cryptography to protect unclassified information.,"Cryptography is only as strong as the encryption modules/algorithms employed to encrypt the data. 

Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. ",None,SV-34449r1_rule,None,None,None,None
V-26855,medium,The application must enforce the organization-defined time period during which the limit of consecutive invalid access attempts by a user is counted.,"Anytime an authentication method is exposed, so as to allow for the utilization of an application, there is a risk that attempts will be made to obtain unauthorized access. 

To aid in defeating these attempts, organizations define the number of times that a user account may consecutively fail a login attempt. The organization also defines the period of time in which these consecutive failed attempts may occur. 

By limiting the number of failed login attempts, the risk of unauthorized system access via user password guessing, otherwise known as brute forcing, is reduced. Limits are imposed by locking the account. ",None,SV-34135r1_rule,None,None,None,None
V-27180,medium,The application must provide additional data origin and integrity artifacts along with the authoritative data the system returns in response to name/address resolution queries.,"This control enables remote clients to obtain origin authentication and integrity verification assurances for the host/service name to network address resolution information obtained through the service. 

A Domain Name System (DNS) server is an example of an information system providing name/address resolution service. Digital signatures and cryptographic keys are examples of additional artifacts. DNS resource records are examples of authoritative data. 

Information systems using technologies other than the DNS to map between host/service names and network addresses provide other means to assure the authenticity and integrity of response data. The DNS security controls are consistent with, and referenced from, OMB Memorandum 08-23. ",None,SV-34479r1_rule,None,None,None,None
V-69373,medium,The application must record a time stamp indicating when the event occurred.,It is important to include the time stamps for when an event occurred. Failure to include time stamps in the event logs is detrimental to forensic analysis.,None,SV-83995r1_rule,F-75547r1_fix,Configure the application to record the time the event occurred when recording the event.,C-69787r1_chk,"Review the application logs.

If the time the event occurred is not included as part of the event, this is a finding."
V-70401,medium,Unnecessary built-in application accounts must be disabled.,"Default passwords and properties of built-in accounts are often publicly available. Anyone with necessary knowledge, internal or external, can compromise an application using built-in accounts.

Built-in accounts are those that are added as part of the installation of the application software. These accounts exist for many common Commercial Off-the-Shelf (COTS) or open source components of enterprise applications (e.g., OS, web browser or database software).",None,SV-85023r1_rule,F-76637r1_fix,"Disable unnecessary built-in userids, use other strong authentication when possible and use strong passwords if accounts are necessary for application operation.",C-70855r1_chk,"Review the application documentation and identify if the application creates or utilizes built-in accounts.

Examine the account list for obvious examples (e.g., accounts with vendor names such as Oracle or Tivoli).

Verify that these accounts have been removed or disabled.

If enabled built-in accounts are present, ask the application representative the reason for their existence.

If the account is required in order for the application to operate properly, verify the account password has been changed to a DoD acceptable value.

If these accounts are not necessary to run the application, or if the accounts are required and the password has not been changed to meet DoD password requirements, this is a finding."
V-6128,medium,"The designer and IAO will ensure PK-enabled applications are designed and implemented to use approved credentials authorized under the DoD PKI program.

",Using unapproved PKI certificates could allow access by non-DoD and unauthorized  users.,"['IATS-1', 'IATS-2']",SV-6128r1_rule,F-17018r1_fix,Configure the application to use approved DoD PKI certificates. ,C-2940r1_chk,"Policy:

The designer and IAO will ensure PK-enabled applications are designed and implemented to use approved credentials authorized under the DoD PKI program.

The IAO will ensure the PK-enabled applications are configured to honor only approved DoD PKI certificates.  

If the application is not PK-enabled, this check is not applicable.

If the application resides on the SIPRNet and PKI infrastructure is unavailable, this check is not applicable.

Ask whether the application utilizes PKI certificates other than DoD PKI and External Certification Authority (ECA) certificates.  Verify the certificate used in authentication in APP3280.

Internet Explorer can be used to view certificate information: 
Select “Tools”
Select “Internet Options” 
Select “Content” tab
Select “Certificates”
Select the certificate used for authentication:
Click “View”
Select “Details” tab
Select “Issuer”
 
If the application utilizes PKI certificates other than DoD PKI and ECA certificates, this is a finding. "
V-69411,medium,The application must generate audit records when successful/unsuccessful accesses to objects occur.,"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Application objects are system or application components that comprise the application. This includes but is not limited to; application files, folders, processes and modules.

This requirement is not intended to force the use of debug logging which would be used for troubleshooting or forensic actions; rather it is intended to assure the application strikes a balance when auditing access to application objects and logs normal and potentially abnormal application activity.

Audit records can be generated from various components within the information system (e.g., module or policy filter).",None,SV-84033r1_rule,F-75587r1_fix,Configure the application to log successful and unsuccessful access to application objects.,C-69829r1_chk,"Review the application documentation and interview the application administrator to identify log locations.

Access the application logs.

Review the logs and identify if the application is logging both successful and unsuccessful access to application objects such as files, folders, processes, or application modules and sub components, or systems.

If the application does not log application object access, this is a finding."
V-6157,medium,"The designer will ensure the application does not contain invalid URL or path references.
","Resource information in code can easily advertise available vulnerabilities to unauthorized users.  By placing the references into configuration files, the files can be further protected by file permissions and will be separated for ease of updating.",['DCSQ-1'],SV-6157r1_rule,F-16990r1_fix,"Remove any invalid URL or path references from the application.
",C-14177r1_chk,"Search the source code for common URL prefixes and suffixes and to the extent feasible with available tools, NFS shares, NetBIOS shares and IP addresses.  

All such resources should be captured from configuration files (i.e., “http://”, ftp://, “.mil”, “.com”). 
 
1) If any references are invalid, it is a finding."
V-35148,medium,The application server must initiate session logging upon startup.,"Session logging activities are developed, integrated, and used in consultation with legal counsel in accordance with applicable federal laws, Executive Orders, directives, policies, or regulations.",None,SV-46435r3_rule,F-39698r2_fix,Configure the application server to initiate session logging on application server startup.,C-43534r2_chk,"Review the application server product documentation and server configuration to determine if the application server initiates session logging on application server startup.

If the application server is not configured to meet this requirement, this is a finding."
V-69251,medium,The application must associate organization-defined types of security attributes having organization-defined security attribute values with information in storage.,"Without the association of security attributes to information, there is no basis for the application to make security related access-control decisions.

Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.

One example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing but either way, it is imperative these assignments are maintained while the data is in storage. If the security attributes are lost when the data is stored, there is the risk of a data compromise.

Classify the system hosting the application with default classification.  Treat all unmarked data at the highest classification as the overall hosting system is classified.  If there is no classification, mark system high.",None,SV-83873r1_rule,F-75421r1_fix,Design and configure the application to assign data marking and ensure the marking is retained when the data is stored.,C-69675r1_chk,"Review the application documentation and interview the application administrator.

Determine if the application processes classified, FOUO, or other data that is required to be marked and identify if the application requirements specify data markings of any other types of data.

If the application does not contain classified, FOUO, or other data that is required to be marked, this requirement is not applicable.

Review the database or other storage mechanism and have the application administrator identify and demonstrate how the application assigns and maintains data markings while the data is in storage.

Typical methods for marking data include utilizing a table or data base field that contains the marking information and associating the marking information with the data.

If application data required to be marked is not marked and does not retain its marking while it is being stored, this is a finding."
V-57565,medium,The application server must behave in a predictable and documented manner that reflects organizational and system objectives when invalid inputs are received.,"Invalid user input occurs when a user inserts data or characters into an applications data entry field and the application is unprepared to process that data. This results in unanticipated application behavior potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.

Application servers must ensure their management interfaces perform data input validation checks.  When invalid data is entered, the application server must behave in a predictable and documented manner that reflects organizational and system objectives when invalid inputs are received.  An example of a predictable behavior is trapping the data, logging the invalid data for forensic analysis if necessary, and continuing operation in a safe and secure manner.",None,SV-71841r2_rule,F-62633r1_fix,Configure the application server management interface to behave in a predictable and documented manner that reflects organizational and system objectives when invalid inputs are received.,C-58273r1_chk,"Review the application server configuration to determine if the management interface behaves in a predictable and documented manner that reflects organizational and system objectives when invalid inputs are received.

If the application server does not meet this requirement, this is a finding."
V-27041,medium,Applications must limit the use of resources by priority and not impede the host from servicing processes designated as a higher-priority.,Priority protection helps prevent a lower-priority process from delaying or interfering with the information system servicing any higher-priority process. This control does not apply to components in the information system for which there is only a single user/role. The application must limit the use of resources by priority.,None,SV-34335r1_rule,None,None,None,None
V-69543,medium,The application must implement replay-resistant authentication mechanisms for network access to privileged accounts.,"A replay attack may enable an unauthorized user to gain access to the application. Authentication sessions between the authenticator and the application validating the user credentials must not be vulnerable to a replay attack.

An authentication process resists replay attacks if it is impractical to achieve a successful authentication by recording and replaying a previous authentication message.

A privileged account is any information system account with authorizations of a privileged user.

Techniques used to address this include protocols using nonces (e.g., numbers generated for a specific one time use) or challenges (e.g., TLS, WS_Security). Additional techniques include time-synchronous or challenge-response one-time authenticators.",None,SV-84165r1_rule,F-75717r1_fix,Design and configure the application to utilize replay-resistant mechanisms when authenticating privileged accounts.,C-69961r1_chk,"Review application documentation and interview application administrator to identify what authentication mechanisms are used when accessing the application.

If the application is hosting publicly releasable information that does not require authentication, or if the application users are not eligible for a DoD CAC as per DoD 8520, this requirement is not applicable.

Review to ensure the application is utilizing TLSV1.1 or greater to protect communication and privileged user authentication traffic.

Verify the application utilizes a strong authentication mechanism such as Kerberos, IPSEC, or Secure Shell (SSH).

- Cryptographically sign web services packets.
- Time stamps and cryptographic hashes are used with web services packets.
- Use WS_Security for web services.

Request the most recent vulnerability scan results and configuration settings.

Verify the configuration is set to test for known replay vulnerabilities.

Request code review results (if available) and review for issues that have been identified as potential replay attack vulnerabilities.

Verify identified issues have been remediated.

If the application is not implementing replay-resistant authentication methods applicable to the application architecture, this is a finding."
V-69489,medium,The application must protect audit tools from unauthorized access.,"Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.

Applications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the access to audit tools.

Audit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.",None,SV-84111r1_rule,F-75665r1_fix,"Configure the application to protect audit data from unauthorized access. Limit users to roles that are assigned the rights to view, edit or copy audit data, and establish file permissions that control access to the audit tools and audit tool capabilities and configuration settings.",C-69907r1_chk,"Review the system documentation and interview the application administrator for details regarding application architecture, audit methods, and audit tools.

Identify the application audit tools and their locations.

If the application does not provide a distinct audit tool oriented functionality that is a separate tool with an ability to view and manipulate log data, this requirement is not applicable.

Identify the methods used for implementing the audit tool functionality within the application. Typical methods are file system-based, e.g., a separate executable file that when invoked provides audit functionality, an application user interface to an audit module, or a combination thereof.

For file system access: Review file system permissions to ensure the application audit components such as executable files and libraries are protected by adequate file permission restrictions.

Permissions must be configured to limit access to only those who have been identified and whose access has been approved.

If file permissions are configured to allow unapproved access, this is a finding.

For circumstances where audit tools are accessed via application sub-modules or menus: Identify the application module that provides access to audit settings and audit data. Attempt to access audit configuration features and logs by using a regular non-privileged application or database user account.

If a non-privileged user account is allowed to access the audit data or the audit configuration settings, this is a finding."
V-27030,medium,"The application must protect the integrity of information during the processes of data aggregation, packaging, and transformation in preparation for transmission.","Information can be subjected to unauthorized changes (e.g., malicious and/or unintentional modification) at information aggregation or protocol transformation points. It is therefore imperative the application take steps to validate and assure the integrity of data while at these stages of processing. 

For example, an application developer may determine based upon application requirements that various application data must accumulate in a processing queue where the application analyses, packages or transforms the data pending a data transfer.  A window of time now exists where if an attacker were to gain access to the data residing in the application queue they could potentially compromise that data or alter results.  The application must ensure the integrity of data that is pending transfer is maintained. If the application were to simply transmit aggregated, packaged or transformed data without ensuring the data was not manipulated during these processes, then the integrity of the data may be called into question.",None,SV-34324r1_rule,None,None,None,None
V-69367,medium,The application must provide audit record generation capability for the renewal of session IDs.,"Application design sometimes requires the renewal of session IDs in order to continue approved user access to the application.

Session renewal is done on a case by case basis under circumstances defined by the application architecture. The following are some examples of when session renewal must be done; whenever there is a change in user privilege such as transitioning from a user to an admin role or when a user changes from an anonymous user to an authenticated user or when a user's permissions have changed.

For these types of critical application functionalities, the previous session ID needs to be destroyed or otherwise invalidated and a new session ID must be created.

It is important to log when session IDs are renewed for forensic purposes.

Web based applications will often utilize an application server that creates, manages and logs session IDs.  It is acceptable for the application to delegate this requirement to the application server.",None,SV-83989r1_rule,F-75541r2_fix,Design or reconfigure the application to log session renewal events on those application events that provide changes in the users privileges or permissions to the application.,C-69781r1_chk,"Interview the system admin and review the application documentation.

Identify any web pages or application functionality where a user's privileges or permissions will change. This is most likely to occur during the authentication stages.

Evaluate the log/audit output by opening the log files and observing changes to the logs.

Create a new user session by accessing the application.

Review the logs and save the relevant session creation event recorded.

Utilize the application pages that provide privilege escalation.

Escalate privileges by authenticating as a privileged user.

Review the logs and determine if new session information is created and being used.

If a web-based application delegates session ID renewals to an application server, this is not a finding. 

If the application is not configured to log session ID renewal events this is a finding."
V-69459,medium,The application must provide the capability to filter audit records for events of interest based upon organization-defined criteria.,"The ability to specify the event criteria that are of interest provides the persons reviewing the logs with the ability to quickly isolate and identify these events without having to review entries that are of little or no consequence to the investigation. Without this capability, forensic investigations are impeded.

Events of interest can be identified by the content of specific audit record fields including, for example, identities of individuals, event types, event locations, event times, event dates, system resources involved, IP addresses involved, or information objects accessed. Organizations may define audit event criteria to any degree of granularity required, for example, locations selectable by general networking location (e.g., by network or subnetwork) or selectable by specific information system component. This requires applications to provide the capability to customize audit record reports based on organization-defined criteria.",None,SV-84081r1_rule,F-75635r1_fix,Configure the application filters to search event logs based on defined criteria.,C-69877r1_chk,"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.

Identify the application components and the logs associated with the components as well as the locations of the logs.

If the application utilizes a centralized logging system that provides the capability to filter log events based upon the following events, this requirement is not applicable.

Review the application log management utility.

Ensure the application provides the ability to filter on audit events based upon the following minimum criteria:

Users: e.g., specific users or groups
Event types:
Event dates and time:
System resources involved: e.g., application components or modules.
IP addresses:
Information objects accessed:
Event level categories: e.g., high, critical, warning, error
Key words: e.g., a specific search string

Additional details may be logged as needed or prescribed by operational requirements.

If the application does not provide the ability to filter audit events, this is a finding."
V-70249,medium,The application must maintain the confidentiality and integrity of information during preparation for transmission.,"Data is subject to manipulation and other integrity related attacks whenever that data is transferred across a network. To protect data integrity during transmission, the application must implement mechanisms to ensure the integrity of all transmitted information. All transmitted information means that the protections are not restricted to just the data itself. Protection mechanisms must be extended to include data labels, security parameters or metadata if data protection requirements specify. Modern web application data transfer methods can be complex and are not necessarily just point-to-point in nature. Service-Oriented Architecture (SOA) and RESTFUL web services allow for XML-based application data to be transmitted in a manner similar to network traffic wherein the application data is transmitted along multiple servers' hops. In such cases, point-to-point protection methods like TLS or SSL may not be the best choice for ensuring data integrity and alternative data integrity protection methods like XML Integrity Signature protections where the XML payload itself is signed may be required as part of the application design. Overall application design and architecture must always be taken into account when establishing data integrity protection mechanisms. Custom-developed solutions that provide a file transfer capability should implement data integrity checks for incoming and outgoing files. Transmitted information requires mechanisms to ensure the data integrity (e.g., digital signatures, SSL, TLS, or cryptographic hashing).",None,SV-84871r1_rule,F-76485r1_fix,Configure all of the application systems to require TLS encryption.,C-70725r1_chk,"Review the application documentation and interview the application administrator.

Identify web servers and associated network connections.

Access the application with a web browser.

Verify the web browser goes secure automatically by automatically redirecting the browser to a secure port running TLS encryption, or ensure the port used by the application uses TLS encryption by default.

For tiered applications, (web server, application server, database server) verify the communication channels between the tiers is also encrypted.

If the application does not utilize TLS to protect the confidentiality and integrity of transmitted information, this is a finding."
V-26693,medium,Applications must not enable information system functionality providing the capability for automatic execution of code on mobile devices without user direction.,"Mobile devices include portable storage media (e.g., USB memory sticks, external hard disk drives) and portable computing and communications devices with information storage capability (e.g., notebook/laptop computers, personal digital assistants, cellular telephones, digital cameras, and audio recording devices).  

Auto execution vulnerabilities can result in malicious programs being automatically executed.  Examples of information system functionality providing the capability for automatic execution of code are Auto Run and Auto Play.  Auto Run and Auto Play are components of the Microsoft Windows operating system dictating what actions the system takes when a drive is mounted. This requirement is designed to address vulnerabilities arising when mobile devices such as USB memory sticks or other mobile storage devices are automatically mounted and applications are automatically invoked without user knowledge or acceptance.
",None,SV-33936r1_rule,None,None,None,None
V-35150,medium,"The application server must provide the capability for authorized users to capture, record, and log all content related to a user session.",The application server must be capable of enabling a setting for troubleshooting or debugging purposes which will log all user session information specified by an authorized user.,None,SV-46437r3_rule,F-39700r2_fix,"Configure the application server to provide the capability for authorized users to capture, record, and log all content related to a user session.",C-43536r2_chk,"Review the application server documentation to determine if the application server can be configured to capture/record and log all content related to a user session.

If the application server does not have the capability to allow an authorized user to capture, record, and log all content related to a user session, this is a finding."
V-27170,medium,The application must associate security attributes with information exchanged between information systems.,"When data is exchanged between information systems, the security attributes associated with said data needs to be maintained.  

Security attributes are an abstraction representing the basic properties or characteristics of an entity with respect to safeguarding information, typically associated with internal data structures (e.g., records, buffers, files) within the information system and used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. 

Security attributes may be explicitly or implicitly associated with the information contained within the information system. ",None,SV-34469r1_rule,None,None,None,None
V-27084,medium,Applications scanning for malicious code must support organizational requirements to configure malicious code protection mechanisms to perform periodic scans of the information system on an organization-defined frequency.,"Malicious code protection mechanisms include but are not limited to anti-virus and malware detection software. In order to minimize potential negative impact to the organization that can be caused by malicious code, it is imperative that malicious code is identified and eradicated. 

Malicious code includes, viruses, worms, Trojan horses, and Spyware. It is not enough to simply have the software installed.  This software must periodically scan the system to search for malware on an organization defined frequency. ",None,SV-34379r1_rule,None,None,None,None
V-27163,medium,The application must protect audit tools from unauthorized access.,"Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. 

Depending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. 

It is, therefore, imperative that access to audit tools be controlled and protected from unauthorized access.  

Applications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the access to audit tools.

Audit tools include but are not limited to OS provided audit tools, vendor provided audit tools, and open source audit tools needed to successfully view and manipulate audit information system activity and records. ",None,SV-34462r1_rule,None,None,None,None
V-26848,medium,"The information system must provide additional protection for mobile devices accessed via login by purging information from the device after organization-defined number of consecutive, unsuccessful login attempts to the mobile device.","Mobile devices present additional risks related to attempted unauthorized access.  If they are lost, stolen or misplaced, attempts can be made to unlock the device by guessing the pin.  In order to address this risk, mobile devices shall provide additional protection enabling the device to automatically wipe itself clean and purge itself of any and all data. 

This does not apply to applications.  This is a requirement for Mobile Devices (smart phones, PDAs, etc) to be able to purge themselves of data if x number of failed login attempts occur.

This requirement applies only to mobile devices for which a login occurs (e.g., personal digital assistants and smart phones) and not to mobile devices accessed without a login such as removable media. In certain situations, this requirement may not apply to mobile devices if the information on the device is encrypted with sufficiently strong encryption mechanisms, making purging unnecessary. The login is to the mobile device, not to any one account on the device. 

Therefore, a successful login to any account on the mobile device resets the unsuccessful login count to zero. ",None,SV-34128r1_rule,None,None,None,None
V-27067,medium,Applications must support the requirement to activate an alarm and/or automatically shut down the information system if an application component failure is detected.  This can include conducting a graceful application shutdown to avoid losing information.,"Predictable failure prevention requires organizational planning to address system failure issues. If components key to maintaining systems security fail to function, the system could continue operating in an insecure state. The organization must be prepared and the application must support requirements that specify if the application must alarm for such conditions and/or automatically shut down the application or the system. ",None,SV-34362r1_rule,None,None,None,None
V-69495,medium,The application must back up audit records at least every seven days onto a different system or system component than the system or component being audited.,"Protection of log data includes assuring log data is not accidentally lost or deleted. Backing up audit records to a different system or onto separate media than the system being audited on an organizationally defined frequency helps to assure in the event of a catastrophic system failure, the audit records will be retained.

This helps to ensure a compromise of the information system being audited does not also result in a compromise of the audit records.

This requirement only applies to applications that have a native backup capability for audit records. Operating system backup requirements cover applications that do not provide native backup functions.",None,SV-84117r1_rule,F-75671r1_fix,Configure application backup settings to backup application audit logs every 7 days.,C-69913r1_chk,"Review the application documentation and interview the application administrator.

Identify log functionality and locations of log files.

If the application does not include a built-in backup capability for backing up its own audit records, this requirement is not applicable.

Access the management interface for configuring application audit logs and review the backup settings.

If the application backup settings are not configured to backup application audit records every 7 days, this is a finding."
V-27105,medium,The application must support taking organization-defined list of least-disruptive actions to terminate suspicious events. ,System availability is a key tenet of system security. Organizations need to have the flexibility to be able to define the automated actions taken in response to an identified incident. This includes being able to define a least disruptive action that the application takes to terminate suspicious events.  A least disruptive action may include initiating a request for human response rather than blocking traffic or disrupting system operation.,None,SV-34400r1_rule,None,None,None,None
V-70157,high,The application must not display passwords/PINs as clear text.,"To prevent the compromise of authentication information such as passwords during the authentication process, the feedback from the information system must not provide any information that would allow an unauthorized user to compromise the authentication mechanism.

Obfuscation of user-provided information when typed into the system is a method used in addressing this risk.

For example, displaying asterisks when a user types in a password is an example of obscuring feedback of authentication information.

A common tactic employed to circumvent password obfuscation is to copy the obfuscated password and paste it to a text file.  Proper obfuscation techniques will not paste the clear text password.",None,SV-84779r1_rule,F-76393r1_fix,"Configure the application to obfuscate passwords and PINs when they are being entered so they cannot be read.

Design the application so obfuscated passwords cannot be copied and then pasted as clear text.",C-70633r1_chk,"Ask the application admin to log on to the application.

Observe the authentication process and verify any display feedback provided when the admin enters her/his password is obfuscated and not clear text.

Using a text editor, copy the obfuscated password and paste to a text file.  Do not save the file.

If the application displays clear text when the password/PIN is entered, or if the clear text password is displayed when pasted, this is a finding."
V-26891,medium,Applications must validate the binding of the information producer’s identity to the information.,"Non-repudiation protects individuals against later claims by an author of not having authored a particular document, a sender of not having transmitted a message, a receiver of not having received a message, or a signatory of not having signed a document.

This non-repudiation control enhancement is intended to mitigate the risk that information gets modified between production and review. The validation of bindings can be achieved, for example, by the use of cryptographic checksums. ",None,SV-34171r1_rule,None,None,None,None
V-70281,medium,Security-relevant software updates and patches must be kept up to date.,"Security flaws with software applications are discovered daily. Vendors are constantly updating and patching their products to address newly discovered security vulnerabilities. Organizations (including any contractor to the organization) are required to promptly install security-relevant software updates (e.g., patches, service packs, and hot fixes). Flaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously.

Organization-defined time periods for updating security-relevant software may vary based on a variety of factors including, for example, the security category of the information system or the criticality of the update (i.e., severity of the vulnerability related to the discovered flaw).

This requirement will apply to software patch management solutions that are used to install patches across the enclave and also to applications themselves that are not part of that patch management solution. For example, many browsers today provide the capability to install their own patch software. Patch criticality, as well as system criticality will vary. Therefore, the tactical situations regarding the patch management process will also vary. This means that the time period utilized must be a configurable parameter. Time frames for application of security-relevant software updates may be dependent upon the Information Assurance Vulnerability Management (IAVM) process.

The application, or the patch management solution that is configured to patch the application, must be configured to check for and install security-relevant software updates and patches at least weekly. Patches must be applied immediately or in accordance with POA&Ms, IAVMs, CTOs, DTMs or other authoritative patching guidelines or sources.",None,SV-84903r1_rule,F-76517r1_fix,"Check for application updates at least weekly and apply patches immediately or in accordance with POA&Ms, IAVMs, CTOs, DTMs or other authoritative patching guidelines or sources.",C-70757r1_chk,"Review the application documentation to identify application versions and patching.

Interview the application administrator and inquire about patching process.

Review IAVMs and CTOs to determine if the application is being updated in accordance with authoritative sources.

If application updates are not checked on at least on a weekly basis and applied immediately or in accordance with POA&Ms, IAVMs, CTOs, DTMs or other authoritative patching guidelines or sources, this is a finding."
V-35304,medium,The application server must provide security extensions to extend the SOAP protocol and provide secure authentication when accessing sensitive data.,"Application servers may provide a web services capability that could be leveraged to allow remote access to sensitive application data. A web service, which is a repeatable process used to make data available to remote clients, should not be confused with a web server. 

Many web services utilize SOAP, which in turn utilizes XML and HTTP as a transport. Natively, SOAP does not provide security protections. As such, the application server must provide security extensions to enhance SOAP capabilities to ensure that secure authentication mechanisms are employed to protect sensitive data. The WS_Security suite is a widely used and acceptable SOAP security extension.",None,SV-46591r3_rule,F-39850r2_fix,"Configure the application server to utilize secure authentication when SOAP web services are used to access sensitive data. 
",C-43673r3_chk,"Review application server documentation to ensure the application server provides extensions to the SOAP protocol that provide secure authentication. These protocols include, but are not limited to, WS_Security suite.  Review policy and data owner protection requirements in order to identify sensitive data.

If secure authentication protocols are not utilized to protect data identified by data owner as requiring protection, this is a finding."
V-26847,medium,The application must produce audit records containing sufficient information to establish when (date and time) the events occurred.,"Information system auditing capability is critical for accurate forensic analysis.   Audit record content that may be necessary to satisfy the requirement of this control, includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked.",None,SV-34127r1_rule,None,None,None,None
V-35309,medium,"The application server must disable identifiers (individuals, groups, roles, and devices) after 35 days of inactivity.","Inactive identifiers pose a risk to systems and applications. Attackers that are able to exploit an inactive identifier can potentially obtain and maintain undetected access to the application. Owners of inactive accounts will not notice if unauthorized access to their user account has been obtained. 

Applications need to track periods of inactivity and disable application identifiers after 35 days of inactivity. 

Management of user identifiers is not applicable to shared information system accounts (e.g., guest and anonymous accounts). It is commonly the case that a user account is the name of an information system account associated with an individual.

To avoid having to build complex user management capabilities directly into their application, wise developers leverage the underlying OS or other user account management infrastructure (AD, LDAP) that is already in place within the organization and meets organizational user account management requirements.",None,SV-46596r3_rule,F-39855r2_fix,"Configure the application server to disable identifiers (individuals, groups, roles, and devices) after 35 days of inactivity.",C-43678r2_chk,"Review the application server documentation and configuration to ensure the application server disables identifiers (individuals, groups, roles, and devices) after 35 days of inactivity.

If the application server is not configured to disable identifiers (individuals, groups, roles, and devices) after 35 days of inactivity, this is a finding."
V-69297,medium,Shared/group account credentials must be terminated when members leave the group.,"If shared/group account credentials are not terminated when individuals leave the group, the user that left the group can still gain access even though they are no longer authorized. A shared/group account credential is a shared form of authentication that allows multiple individuals to access the application using a single account. There may also be instances when specific user actions need to be performed on the information system without unique user identification or authentication. Examples of credentials include passwords and group membership certificates.",None,SV-83919r1_rule,F-75469r1_fix,Create a procedure for deleting either member accounts or the entire group account when members leave the group.,C-69707r1_chk,"Review the application documentation and determine if there is a requirement for shared or group accounts.

If there is no official requirement for shared or group application accounts, this requirement is not applicable.

Interview the application representative and identify shared/group accounts.

Have the application representative provide their procedures for account management as it pertains to group users.

Validate there is a procedure for deleting either member accounts or the entire group account when member leave the group.

If there is no process for handling group account credentials, this is a finding."
V-30582,medium,The application must notify appropriate individuals when account disabling actions are taken.,"When application accounts are disabled, user accessibility is affected.  Accounts are utilized for identifying individual application users or for identifying the application processes themselves. 

In order to detect and respond to events that affect user accessibility and application processing, applications must audit account disabling actions and, as required, notify as required the appropriate individuals so they can investigate the event.  Such a capability greatly reduces the risk that application accessibility will be negatively affected for extended periods of time and also provides logging that can be used for forensic purposes.    

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality. 

Examples of enterprise level authentication/access mechanisms include but are not limited to Active Directory and LDAP.

Applications must notify, or leverage other mechanisms that notify, the appropriate individuals when accounts disabling actions are taken.",None,SV-40322r1_rule,None,None,None,None
V-26810,medium,The information system must enforce organization-defined one-way flows using hardware mechanisms.,"This is a requirement to enforce information flow with a hardware device or mechanism.  By definition, this is not related to software applications.  This is expected to be addressed via hardware.

Does not apply to applications.",None,SV-34060r1_rule,None,None,None,None
V-30584,medium,Applications utilizing mobile code must meet DoD-defined mobile code requirements.,"Decisions regarding the deployment of mobile code within organizational information systems are based on the potential for the code to cause damage to the system if used maliciously. 

Mobile code technologies include but are not limited to:  Java, JavaScript, ActiveX, PDF, Postscript, Shockwave movies, Flash animations, and VBScript. Usage restrictions and implementation guidance apply to both the selection and use of mobile code installed on organizational servers and mobile code downloaded and executed on individual workstations. 

DoDI 8552.01 policy pertains to the use of mobile code technologies within DoD information systems. 

Applications utilizing mobile code must meet policy requirements regarding the deployment, and/or use of mobile code. ",None,SV-40324r1_rule,None,None,None,None
V-69469,medium,The application must provide a report generation capability that supports on-demand reporting requirements.,"The report generation capability must support on-demand reporting in order to facilitate the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.

The report generation capability provided by the application must be capable of generating on-demand (i.e., customizable, ad-hoc, and as-needed) reports. On-demand reporting allows personnel to report issues more rapidly to more effectively meet reporting requirements. Collecting log data and aggregating it to present the data in a single, consolidated report achieves this objective.

This requirement is specific to applications with report generation capabilities; however, applications need to support on-demand reporting requirements.",None,SV-84091r1_rule,F-75645r1_fix,Design or configure the application to provide an on-demand report generation capability or utilize a centralized utility designed for the purpose of on-demand log management and reporting.,C-69887r1_chk,"Review the application documentation and interview the application administrator for details regarding audit reduction (log record event filtering).

Access the application with user rights sufficient to read and filter audit records.

Navigate the application user interface and select the application functionality that provides access and interface to audit records and audit reduction (event filtering).

If the application uses a centralized logging solution that provides immediate, customizable, ad-hoc report generation functions, the requirement is not applicable.

Create an event report. Report data can be based on date ranges, times or events, or other criteria that could be used in an investigation. Use of data from previous checks for audit reduction is encouraged.

Review the report and ensure the data in the report coincides with event filters used to create the report.

If the application does not provide customizable, immediate, ad-hoc audit log reporting, this is a finding."
V-27093,medium,"The organization must analyze outbound communications traffic at the external boundary of the system (i.e., system perimeter).","Anomalies within the information system include, for example, large file transfers, long-time persistent connections, unusual protocols and ports in use, and attempted communications with suspected malicious external addresses.  

This is a requirement to analyze outbound traffic.  This does not apply to applications.",None,SV-34388r1_rule,None,None,None,None
V-57539,medium,The application server must maintain the confidentiality and integrity of information during reception.,"Information can be either unintentionally or maliciously disclosed or modified during reception, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking.  These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.

Protecting the confidentiality and integrity of received information requires that application servers take measures to employ approved cryptography in order to protect the information during transmission over the network. This is usually achieved through the use of Transport Layer Security (TLS), SSL VPN, or IPSEC tunnel.

The application server must utilize approved encryption when receiving transmitted data.",None,SV-71815r2_rule,F-62607r1_fix,Configure the application server to utilize a transmission method that maintains the confidentiality and integrity of information during reception.,C-58247r1_chk,"Review application server configuration to determine if the server is using a transmission method that maintains the confidentiality and integrity of information during reception.

If a transmission method is not being used that maintains the confidentiality and integrity of the data during reception, this is a finding."
V-35436,medium,"The application server must check the validity of all data inputs to the management interface, except those specifically identified by the organization.","Invalid user input occurs when a user inserts data or characters into an applications data entry field and the application is unprepared to process that data. This results in unanticipated application behavior potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.

Application servers must ensure their management interfaces perform data input validation checks. Input validation consists of evaluating user input and ensuring that only allowed characters are utilized. An example is ensuring that the interfaces are not susceptible to SQL injection attacks.",None,SV-46723r3_rule,F-39980r2_fix,Configure the application server to check the validity of data inputs into the management interface except those specifically identified by the organization.,C-43790r2_chk,"Review the application server configuration to determine if the system checks the validity of information inputs to the management interface, except those specifically identified by the organization.

If the management interface data inputs are not validated, this is a finding."
V-27042,medium,Applications functioning in the capacity of a firewall must check incoming communications to ensure the communications are coming from an authorized source and routed to an authorized destination.,"In regards to boundary controls such as routers and firewalls, examples of restricting and prohibiting communications are: restricting external web traffic only to organizational web servers within managed interfaces and prohibiting external traffic that appears to be spoofing an internal address as the source. ",None,SV-34337r1_rule,None,None,None,None
V-26973,medium,The application must use multifactor authentication for network access to privileged accounts.,"Multifactor authentication is defined as: using two or more factors to achieve authentication. 

Factors include: 
(i) something a user knows (e.g., password/PIN); 
(ii) something a user has (e.g., cryptographic identification device, token); or 
(iii) something a user is (e.g., biometric). 

A privileged account is defined as:  
An information system account with authorizations of a privileged user. 

Network Access is defined as: 
Access to an information system by a user (or a process acting on behalf of a user) communicating through a network (e.g., local area network, wide area network, Internet). ",None,SV-34261r1_rule,None,None,None,None
V-69285,medium,"The application must ensure encrypted assertions, or equivalent confidentiality protections are used when assertion data is passed through an intermediary, and confidentiality of the assertion data is required when passing through the intermediary.","SAML is a standard for exchanging authentication and authorization data between security domains.  SAML uses security tokens containing assertions to pass information about a principal (usually an end user) between a SAML authority, (identity provider), and a SAML consumer, (service provider).  SAML assertions are usually made about a subject, (user) represented by the <Subject> element.   

The confidentially of the data in a message as the message is passed through an intermediary web service may be required to be restricted by the intermediary web service. The intermediary web service may leak or distribute the data contained in a message if not encrypted or protected.",None,SV-83907r1_rule,F-75455r1_fix,Encrypt assertions or use equivalent confidentiality when sensitive assertion data is passed through an intermediary.,C-69693r1_chk,"Ask the application representative for the design document.

Review the design document for web services using WS-Security tokens.  

If the application does not utilize WS-Security tokens, this check is not applicable.

Verify all WS-Security tokens are transmitted via an approved encryption method.

If the design document does not exist, or does not indicate all WS-Security tokens are only transmitted via an approved encryption method, this is a finding."
V-69361,medium,"The application must provide the capability for organization-identified individuals or roles to change the auditing to be performed on all application components, based on all selectable event criteria within organization-defined time thresholds.","If authorized individuals do not have the ability to modify auditing parameters in response to a changing threat environment, the organization may not be able to effectively respond, and important forensic information may be lost.

This requirement enables organizations to extend or limit auditing as necessary to meet organizational requirements. Auditing that is limited to conserve information system resources may be extended to address certain threat situations. In addition, auditing may be limited to a specific set of events to facilitate audit reduction, analysis, and reporting. Organizations can establish time thresholds in which audit actions are changed, for example, near real-time, within minutes, or within hours.",None,SV-83983r1_rule,F-75535r1_fix,Design the application to provide the capability for individuals or roles to change the auditing to be performed on all application components.,C-69775r1_chk,"Review the application documentation and interview the application administrator to identify the auditing configuration capabilities of the application.

Access the audit management settings of the application as an authorized user and evaluate the verbosity capabilities of the log settings.

Determine if the settings are available to readily increase or decrease logging verbosity on demand for identified roles or individuals.

Review log files and identify what information is retained in the logs.

Increase logging verbosity to include additional application components or details in the logs. For example, if standard log settings do not include connection resets or process errors, add those settings to the log configuration and re-examine the logs to ensure the number of data points being logged has increased and includes those values.

Next decrease logging verbosity to the minimum data and re-examine the logs to ensure the log verbosity has changed.

If the application does not have the ability for specific roles or individuals to change the auditing verbosity performed on all application components, this is a finding."
V-57415,medium,The application server must provide the capability to immediately disconnect or disable remote access to the management interface.,"Without the ability to immediately disconnect or disable remote access, an attack or other compromise taking progress would not be immediately stopped.

The application server must have the capability to immediately disconnect current users remotely accessing the management interface and/or disable further remote access. The speed of disconnect or disablement varies based on the criticality of missions/business functions and the need to eliminate immediate or future remote access to organizational information systems.",None,SV-71687r2_rule,F-62453r1_fix,Configure the application server to have the capability to immediately disconnect or disable remote access to the management interface.,C-58091r1_chk,"Review the application server product documentation and server configuration to ensure that there is a capability to immediately disconnect or disable remote access to the management interface.

If there is no capability, this is a finding."
V-27065,medium,The application must only generate error messages that provide information necessary for corrective actions without revealing organization-defined sensitive or potentially harmful information in error logs and administrative messages that could be exploited. ,"Any application providing too much information in error logs and in administrative messages to the screen risks compromising the data and security of the application and system. The structure and content of error messages needs to be carefully considered by the organization and development team. 

The extent to which the application is able to identify and handle error conditions is guided by organizational policy and operational requirements.  Sensitive information includes, account numbers, social security numbers, and credit card numbers.",None,SV-34360r1_rule,None,None,None,None
V-27169,medium,Software and/or firmware used for collaborative computing devices must prohibit remote activation excluding the organization-defined exceptions where remote activation is to be allowed.,"Collaborative computing devices include, networked white boards, cameras, and microphones. Collaborative software examples include instant messaging or chat clients. ",None,SV-34468r1_rule,None,None,None,None
V-35426,medium,The application server must employ cryptographic mechanisms to ensure confidentiality and integrity of all information at rest when stored off-line.,"This control is intended to address the confidentiality and integrity of information at rest in non-mobile devices and covers user information and system information. Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an organizational information system.

Application servers generate information throughout the course of their use, most notably, log data.  If the data is not encrypted while at rest, the data used later for forensic investigation cannot be guaranteed to be unchanged and cannot be used for prosecution of an attacker.  To accomplish a credible investigation and prosecution, the data integrity and information confidentiality must be guaranteed.

Application servers must provide the capability to protect all data, especially log data, so as to ensure confidentiality and integrity.",None,SV-46713r3_rule,F-39970r3_fix,Configure the application server to employ cryptographic mechanisms to ensure confidentiality and integrity of all application server data at rest when stored off-line.,C-43777r2_chk,"Review the application server configuration to ensure the system is protecting the confidentiality and integrity of all application server data at rest when stored off-line.

If the application server is not configured to protect all application server data at rest when stored off-line, this is a finding."
V-35440,medium,The application server must only generate error messages that provide information necessary for corrective actions without revealing sensitive or potentially harmful information in error logs and administrative messages.,"Any application providing too much information in error logs and in administrative messages to the screen risks compromising the data and security of the application and system. The structure and content of error messages needs to be carefully considered by the organization and development team.

The application server must not log sensitive information such as passwords, private keys, or other sensitive data. This requirement pertains to logs that are generated by the application server and application server processes, not the applications that may reside on the application server. Those errors are out of the scope of these requirements.",None,SV-46727r3_rule,F-39984r2_fix,Configure the application server to not write sensitive information into the logs and administrative messages.,C-43794r2_chk,"Review system documentation and logs to determine if the application server writes sensitive information such as passwords or private keys into the logs and administrative messages.

If the application server writes sensitive or potentially harmful information into the logs and administrative messages, this is a finding."
V-27096,medium,"The organization must employ a wireless Intrusion Detection System (IDS) to detect potential compromises/breaches to the information system.

","Wireless IDS is used to detect and alarm on known attack patterns.

This is a requirement to deploy wireless IDS network monitoring. This does not apply to applications. ",None,SV-34391r1_rule,None,None,None,None
V-57483,medium,The application server must generate log records when concurrent logons from different workstations occur to the application server management interface.,"Being able to work on a system through multiple views into the application allows a user to work more efficiently and more accurately.  Before environments with windowing capabilities or multiple desktops, a user would log onto the application from different workstations or terminals.  With today's workstations, this is no longer necessary and may signal a compromised session or user account.

When concurrent logons are made from different workstations to the management interface, a log record needs to be generated.  This allows the system administrator to investigate the incident and to be aware of the incident.",None,SV-71759r2_rule,F-62551r1_fix,Configure the application server to generate log records showing concurrent logons from different workstations to the management interface.,C-58191r1_chk,"Review the application server documentation and the system configuration to determine if the application server generates log records showing concurrent logons from different workstations to the management interface.

If concurrent logons from different workstations are not logged, this is a finding."
V-70341,medium,Access privileges to the Configuration Management (CM) repository must be reviewed every three months.,"A Configuration Management (CM) repository is used to manage application code versions and to securely store application code.

Incorrect access privileges to the CM repository can lead to malicious code or unintentional code being introduced into the application.

This requirement is intended to be applied to application developers or organizations responsible for code management or who have and operate an application CM repository.",None,SV-84963r1_rule,F-76577r1_fix,Review access privileges to the CM repository at least every three months.,C-70795r1_chk,"Review the application system documentation.

Interview the application administrator.

Identify if development of the application is done in house and if application configuration management repository exists.

If application development is not done in house and if a code configuration management repository does not exist, the requirement is not applicable.

Review CM management processes and procedures.

Verify the CM repository access permissions are reviewed at least every three months.

Ask the application administrator or the CM administrator when the last time the CM access privileges were reviewed.

If CM access privileges have not been reviewed within the last three months, this is a finding."
V-6156,high,"The designer will ensure the application does not contain embedded authentication data. 
","Authentication data stored in code could potentially be read and used by anonymous users to gain access to a backend database or application server. This could lead to immediate access to a backend server.
","['IAIA-1', 'IAIA-2']",SV-6156r1_rule,F-17025r1_fix,"Remove embedded authentication data stored in code, configuration files, scripts, HTML file, or any ASCII files.",C-14176r1_chk,"Review source code (including global.asa, if present), configuration files, scripts, HTML file, and any ASCII files to locate any instances in which a password, certificate, or sensitive data is included in code.  

If credentials were found, check the file permissions on the offending file.  
 
1) If the file permissions indicate that the file has no access control permissions (everyone can read or is world readable), this is a CAT I finding.  
 
2) If there is a level of file protection that requires that at least authenticated users have read access, this is a CAT I finding.  
 
3) If a level of protection exists that only administrators or those with a UID of 0 can read the file, this is a CAT II finding.
 
The finding details should note specifically where the offending credentials or data were located and what resources they enabled."
V-35139,medium,"For application servers providing log record aggregation, the application server must compile log records from organization-defined information system components into a system-wide log trail that is time-correlated with an organization-defined level of tolerance for the relationship between time stamps of individual records in the log trail.","Log generation and log records can be generated from various components within the application server. The list of logged events is the set of events for which logs are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating log records (e.g., logable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked).

The events occurring must be time-correlated in order to conduct accurate forensic analysis. In addition, the correlation must meet certain tolerance criteria. For instance, DoD may define that the time stamps of different logged events must not differ by any amount greater than ten seconds. It is also acceptable for the application server to utilize an external logging tool that provides this capability.",None,SV-46426r3_rule,F-39690r2_fix,Configure the application server or an external logging tool supporting the application server to compile log records from multiple components within the server into a system-wide log trail that is time-correlated with an organization-defined level of tolerance for the relationship between time stamps of individual records in the log trail.,C-43526r2_chk,"Review the application server log feature configuration to determine if the application server or an external logging tool in conjunction with the application server does compile log records from multiple components within the server into a system-wide log trail that is time-correlated with an organization-defined level of tolerance for the relationship between time stamps of individual records in the log trail.

If the application server does not meet this requirement, this is a finding."
V-70385,low,The application development team must follow a set of coding standards.,"Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.

Coding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  

The following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:

- Indent style conventions
- Naming conventions
- Line length conventions
- Comment conventions
- Programming best practices
- Programming style conventions

Coding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  

Code conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.

Introducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors.",None,SV-85007r1_rule,F-76621r1_fix,"Create and maintain a coding standard process and documentation for developers to follow.  

Include programming best practices based on the languages being used for application development.  Include items that should be standardized across the team that deal with how developers write their application code.",C-70839r1_chk,"This requirement is meant to apply to developers or organizations that are doing application development work. If the organization operating the application under review is not doing the development or managing the development of the application, the requirement is not applicable.

Ask the application representative about their coding standards.  Ask for a coding standards document, review the document and ask the developers if they are aware of and if they use the coding standards.  Make a determination if the application developers follow the coding standard. 

If the developers do not follow a coding standard, or if a coding standard document does not exist, this is a finding."
V-27092,medium,"For those instances where the organization requires encrypted traffic to be visible to information system monitoring tools, the application transmitting the encrypted traffic must make provisions to allow that traffic to be visible to specific system monitoring tools.","There is a recognized need to balance encrypting traffic versus the need to have insight into the traffic from a monitoring perspective. 

For some organizations, the need to ensure the confidentiality of traffic is paramount; for others, the mission-assurance concerns are greater. ",None,SV-34387r1_rule,None,None,None,None
V-26887,medium,Applications must configure their auditing to reduce the likelihood of storage capacity being exceeded.,"Applications need to be cognizant of potential audit log storage capacity issues.  During the installation and/or configuration process, applications should detect and determine if adequate storage capacity has been allocated for audit logs.  

During the installation process, a notification may be provided to the installer indicating, based on the auditing configuration chosen and the amount of storage space allocated for audit logs, the amount of storage capacity available is not sufficient enough to meet storage requirements.
",None,SV-34167r1_rule,None,None,None,None
V-35203,medium,The application server must use internal system clocks to generate time stamps for log records.,"Without the use of an approved and synchronized time source configured on the systems, events cannot be accurately correlated and analyzed to determine what is transpiring within the application server.

If an event has been triggered on the network, and the application server is not configured with the correct time, the event may be seen as insignificant, when in reality the events are related and may have a larger impact across the network. Synchronization of system clocks is needed in order to correctly correlate the timing of events that occur across multiple systems. Determining the correct time a particular event occurred on a system, via time stamps, is critical when conducting forensic analysis and investigating system events. 

Application servers must utilize the internal system clock when generating time stamps and log records.",None,SV-46490r3_rule,F-39749r2_fix,Configure the application server to use internal system clocks to generate time stamps for log records.,C-43575r2_chk,"Review the application server configuration files to determine if the internal system clock is used for time stamps. If this is not feasible, an alternative workaround is to take an action that generates an entry in the logs and then immediately query the operating system for the current time. A reasonable match between the two times will suffice as evidence that the system is using the internal clock for timestamps.

If the application server does not use the internal system clock to generate time stamps, this is a finding."
V-6164,high,"The designer will ensure the application validates all input.
","Absence of input validation opens an application to improper manipulation of data. The lack of input validation can lead immediate access of application, denial of service, and corruption of data.
",['DCSQ-1'],SV-6164r1_rule,F-4472r1_fix,"Modify the application to validate all input.
",C-3729r1_chk,"Ask the application representative for the test plans for the application.  Examine the test plan to determine if testing was performed for invalid input. Invalid input includes presence of scripting tags within text fields, query string manipulation, and invalid data types and sizes. If the test plans indicate these types of tests were performed, only a small sampling of testing is required. If the test plans do not exist or do not indicate that these types of tests were performed, more detailed testing is required. Testing should include logging on to the application and entering invalid data. If there are various user types defined within the system, this test should be repeated for all user types. 
 
Test the application for invalid sizes and types. Test input fields on all pages/screens of the application.  Try to exceed buffer limits on the input fields.  Try to put wrong types of data in the input fields. For example, put character data in a numeric field.

1) If an unauthenticated user can enter invalid input to bypass access control mechanisms, this is a CAT I finding.
 
2) If an authenticated user can enter invalid input to gain elevated access, this is a CAT I finding.
 
3) If the application requires the entry of IP addresses is not capable of handling IPv6 formats that are 128 bits long, this is a CAT II finding.   
 
4) If the application is not capable of handling IPv6 formats and accepts characters that are of hexadecimal notation including colons, this is a CAT II finding."
V-70343,medium,A Software Configuration Management (SCM) plan describing the configuration control and change management process of application objects developed by the organization and the roles and responsibilities of the organization must be created and maintained.,"Software Configuration Management (SCM) is very important in tracking code releases, baselines, and managing access to the configuration management repository. The SCM plan identifies what should be under configuration management control.

Without an SCM plan that addresses code security issues, code releases can be tracked and vulnerabilities can be inserted intentionally or unintentionally into the code base of the application.

This requirement is intended to be applied to application developers or organizations responsible for code management or who have and operate an application configuration management repository (CMR).

The SCM plan identifies all objects created during the development process subject to configuration control.

The SCM plan maintains procedures for identifying individual application components, as well as, entire application releases during all phases of the software development lifecycle.

The SCM plan identifies and tracks all actions and changes resulting from a change request from initiation to release.

The SCM plan contains procedures to identify, document, review, and authorize any change requests to the application.

The SCM plan defines the responsibilities, the actions to be performed, the tools, techniques and methodologies, and defines an initial set of baselined software components.

The SCM plan objects have security classifications labels.

The SCM plan identifies tools and version numbers used in the software development lifecycle.

The SCM plan identifies mechanisms for controlled access of simultaneous individuals updating the same application component.

The SCM plan assures only authorized changes by authorized persons are possible.

The SCM plan identifies mechanisms to control access and audit changes between different versions of objects subject to configuration control.

The SCM plan identifies mechanisms to track and audit all modifications of objects under configuration control.  Audits include the originator and date and time of the modification.

The SCM plan should contain the following:

- Description of the configuration control and change management process
- Types of objects developed
- Roles and responsibilities of the organization

The SCM plan should also contain the following:

- Defined responsibilities
- Actions to be performed
- Tools used in the process
- Techniques and methodologies
- Initial set of baselined software components

The SCM plan should identify all objects that are under configuration management control.

The SCM plan should identify third-party tools and respective version numbers.

The SCM plan should identify mechanisms for controlled access of individuals simultaneously updating the same application component.

The SCM plan assures only authorized changes by authorized persons are allowed.

The SCM plan should identify mechanisms to control access and audit changes between different versions of objects subject to configuration control.

The SCM plan should have procedures for label versions of application components and application builds under configuration management control.

The configuration management repository (CMR) should track change requests from beginning to end.

The configuration management repository (CMR) should authorize change requests to the application.
 
The configuration management repository (CMR) should contain security classification labels for code and documentation in the repository. Classification labels are not applicable to unclassified systems.

The configuration management repository (CMR) should monitor all objects under CMR control for auditing.",None,SV-84965r1_rule,F-76579r1_fix,Create and update a SCM plan describing the configuration control and change management process of application objects developed by the organization and the roles and responsibilities of the organization.  Configure CMR to comply.,C-70797r1_chk,"Interview ISSM or application administrator.

Identify if development of the application is done in house and if application configuration management repository exists.

If application development is not done in house and if a code configuration management repository does not exist, the requirement is not applicable.

Verify the SCM plan identifies all objects created during the development process subject to configuration control.

Verify the SCM plan maintains procedures for identifying individual application components, as well as, entire application releases during all phases of the software development lifecycle.

Verify the SCM plan identifies and tracks all actions and changes resulting from a change request from initiation to release.

Verify the SCM plan contains procedures to identify, document, review, and authorize any change requests to the application.

Verify the SCM plan defines the responsibilities, the actions to be performed, the tools, techniques and methodologies, and defines an initial set of base-lined software components.

Verify the SCM plan objects have security classifications labels if processing classified data.

Verify the SCM plan identifies tools and version numbers used in the software development lifecycle.

Verify the SCM plan identifies mechanisms for controlled access of simultaneous individuals updating the same application component.

Verify the SCM plan assures only authorized changes by authorized persons are possible.

Verify the SCM plan identifies mechanisms to control access and audit changes between different versions of objects subject to configuration control.

Verify the SCM plan identifies mechanisms to track and audit all modifications of objects under configuration control. Audits will include the originator and date and time of the modification.

Ask the application representative to review the applications SCM plan.

The SCM plan should contain the following:

- Description of the configuration control and change management process
- Types of objects developed
- Roles and responsibilities of the organization
- Defined responsibilities
- Actions to be performed
- Tools used in the process
- Techniques and methodologies
- Initial set of baselined software components

If the SCM plan does not include the above, this is a finding.

The SCM plan should identify all objects that are under configuration management control. Ask the application representative to provide access to the CMR and to identify the objects shown in the SCM plan.

If the application representative cannot display all types of objects under CMR control, this is a finding.

The SCM plan should identify third-party tools and respective version numbers.

If the SCM plan does not identify third-party tools, this is a finding.

The SCM plan should identify mechanisms for controlled access of individuals simultaneously updating the same application component.

If the SCM plan does not identify mechanisms for controlled access, this is a finding.

The SCM plan assures only authorized changes by authorized persons are allowed.

If the SCM plan does not assure only authorized changes are made, this is a finding.

The SCM plan should identify the mechanisms used to control access and audit changes between different versions of objects subject to CMR control.

If the SCM plan does not identify mechanisms used to control access and to audit changes between different versions of objects subject to CMR control, this is a finding.

The SCM plan should have procedures for label versions of application components and application builds under configuration management control. Ask the application representative to demonstrate the CMR and ensure it contains versions and releases of the application. Ask the application representative to create a build or demonstrate a current release of the application that can be recreated.

If the application representative cannot display releases and application component versions, this is a finding.

The CMR should track change requests from beginning to end. Ask the application representative to display a completed or in-process change request.

If the CMR cannot track change requests, this is a finding.

If the application has just completed its first release, there may not be any change requests logged in the CMR.  In this case, this finding is not applicable.

The CMR should authorize change requests to the application. Ask the application representative to display an authorized change request and identify who is responsible for authorizing change requests.

If the CMR does not track authorized change requests, this is a finding.

If the application has just completed its first release, there may not be any change requests logged in the CMR. In this case, this finding is not applicable.

The CMR should contain security classification labels for code and documentation in the repository. 

Classification labels are not applicable to unclassified systems.  If the applications managed by the CMR are not classified, this requirement is not applicable.

If the CMR manages classified applications and there are no classification labels of code and documentation in the CMR, this is a finding.

The CMR should audit all objects under CM control for modification.

If the CMR does not audit for modifications, this is a finding."
V-69327,medium,The application must utilize organization-defined data mining detection techniques for organization-defined data storage objects to adequately detect data mining attempts.,"Failure to protect organizational information from data mining may result in a compromise of information.

Data mining occurs when the application is programmatically probed and data is automatically extracted. While there are valid uses for data mining within data sets, the organization should be mindful that adversaries may attempt to use data mining capabilities built into the application in order to completely extract application data so it can be evaluated using methods that are not natively offered by the application. This can provide the adversary with an opportunity to utilize inference attacks or obtain additional insights that might not have been intended when the application was designed.

Methods of extraction include database queries or screen scrapes using the application itself. The entity performing the data mining must have access to the application in order to extract the data. Data mining attacks will usually occur with publicly releasable data access but can also occur when access is limited to authorized or authenticated inside users.

Data storage objects include, for example, databases, database records, and database fields.

Data mining prevention and detection techniques include, for example: limiting the types of responses provided to database queries; limiting the number/frequency of database queries to increase the work factor needed to determine the contents of such databases; and notifying organizational personnel when atypical database queries or accesses occur.",None,SV-83949r1_rule,F-75501r1_fix,Utilize and implement data mining protections when requirements specify it.,C-69739r1_chk,"Review the security plan, application and system documentation and interview the application administrator to identify data mining protections that are required of the application.

If there are no data mining protections required, this requirement is not applicable.

Review the application authentication requirements and permissions.

Review documented protections that have been established to protect from data mining.

This can include limiting the number of queries allowed.

Automated alarming on atypical query events.

Limiting the number of records allowed to be returned in a query.

Not allowing data dumps.

If the application requirements specify protections for data mining and the application administrator is unable to identify or demonstrate that the protections are in place, this is a finding."
V-70391,medium,The application must not be subject to error handling vulnerabilities.,"Error handling is the failure to check the return values of functions or catch top level exceptions within a program. Improper error handling in an application can lead to an application failure or possibly result in the application entering an insecure state. 

The primary way to detect error handling vulnerabilities is to perform code reviews. If a manual code review cannot be performed, static code analysis tools should be employed in conjunction with tests to help force the error conditions by specifying invalid input (such as fuzzed data and malformed filenames) and by using different accounts to run the application. These tests may give indications of vulnerability, but they are not comprehensive.

In order to minimize error handling errors, ensure proper return code and exception handling is implemented throughout the application.",None,SV-85013r1_rule,F-76627r1_fix,Ensure proper return code and exception handling is implemented throughout the application.,C-70845r1_chk,"Review the application documentation, code review reports and the results from static code analysis tools.

Identify the most recent security scans and code analysis testing conducted.  Verify testing configuration includes tests for error handling issues.

Check test results for identified error handling vulnerabilities within the application.

If the test results indicate the existence of error handling vulnerabilities and no remediation evidence is presented, this is a finding.

If no test results are available for review, this is a finding."
V-69247,medium,Applications requiring user access authentication must provide a logoff capability for user initiated communication session.,"If a user cannot explicitly end an application session, the session may remain open and be exploited by an attacker.  Applications providing user access must provide the ability for users to manually terminate their sessions and log off.",None,SV-83869r1_rule,F-75417r1_fix,Design and configure the application to provide all users with the capability to manually terminate their application session.,C-69671r1_chk,"If the application does not provide an interface for interactive user access, this is not applicable.

Log on to the application with a valid user account. Examine the user interface. Identify the command or link that provides the logoff function.

Activate the user logoff function.

Observe user interface and attempt to interact with the application.  Confirm user interaction with the application is no longer possible.

If the user session is not terminated or if the logoff function does not exist, this is a finding."
V-6146,high,"The designer will ensure the application has the capability to mark sensitive/classified output when required.
","Failure to properly mark output could result in a disclosure of sensitive or classified data which is an immediate loss in confidentiality.

Any vulnerability associated with a DoD Information system or system enclave, the exploitation of which, by a risk factor, will directly and immediately result in loss of Confidentiality, Availability or Integrity of the system
associated data.
",['ECML-1'],SV-6146r1_rule,F-17016r1_fix,Enable the application to adequately mark sensitive/classified output.,C-2959r1_chk,"Before actual testing, determine which application functions to examine, giving preference to report generation capabilities and the most common user transactions that involve sensitive data (FOUO, secret or above).   Ask the application representative for the application’s classification guide.  This guide should document the data elements and their classification.  Logon to the application and perform these in sequence, printing output when applicable.  The application representative’s assistance may be required to perform these steps.  For each function, note whether the appropriate markings appear on the displayed and printed output. If a classification document does not exist, data must be marked at the highest classification of the system.  
 
Appropriate markings for an application are as follows:  For classified data, markings are required at a minimum at the top and the bottom of screens and reports.  For FOUO data, markings are required at a minimum of the bottom of the screen or report.  In some cases, technology may prohibit the appropriate markings on printed documents. For example, in some cases, it is not possible to mark all pages top and bottom when a user prints from a browser.  If this is the case, ask the application representative if user procedures exist for manually marking printed documents.  If procedures do exist, examine the procedures to ensure that if the users were to follow the procedures the data would be marked correctly.  Also, ask how these procedures are distributed to the users.

1) If appropriate markings are not present within the application and it is technically possible to have the markings present, it is a finding.

2) If it is not technically feasible to meet the minimum marking requirement and no user procedures exist or if followed the procedures will result in incorrect markings, or the procedures are not readily available to users, it is a finding.  

In any case of a finding, the finding details should specify which functions failed to produce the desired results.  
 
After completing the test, destroy all printed output using the site’s preferred method for disposal.  For example: utilizing a shredder or disposal in burn bags.

Note: Physical markings on hardware do not meet this requirement."
V-70243,medium,An XML firewall function must be deployed to protect web services when exposed to untrusted networks.,"Web Services are vulnerable to many types of attacks such as XML injection or XML External Entity (XXE) attacks. The risks increase when these applications are exposed to untrusted networks.

XML-based firewall functionality can be used to prevent common attacks and aid in protecting and limiting the risks of exposing web services to untrusted networks.  The XML firewall functionality may be stand-alone or embedded in various multi-purpose products including but not limited to a SOA or Web Application gateways.",None,SV-84865r1_rule,F-76479r1_fix,Deploy an XML firewall functionality to protect web services.,C-70719r1_chk,"Review the system documentation and interview the application and system administrators.

Verify XML-based web services are used within the application.

If no XML-based web services are used in the application, this requirement is not applicable.

If the web service is not exposed to an untrusted network or boundary, this requirement is not applicable.

If XML-based web services are used within the application, ask the application representative for a network diagram identifying the XML firewall function placement.

Review the network diagrams and determine if any web services are exposed to untrusted networks like the Internet.

Verify an XML firewall function exists and firewall rules are implemented to protect the web services.

If network diagrams do not exist or all web services exposed to untrusted networks are not protected by the XML firewall functionality, this is a finding."
V-69471,medium,The application must provide a report generation capability that supports after-the-fact investigations of security incidents.,"If the report generation capability does not support after-the-fact investigations, it is difficult to establish, correlate, and investigate the events leading up to an outage or attack, or identify those responses for one. This capability is also required to comply with applicable Federal laws and DoD policies.

The report generation capability must support after-the-fact investigations of security incidents either natively or through the use of third-party tools.

This requirement is specific to applications with report generation capabilities; however, applications need to support on-demand reporting requirements.",None,SV-84093r1_rule,F-75647r1_fix,Design or configure the application to provide after-the-fact report generation capability or utilize a centralized utility designed for the purpose of log management and reporting.,C-69889r1_chk,"Review the application documentation and interview the application administrator for details regarding audit reduction (log record event filtering).

Access the application with user rights sufficient to read and filter audit records.

Navigate the application user interface and select the application functionality that provides access and interface to audit records and audit reduction (event filtering).

If the application uses a centralized logging solution that performs the report generation functions, the requirement is not applicable.

Create an event report. Report data can be based on date ranges, times or events, or other criteria that could be used in an investigation. Use of data from previous checks for audit reduction is encouraged.

Review the report and ensure the data in the report coincides with event filters used to create the report.

If the application does not have a report generation capability that supports after the fact security investigations, this is a finding."
V-69559,medium,The application must enforce password complexity by requiring that at least one lower-case character be used.,"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.

Examples of situations where a user ID and password might be used include but are not limited to:

- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.

- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.

and

- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.

Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.

Password complexity is one factor of several that determine how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.",None,SV-84181r1_rule,F-75733r1_fix,Configure the application to require at least one lower-case character in the password.,C-69977r1_chk,"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.

If the application does not use passwords, the requirement is not applicable.

Access the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.

When prompted to provide the password, attempt to create a password that does not have one lower-case character.

If a password without at least one lower-case character can be created, this is a finding."
V-27069,medium,Applications serving to determine the state of information system components with regard to flaw remediation (patching) must use automated mechanisms to make that determination.  The automation schedule must be determined on an organization-defined basis and any solution utilized must support the scheduling requirement.,"Organizations are required to identify information systems containing software affected by recently announced software flaws (and potential vulnerabilities resulting from those flaws) and report this information to designated organizational officials with information security responsibilities (e.g., senior information security officers, information system security managers, information systems security officers). To support this requirement, an automated process or mechanism is required.  

This role is usually assigned to patch management software that is deployed in order to track the number of systems installed in the network, as well as, the types of software installed on these systems, the corresponding versions, and the related flaws that require patching. ",None,SV-34364r1_rule,None,None,None,None
V-27162,medium,The information system or supporting environment must block both inbound and outbound traffic between instant messaging clients that are independently configured by end users and external service providers.,"Blocking restrictions do not include instant messaging services configured by an organization to perform an authorized function. 

This requirement specifies blocking any external IRC chat clients that are not configured and managed by the organization.  This requirement does not apply to applications.",None,SV-34461r1_rule,None,None,None,None
V-70191,medium,The application must utilize FIPS-validated cryptographic modules when signing application components.,"Applications that distribute components of the application must sign the components to provide an identity assurance to consumers of the application component. Components can include application messages or application code.

Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to validate the author of application components. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance the modules have been tested and validated.

If the application resides on a National Security System (NSS) it must not use algorithms weaker than SHA-384.",None,SV-84813r2_rule,F-76427r3_fix,Utilize FIPS-validated algorithms when signing application components.,C-70667r12_chk,"Review the application documentation and interview the application administrator to identify the cryptographic modules used by the application.

Review the application components and application requirements. Interview application developers and application admins to determine if code signing is performed on distributable application components, files or packages.  

For example, a developer may sign application code components or an admin may sign application files or packages in order to provide application consumers with integrity assurances.

If signing has been identified in the application security plan as not being required and if a documented acceptance of risk is provided, this is not a finding.

Have the application admin or the developer demonstrate how the signing algorithms are used and how signing of components including files, code and packages is performed.

While SHA1 is currently FIPS-140-2 approved, due to known vulnerabilities with this algorithm, DoD PKI policy prohibits the use of SHA1 as of December 2016.  See DoD CIO Memo Subject: Revised Schedule to Update DoD Public Key Infrastructure Certificates to Secure Hash Algorithm-256. 

If the application signing process does not use FIPS validated cryptographic modules, or if the signing process includes SHA1 or MD5 hashing algorithms, this is a finding."
V-69505,medium,The application must enforce access restrictions associated with changes to application configuration.,"Failure to provide logical access restrictions associated with changes to application configuration may have significant effects on the overall security of the system.

When dealing with access restrictions pertaining to change control, it should be noted that any changes to the hardware, software, and/or firmware components of the information system and/or application can potentially have significant effects on the overall security of the system.

Accordingly, only qualified and authorized individuals should be allowed to obtain access to application components for the purposes of initiating changes, including upgrades and modifications.

Logical access restrictions include, for example, controls that restrict access to workflow automation, media libraries, abstract layers (e.g., changes implemented into third-party interfaces rather than directly into information systems), and change windows (e.g., changes occur only during specified times, making unauthorized changes easy to discover).",None,SV-84127r1_rule,F-75679r1_fix,Configure the application to limit access to configuration settings to only authorized users.,C-69923r1_chk,"Review the application documentation and configuration settings.

Access the application configuration settings interface as a regular non-privileged user. Attempt to make configuration changes to the application.

If configuration changes can be made by regular non-privileged users, this is a finding.

Review the locations of all configuration files used by the application.

Examine the file permission settings and determine who has access to the configuration files.

If access permissions to configuration files are not restricted to application administrators, this is a finding."
V-57443,medium,The application server must generate log records when successful/unsuccessful logon attempts occur.,"Logging the access to the application server allows the system administrators to monitor user accounts.  By logging successful/unsuccessful logons, the system administrator can determine if an account is compromised (e.g., frequent logons) or is in the process of being compromised (e.g., frequent failed logons) and can take actions to thwart the attack.

Logging successful logons can also be used to determine accounts that are no longer in use.",None,SV-71715r2_rule,F-62481r1_fix,Configure the application server to generate log records when successful/unsuccessful logon attempts are made by users.,C-58119r1_chk,"Review product documentation and the system configuration to determine if the application server generates log records on successful and unsuccessful logon attempts by users.

If logon attempts do not generate log records, this is a finding."
V-57511,medium,"The application server, for PKI-based authentication, must implement a local cache of revocation data to support path discovery and validation in case of the inability to access revocation information via the network.","The cornerstone of the PKI is the private key used to encrypt or digitally sign information. The key by itself is a cryptographic value that does not contain specific user information.

Application servers must provide the capability to utilize and meet requirements of the DoD Enterprise PKI infrastructure for application authentication, but without configuring a local cache of revocation data, there is the potential to allow access to users who are no longer authorized (users with revoked certificates) when access through the network to the CA is not available.",None,SV-71787r2_rule,F-62579r1_fix,Configure the application server to implement a local cache of revocation data to support path discovery and validation in case of the inability to access revocation information via the network.,C-58219r1_chk,"Review application server documentation to ensure the application server provides a PKI integration capability that implements a local cache of revocation data to support path discovery and validation in case of the inability to access revocation information via the network.

If the application server is not configured to meet this requirement, this is a finding."
V-27166,medium,"The application must have the capability to produce audit records on hardware-enforced, write-once media.","Applications are typically designed to incorporate their audit logs into the auditing sub-system hosted by the operating system.  However, in some instances application developers may decide to forego the audit capabilities offered by the operating system and maintain application audit logs separately.  

The protection of audit records from unauthorized or accidental deletion or modification requires that information systems be able to produce audit records on hardware enforced write-once media.  

Applications that do not write audit records to a resource (e.g., underlying OS or separate system) that is capable of producing audit records on hardware enforced, write-once media must provide the capability to do so.  This requirement is related to backup of records and not real-time creation of audit records.

Examples of such hardware devices include, but are not limited to: CD-R or DVD-R.",None,SV-34465r1_rule,None,None,None,None
V-6151,medium,"The IAO will ensure unnecessary services are disabled or removed.
",Unnecessary services and software increases the security risk by increasing the potential attack surface of the application.,['DCSD-1'],SV-6151r1_rule,F-4455r1_fix,Remove unnecessary services or software.,C-3056r1_chk,"Examine the configuration of the servers.  Determine what software is installed on the servers.  Determine which services are needed for the application by examining the application design and accreditation documentation and interviewing the application representative.  For example, in cases where two web servers (IIS and Apache) are installed, and only one is being used.

1) If there are services or software present not needed for the application, it is a finding. "
V-16825,medium,"The Test Manager will ensure the changes to the application are assessed for IA and accreditation impact prior to implementation.
",IA assessment of proposed changes is necessary to ensure security integrity is maintained within the application.,['DCII-1'],SV-17825r1_rule,F-17141r1_fix,Assess changes to the application for IA impact prior to implementation.,C-17824r1_chk,"Interview the application representative and determine if changes to the application are assessed for IA impact prior to implementation.  Review the CCB process documentation to ensure potential changes to the application are evaluated to determine impact. An informal group may be tasked with impact assessment of upcoming version changes.  

1) If impact analysis is not performed, it is a finding."
V-6136,high,"The designer will ensure data transmitted through a commercial or wireless network is protected using an appropriate form of cryptography.

",Unencrypted sensitive application data could be intercepted in transit.,"['ECCT-1', 'ECCT-2', 'ECNK-1', 'ECNK-2']",SV-6136r1_rule,F-17014r1_fix,Encrypt data in transit.,C-2947r1_chk,"Policy:

The designer will ensure unclassified, sensitive data transmitted through a commercial or wireless network is protected using NIST certified cryptography.

The designer will ensure classified data, transmitted through a network that is cleared to a lower level than the data being transmitted, is separately protected using NSA approved cryptography.

The designer will ensure data in transit through a network at the same classification level, but which must be separated for need to know reasons, is protected minimally with NIST certified cryptography.

The designer will ensure SAMI data in transit through a network at the same classification level is protected with NSA approved cryptography.

Interview the application representative to determine if sensitive data is transmitted over a commercial circuit or wireless network (e.g., NIPRNet, ISP, etc.). 

1) If any sensitive data is transferred over a commercial or wireless network and is not encrypted using NIST FIPS 140-2 validated encryption, this is a CAT I finding.

Interview the application representative to determine if classified data is transmitted over a network cleared to a lower level than the data. (e.g., TS over SIPRNet, Secret over NIPRNet, etc.).
 
2) If classified data is transmitted over a network cleared to a lower level than the data and NSA approved type-1 encryption is not used to encrypt the data, this is a CAT I finding.

Interview the application representative and determine if the data in transit must be separated for need to know reasons. 
 
3) If data in transit across a network at the same classification level is separated for need-to-know reasons and the data is not minimally encrypted using NIST FIPS 140-2 validated encryption, this is a CAT II finding.

Interview the application representative and determine if SAMI data is transmitted.
 
4) If SAMI data in transit across a network at the same classification level is not separately encrypted using NSA type-1 approved encryption, this is a CAT II finding.
 
*Note: These checks apply to all data transmitted by REST-styled or SOAP-based Web Services."
V-26673,medium,The application must maintain and support the use of organization defined security attributes to stored information.  ,"Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information. 

These attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.   

One example includes marking data as classified or FOUO.  These security attributes may be assigned manually or during data processing but either way, it is imperative these assignments are maintained while the data is in storage.  If the security attributes are lost when the data is stored, there is the risk of a data compromise.",None,SV-33820r1_rule,None,None,None,None
V-35214,medium,The application server must protect log tools from unauthorized modification.,"Protecting log data also includes identifying and protecting the tools used to view and manipulate log data. 

Depending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. 

It is, therefore, imperative that access to log tools be controlled and protected from unauthorized modification. If an attacker were to modify log tools, he could also manipulate logs to hide evidence of malicious activity. 

Application servers provide a web- and/or a command line-based management functionality for managing the application server log capabilities. In addition, subsets of log tool components may be stored on the file system as jar or xml configuration files. The application server must ensure that in addition to protecting any web-based log tools, any file system-based tools are protected as well.",None,SV-46501r3_rule,F-39760r2_fix,Configure the application server or the OS to protect log tools from unauthorized modification.,C-43586r2_chk,"Review the application server documentation and server configuration to determine if the application server protects log tools from unauthorized modification. Request a system administrator attempt to modify log tools while logged into the server in a role that does not have the requisite privileges.

Locate binary copies of log tool executables that are located on the file system and attempt to modify using unprivileged credentials.

If the application server does not protect log tools from unauthorized modification, this is a finding."
V-26893,medium,Applications must maintain reviewer/releaser identity and credentials within the established chain of custody for all information reviewed or released.,"Non-repudiation protects individuals against later claims by an author of not having authored a particular document, a sender of not having transmitted a message, a receiver of not having received a message, or a signatory of not having signed a document. Non-repudiation services can be used to determine if information originated from an individual, or if an individual took specific actions (e.g., sending an email, signing a contract, approving a procurement request) or received specific information. Non-repudiation services are obtained by employing various techniques or mechanisms (e.g., digital signatures, digital message receipts).

When it comes to data review and data release, there must be a correlation between the data that is reviewed and the person who performs the review.  If the reviewer is a human or if the review function is automated but separate from the release/transfer function, the application associates the identity of the reviewer of the information to be released with the information and the information label. 

In the case of human reviews, this requirement provides appropriate organizational officials the means to identify who reviewed and released the information. In the case of automated reviews, this control enhancement helps ensure only approved review functions are employed. 
",None,SV-34173r1_rule,None,None,None,None
V-70223,medium,"In the event of a system failure, applications must preserve any information necessary to determine cause of failure and any information necessary to return to operations with least disruption to mission processes.","Failure to a known state can address safety or security in accordance with the mission/business needs of the organization. Failure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system. Preserving application state information helps to facilitate application restart and return to the operational mode of the organization with less disruption to mission-essential processes.",None,SV-84845r1_rule,F-76459r1_fix,"Create operational configuration documentation that identifies information needed for the application to return back into service or specify no such data is required, and retain data required to determine root cause of application failures.",C-70699r1_chk,"Review application documentation, interview application administrator to identify how the application logs error events.

The application operational requirements documentation should provide the specific information that must be preserved in order to return the application back into operation as quickly and efficiently as possible. The application administrator will need to identify and provide the information based upon operational requirements documents.

Application diagnostic information should be kept in logs for evaluation and investigation into root cause.

If documentation is provided stating that no particular information needs to be retained in order to expediently bring the application back online, this is not a finding.

If the application does not log the data required to determine root cause of application failure, or if information specified as required in order to expediently bring the application back online is not retained, this is a finding."
V-69517,medium,"The application must employ a deny-all, permit-by-exception (whitelist) policy to allow the execution of authorized software programs.","Utilizing a whitelist provides a configuration management method for allowing the execution of only authorized software. Using only authorized software decreases risk by limiting the number of potential vulnerabilities.

The organization must identify authorized software programs and permit execution of authorized software. The process used to identify software programs that are authorized to execute on organizational information systems is commonly referred to as whitelisting.

Verification of whitelisted software can occur either prior to execution or at system startup.

This requirement applies to configuration management applications or similar types of applications designed to manage system processes and configurations (e.g., HBSS and software wrappers).",None,SV-84139r1_rule,F-75691r1_fix,"Configure the application to utilize a deny-all, permit-by-exception policy when allowing the execution of authorized software.",C-69935r1_chk,"If the application is not a configuration management or similar type of application designed to manage system processes and configurations, this requirement is not applicable.

Review the application documentation and interview the application administrator to identify if application whitelisting specifying which applications or application subcomponents are allowed to execute is in use.

Check for the existence of policy settings or policy files that can be configured to restrict application execution. Have the application administrator demonstrate how the program execution is restricted. Look for a deny-all, permit-by-exception policy of restriction.

Some methods for restricting execution include but are not limited to the use of custom capabilities built into the application or leveraging of Windows Group Policy, AppLocker, Software Restriction Policies, Java Security Manager or Role-Based Access Controls (RBAC).

If application whitelisting is not utilized or does not follow a deny-all, permit-by-exception (whitelist) policy, this is a finding."
V-16788,medium,"The designer will ensure the application uses encryption to implement key exchange and authenticate endpoints prior to establishing a communication channel for key exchange.
","If the application does not use encryption and authenticate endpoints prior to establishing a communication channel and prior to transmitting encryption keys, these keys may be intercepted, and could be used to decrypt the traffic of the current session, leading to potential loss or compromise of DoD data.",['DCNR-1'],SV-17788r1_rule,F-17004r1_fix,Use encryption for key exchange.,C-17773r1_chk,"If the application does not implement key exchange, this check is not applicable.  

Identify all application or supporting infrastructure features using key exchange.  Verify the application is using FIPS-140 validated cryptographic modules for encryption of key exchange algorithms.
 
1) If the application does not implement encryption for key exchange, it is a finding. "
V-30596,medium,The application must ensure the acquisition of mobile code to be deployed in information systems meets organization-defined mobile code requirements.,"Decisions regarding the acquisition of mobile code within organizational information systems need to include evaluations that determine the potential for the code to cause damage to the system if used maliciously. 

Mobile code technologies include, for example, Java, JavaScript, ActiveX, PDF, Postscript, Shockwave movies, Flash animations, and VBScript. Usage restrictions and implementation guidance apply to both the selection and use of mobile code installed on organizational servers and mobile code downloaded and executed on individual workstations. 

DoDI 8552.01 policy pertains to the use of mobile code technologies within DoD information systems.  Mobile code that is acquired for use and deployment in DoD information systems must meet DoD policy requirements

This requirement relates to the acquisition of mobile code.   The purpose is to ensure DoD organizations review applications which utilize mobile code to ensure they adhere to DoD mobile code policy prior to acquiring these applications and introducing them into the DoD environment.  This is not an application specific requirement and is Not Applicable to applications.",None,SV-40347r1_rule,None,None,None,None
V-16802,medium,"The designer will ensure the application provides a capability to automatically terminate a session and log out after a system defined session idle time limit is exceeded.
","In the event a user does not log out of the application, the application should automatically terminate the session and log out; otherwise, subsequent users of a shared system could continue to use the previous user's session to the application.",['ECLO-1'],SV-17802r1_rule,F-17074r1_fix,Implement session timeouts and automatic logout in the application.,C-17798r1_chk,"Interview application representative to identify the length of time a user can be idle before the application will time out and terminate the session and require reauthentication.

1) If the application representative states that one or all of the limits are absent for one or more session types, it is a finding.  
 
In many cases, session configuration parameters can be examined.  If configuration parameters are embedded within the application they may not be available for review.  Any configuration settings that are not configurable should be manually tested. The preferred method depends on the application environment.  
 
Manually validate session limits by empirical testing (logon on multiple times and leaving sessions idle).  In some cases, testing session limits is not feasible because they may be set too high to properly simulate them during the review. 
 
Even if the application does not provide time limits for idle sessions, such limits may exist at the transport layer (e.g., TCP timeouts).  Consider all possible ways in which limits might be enforced before documenting a finding.  
 
2) If there is no evidence of a required session timeout, it is a finding. "
V-16823,medium,"The Release Manager will establish a Configuration Control Board (CCB), that meets at least every release cycle, for managing the CM process.","Software Configuration Management (SCM) is very important in tracking code releases, baselines, and managing access to the configuration management repository. The SCM plan identifies what should be under configuration management control. Without an SCM plan code, and a CCB, releases can be tracked and vulnerabilities can be inserted intentionally or unintentionally into the code base of the application.
","['DCCB-1', 'DCCB-2']",SV-17823r1_rule,F-17134r1_fix,Setup and maintain a configuration control board.,C-17822r1_chk,"Interview the application representative and determine if a CCB exists. Ask about the membership of the CCB, and identify the primary members.  Ask if there is a CCB charter documentation.

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.

1) If there is no evidence of CCB, it is a CAT II finding.
 
2) If the IAM is not part of the CCB, it is a CAT II finding.
 
Interview the application representative and determine how often the CCB meets.  Ask if there is CCB charter documentation. The CCB charter documentation should indicate how often the CCB meets. If there is no charter documentation, ask when the last time the CCB met and when was the last release of the application. CCB's do not have to physically meet, and the CCB chair may authorize a release based on phone and/or e-mail conversations.
 
3) If there is not evidence of a CCB meeting during every release cycle, this a CAT III finding."
V-16826,medium,"The Test Manager will ensure tests plans and procedures are created and executed prior to each release of the application or updates to system patches.
","Without test plans and procedures for application releases or updates, unexpected results may occur which could lead to a denial of service to the application or components.",['DCCT-1'],SV-17826r1_rule,F-17143r1_fix,Executed tests plans prior to release or patch update.,C-17825r1_chk,"Ask the application representative to provide tests plans, procedures, and results to ensure they are updated for each application release or updates to system patches.

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.

1) If test plans, procedures, and results do not exist or are not updated for each application release or updates to system patches, this is a finding.
 "
V-26928,medium,"The application, when using PKI-based authentication, must enforce authorized access to the corresponding private key.","The cornerstone of the PKI is the private key used to encrypt or digitally sign information.  

If the private key is stolen, this will lead to the compromise of the authentication and non-repudiation gained through PKI because the attacker can use the private key to digitally sign documents and can pretend to be the authorized user. 

Both the holders of a digital certificate and the issuing authority must protect the computers, storage devices, or whatever they use to keep the private keys.  ",None,SV-34208r1_rule,None,None,None,None
V-69239,medium,The application must provide a capability to limit the number of logon sessions per user.,"Application management includes the ability to control the number of users and user sessions that utilize an application. Limiting the number of allowed users and sessions per user is helpful in limiting risks related to DoS attacks.

This requirement may be met via the application or by utilizing information system session control provided by a web server or other underlying solution that provides specialized session management capabilities.

If it has been specified that this requirement will be handled by the application, the capability to limit the maximum number of concurrent single user sessions must be designed and built into the application.

This requirement addresses concurrent sessions for individual system accounts and does not address concurrent sessions by single users via multiple system accounts.

The maximum number of concurrent sessions should be defined based upon mission needs and the operational environment for each system.",None,SV-83861r1_rule,F-75409r1_fix,Design and configure the application to specify the number of logon sessions that are allowed per user.,C-69663r1_chk,"For production environments;  Review the system documentation, identify the number of application user logon sessions allowed per user, identify the methods utilized for user session management or have application administrator describe how the application implements user session management.

Utilize the management interface that is used to set the user session values, or examine configuration files in order to review user session configuration settings.

Ensure the number of sessions allowed per user is specified in accordance with the organizational requirements.

For development environments;  have the developer provide design documentation or demonstrate how the application is designed to limit the number of simultaneous user logon sessions.

If the application is not configured to limit the number of logon sessions per user as defined by the organization, this is a finding."
V-27032,medium,"Applications must, for organization-defined information system components, load and execute the operating environment from hardware-enforced, read-only media.","Organizations may require the information system to load the operating environment from hardware enforced read-only media. The term operating environment is defined as the code upon which applications are hosted, for example, a monitor, executive, operating system, or application running directly on the hardware platform. 

Hardware-enforced, read-only media include, CD-R/DVD-R disk drives. Use of non-modifiable storage ensures the integrity of the software program from the point of creation of the read-only image. ",None,SV-34326r1_rule,None,None,None,None
V-70153,medium,The application must map the authenticated identity to the individual user or group account for PKI-based authentication.,"Without mapping the certificate used to authenticate to a corresponding user account, the ability to determine the identity of the individual user or group will not be available for forensic analysis.

Some CAs will include identifying information like an email address within the certificate itself. When the email is assigned to an individual, this helps to identify the individual user who has been assigned the certificate. When identifying information is not available within the certificate itself, the application must provide a mapping that allows administrators to quickly determine who the owner of the certificate is. When responding to a security incident, particularly involving user access violations, time is of the essence so this information must be readily available to investigators.",None,SV-84775r1_rule,F-76389r1_fix,Configure the application to map certificate information to individual users or group accounts or create a process for automatically determining the individual user or group based on certificate information provided in the logs.,C-70629r1_chk,"Review the application documentation and interview the application administrator to identify how the application maps individual user certificates or group accounts to individual users.

Access the application as a regular user while reviewing the application logs to determine if the application records the individual name of the user or if the application only includes certificate information.

If the application only logs certificate information which contains no discernable user data, ask the system admin what their process is for mapping the certificate information to the user.

If the application does not map the certificate data to an individual user or group, or if the administrator has no automated process established for determining the identity of the user, this is a finding."
V-70215,medium,The application must not re-use or recycle session IDs.,"Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.

Session identifiers are assigned to application users so they can be uniquely identified. This allows the user to customize their web application experience and also allows the developer to differentiate between users thereby providing the opportunity to customize the user’s features and functions.

Once a user has logged out of the application or had their session terminated, their session IDs should not be re-used. Session IDs should also not be used for other purposes such as creating unique file names and they should also not be re-assigned to other users once the original user has logged out or otherwise quit the application.

Allowing session ID reuse increases the risk of replay attacks.

Session testing is a detailed undertaking and is usually done in the course of a web application vulnerability or penetration assessment.",None,SV-84837r1_rule,F-76451r1_fix,Design the application to not re-use session IDs.,C-70691r1_chk,"Review the application documentation and interview the application administrator to identify how the application generates user session IDs.

Application session testing is required in order to verify this requirement.

Request the latest application vulnerability or penetration test results.

Verify the test configuration includes session handling vulnerability tests.

If the application is re-using/copying the users existing session ID that was created on one system in order to maintain user state when traversing multiple application servers in the same domain, this is not a finding.

If the session testing results indicate application session IDs are re-used after the user has logged out, this is a finding."
V-69573,medium,The application must enforce a 60-day maximum password lifetime restriction.,"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.

Examples of situations where a user ID and password might be used include but are not limited to:

- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.

- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.

and

- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.

Any password, no matter how complex, can eventually be cracked. Therefore, passwords need to be changed at specific intervals.

One method of minimizing this risk is to use complex passwords and periodically change them. If the application does not limit the lifetime of passwords and force users to change their passwords, there is the risk that the system and/or application passwords could be compromised.

This requirement does not include emergency administration accounts which are meant for access to the application in case of failure. These accounts are not required to have maximum password lifetime restrictions.",None,SV-84195r1_rule,F-75749r1_fix,Configure the application to have a maximum password lifetime of 60 days.,C-69993r1_chk,"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.

If the application does not use passwords, the requirement is not applicable.

Access the application management interface and view the user password settings page.

Review user password settings and validate the application is configured to expire and force a password change after 60 days.

If user passwords are not configured to expire after 60 days, or if the application does not have the ability to control this setting, this is a finding."
V-69575,medium,The application must prohibit password reuse for a minimum of five generations.,"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.

Examples of situations where a user ID and password might be used include but are not limited to:

- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.

- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.

and

- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.

Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.

To meet password policy requirements, passwords need to be changed at specific policy-based intervals.

If the information system or application allows the user to consecutively reuse their password when that password has exceeded its defined lifetime, the end result is a password that is not changed as per policy requirements.",None,SV-84197r1_rule,F-75751r1_fix,Configure the application to prohibit password reuse for up to 5 passwords.,C-69995r1_chk,"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.

If the application does not use passwords, the requirement is not applicable.

Access the application management interface and view the user password settings page.

Review user password settings and validate the application is configured to prohibit password reuse for a minimum of 5 password generations.

If the application does not prevent users from reusing their previous 5 passwords, or if the application does not have the ability to control this setting, this is a finding."
V-6145,medium,"If the application contains classified data, the Program Manager will ensure a Security Classification Guide exists containing data elements and their classification.

","Without a classification guide the marking, storage, and output media of classified material can be inadvertently mixed with unclassified material, leading to its possible loss or compromise. ",['DCSD-1'],SV-6145r1_rule,F-16971r1_fix,Create and maintain a security classification guide.,C-3053r1_chk,"The IAO will ensure the classification guide for the  application data exists and is available to users.

If the application does not process classified information, this check is not applicable.
 
The application may already be covered by a higher level program or other classification guide. If classification guide is not written specifically to the application, the sensitive application data should be reviewed to determine whether it is contained in the classification guide.
 
DoD 5200.1-R, January 1997 identifies requirements for security classification and/or declassification guides
(http://www.dtic.mil/whs/directives/corres/pdf/520001r.pdf).
 
Security classification guides shall provide the following information:
 • Identify specific items, elements, or categories of information to be protected.
 • State the specific classification to be assigned to each item or element of information and, when useful, specify items of information that are unclassified.
 • Provide declassification instructions for each item or element of information, to include the applicable exemption category for information exempted from automatic declassification.
 • State a concise reason for classification for each item, element, or category of information that, at a minimum, cites the applicable classification categories in Section 1.5 of E.O. 12958. 
 • Identify any special handling caveats that apply to items, elements, or categories of information.
 • Identify, by name or personal identifier and position title, the original classification authority approving the guide and the date of that approval.
 • Provide a point-of-contact for questions about the guide and suggestions for improvement.
 • For information exempted from automatic declassification because its disclosure would reveal foreign government information or violate a statute, treaty, or international agreement, the security classification guide will identify the government or specify the applicable statute, treaty, or international agreement, as appropriate.
 
1) If the security classification guide does not exist, or does not contain data elements and their classification, it is a finding."
V-30570,medium,The application must enforce requirements for remote connections to the information system.,"Applications that provide remote access to information systems must be able to enforce remote access policy requirements or work in conjunction with enterprise tools designed to enforce policy requirements.  Examples of policy requirements include but are not limited to; authorizing remote access to the information system, limiting access based on authentication credentials and monitoring for unauthorized access. ",None,SV-40299r1_rule,None,None,None,None
V-6167,medium,"The designer will ensure application initialization, shutdown, and aborts are designed to keep the application in a secure state.
","An application could be compromised, providing an attack vector into the enclave if application initialization, shutdown, and aborts are not designed to keep the application in a secure state. 

If an application fails without closing or shutting down processes or open sessions; authentication and validation mechanisms are in doubt.   Responsible application development practices must be applied to ensure the failed application is handled gracefully to prevent creation of security risks.  ",['DCSS-2'],SV-6167r1_rule,F-16996r1_fix,"Fix any vulnerabilities found when the application is an insecure state (initialization, shutdown and aborts).",C-3043r1_chk,"The design of the application should account for the following: 1) Connections to databases are left open 2) Access control mechanisms are disabled. 3) Data left in temporary locations.

Testing application failure will require taking down parts of the application.  Examine application test plans and procedures to determine if this type of failure was tested.  If test plans exist, validate the tests by performing a subset of the checks.  If test plans do not exist, an application failure must be simulated.  Simulate a failure.  This can be accomplished by stopping the web server service and/or the database service.  Also, for applications using web services, stop the web service and/or the database. Check to ensure that application data is still protected.  Some examples of tests follow.  Try to submit SQL queries to the database.  Ensure that the database requires authentication before returning data.  Try to read the application source files; access should not be granted to these files because the application is not operating.  Try to open database files; data should not be available because the application is not operational. 
 
1) If any of these tests fail, it is a finding."
V-26922,medium,The application must support organizational requirements to enforce the number of characters that get changed when passwords are changed.,"Passwords need to be changed at specific policy based intervals.  

If the information system or application allows the user to consecutively reuse extensive portions of their password when they change their password, the end result is a password that has not had enough elements changed to meet the policy requirements.  ",None,SV-34202r1_rule,None,None,None,None
V-69289,high,The application must use both the NotBefore and NotOnOrAfter elements or OneTimeUse element when using the Conditions element in a SAML assertion.,"SAML is a standard for exchanging authentication and authorization data between security domains.  SAML uses security tokens containing assertions to pass information about a principal (usually an end user) between a SAML authority, (identity provider), and a SAML consumer, (service provider).  SAML assertions are usually made about a subject, (user) represented by the <Subject> element.

When a SAML assertion is used with a <Conditions> element, a begin and end time for the <Conditions> element should be set in order to specify a timeframe in which the assertion is valid. Not setting a specific time period for the <Conditions> element, the possibility exists of granting immediate access or elevated privileges to an attacker which results in an immediate loss of confidentiality.",None,SV-83911r1_rule,F-75459r1_fix,Design and configure the application to implement the use of the <NotBefore> and <NotOnOrAfter> or <OneTimeUse> when using the <Conditions> element in a SAML assertion.,C-69697r1_chk,"Ask the application representative for the design document.

Review the design document for web services using SAML assertions.

If the application does not utilize SAML assertions, this check is not applicable.

Examine the contents of a SOAP message using the <Conditions> element; all messages should contain the <NotBefore> and <NotOnOrAfter> or <OneTimeUse> element when in a SAML Assertion. This can be accomplished using a protocol analyzer such as Wireshark.

If SOAP using the <Conditions> element does not contain <NotBefore> and <NotOnOrAfter> or <OneTimeUse> elements, this is a finding."
V-27033,medium,"Applications must support organizationally-defined requirements to load and execute from hardware-enforced, read-only media.","Use of non-modifiable storage ensures the integrity of the software program from the point of creation of the read-only image. Organizations may require the information system to load specified applications from hardware enforced read-only media.  Hardware-enforced, read-only media include, CD-R/DVD-R disk drives.  ",None,SV-34327r1_rule,None,None,None,None
V-35213,medium,The application server must protect log tools from unauthorized access.,"Protecting log data also includes identifying and protecting the tools used to view and manipulate log data. 

Depending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. 

It is, therefore, imperative that access to log tools be controlled and protected from unauthorized access. 

Application servers provide a web- and/or a command line-based management functionality for managing the application server log capabilities. In addition, subsets of log tool components may be stored on the file system as jar or xml configuration files. The application server must ensure that in addition to protecting any web-based log tools, any file system-based tools are protected as well.",None,SV-46500r3_rule,F-39759r2_fix,Configure the application server or OS to protect log tools from unauthorized access.,C-43585r2_chk,"Review the application server documentation and server configuration to determine if the application server protects log tools from unauthorized access.

Request a system administrator attempt to access log tools while logged into the server in a role that does not have the requisite privileges.

If the application server does not protect log tools from unauthorized access, this is a finding."
V-70285,medium,The application must perform verification of the correct operation of security functions: upon system startup and/or restart; upon command by a user with privileged access; and/or every 30 days.,"Without verification, security functions may not operate correctly and this failure may go unnoticed.

Security function is defined as the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based. Security functionality includes, but is not limited to, establishing system accounts, configuring access authorizations (i.e., permissions, privileges), setting events to be audited, and setting intrusion detection parameters.

Notifications provided by information systems include, for example, electronic alerts to system administrators, messages to local computer consoles, and/or hardware indications, such as lights.

This requirement applies to applications performing security functions and the applications performing security function verification/testing.",None,SV-84907r1_rule,F-76521r1_fix,Design the application to verify the correct operation of security functions on command and on application startup and restart.,C-70761r1_chk,"Review the application documentation and interview the system administrator to determine if the application performs security function testing.

If the application is not designed or intended to perform security function testing, the requirement is not applicable.

Access the application design documents or have the system administrator provide proof if the application is designed to verify the correct operation of security functions.

Review application logs and take note of log entries that indicate security function testing is being performed and verified on startup, restart, or on command by an authorized user.

If the application is designed to perform security function testing and does not verify the correct operation of security functions on startup, restart, or upon command by a privileged user, this is a finding."
V-69259,medium,The application must implement cryptographic mechanisms to protect the integrity of remote access sessions.,"Without integrity protection mechanisms, unauthorized individuals may gain access to sensitive information via a remote access session.

Remote access is access to DoD nonpublic information systems by an authorized user (or an information system) communicating through an external, non-organization-controlled network. Remote access methods include, for example, dial-up, broadband, and wireless.

Encryption provides a means to secure the remote connection to prevent unauthorized access to the data traversing the remote access connection. Without integrity protection mechanisms, unauthorized individuals may be able to insert inauthentic content into a remote session. The encryption strength of mechanism is selected based on the security categorization of the information.",None,SV-83881r1_rule,F-75429r1_fix,Design and configure applications to use TLS encryption to protect the integrity of remote access sessions.,C-69683r1_chk,"Review the application documentation and interview the system administrator.

Identify the application encryption capabilities and methods for implementing encryption protection.

For web based applications; open the web browser and access the website URL. Use the browser and determine if the session is protected via TLS. A secure connection is usually indicated in the upper left hand corner of the URL by a padlock icon. Click on the padlock icon and examine the connection information. Determine if TLS encryption is used to secure the session.

For non-web based applications, determine the TCP/IP port, protocol and method used for establishing client connections to the remote server. Review application configuration settings to ensure encryption is specified and  via TLS.

If the connection is not secured with TLS, this is a finding."
V-57541,medium,"The application server must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards.","Cryptography is only as strong as the encryption modules/algorithms employed to encrypt the data. Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data.

NSA has developed Type 1 algorithms for protecting classified information. The Committee on National Security Systems (CNSS) National Information Assurance Glossary (CNSS Instruction No. 4009) defines Type 1 products as:

""Cryptographic equipment, assembly or component classified or certified by NSA for encrypting and decrypting classified and sensitive national security information when appropriately keyed. Developed using established NSA business processes and containing NSA-approved algorithms 
are used to protect systems requiring the most stringent protection mechanisms."" 

NSA-approved cryptography is required to be used for classified information system processing.

The application server must utilize NSA-approved encryption modules when protecting classified data. This means using AES and other approved encryption modules.",None,SV-71817r2_rule,F-62609r1_fix,Configure the application server to utilize NSA-approved cryptography to protect classified information.,C-58249r1_chk,"Review application server documentation to verify that the application server is using NSA-approved cryptography to protect classified data and applications resident on the device.

If the application server is not using NSA-approved cryptography for classified data and applications, this is a finding."
V-30574,medium,The information system must automatically terminate emergency accounts after an organization-defined time period for each type of account.,"Emergency application accounts are typically created due to an unforeseen operational event or could ostensibly be used in the event of a vendor support visit where a support representative requires a temporary unique account in order to perform diagnostic testing or conduct some other support related activity. When these types of accounts are created, there is a risk that the temporary account may remain in place and active after the support representative has left.  

In the event emergency application accounts are required, the application must ensure that accounts designated as temporary in nature shall automatically terminate these accounts after an organization-defined time period.  Such a process and capability greatly reduces the risk that accounts will be misused, hijacked, or application data compromised. 

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements.  Such an integration allows the application developer to off-load those access control functions and focus on core application features and functionality. 

Examples of enterprise level authentication/access mechanisms include but are not limited to Active Directory and LDAP.

The application must provide or utilize a mechanism to automatically terminate accounts that have been designated as temporary or emergency accounts after an organization defined time period.",None,SV-40308r1_rule,None,None,None,None
V-27012,medium,The application must perform data origin authentication and data integrity verification on all resolution responses received whether or not local client systems explicitly request this service.,"A recursive resolving or caching Domain Name System (DNS) server is an example of an information system providing name/address resolution service for local clients. 

Authoritative DNS servers are examples of authoritative sources owning DNS data. Information systems using technologies other than the DNS to map between host/service names and network addresses provide other means to enable clients to verify the authenticity and integrity of response data. ",None,SV-34306r1_rule,None,None,None,None
V-26919,medium,The application must support organizational requirements to enforce password complexity by the number of lower case characters used.,"Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. 

Password complexity is one factor of several that determine how long it takes to crack a password. 

The more complex the password is, the greater the number of possible combinations that need to be tested before the password is compromised. 

Use of a complex password helps to increase the time and resources required to compromise the password. ",None,SV-34199r1_rule,None,None,None,None
V-35090,medium,The application server must implement cryptography mechanisms to protect the integrity of the remote access session.,"Encryption is critical for protection of remote access sessions. If encryption is not being used for integrity, malicious users may gain the ability to modify the application server configuration. The use of cryptography for ensuring integrity of remote access sessions mitigates that risk.

Application servers utilize a web management interface and scripted commands when allowing remote access. Web access requires the use of TLS and scripted access requires using ssh or some other form of approved cryptography. Application servers must have a capability to enable a secure remote admin capability.

FIPS 140-2 approved TLS versions include TLS V1.0 or greater.

FIPS 140-2 approved TLS versions must be enabled and non-FIPS-approved SSL versions must be disabled.

NIST SP 800-52 specifies the preferred configurations for government systems.",None,SV-46377r3_rule,F-39641r4_fix,Configure the application server to implement cryptography mechanisms to protect the integrity of the remote access session.,C-43477r4_chk,"Review the application server documentation and configuration to ensure the application server is configured to use cryptography to protect the integrity of remote access sessions.

If the application server is not configured to implement cryptography mechanisms to protect the integrity of remote access sessions, this is a finding."
V-70371,medium,At least one tester must be designated to test for security flaws in addition to functional testing.,"If there is no person designated to test for security flaws, vulnerabilities can potentially be missed during testing.

This requirement is meant to apply to developers or organizations that are doing development work.",None,SV-84993r1_rule,F-76607r1_fix,Designate personnel to conduct security testing on the applications.,C-70825r1_chk,"Review the organization chart and interview the admin staff.

Identify personnel designated as application security testers.

If the organization operating the application is not doing development work, this requirement is not applicable.

If the organization has not designated personnel to conduct security testing, this is a finding."
V-70393,medium,The application development team must provide an application incident response plan.,"An application incident response process is managed by the development team and should include a method for individuals to submit potential security vulnerabilities to the development or maintenance team. 

The plan should dictate what is to be done with the reported vulnerabilities. Reported vulnerabilities must be tracked throughout the process to ensure they are triaged, corrected, and tested. The corresponding update is released to the user community and the user community is notified of the availability of the application update.

Without an established application incident management plan and process, discovered issues and vulnerabilities will go unreported.   Vulnerabilities will not be triaged and managed, and there may be delays in corrective actions.

Information on how to submit bug and vulnerability reports must also be included in the application design document or configuration guide.

This requirement is meant to be applied when reviewing an application with the development team.",None,SV-85015r1_rule,F-76629r1_fix,"The development team creates an application incident response plan documenting and establishing a process that at a minimum:

- Tracks reported vulnerabilities and bugs
- Confirms reported vulnerabilities and bugs
- Tracks remediation effort
- Notifies application users of available updates that address the reported issues.",C-70847r1_chk,"If the application is a COTS application and the development team is not accessible to interview this requirement is not applicable.

Interview the application development team members.  Request and review the application incident response plan. 

Ensure the plan includes an implemented process that:

- Tracks reported vulnerabilities and bugs
- Confirms reported vulnerabilities and bugs
- Tracks remediation effort
- Notifies application users of available updates that address the reported issues.

If the application incident response plan does not exist and at a minimum does not implement the aforementioned processes, this is a finding."
V-70395,high,All products must be supported by the vendor or the development team.,Unsupported commercial and government developed software products should not be used because fixes to newly identified bugs will not be implemented by the vendor or development team. The lack of security updates can result in potential vulnerabilities.,None,SV-85017r1_rule,F-76631r1_fix,Remove or decommission all unsupported software products in the application.,C-70849r1_chk,"Review the application documentation and interview the application administrator.

Identify all software components.

Review the version information and identify the vendor if COTS software.

Access the vendor website to verify the version is still supported.

Ask the application representative for proof that the application and all of its components are supported.

Examples of proof may include:

design documentation that includes support information, support specific contract documentation, successful creation of vendor support tickets, website toll free support phone numbers etcetera.

If any of the software components are not supported by a COTS vendor or a GOTS organization, this is a finding."
V-69387,medium,"The application must generate audit records when successful/unsuccessful attempts to access categories of information (e.g., classification levels) occur.","Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Categories of information is information that is identified as being sensitive or requiring additional protection from regular user access. The data is accessed on a need to know basis and has been assigned a category or a classification in order to assign protections and track access.

Audit records can be generated from various components within the information system (e.g., module or policy filter).",None,SV-84009r1_rule,F-75561r1_fix,Configure the application to create an audit record for both successful and unsuccessful attempts to access protected categories of information.,C-69803r1_chk,"Review the application documentation and interview the application administrator. Identify where the application logs are stored.

Identify any data protections that are required.

Identify any categories of data or classification of data.

If the application requirements do not call for compartmentalized data and data protection, this requirement is not applicable.

Authenticate to the application as a regular user. Using application functionality, attempt to access data that has been assigned to a protected category.

Perform two access attempts, one successful and one unsuccessful.

Testing this will require obtaining access to test data that has been assigned to a protected category, or having an authorized user access the data for you.

Review the log data and ensure both the successful and unsuccessful access attempts are logged.

If the application does not generate an audit record when successful and unsuccessful attempts to access categories of information occur, this is a finding."
V-6168,medium,"The designer will ensure applications requiring server authentication are PK-enabled. 


","Applications not using PKI are at risk of containing many password vulnerabilities. PKI is the preferred method of authentication.
","['IATS-1', 'IATS-2']",SV-6168r1_rule,F-17019r1_fix,Enable the application to use PKI for authentication.,C-2944r1_chk,"Ask the application SA or developer if the application enables clients to authenticate to the server or the application it is communicating with. The most common example of this type of authentication is when a client validates a server’s PKI certificate when initiating an SSL or IPSEC connection.  
 
1) If the SA or developer answers that this capability is not present, this is a finding.  

If the SA or developer states that the capability is present, validate this by logging on to each component that supports authentication of servers.  For web applications, note cases in which the client browser issues a warning that the server’s certificate is not valid.  Reasons include:
 
• A trusted certificate authority did not issue the certificate
• The certificate has expired
• The name of the certificate does not match the URL of the page you are trying to view
 
The client application should provide a function to allow or disallow the server access to the client application. The server must be setup with a certificate for identification.

Determine if the application checks for server authentication before allowing the user to continue. The server’s certificate should be checked by the user’s web browser or client application.
 
2) If there is no server certificate or the client application does not validate the server certificate, it is a finding."
V-69281,high,Validity periods must be verified on all application messages using WS-Security or SAML assertions.,"When using WS-Security in SOAP messages, the application should check the validity of the time stamps with creation and expiration times. Time stamps that are not validated may lead to a replay event and provide immediate unauthorized access of the application. Unauthorized access results in an immediate loss of confidentiality.",None,SV-83903r1_rule,F-75451r1_fix,"Design and configure the application to use validity periods, ensure validity periods are verified on all WS-Security token profiles and SAML Assertions.",C-69689r1_chk,"Ask the application representative for the design document.

Review the design document for web services.

If the application does not utilize WSS or SAML assertions, this requirement is not applicable.

Review the design document and verify validity periods are checked on all messages using WS-Security or SAML assertions.

If the design document does not exist, or does not indicate validity periods are checked on messages using WS-Security or SAML assertions, this is a finding."
V-70303,medium,The ISSO must ensure active vulnerability testing is performed.,"Use of automated scanning tools accompanied with manual testing/validation which confirms or expands on the automated test results is an accepted best practice when performing application security testing. Automated scanning tools expedite and help to standardize security testing, they can incorporate known attack methods and procedures, test for libraries and other software modules known to be vulnerable to attack and utilize a test method known as ""fuzz testing"". Fuzz testing is a testing process where the application is provided invalid, unexpected, or random data. Poorly designed and coded applications will become unstable or crash. Properly designed and coded applications will reject improper and unexpected data input from application clients and remain stable.

Many vulnerability scanning tools provide automated fuzz testing capabilities for the testing of web applications. All of these tools help to identify a wide range of application vulnerabilities including, but not limited to; buffer overflows, cross-site scripting flaws, denial of service format bugs and SQL injection, all of which can lead to a successful compromise of the system or result in a denial of service.

Due to changes in the production environment, it is a good practice to schedule periodic active testing of production web applications. Ideally, this will occur prior to deployment and after updates or changes to the application production environment.

It is imperative that automated scanning tools are configured properly to ensure that all of the application components that can be tested are tested. In the case of web applications, some of the application code base may be accessible on the website and could potentially be corrected by a knowledgeable system administrator. Active testing is different from code review testing in that active testing does not require access to the application source code base. A code review requires complete code base access and is normally performed by the development team.

If vulnerability testing is not conducted, there is the distinct potential that security vulnerabilities could be unknowingly introduced into the application environment.

The following website provides an overview of fuzz testing and examples:

http://www.owasp.org/index.php/Fuzzing",None,SV-84925r1_rule,F-76539r1_fix,"Perform active vulnerability and fuzz testing of the application.

Verify the vulnerability scanning tool is configured to test all application components and functionality.

Address discovered vulnerabilities.",C-70779r1_chk,"Ask the application representative to provide vulnerability test procedures and vulnerability test results.

Ask the application representative to provide the settings that were used to conduct the vulnerability testing.

Verify the automated vulnerability scanning tool was appropriately configured to assure as complete a test as possible of the application architecture components. E.g., if the application includes a web server, web server tests must be included.

If the vulnerability scan report includes informational and/or non-critical results this is not a finding.

If previously identified vulnerabilities have subsequently been resolved, this is not a finding.

If the application test procedures and test results do not include active vulnerability and fuzz testing this is a finding.

If the vulnerability scan results include critical vulnerabilities, this is a finding.

If the vulnerability scanning tests are not relevant to the architecture of the application, this is a finding."
V-57441,medium,The application server must generate log records when successful/unsuccessful attempts to delete privileges occur.,"Deleting privileges of a subject/object may cause a subject/object to gain or lose capabilities.  When successful and unsuccessful privilege deletions are made, the events need to be logged.  By logging the event, the modification or attempted modification can be investigated to determine if it was performed inadvertently or maliciously.",None,SV-71713r2_rule,F-62479r1_fix,Configure the application server to generate log records when privileges are successfully or unsuccessfully deleted.,C-58117r1_chk,"Review the application server documentation and the system configuration to determine if the application server generates log records when successful and unsuccessful attempts are made to delete privileges.

If log records are not generated, this is a finding."
V-26946,medium,The application must support the enforcement of a two-person rule for changes to organization-defined application components and system-level information.,"Regarding access restrictions for changes made to organization defined information system components and system level information.  Any changes to the hardware, software, and/or firmware components of the information system and/or application can potentially have significant effects on the overall security of the system. 

Accordingly, only qualified and authorized individuals are allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.  

A two person rule requires two separate individuals acknowledge and approve those changes.  Two person rule for changes to critical application components helps to reduce risks pertaining to availability and integrity.
",None,SV-34228r1_rule,None,None,None,None
V-35159,medium,The application server must produce log records containing information to establish what type of events occurred.,"Information system logging capability is critical for accurate forensic analysis.  Without being able to establish what type of event occurred, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible. 

Log record content that may be necessary to satisfy the requirement of this control includes time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked.

Application servers must log all relevant log data that pertains to the application server.  Examples of relevant data include, but are not limited to, Java Virtual Machine (JVM) activity, HTTPD/Web server activity, and application server-related system process activity.",None,SV-46446r3_rule,F-39708r2_fix,Configure the application server to include the event type in the log data.,C-43542r2_chk,"Review the application server log configuration to determine if the application server produces log records showing what type of event occurred.

If the log data does not show the type of event, this is a finding."
V-70279,medium,The application must remove organization-defined software components after updated versions have been installed.,Previous versions of software components that are not removed from the information system after updates have been installed may be exploited by adversaries. Some information technology products may remove older versions of software automatically from the information system.,None,SV-84901r1_rule,F-76515r1_fix,Configure or design the application to remove old components when updating.,C-70755r1_chk,"Review the application documentation and interview the application admin to identify application locations on system.

Identify application versions that are installed on the system.

Review the file system structure to see if older versions of the application are still installed.

If old versions of the application or components are still installed on the system, this is a finding."
V-26957,medium,Configuration management applications must employ automated mechanisms to centrally verify  configuration settings.,"Configuration settings are the configurable security-related parameters of information technology products that are part of the information system. 

Security-related parameters are those parameters impacting the security state of the system, including parameters related to meeting other security control requirements. 

Security-related parameters include:  registry settings; account, file, and directory settings (i.e., permissions); and settings for services, ports, protocols, and remote connections.  

Rather than visiting each and every system when making configuration changes, organizations will employ automated tools that can make changes across all systems.  This greatly increases efficiency and manageability of systems and applications in a large scale environment.  

Centrally verify means to verify settings have taken effect from a centralized location.  In order to accommodate large scale environments, centralized solutions may also employ distributed systems used as configuration management proxies.  This is allowable as long as these systems are centrally managed and controlled as part of the overall configuration management solution.

To support this requirement, configuration management applications will employ automated mechanisms to centrally verify configuration settings and applications in general will ensure they do not hinder the use of such tools.",None,SV-34242r1_rule,None,None,None,None
V-69337,medium,"The application must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures.","Preventing non-privileged users from executing privileged functions mitigates the risk that unauthorized individuals or processes may gain unnecessary access to information or privileges.

Privileged functions include, for example, establishing accounts, performing system integrity checks, or administering cryptographic key management activities. Non-privileged users are individuals that do not possess appropriate authorizations. Circumventing intrusion detection and prevention mechanisms or malicious code protection mechanisms are examples of privileged functions that require protection from non-privileged users.",None,SV-83959r1_rule,F-75511r1_fix,Modify the application to limit access and prevent the disabling or circumvention of security safeguards.,C-69749r1_chk,"Identify the application user account(s) that the application uses to run. These accounts include the application processes (defined by Control Panel Services (Windows) or ps –ef (UNIX)) or for an n-tier application, the account that connects from one service (such as a web server) to another (such as a database server).

Determine the OS user groups in which each account is a member.

List the user rights assigned to these users and groups and evaluate whether any of them are unnecessary.

If the OS rights exceed application operational requirements, this is a finding.

If the application user account is a member of the Administrators group (Windows) or has a User Identification (UID) of 0 (i.e., is equivalent to root in UNIX), this is a finding.

Search the file system to determine if the application user or groups have ownership or permissions to any files or directories.

Review the list of files and identify any that are outside the scope of the application.

If there are such files outside the scope of the application, this is a finding.

Check ownership and permissions; identify permissions beyond the minimum necessary to support the application.

If there are instances of unnecessary ownership or permissions, this is a finding.

The finding details should note the full path of the file(s) and the associated issue (i.e., outside scope, permissions improperly granted to user X, etc.)."
V-70151,high,"The application, when using PKI-based authentication, must enforce authorized access to the corresponding private key.","If the private key is discovered, an attacker can use the key to authenticate as an authorized user and gain access to the network infrastructure.

The cornerstone of the PKI is the private key used to encrypt or digitally sign information.

If the private key is stolen, this will lead to the compromise of the authentication and non-repudiation gained through PKI because the attacker can use the private key to digitally sign documents and pretend to be the authorized user.

Both the holders of a digital certificate and the issuing authority must protect the computers, storage devices, or whatever they use to keep the private keys.",None,SV-84773r1_rule,F-76387r1_fix,Configure the application or relevant access control mechanism to enforce authorized access to the application private key(s).,C-70627r1_chk,"Review the application documentation and interview the application administrator to identify where the application's private key is stored.

If the application does not perform code signing or other cryptographic tasks requiring a private key, this requirement is not applicable.

Ask the administrator to demonstrate where the application private key(s) are stored. Examine access restrictions and ensure access controls are in place to restrict access to the private key(s).

If the key(s) are stored on the file system, ensure adequate file permissions are set so as to only allow authorized users and processes.

If the key(s) are maintained or available via an application interface, ensure the application provides access controls that limit access via the application interface to only authorized users and processes.

Review access controls and attempt to use a relevant user account, group or application role that is not allowed access to the private key.

Verify access to the keys is denied.

If unauthorized access is granted to the private key(s), this is a finding."
V-69255,medium,The application must associate organization-defined types of security attributes having organization-defined security attribute values with information in transmission.,"Without the association of security attributes to information, there is no basis for the application to make security related access-control decisions.

Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.

One example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing but either way, it is imperative these assignments are maintained while the data is in transmission. If the security attributes are lost when the data is being transmitted, there is the risk of a data compromise.",None,SV-83877r1_rule,F-75425r1_fix,Design and configure the application to retain the data marking when transmitting data.,C-69679r1_chk,"Review the application documentation and interview the application administrator.

Identify if the application requirements include data marking also determine if the application processes classified, FOUO or other data that is required to be marked.

Access the user interface for the application and navigate through the application. Perform an application action that will transmit marked data that is contained within the application.

If the application does not contain classified, FOUO or have data marking requirements, or if the application does not transmit data, this requirement is not applicable.

E.g., create a test record and assign a data marking to the data element. Save the test record, close the data entry fields and navigate to display the test record. Initiate the application processes to transmit data. Access remote system or have person with access to remote system verify the data marking is retained after the data transmission.

If application data required to be marked does not retain its marking when it is being transmitted by the application, this is a finding."
V-69245,medium,The application must automatically terminate the admin user session and log off admin users after a 10 minute idle time period is exceeded.,"Leaving an admin user's application session established for an indefinite period of time increases the risk of session hijacking.

Session termination terminates an individual user's logical application session after 10 minutes of application inactivity at which time the user must re-authenticate and a new session must be established if the user desires to continue work in the application.",None,SV-83867r1_rule,F-75415r1_fix,Design and configure the application to terminate the admin users session after 10 minutes of inactivity.,C-69669r1_chk,"Ask the application representative to demonstrate the application configuration setting where the idle time out value is defined for admin users.

Alternatively, logon with an admin user account and let the session sit idle for 10 minutes.

Attempt to access the application after 10 minutes of inactivity.

If the configuration setting is not set to time out admin user sessions after 10 minutes of inactivity, or if the session used for testing does not time out after 10 minutes of inactivity, this is a finding."
V-26748,medium,"Applications must enforce non-discretionary access control policies over users and resources where the policy rule set for each policy specifies:
access control information (i.e., attributes) employed by the policy rule set (e.g., position, nationality, age, project, time of day).","Access control policies (e.g., identity-based policies, role-based policies, attribute-based policies) and access enforcement mechanisms (e.g., access control lists, access control matrices, cryptography) are employed to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, domains). 

Non-discretionary access controls are controls determined by policy makers, are managed centrally or by a central authority and may not be changed at the discretion of ordinary application users.  Data protection requirements may result in a non-discretionary access control policy being specified as part of the application design. 

Non-discretionary access controls are employed at the application level to restrict and control access to application data thereby providing increased information security for the organization.  

Policy rule sets would be developed to establish that each user receives only the information to which the user is authorized.  The policy rule set will specify that each application user account will be assigned attributes including information such as position, nationality, age, project, time of data, etc.

Applications must enforce these non-discretionary access control policies over application users and resources.",None,SV-33996r1_rule,None,None,None,None
V-70265,medium,The application must validate all input.,"Checking the valid syntax and semantics of information system inputs (e.g., character set, length, numerical range, and acceptable values) verifies that inputs match specified definitions for format and content. Software applications typically follow well-defined protocols that use structured messages (i.e., commands or queries) to communicate between software modules or system components. 

Structured messages can contain raw or unstructured data interspersed with metadata or control information. If software applications use attacker-supplied inputs to construct structured messages without properly encoding such messages, then the attacker could insert malicious commands or special characters that can cause the data to be interpreted as control information or metadata. 

Consequently, the module or component that receives the tainted output will perform the wrong operations or otherwise interpret the data incorrectly. Prescreening inputs prior to passing to interpreters prevents the content from being unintentionally interpreted as commands. Input validation helps to ensure accurate and correct inputs and prevent attacks such as cross-site scripting and a variety of injection attacks.

Absence of input validation opens an application to improper manipulation of data. The lack of input validation can lead immediate access of application, denial of service, and corruption of data.

Invalid input includes presence of scripting tags within text fields, query string manipulation, and invalid data types and sizes.

When an application validates input, it will only execute provided input after it has evaluated the input, validated the input and determined the data is in an expected format, and content is not extraneous or malformed.

Comprehensive application security testing and code reviews are required to ensure the application is not vulnerable to input validation vulnerabilities.

Application security code reviews should be conducted during the development phase to find and address input validation errors. When code reviews are not possible, fuzz testing can be performed on the application to attempt and identify vulnerable data input fields.",None,SV-84887r1_rule,F-76501r1_fix,Design and configure the application to validate input prior to executing commands.,C-70741r1_chk,"Review the application documentation, the code review reports and the vulnerability assessment scan results from automated vulnerability assessment tools.

Verify scan configuration settings include input validation and fuzzing tests.

Test data entry fields on all pages/screens of the application.

Procedures on testing input are relevant to the architecture of the application.

A reference on input validation testing is included at the OWASP website. The site includes testing procedures for input validation that affect many different technologies.

Identify the relevant testing procedures based upon the application architecture and components being tested.

https://www.owasp.org/index.php/Testing_for_Input_Validation

If test results include input validation errors, or if no test results exist, this is a finding."
V-57513,medium,The application server must prohibit the use of cached authenticators after an organization-defined time period.,"When the application server is using PKI authentication, a local revocation cache must be stored for instances when the revocation cannot be authenticated through the network, but if cached authentication information is out of date, the validity of the authentication information may be questionable.",None,SV-71789r2_rule,F-62581r1_fix,Configure the application server to prohibit the use of cached authenticators after an organization-defined timeframe.,C-58221r1_chk,"Review application server documentation to ensure the application server prohibits the use of cached authenticators after an organization-defined timeframe.

If the application server is not configured to meet this requirement, this is a finding."
V-26943,medium,Applications must prevent the installation of organization-defined critical software programs not signed with a certificate that has been recognized and approved by the organization.,"Any changes to the hardware, software, and/or firmware components of the information system and/or application can potentially have significant effects on the overall security of the system. 

Accordingly, software defined by the organization as critical software may be signed with a certificate recognized and approved by the organization.  

Examples of critical software programs and/or modules include, for example, patches, service packs, software libraries and where applicable, device drivers.  ",None,SV-34224r1_rule,None,None,None,None
V-69529,medium,The application must use multifactor (Alt. Token) authentication for network access to privileged accounts.,"Multifactor authentication requires using two or more factors to achieve authentication and access.

Factors include:
(i) something a user knows (e.g., password/PIN);
(ii) something a user has (e.g., cryptographic identification device, token); or
(iii) something a user is (e.g., biometric).

Multifactor authentication decreases the attack surface by virtue of the fact that attackers must obtain two factors, a physical token or a biometric and a PIN, in order to authenticate.  It is not enough to simply steal a user's password to obtain access.  

A privileged account is defined as an information system account with authorizations of a privileged user.  

An Alt. Token is a separate CAC like token used specifically for administrative account access and serves as a separate identifier much like a separate user account.

Network access is defined as access to an information system by a user (or a process acting on behalf of a user) communicating through a network (e.g., local area network, wide area network, or the Internet).",None,SV-84151r1_rule,F-75703r1_fix,Configure the application to use an Alt. Token when providing network access to privileged application accounts.,C-69947r1_chk,"Review the application documentation and interview the application administrator to identify application access methods.

Ask the application administrator to present both their primary CAC and their Alt. Token.  Ask the application administrator to log on to the application using application relevant network based access methods.  Attempt to use both CAC and Alt. Tokens to authenticate to the application. 

Validate the application requests the user to input their CAC PIN and that they cannot perform administrative functions.

Have user logoff and reauthenticate with their Alt. Token and that they can perform administrative functions.

If the application allows administrative access to the application without requiring an Alt. Token, this is a finding."
V-69507,medium,The application must audit who makes configuration changes to the application.,"Without auditing the enforcement of access restrictions against changes to the application configuration, it will be difficult to identify attempted attacks and an audit trail will not be available for forensic investigation for after-the-fact actions.

Enforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. Enforcement action methods may be as simple as denying access to a file based on the application of file permissions (access restriction). Audit items may consist of lists of actions blocked by access restrictions or changes identified after-the-fact.

If application configuration is maintained by using a text editor to modify a configuration file, this function may be delegated to an operating system file monitoring/auditing capability.",None,SV-84129r1_rule,F-75681r1_fix,Configure the application to create log entries that can be used to identify the user accounts that make application configuration changes.,C-69925r1_chk,"Review the application documentation and configuration settings.

Access the application configuration settings interface as a privileged user.

Make configuration changes to the application.

Review the application audit logs and ensure a log entry is made identifying the privileged user account that was used to make the changes.

If application configuration is maintained by using a text editor to modify a configuration file, modify the configuration file with a text editor. Review the system logs and ensure a log entry is made for the file modification that identifies the user that was used to make the changes.

If the user account is not logged, or is a group account such as ""root"", this is a finding.

If the user account used to make the changes is not logged in the audit records, this is a finding."
V-69405,medium,The application must generate audit records when successful/unsuccessful logon attempts occur.,"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Audit records can be generated from various components within the information system (e.g., module or policy filter).

Knowing when a user successfully or unsuccessfully logged on to the application is critical information that aids in forensic analysis.",None,SV-84027r1_rule,F-75579r1_fix,Configure the application or application server to write a log entry when successful and unsuccessful logon events occur.,C-69821r1_chk,"Review and monitor the application logs.

Authenticate to the application and observe if the log includes an entry to indicate the user’s authentication was successful.

Terminate the user session by logging out.

Reauthenticate using invalid user credentials and observe if the log includes an entry to indicate the authentication was unsuccessful.

If successful and unsuccessful logon events are not recorded in the logs, this is a finding."
V-70365,high,The application must have the capability to mark sensitive/classified output when required.,Failure to properly mark output could result in a disclosure of sensitive or classified data which is an immediate loss in confidentiality.,None,SV-84987r1_rule,F-76601r1_fix,Enable the application to adequately mark sensitive/classified output.,C-70819r1_chk,"Review the application documentation and interview the application administrator.

Ask the application representative for the application’s classification guide. This guide should document the data elements and their classification.

Determine which application functions to examine, giving preference to report generation capabilities and the most common user transactions that involve sensitive data (FOUO, secret or above).

Log on to the application and perform these in sequence, printing output when applicable. The application representative’s assistance may be required to perform these steps. For each function, note whether the appropriate markings appear on the displayed and printed output. If a classification document does not exist, data must be marked at the highest classification of the system.

Appropriate markings for an application are as follows: For classified data, markings are required at a minimum at the top and the bottom of screens and reports.

For FOUO data, markings are required at a minimum of the bottom of the screen or report. In some cases, technology may prohibit the appropriate markings on printed documents. For example, in some cases, it is not possible to mark all pages top and bottom when a user prints from a browser. If this is the case, ask the application representative if user procedures exist for manually marking printed documents. If procedures do exist, examine the procedures to verify if the users were to follow the procedures the data would be marked correctly.

Ask how these procedures are distributed to the users.

If appropriate markings are not present within the application and it is technically possible to have the markings present, this is a finding.

If it is not technically feasible to meet the minimum marking requirement and no user procedures exist or if followed the procedures will result in incorrect markings, or the procedures are not readily available to users, this is a finding.

In any case of a finding, the finding details should specify which functions failed to produce the desired results.

After completing the test, destroy all printed output using the site’s preferred method for disposal. For example: utilizing a shredder or disposal in burn bags."
V-35381,medium,The application server must ensure authentication of both client and server during the entire session.,"This control focuses on communications protection at the session, versus packet level.

At the application layer, session IDs are tokens generated by web applications to uniquely identify an application user's session. Web applications utilize session tokens or session IDs in order to establish application user identity. Proper use of session IDs addresses man-in-the-middle attacks, including session hijacking or insertion of false information into a session.

Application servers must provide the capability to perform mutual authentication. Mutual authentication is when both the client and the server authenticate each other.",None,SV-46668r3_rule,F-39927r2_fix,Configure the application server to mutually authenticate during the entire session as required by application design and policy.,C-43742r2_chk,"Review the application server configuration and documentation to ensure the application server provides mutual authentication capabilities.

If the application server does not provide the ability for applications to utilize mutual authentication, this is a finding."
V-19697,medium,"The designer and IAO will ensure UDDI versions are used supporting digital signatures of registry entries.

","UDDI repositories must provide the capability to support digital signatures. Without the capability to support digital signatures, web service users cannot verify the integrity of the UDDI registry.  
",['DCSQ-1'],SV-21838r1_rule,F-23051r1_fix,UDDI repository does not support digital signature.,C-24094r1_chk,"If the application does not utilize UDDI registries, this check is not applicable.

Ask the application representative for design document and verify the version of the UDDI registry used. UDDI Version 3.0 and above repositories supports digital signatures for web services.   

1) If the UDDI registry is not Version 3 or above, this is a finding.
"
V-6197,medium,"The Program Manager will ensure a System Security Plan (SSP) is established to describe the technical, administrative, and procedural IA program and policies governing the DoD information system, and identifying all IA personnel and specific IA requirements and objectives. ","If the DAA, IAM, or IAO are not performing assigned functions in accordance with DoD
requirements, it could impact the overall security of the facility, personnel, systems, and data, which
could lead to degraded security. If the DAA and the IAM/IAO are not appointed in writing, there will
be no way to ensure they understand the responsibilities of the position and the appointment
criteria. The lack of a complete System Security Plan (SSP) could lead to ineffective secure
operations and impede accreditation.  A System Identification Profile (SIP) and the DIACAP Implementation Plan (DIP) may be considered as sufficient proof of compliance as long as the documentation provides all of the information that is needed to meet the requirement.",['DCSD-1'],SV-6197r2_rule,F-5232r1_fix,"Establish the required IA roles in writing. The directive must include assigned duties and appointment criteria such as training, security clearance, and IT-designation.
Prepare a SSP that describes the technical, administrative, and procedural IA program and policies that govern the DoD information system, and identifies all IA personnel and specific IA requirements and objectives (e.g., requirements for data handling or dissemination, system redundancy and backup, or emergency response).",C-3061r1_chk,"The Program Manager will ensure all appointments to required IA roles are established in writing to include assigned duties and appointment criteria, such as training, security clearance, and IT designation. The IAO will ensure all appointments to required IA roles are established in writing to include assigned duties and appointment criteria such as training, security clearance, and IT designation.

Interview the application representative and validate that the required IA roles are established in writing. These roles are DAA and the IAM/IAO. This written notification must include assigned duties and appointment criteria such as training, security clearance, and IT-designation.
 
If a traditional review is conducted at the same time as the application review, this check is not applicable.
 
Also validate a SSP exists and describes the technical, administrative, and procedural IA program and policies that govern the DoD information system, and identifies all IA personnel and specific IA requirements and objectives (e.g., requirements for data handling or dissemination, system redundancy and backup, or emergency response).
 
1) If the SSP does not exist or is incomplete, it is a finding.
 
2) If the IA Roles and assigned duties and appointment criteria are not made in writing, it is a finding.   
 
Ask site personnel which IAO or IAM for the systems/application is part of the application review. 
 
3) If the IAO or IAM is unknown, or not assigned, this is a finding."
V-57537,medium,The application server must maintain the confidentiality and integrity of information during preparation for transmission.,"Information can be either unintentionally or maliciously disclosed or modified during preparation for transmission including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.

An example of this would be an SMTP queue.  This queue may be part of the application server so error messages from the server can be sent to system administrators, or SMTP functionality can be added to hosted applications by developers.

Any modules used by the application server that queue data before transmission must maintain the confidentiality and integrity of the information before the data is transmitted.",None,SV-71813r2_rule,F-62605r1_fix,Configure the application server to maintain the confidentiality and integrity of information during preparation for transmission.,C-58245r1_chk,"Review the application server documentation and deployed configuration to determine if the application server maintains the confidentiality and integrity of information during preparation before transmission.

If the confidentiality and integrity is not maintained, this is a finding."
V-16797,high,"The designer will ensure the application stores account passwords in an approved encrypted format.
","Passwords stored without encryption or with weak, unapproved, encryption can easily be read and unencrypted. These passwords can then be used for immediate access to the application.","['IAIA-1', 'IAIA-2']",SV-17797r1_rule,F-17024r1_fix,"Store passwords in an approved encrypted format.
",C-17793r1_chk,"With respect to identification and authentication information, only administrators and the application or OS process that access the information should have any permissions to these files.  In many cases, local backups of the accounts database exist so these must be included in the scope of the review.  
 
Authentication credentials such as passwords are required to be encrypted.  Check the configuration of the application software to determine if encryption settings have been activated for the relevant data.
 
1) If these encryption settings have not been turned on, this is a CAT II finding.  
 
If the data encryption functionality is not configurable and the identification and authentication information is stored in ASCII or another readable format, examine the actual data to determine if they are in clear text.  
 
2) If the authentication data is readable, this is a CAT I finding.
 
Record findings, regardless of whether or not the vulnerability has been captured in another SRR.  For example, any weakness in OS authentication scheme that the application leverages applies both to the OS and the application.
"
V-26883,medium,"In order to inform the user of the number of successful login attempts made with the users account, the application must notify the user of the number of successful logins/accesses occurring during an organization-defined time period.","Users need to be aware of activity that occurs regarding their application account. Providing users with information regarding the number of successful attempts made to login to their account allows the user to determine if any unauthorized activity has occurred and gives them an opportunity to notify administrators.  

This requirement is intended to cover both traditional logons to information systems and general accesses to information systems occurring in other types of architectural configurations (e.g., service oriented architectures). ",None,SV-34163r1_rule,None,None,None,None
V-6130,medium,The designer will ensure the application has the capability to require account passwords that conform to DoD policy.,Weak passwords can be guessed or easily cracked using various methods.  This can potentially lead to unauthorized access to the application. ,['IAIA-1'],SV-6130r1_rule,F-4422r1_fix,"Enable PKI authentication.
Enable the application to require account passwords having a minimum of 15 alphanumeric characters in length.
Enable the application to require account passwords contain a mix of upper case letters, lower case letters, numbers, and special characters.
Enable the application to require account passwords be changed every 60 days or more frequently.
Enable the application to ensure passwords do not contain personal information such as names, telephone numbers, account names, birthdays, or dictionary words.
Enable the application to limit reuse of account passwords within the last 10 password changes.
Enable the application to limit user changes to their account passwords once every 24 hours with the exception of privileged or administrative users.
Enable the application to require new account passwords differ from the previous password by at least four characters when a password is changed.
Configure the application to ensure account passwords conform to DoD password policy.",C-2942r1_chk,"Policy:

The designer will ensure the application has the capability to require account passwords having a minimum of 15 alphanumeric characters in length. The designer will ensure the application has the capability to require account passwords contain a mix of upper case letters, lower case letters, numbers, and special characters. The Designer will ensure the application has the capability to require account passwords be changed every 60 days or more frequently. The Designer will ensure passwords do not contain personal information such as names, telephone numbers, account names, birthdates, or dictionary words. The Designer will ensure the application has the capability to limit reuse of account passwords within the last 10 password changes. The Designer will ensure the application has the capability to limit user changes to their account passwords once every 24 hours with the exception of privileged or administrative users. The Designer will ensure the application has the capability to require new account passwords differ from the previous password by at least four characters when a password is changed. The IAO will configure the application to ensure account passwords conform to DoD password policy.

If the entire authentication process for the application is performed by the operating system (such is the case for a Desktop Application), this check is Not Applicable.

First, inventory all the password based authentication processes present in the application.  For example, a web server may effectively act as a client when authenticating with a back-end database server.  Peer-to-peer processes also are included because each peer still acts in the role of a client or server for particular transactions.  Each process must be evaluated separately.  If multiple processes must be used for a single authentication attempt, the combination of the processes should be evaluated to ensure this check is fully met.
 
In addition, the authentication may involve a user account database specific to the application or it may involve leveraging the authentication service of an operating system or directory service.
 
1) If the authentication process involves the presentation of a user account name only, this is a finding.
 
If the authentication is based on passwords, the passwords must have the following characteristics: 
• A minimum of 15 characters 
• Include at least one uppercase alphabetic character
• Include at least one lowercase alphabetic character 
• Include at least one non-alphanumeric (special) character
• Expire after 60 days
• Be different from the previous 10 passwords used
• Be changeable by the administrator at any time
• Be changeable by the associated user only once in a 24 hour period (for human user accounts)
• Not be changeable by users other than the administrator or the user with which the password is associated
• Not contain personal information such as names, telephone numbers, account names, birthdates or dictionary words. 

2) If the passwords do not have these characteristics, it is a finding.
 
To verify compliance with these requirements, check the configuration of the software that manages the authentication process (e.g., OS, directory, and database or application software) and determine if each of the criteria listed are met.  Also sample individual accounts to determine if any of the policy settings are overridden (e.g., password set to never expire).  Focus on non-human user accounts, as these are the most likely to violate the stated requirements.  Non-human accounts, sometimes known as services accounts, may not be set to expire after 60 days."
V-69551,medium,Service-Oriented Applications handling non-releasable data must authenticate endpoint devices via mutual SSL/TLS.,"Without identifying devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.

One way SSL/TLS authentication is the typical form of  authentication done between a web browser client and a web server. The client requests the server certificate to validate the server's identity and establish a secure connection.

When SSL/TLS mutual authentication is used, the server is configured to request the client’s certificate as well so the server can also identify the client. This form of authentication is normally chosen for system to system communications that leverage HTTP as the transport.

It should be noted that SSL is being deprecated and replaced with TLS.

For distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of identification claims may be made by services separate from the services acting on those decisions. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.

This requirement applies to applications that connect either locally, remotely, or through a network to an endpoint device (including but not limited to: workstations, printers, servers (outside a datacenter), VoIP Phones, VTC CODECs). Gateways and SOA applications are examples of where this requirement would apply.",None,SV-84173r1_rule,F-75725r1_fix,Configure the application to utilize mutual authentication when the application is processing non-releasable data.,C-69969r1_chk,"Review application documentation and interview application administrator.

Identify application data elements and determine if the application is handling/processing non-releasable data.

Review the application architecture and design documents.

Identify endpoint devices that interact with the application. These can be SOA gateways, VOIP phones, or other devices that are used to connect to and exchange data with the application.

If the design documentation specifies it, this could also include remote client workstations. However, this requirement is usually reserved for system-oriented endpoints rather than client workstations.

In order for two way SSL/TLS mutual authentication to work properly, the server must be configured to request client certificates.

Access the applications management console and navigate to the SSL/TLS management utility or web page that is used to configure two-way mutual authentication.

Verify endpoints are configured for client authentication (mutual authentication).

Some application architectures configure their settings in text/xml formatted files; in that case, have the application administrator identify the configuration files used by the application (e.g., web.xml stored in WEB-INF/ sub directory of the application root folder).

Open the web.xml file using a text editor and verify the application deployment descriptor for the application and the resource requiring protection under the ""login-config"" element is set to CLIENT-CERT.

If SSL/TLS mutual authentication is required due to the application processing non-releasable data and SSL/TLS mutual authentication not being utilized, this is a finding."
V-16820,low,"The Release Manager will ensure the access privileges to the configuration management (CM) repository are reviewed every 3 months.
",Incorrect access privileges to the CM repository can lead to malicious code or unintentional code being introduced into the application.,"['ECPC-1', 'ECPC-2']",SV-17820r1_rule,F-17129r1_fix,Review access privileges to the CM repository at least every three months.,C-17819r1_chk,"The CM repository access permissions are not reviewed at least every three months.  

If the application is a COTS/GOTS product or is composed of only COTS/GOTS products with no custom code, this check does not apply unless the application is being reviewed by or in conjunction with the COTS/GOTS vendor in which case this check is applicable.

Ask the application representative when the last time the access privileges were reviewed.
 
1) If access privileges were reviewed within the last three months, this is not a finding.
"
V-6160,medium,"The designer will ensure unsigned Category 2 mobile code executing in a constrained environment has no access to local system and network resources.
","Mobile code cannot conform to traditional installation and configuration safeguards, therefore, the use of local operating system resources and spawning of network connections introduce harmful and uncertain effects.",['DCMC-1'],SV-6160r1_rule,F-17120r1_fix,Remove unsigned unconstrained mobile code.,C-3038r1_chk,"If the application does not contain mobile code, this is not applicable.
 
If any mobile code is being transmitted by the application, examine the configuration of the test machine to ensure that no network connections exist.  This can be accomplished by typing the netstat command from the command prompt on a Windows client.  Ensure that after the mobile code is executed, network connections do not exist.  
 
1) If the application transmits mobile code that attempts to access local operating system resources or establish network connections to servers other than the application server, it is a finding.
"
V-27075,medium,Malicious code protection applications must update malicious code protection mechanisms only when directed by a privileged user.,"Malicious code protection software must be protected to prevent a non-privileged user or malicious piece of software from manipulating the protection update mechanism. 

Malicious code includes, viruses, worms, Trojan horses, and Spyware. ",None,SV-34370r1_rule,None,None,None,None
V-30533,medium,The information system must protect wireless access to the system using authentication.,"Wireless technologies include, but are not limited to, microwave, satellite, packet radio (UHF/VHF), 802.11x, and Bluetooth. 

Wireless networks use authentication protocols (e.g., EAP/TLS, PEAP), which provide credential protection and mutual authentication. In certain situations, wireless signals may radiate beyond the confines and control of organization-controlled facilities.

When systems connect to a wireless access point they need to be authenticated by the WAP. Authentication applies to user, device, or both as necessary. 

This is a wireless access requirement regarding WAP authentication. This requirement does not apply to applications.",None,SV-40243r1_rule,None,None,None,None
V-6135,medium,"The designer will ensure the appropriate cryptography is used to protect stored DoD information if required by the information owner.

","Application data needs to be properly protected.  Content of application data contains not only operationally sensitive data, but also personal data covered by the privacy act that needs to be protected internally and externally. Classifed data could be compromised if the required level of encryption is not utilized. ","['ECCR-1', 'ECCR-2', 'ECCR-3']",SV-6135r1_rule,F-17009r1_fix,"Configure system to encrypt stored sensitive information as required by the data owner; ensure encryption is performed using NIST FIPS 140-2 validated encryption. 

Replace cryptography that is not NIST certified.

Encrypt stored, non-SAMI classified information using NIST FIPS 140-2 validated encryption.

Implement NSA validated type-1 encryption of all SAMI data stored in the enclave. Remove the SAMI from the enclave.  Remove the uncleared users from the enclave.",C-2946r1_chk,"The designer will ensure:
- NIST-certified cryptography is used to protect stored sensitive information if required by the information owner. 
-  NIST-certified cryptography is used to store classified non-Sources and Methods Intelligence (SAMI) information if required by the information owner. 
- A classified enclave containing SAMI data is encrypted with NSA-approved cryptography.

Review the system security plan or interview the application representative to determine the classification of data in the application. Also, review encryption mechanisms protecting the data. This should include all data stored by REST-Style or SOAP-based web services.
 
NIST-certified cryptography should be used to protect stored sensitive information if required by the information owner.
 
NIST-certified cryptography should be used to protect stored classified non-SAMI data if required by the information owner.

NSA-approved cryptography should be used to protect stored classified SAMI information.
 
1) If data at rest is not protected with the appropriate level of encryption, this is a finding."
V-69565,medium,The application must require the change of at least 8 of the total number of characters when passwords are changed.,"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.

Examples of situations where a user ID and password might be used include but are not limited to:

- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.

- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.

and

- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.

Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.

Password complexity is one factor of several that determine how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.",None,SV-84187r1_rule,F-75739r1_fix,Configure the application to require the change of at least 8 characters in the password when passwords are changed.,C-69983r1_chk,"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.

If the application does not use passwords, the requirement is not applicable.

Access the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.

When prompted to provide the password, attempt to change less than 8 characters of the total number of characters in the password.

If less than 8 characters of the password are changed, this is a finding."
V-35217,medium,The application server must use cryptographic mechanisms to protect the integrity of log information.,"Protection of log records is of critical importance. Encrypting log records provides a level of protection that does not rely on host-based protections that can be accidentally misconfigured, such as file system permissions. Cryptographic mechanisms are the industry-established standard used to protect the integrity of log data. An example of a cryptographic mechanism is the computation and application of a cryptographic-signed hash using asymmetric cryptography.",None,SV-46504r3_rule,F-39763r2_fix,Configure the application server to encrypt and sign logs.,C-43589r2_chk,"Review the application server documentation and configuration to determine if the application server can protect log data using cryptographic means.

If the application server is not configured to encrypt and sign logs, this is a finding."
V-27018,medium,Applications must generate a unique session identifier for each session.,"This requirement focuses on communications protection at the application session, versus network packet level. The intent of this control is to establish grounds for confidence at each end of a communications session in the ongoing identity of the other party and in the validity of the information being transmitted. 

Unique session IDs are the opposite of sequentially generated session IDs which can be easily guessed by an attacker.  Unique session identifiers help to reduce predictability of said identifiers.  Unique session IDs address man-in-the-middle attacks including session hijacking or insertion of false information into a session.  If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.",None,SV-34312r1_rule,None,None,None,None
V-70291,medium,"The ISSO must ensure an account management process is implemented, verifying only authorized users can gain access to the application, and individual accounts designated as inactive, suspended, or terminated are promptly removed.","A comprehensive account management process will ensure that only authorized users can gain access to applications and that individual accounts designated as inactive, suspended, or terminated are promptly deactivated. Such a process greatly reduces the risk that accounts will be misused, hijacked, or data compromised.",None,SV-84913r1_rule,F-76527r1_fix,Establish an account management process.,C-70767r1_chk,"Interview the application representative to verify that a documented process exists for user and system account creation, termination, and expiration.

Obtain a list of recently departed personnel and verify that their accounts were removed or deactivated on all systems in a timely manner (e.g., less than two days).
 
If a documented account management process does not exist or unauthorized users have active accounts, this is a finding."
V-16836,medium,"The IAO will ensure the system and installed applications have current patches, security updates, and configuration settings.
","Due to viruses, worms, Trojans, and other malicious software, in addition to inevitable
weaknesses in code, the necessity to patch critical vulnerabilities is paramount. As part of the
general practice of performing application or system administration, it is imperative that security vulnerabilities from the vendor are monitored and patches are tested and applied.",['DCCT-1'],SV-17836r1_rule,F-17154r1_fix,Install current patches and update configurations.,C-17842r1_chk,"Ask the application representative to review the Configuration Management Plan. Ensure procedures exist addressing the test and implementation process for all patches, upgrades, and application deployments. Verify all IPv6 applicable patches have been applied. Verify all vendor provided IPv6 related patches been installed.

1) If required patches are missing, it is a finding.

2) If procedures do not exist or are deficient, it is a finding."
V-26910,medium,Applications managing devices must authenticate devices before establishing remote network connections using bidirectional authentication between devices that are cryptographically based.,"Device authentication is a solution enabling an organization to manage devices.  

It is an additional layer of authentication ensuring only specific pre-authorized devices operated by specific pre-authorized users can access the network. 

Device authentication requires unique identification and authentication that may be defined by type, by specific device, or by a combination of type and device, as deemed appropriate by the organization. 

The application typically uses either shared known information (e.g., Media Access Control [MAC] or Transmission Control Protocol/Internet Protocol [TCP/IP] addresses) for identification or an organizational authentication solution (e.g., IEEE 802.1x and Extensible Authentication Protocol [EAP], Radius server with EAP-Transport Layer Security [TLS] authentication, Kerberos) to identify and authenticate devices on local and/or wide area networks. 

The required strength of the device authentication mechanism is determined by the security categorization of the information system. 

Remote network connection is any connection with a device communicating through an external network (e.g., the Internet). 

Bidirectional authentication provides a means for both connecting parties to mutually authenticate one another and cryptographically based authentication provides a secure means of authenticating without the use of clear text passwords. ",None,SV-34190r1_rule,None,None,None,None
V-69391,medium,The application must generate audit records when successful/unsuccessful attempts to modify security objects occur.,"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Audit records can be generated from various components within the information system (e.g., module or policy filter).",None,SV-84013r1_rule,F-75565r1_fix,Configure the application to create an audit record for both successful and unsuccessful attempts to modify security objects.,C-69807r1_chk,"Review the application documentation and interview the application administrator.

Identify where the application logs are stored.

Identify application functionality that provides privilege or permission settings to security objects within the application.
This can be an application function that assigns privileges to an application object or data element.

Authenticate to the application as a regular user.  Using application functionality, attempt to modify the security object within the application.

Perform two attempts, one successfully and one unsuccessfully.

Review the log data and ensure the modification events both successful and unsuccessful are logged.

If the application does not generate an audit record when successful and unsuccessful attempts to modify security objects occur, this is a finding."
V-27090,medium,Intrusion detection software must be able to interconnect using standard protocols to create a system wide intrusion detection system.,"When utilizing intrusion detection software, monitoring components are usually dispersed throughout the network, such as, when utilizing HIDS and multiple NIDS sensors.  In order to leverage the capabilities of intrusion detection systems to get a complete overall view of network and host activity, these separate components must be able to report and react to activity they detect. 

Non-standard or custom communication protocols do not provide the reliability and veracity required of an enterprise class intrusion detection system. An example of a custom protocol includes, but is not limited to, vendor specific communication protocols that have not undergone IETF RFC evaluation and/or are not in common use throughout the Internet as a whole.",None,SV-34385r1_rule,None,None,None,None
V-57529,medium,The application server must protect against or limit the effects of all types of Denial of Service (DoS) attacks by employing organization-defined security safeguards.,"DoS is a condition when a resource is not available for legitimate users.  When this occurs, the organization either cannot accomplish its mission or must operate at degraded capacity.  To reduce the possibility or effect of a DoS, the application server must employ defined security safeguards.  These safeguards will be determined by the placement of the application server and the type of applications being hosted within the application server framework.

There are many examples of technologies that exist to limit or, in some cases, eliminate the effects of DoS attacks (e.g., limiting processes or restricting the number of sessions the application opens at one time). Employing increased capacity and bandwidth, combined with service redundancy or clustering, may reduce the susceptibility to some DoS attacks.",None,SV-71805r2_rule,F-62597r1_fix,Configure the application server to protect against or limit the effects of all types of Denial of Service (DoS) attacks by employing defined security safeguards.,C-58237r1_chk,"Review application server documentation and configuration to determine if the application server can protect against or limit the effects of all types of Denial of Service (DoS) attacks by employing defined security safeguards.

If the application server cannot be configured to protect against or limit the effects of all types of DoS, this is a finding."
V-30532,medium,The information system must protect wireless access to the system using encryption.,"Wireless technologies include, but are not limited to, microwave, satellite, packet radio (UHF/VHF), 802.11x, and Bluetooth. 

Wireless networks use authentication protocols (e.g., EAP/TLS, PEAP), which provide credential protection and mutual authentication. In certain situations, wireless signals may radiate beyond the confines and control of organization-controlled facilities.

When systems connect to a wireless access point there is a requirement to authenticate.  Authentication applies to user, device, or both as necessary. Authentication data needs to be protected by encryption. 

This is a wireless access requirement regarding WAP encryption. This requirement does not apply to applications.
",None,SV-40242r1_rule,None,None,None,None
V-70195,medium,The application must utilize FIPS-validated cryptographic modules when protecting unclassified information that requires cryptographic protection.,Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.,None,SV-84817r1_rule,F-76431r1_fix,Configure the application to use a FIPS-validated cryptographic module.,C-70671r1_chk,"Interview the system administrator, review the application components, and the application requirements to determine if the application processes data requiring cryptographic protection.

Review the application documentation and interview the application administrator to identify the cryptographic modules used by the application.

Access the NIST site to determine if the cryptographic modules used by the application have been FIPS-validated.

http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140val-all.htm

If the application is using cryptographic modules that are not FIPS-validated to protect unclassified data, this is a finding."
V-57561,medium,"The application server must install security-relevant software updates within the time period directed by an authoritative source (e.g. IAVM, CTOs, DTMs, and STIGs).","Security flaws with software applications are discovered daily. Vendors are constantly updating and patching their products to address newly discovered security vulnerabilities. Organizations (including any contractor to the organization) are required to promptly install security-relevant software updates (e.g., patches, service packs, and hot fixes) to production systems after thorough testing of the patches within a lab environment. Flaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously.",None,SV-71837r2_rule,F-62629r1_fix,Configure the application server to use a patch management system to ensure security-relevant updates are installed within the time period directed by the authoritative source.,C-58269r1_chk,"Review the application server documentation and configuration to determine if the application server checks with a patch management system to install security-relevant software updates within a timeframe directed by an authoritative source.

If the application server does not install security-relevant patches within the time period directed by the authoritative source, this is a finding."
V-69479,medium,The application must record time stamps for audit records that can be mapped to Coordinated Universal Time (UTC) or Greenwich Mean Time (GMT).,"If time stamps are not consistently applied and there is no common time reference, it is difficult to perform forensic analysis.

Time stamps generated by the application include date and time. Time is commonly expressed in Coordinated Universal Time (UTC), a modern continuation of Greenwich Mean Time (GMT), or local time with an offset from UTC.",None,SV-84101r1_rule,F-75655r1_fix,Configure the application to use the underlying system clock that maps to relevant UTC or GMT timezone.,C-69897r1_chk,"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.

Identify the application components and the logs associated with the components. 

If the application utilizes the underlying OS system clock, and the system clock is mapped to UTC or GMT, this is not a finding.

Identify where clock settings are configured within the application.

Access the configuration settings and determine if the application is configured to set the time stamps for audit records according to UTC or GMT (e.g., East coast standard time is represented as GMT -5, east coast daylight savings time is represented as GMT-4).

If the application is not configured to map to UTC or GMT, this is a finding."
V-70163,medium,The application must accept Personal Identity Verification (PIV) credentials from other federal agencies.,"Access may be denied to authorized users if federal agency PIV credentials are not accepted.

Personal Identity Verification (PIV) credentials are those credentials issued by federal agencies that conform to FIPS Publication 201 and supporting guidance documents. OMB Memorandum 11-11 requires federal agencies to continue implementing the requirements specified in HSPD-12 to enable agency-wide use of PIV credentials.",None,SV-84785r1_rule,F-76399r1_fix,Configure the application to accept PIV credentials when utilizing authentication provided by Federal (Non-DoD) agencies.,C-70639r1_chk,"Review the application documentation and interview the application administrator to identify application access methods.

If the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.

If the application is only deployed to SIPRNet, this requirement is not applicable.

If the application is not intended to be available to Federal government (non-DoD) partners this requirement is not applicable.

Ask the application administrator to demonstrate how the application is configured to allow the use of PIV credentials from other agencies.

If the application is required to provide authenticated access to Federal agencies and it does not accept a PIV, this is a finding."
V-6134,high,"The IAO will ensure default passwords are changed.
",Default passwords can easily be compromised by attackers allowing immediate access to the applications.,['IAIA-1'],SV-6134r1_rule,F-4426r1_fix,"Change default passwords. 
",C-3052r1_chk,"Run a password-cracking tool, if available, on a copy of each account database (there may be more than one in the application infrastructure). 
 
1) If the password-cracking tool is able to crack the password of a privileged user, this is a CAT I finding.  

2) If the password-cracking tool is able to crack the password of a non-privileged user, this is a CAT II finding.  
 
Manually attempt to authenticate with the published default password for that account, if such a default password exists.  
 
3) If any privileged built-in account uses a default password – no matter how complex – this is a CAT I finding.  
 
4) If a non-privileged account has a default password, this is a CAT II finding."
V-69511,medium,The applications must limit privileges to change the software resident within software libraries.,"If the application were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

This requirement applies to applications with software libraries that are accessible and configurable, as in the case of interpreted languages. Software libraries also include privileged programs which execute with escalated privileges. Only qualified and authorized individuals will be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.",None,SV-84133r1_rule,F-75685r1_fix,Configure the application OS file permissions to restrict access to software libraries and configure the application to restrict user access regarding software library update functionality to only authorized users or processes.,C-69929r1_chk,"Review the application documentation and interview the application administrator to identify the application architecture.

Identify application folders where application libraries are stored.

Review permissions of application folders and library files contained with the folders to ensure file permissions restrict access to authorized users or processes.

Access application configuration settings.

Examine settings for capability to update software libraries or extend application functionality via the application.

Review user roles and access rights within the application to determine if access to this capability is restricted to authorized users.

If file restrictions do not limit write access to library files and if the application does not restrict access to library update functionality, this is a finding."
V-69561,medium,The application must enforce password complexity by requiring that at least one numeric character be used.,"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.

Examples of situations where a user ID and password might be used include but are not limited to:

- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.

- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.

and

- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.

Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.

Password complexity is one factor of several that determine how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.",None,SV-84183r1_rule,F-75735r1_fix,Configure the application to require at least one numeric character in the password.,C-69979r1_chk,"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.

If the application does not use passwords, the requirement is not applicable.

Access the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.

When prompted to provide the password, attempt to create a password that does not have one numeric character.

If a password without at least one numeric character can be created, this is a finding."
V-26677,medium,The application must provide the capability to specify administrative users and grant them the right to change application security attributes pertaining to application data.,"Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.  

Security attributes are typically associated with internal data structures (e.g., records, buffers, files) within the application and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the organizational information security policy.

Organizations define the security attributes of their data (e.g., classified, FOUO, sensitive).

Changing security attributes within an application is usually performed by a person or persons who have been delegated the task and the associated responsibilities accorded to application administrative personnel.

Applications creating and/or assigning security attributes to data must have the flexibility to allow authorized staff to change these security attributes.
",None,SV-33849r1_rule,None,None,None,None
V-70161,medium,The application must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users).,"Lack of authentication and identification enables non-organizational users to gain access to the application or possibly other information systems and provides an opportunity for intruders to compromise resources within the application or information system.

Non-organizational users include all information system users other than organizational users which include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors and guest researchers).

Non-organizational users must be uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization when related to the use of anonymous access, such as accessing a web server.",None,SV-84783r1_rule,F-76397r1_fix,Configure the application to identify and authenticate all non-organizational users.,C-70637r1_chk,"Review the application documentation and interview the application administrator.

If the application does not host non-organizational users, this requirement is not applicable.

Review the application and verify authentication is enabled and required in order for users to access the application.

Review the application user base and determine if all user accounts are documented and assigned to a unique individual.

Review risk acceptance documentation to determine if there are specific accesses identified that do not require authentication.

If the application does not identify and authenticate non-organizational users and there is no risk acceptance documentation approving the exception, this is a finding."
V-70273,medium,The application must generate error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries.,"Only authorized personnel should be aware of errors and the details of the errors. Error messages are an indicator of an organization's operational state or can identify application components. Additionally, Personally Identifiable Information (PII) and operational information must not be revealed through error messages to unauthorized personnel or their designated representatives.

The structure and content of error messages must be carefully considered by the organization and development team. The extent to which the information system is able to identify and handle error conditions is guided by organizational policy and operational requirements.

Error messages should not include variable names, variable types, SQL strings, or source code. Errors that contain field names from the screen and a description of what should be in the field should not be considered a finding.",None,SV-84895r1_rule,F-76509r1_fix,"Configure the server to not send error messages containing system information or sensitive data to users.

Use generic error messages.",C-70749r1_chk,"Review the application documentation and interview the application administrator for details regarding how the application displays error messages.

Utilize the application as a non-privileged user and attempt to execute functionality that will generate error messages.

Review the error messages displayed to ensure no sensitive information is provided to end users.

If error messages are designed to provide users with just enough detail to pass along to support staff in order to aid in troubleshooting such as date, time, or other generic information, this is not a finding.

If variable names, SQL strings, system path information, or source or program code are displayed in error messages sent to non-privileged users, this is a finding."
V-69447,medium,The application must be configured to write application logs to a centralized log repository.,"Information stored in one location is vulnerable to accidental or incidental deletion or alteration.  In addition, attackers often manipulate logs to hide or obfuscate their activity.

Off-loading is a common process in information systems with limited audit storage capacity or when trying to assure log availability and integrity.

This requirement is meant to address space limitations and integrity issues that can be encountered when storing logs on the local server.

The goal of the requirement being to offload application logs to a separate server as quickly and efficiently as possible so as to mitigate these risks.",None,SV-84069r1_rule,F-75623r1_fix,Configure the application to utilize a centralized log repository and ensure the logs are off-loaded from the application system as quickly as possible.,C-69865r1_chk,"Review application documentation and interview application administrator.

Evaluate application log management processes and determine if the system is configured to utilize a centralized log management system for the hosting and management of application audit logs.

If the system is not configured to write the application logs to the centralized log management repository in an expeditious manner, this is a finding."
V-69343,high,The application must enforce the limit of three consecutive invalid logon attempts by a user during a 15 minute time period.,"By limiting the number of failed logon attempts, the risk of unauthorized system access via user password guessing, otherwise known as brute forcing, is reduced.

Limits are imposed by locking the account.

User notification when three failed logon attempts are exceeded is an operational consideration determined by the application owner. In some instances the operational situation may dictate that no notice is to be provided to the user when their account is locked. In other situations, the user may be notified their account is now locked. This decision is left to the application owner based upon their operational scenarios.",None,SV-83965r1_rule,F-75517r1_fix,Configure the application to enforce an account lock after 3 failed logon attempts occurring within a 15-minute window.,C-69755r1_chk,"All testing must be performed within a 15-minute window.

Log on to the application with a test user account.

Intentionally enter an incorrect user password or pin.

Repeat 2 times within 15 minutes for a total of three failed attempts.

Notification of a locked account may or may not be provided.

Using the correct user password or pin, attempt to logon a 4th time.

If the logon is successful upon the 4th attempt the account was not locked after the third failed attempt and this is a finding."
V-27094,medium,"The organization must analyze outbound communications traffic at selected interior points within the system (e.g., subnets, subsystems), as deemed necessary, to discover anomalies. ","Anomalies within the information system include, for example, large file transfers, long-time persistent connections, unusual protocols and ports in use, and attempted communications with suspected malicious external addresses.   

This is a requirement to analyze outbound traffic at selected interior points.  This does not apply to applications.",None,SV-34389r1_rule,None,None,None,None
V-57525,medium,The application server must require devices to re-authenticate when organization-defined circumstances or situations require re-authentication.,"Without re-authenticating devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.

In addition to the re-authentication requirements associated with session locks, organizations may require re-authentication of devices, including (but not limited to), the following other situations.

(i) When authenticators change; 
(ii) When roles change; 
(iii) When security categories of information systems change; 
(iv) After a fixed period of time; or 
(v) Periodically.

For distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of identification claims may be made by services separate from the services acting on those decisions. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.",None,SV-71801r2_rule,F-62593r1_fix,Configure the application server to require devices to re-authenticate when organization-defined circumstances or situations require re-authentication.,C-58233r1_chk,"Review the application server documentation and configuration to determine if the application server requires devices to re-authenticate when organization-defined circumstances or situations require re-authentication.

If the application server does not require a device to re-authenticate, this is a finding."
V-26976,medium,"To support audit review, analysis and reporting the application must integrate audit review, analysis, and reporting processes to support organizational processes for investigation and response to suspicious activities.","Successful incident response and auditing relies on timely, accurate system information and analysis in order to allow the organization to identify and respond to potential incidents in a proficient manner.  

Audit review, analysis and reporting are all activities related to the evaluation of system activity through the inspection and analysis of system log data. 

Some examples include but are not limited to:  organizational requirements to cooperate with legal counsel and/or auditors in order to provide reports on certain types of system activity or analyzing system logs to ascertain sources or causes of certain system activity.",None,SV-34264r1_rule,None,None,None,None
V-26889,medium,"Applications themselves, or the logging mechanism the application utilizes, must provide a warning when allocated audit record storage volume reaches an organization-defined percentage of maximum audit record storage capacity.","It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Audit processing failures include:  software/hardware errors, failures in the audit capturing mechanisms, and audit storage capacity being reached or exceeded. 

If audit log capacity were to be exceeded then events subsequently occurring will not be recorded. Organizations shall define a maximum allowable percentage of storage capacity serving as an alarming threshold (e.g., application has exceeded 80 % of log storage capacity allocated) at which time the application or the logging mechanism the application utilizes will provide a warning to the appropriate personnel. ",None,SV-34169r1_rule,None,None,None,None
V-69421,medium,The application must log application shutdown events.,"Forensics is a large part of security incident response.  Applications must provide a record of their actions so application events can be investigated post-event.  

Attackers may attempt to shut off the application logging capability to cover their activity while on the system.  Recording the shutdown event and the time it occurred in the application or  system logs helps to provide forensic evidence that aids in investigating the events.",None,SV-84043r1_rule,F-75597r1_fix,Configure the application or application server to record application shutdown events in the event logs.,C-69839r1_chk,"Review and monitor the application and system logs.

If an application shutdown event is not recorded in the logs, either initiate a shutdown event and review the logs after reestablising access or request backup copies of the application or system logs that indicate shutdown events are being recorded.

Alternatively, check for a setting within the application that controls application logging events and determine if application shutdown logging is configured.

If the application is not recording application shutdown events in either the application or system log, or if the application is not configured to record shutdown events, this is a finding."
V-69363,medium,The application must provide audit record generation capability for the creation of session IDs.,"Applications create session IDs at the onset of a user session in order to manage user access to the application and differentiate between different user sessions. It is important to log the creation of these session ID creation events for forensic purposes.

It is equally important to not log the session ID itself. Logging the session ID puts active sessions at risk if log data is compromised. Specific session ID information should be removed, masked, sanitized, or encrypted.

A hash value of the session ID that can be mapped to the session ID is an acceptable method for assuring active session protection when logging session ID information. Alternatively, logging protections that protect the logs and defend from unauthorized access are means to assure log confidentiality and protect session integrity.

Web based applications will often utilize an application server that creates, manages and logs user session IDs.  It is acceptable for the application to delegate this requirement to the application server.",None,SV-83985r1_rule,F-75537r1_fix,Enable session ID creation event auditing.,C-69777r1_chk,"Access the management interface for the application or configuration file and evaluate the log/audit management settings.

Determine if the setting that enables session ID creation event auditing is activated.

Create a new user session by logging in to the application.

Review the logs to ensure the session creation event was recorded.

If the application is not configured to log session ID creation events, or if no creation event was recorded, this is a finding.

If a web-based application delegates session ID creation to an application server, this is not a finding. 

If the application generates session ID creation event logs by default, and that behavior cannot be disabled, this is not a finding."
V-19696,medium,"The designer and IAO will ensure digital signatures exist on UDDI registry entries to verify the publisher.
","UDDI registries must provide digital signatures for verification of integrity of the publisher of each web service contained within the registry. Users publishing to the UDDI repository could potentially setup  multiple fraudulent web services without a digital signature associated with each web service.
",['DCSQ-1'],SV-21837r1_rule,F-23049r1_fix,Add digital signatures to UDDI registries.,C-24093r1_chk,"If the application does not utilize UDDI registries or if the application utilizes the DISA PEO-GES managed UDDI registry and the DISA PEO-GES registry employs processes/procedures that control user access for publishing to the UDDI registry, this check is not applicable.

Ask the application representative for the URL for the WSDL for all web services used in the application.  Download each WSDL entry using a web browser and verify each entry has been signed by a publisher certificate.    

1) If all WSDL entries have not been signed, it is a finding."
V-35319,medium,The application server must utilize encryption when using LDAP for authentication.,"Passwords need to be protected at all times, and encryption is the standard method for protecting passwords during transmission. 

Application servers have the capability to utilize LDAP directories for authentication. If LDAP connections are not protected during transmission, sensitive authentication credentials can be stolen. When the application server utilizes LDAP, the LDAP traffic must be encrypted.",None,SV-46606r3_rule,F-39865r2_fix,Configure the application server to encrypt LDAP traffic.,C-43689r2_chk,"Review application server documentation and configuration to determine if the application server enforces the requirement to encrypt LDAP traffic.

If the application server is not configured to meet this requirement, this is a finding."
V-69439,medium,The application must generate audit records containing the full-text recording of privileged commands or the individual identities of group account users.,"Reconstruction of harmful events or forensic analysis is not possible if audit records do not contain enough information.

Organizations consider limiting the additional audit information to only that information explicitly needed for specific audit requirements. The additional information required is dependent on the type of information (i.e., sensitivity of the data and the environment within which it resides). At a minimum, the organization must audit either full-text recording of privileged commands or the individual identities of group users, or both. The organization must maintain audit trails in sufficient detail to reconstruct events to determine the cause and impact of compromise. 

In addition, the application must have the capability to include organization-defined additional, more detailed information in the audit records for audit events.",None,SV-84061r1_rule,F-75615r1_fix,Configure the application to log the full text recording of privileged commands or the individual identities of group users.,C-69857r1_chk,"Review application documentation and interview application administrator. Identify audit log locations and review audit logs.

Access the system as a privileged user and execute privileged commands.

Review the application logs and ensure that the logs contain all details of the actions performed.  

If a privileged command was typed within the application that command text must be included in the logs. Authentication information provided as part of the text must NOT be logged, just the commands.

If an action was performed, such as activating a check box, that action must be logged.

Review group account users, review logs to determine if the individual users of group accounts are identified in the logs.

If the application does not log the full text recording of privileged commands or if the application does not identify and log the individuals associated with group accounts, this is a finding."
V-27057,medium,Applications must protect the integrity of transmitted information.,"Ensuring the integrity of transmitted information requires that applications take feasible measures to employ security during data transport.  Examples include but are not limited to SSL, TLS and IPSEC, and VPN. This requirement applies to communications across internal and external networks. If the organization is relying on a commercial service provider for transmission services as a commodity item rather than a fully dedicated service, it may be more difficult to obtain the necessary assurances regarding the implementation of needed security controls for transmission integrity. 

When it is infeasible or impractical to obtain the necessary security controls and assurances of control effectiveness through appropriate contracting vehicles, the organization either implements appropriate compensating security controls or explicitly accepts the additional risk. 

This is a network requirement regarding the use of dedicated circuits and does not apply to applications.",None,SV-34352r1_rule,None,None,None,None
V-26949,medium,Applications must limit privileges to change the software resident within software libraries (including privileged programs).,"When dealing with change control issues, it should be noted any changes to the hardware, software, and/or firmware components of the information system and/or application can potentially have significant effects on the overall security of the system. 

If the application were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

This requirement is contingent upon the language in which the application is programmed as many application architectures in use today incorporate their software libraries into and make them inseparable from their compiled distributions rendering them static and version dependant.  However, this requirement does apply to applications with software libraries accessible and configurable as in the case of interpreted languages.

Accordingly, only qualified and authorized individuals shall be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications. ",None,SV-34232r1_rule,None,None,None,None
V-16800,high,"The designer will ensure users’ accounts are locked after three consecutive unsuccessful logon attempts within one hour.
","If user accounts are not locked after a set number of unsuccessful logins, attackers can infinitely retry user password combinations providing immediate access to the application.","['ECLO-1', 'ECLO-2']",SV-17800r1_rule,F-17069r1_fix,"Lock user accounts after three consecutive unsuccessful logon attempts within one hour.
",C-17796r1_chk,"Ask the application representative to demonstrate the application locks a user account if a user enters a password incorrectly more than three times in a 60 minute period.

1) If the account is not disabled, it is a finding."
V-70369,medium,Application files must be cryptographically hashed prior to deploying to DoD operational networks.,"When application code and binaries are transferred from one environment to another, there is the potential for malware to be introduced into either the application code or even the application binaries themselves. Care must be taken to ensure that application code and binaries are validated for integrity prior to deployment into a production environment.

To ensure file integrity, application files and/or application packages are cryptographically hashed using a strong hashing algorithm. Comparing hashes after transferring the files makes it possible to detect changes in files that could indicate potential integrity issues with the application.

Currently, SHA256 is the DoD approved standard for cryptographic hash functions. DoD application developers must use SHA256 when creating cryptographic hashes; however, some non-DoD vendors might still use MD5 or SHA1 when generating a checksum hash for their application packages. It is important to use the same algorithms when validating the hash. If a non DoD vendor uses SHA1 when hashing their files, you must use SHA1 to validate the hash. Otherwise, the hashes will not match and a false positive indication of tampering will result.

Prior to release of the application receiving an ATO/IATO for deployment into a DoD operational network, the application must be validated for integrity to ensure no tampering of source code or binaries has occurred. Failure to validate the integrity of application code and/or application binaries prior to deploying an application into a production environment may compromise the operational network.",None,SV-84991r2_rule,F-76605r1_fix,"Developers/release managers create cryptographic hash values of application files and/or application packages prior to transitioning the application from test to a production environment. They protect cryptographic hash information so it cannot be altered and make a read copy of the hash information available to application Admins so they can validate application packages and files after they download the files.

Application Admins validate cryptographic hashes prior to deploying the application to production.",C-70823r2_chk,"Ask the application representative to demonstrate their cryptographic hash validation process or provide process documentation. The validation process will vary based upon the operating system used as there are numerous clients available that will display a file's cryptographic hash for validation purposes.

Linux operating systems include the ""sha256sum"" utility. For Linux systems using sha256sum command syntax is:  sha256sum [OPTION]... [FILE]...

Recent Windows PowerShell versions include the ""get-filehash"" PowerShell cmdlet. The default algorithm value used is SHA256.

Syntax is: 
Get-FileHash
   [-Path] <String[]>
   [-Algorithm <String>]
   [<CommonParameters>] 

A validation process involves obtaining the application files’ cryptographic hash value from the programs author or other authoritative source such as the application's website. A utility like the ""sha256sum"" utility is then run using the downloaded application file name as the argument. The output is the files' hash value. The two hash values are compared and if they match, then file integrity is ensured.

If the application being reviewed is a COTS product and the vendor used a SHA1 or MD5 algorithm to generate a hash value, this is not a finding.

If the application being reviewed is a COTS product and the vendor did not provide a hash value for validating the package, this is not a finding.

If the integrity of the application files/code is not validated prior to deployment to DoD operational networks, this is a finding."
V-6169,medium,"The Program Manager and Designer will ensure the use of new IPs, data services, and associated ports used by the application are submitted to the appropriate approving authority for that organization, which in turn are submitted through the DoD Ports, Protocols, and Services Management (DoD PPSM).  

","Failure to comply with DoD Ports, Protocols, and Services (PPS) Vulnerability Analysis and associated PPS mitigations may result in compromise of enclave boundary protections and/or functionality of the application.",['DCPP-1'],SV-6169r2_rule,F-4481r1_fix,"Ensure your Accreditation documentation lists all interfaces and the ports, protocols, and services used. Ensure that all ports, protocols, and services are used in accordance with the DoD PPSM.",C-2964r1_chk,"All application ports, protocols, and services needed for application operation need to be in compliance with the DoD Ports and Protocols guidance.  

Check (http://iase.disa.mil/ports/index.html) to ensure the ports, protocols, and services are in compliance with the PPS CAL.

Check all necessary ports and protocols needed for application operation (only those accessed from outside the local enclave) are checked against the DoD Ports and Protocols guidance to ensure compliance.
 
Identify the ports needed for the application:
• Look at System Security Plan/Accreditation documentation
• Ask System Administrator
• Go to Network Administrator Retina Scanner
• Go to Network Reviewer
• If a network scan is available, use it
• Use netstat/task manager
• Check /etc/services
 
1) If the application is not in compliance with DoD Ports and Protocols guidance, it is a finding."
V-21519,high,The Program Manager will ensure all products are supported by the vendor or the development team. ,"Unsupported software products should not be used because of the unknown potential vulnerabilities.

Any vulnerability associated with a DoD Information system or system enclave, the exploitation of which, by a risk factor, will directly and immediately result in loss of Confidentiality, Availability or Integrity of the system
associated data. 

Unsupported software where there is no documented acceptance of DAA risk. 
",['DCSQ-1'],SV-23731r1_rule,F-23084r1_fix,Remove or decommission all unsupported software products in the application.,C-27014r1_chk,"Ask the application representative for the design document. Review the design document for all software components.  Ask the application representative for proof that the application and all of its components are supported.  Examples of proof may include: design documentation that includes support information, support specific contract documentation, successful creation of vendor support tickets, web site toll free support phone numbers etcetera.""
If any of the software components are not supported by a vendor, it is a finding.  
"
V-57545,medium,The application server must use DoD- or CNSS-approved PKI Class 3 or Class 4 certificates.,Class 3 PKI certificates are used for servers and software signing rather than for identifying individuals. Class 4 certificates are used for business-to-business transactions. Utilizing unapproved certificates not issued or approved by DoD or CNS creates an integrity risk. The application server must utilize approved DoD or CNS Class 3 or Class 4 certificates for software signing and business-to-business transactions.,None,SV-71821r2_rule,F-62613r1_fix,Configure the application server to use DoD- or CNSS-approved Class 3 or Class 4 PKI certificates.,C-58253r1_chk,"Review the application server configuration to determine if the application server utilizes approved PKI Class 3 or Class 4 certificates.

If the application server is not configured to use approved DoD or CNS certificates, this is a finding."
V-70351,medium,A disaster recovery/continuity plan must exist in accordance with DoD policy based on the applications availability requirements.,"All applications must document disaster recovery/continuity  procedures to include business recovery plans, system contingency plans, facility disaster recovery plans, and plan acceptance.",None,SV-84973r1_rule,F-76587r1_fix,Create and maintain the disaster recovery/continuity plan.,C-70805r1_chk,"Review disaster recovery/continuity plans.

For high risk applications, verify the disaster plan exists and provides for the smooth transfer of all mission or business essential functions to an alternate site for the duration of an event with little or no loss of operational continuity.
 
For moderate risk applications, verify the disaster recovery/continuity plan exists and provides for the resumption of mission or business essential functions within 24 hours activation.

For low risk applications, verify the disaster recovery/continuity plan exists and provides for the partial resumption of mission or business essential functions within 5 days of activation.
 
If the disaster recovery/continuity plan does not exist or does not meet the severity level requirements, this is a finding."
V-70235,medium,Applications must prevent unauthorized and unintended information transfer via shared system resources.,"Preventing unauthorized information transfers mitigates the risk of information, including encrypted representations of information, produced by the actions of prior users/roles (or the actions of processes acting on behalf of prior users/roles) from being available to any current users/roles (or current processes) that obtain access to shared system resources (e.g., registers, main memory, hard disks) after those resources have been released back to information systems. The control of information in shared resources is also commonly referred to as object reuse and residual information protection.

This requirement generally applies to the design of an information technology product, but it can also apply to the configuration of particular information system components that are, or use, such products. This can be verified by acceptance/validation processes in DoD or other government agencies.

There may be shared resources with configurable protections (e.g., files on storage) that may be assessed on specific information system components.",None,SV-84857r1_rule,F-76471r1_fix, Configure or design the application to utilize a security control that will implement a boundary that will prevent unauthorized and unintended information transfer via shared system resources.,C-70711r1_chk,"Review the application documentation and interview the application administrator to identify if the application shares information resources via file sharing protocol or if the application includes configuration settings that provide access to data files on the hard drive.

Also determine if the application transfers data via shared system resources.

If the application shares system resources with other applications, verify that a security boundary exists which controls and prevents other applications, processes, or users from accessing application data. The control mechanism will vary based upon the resource that is being shared. Hard disk sharing could possibly utilize file permissions restrictions, whereas shared overall system resources could implement virtualization or containers that restrict access.

If the application does not prevent unauthorized and unintended information transfer via shared system resources, this is a finding."
V-35302,medium,The application server must authenticate users individually prior to using a group authenticator.,"To assure individual accountability and prevent unauthorized access, application server users (and any processes acting on behalf of application server users) must be individually identified and authenticated. 

A group authenticator is a generic account used by multiple individuals. Use of a group authenticator alone does not uniquely identify individual users. 

Application servers must ensure that individual users are authenticated prior to authenticating via role or group authentication. This is to ensure that there is non-repudiation for actions taken.",None,SV-46589r3_rule,F-39848r2_fix,Configure the application server to authenticate users individually prior to allowing any group-based authentication.,C-43671r2_chk,"Review the application server documentation and configuration to determine if the application server individually authenticates users prior to authenticating via a role or group.

Review application server logs to verify user accesses requiring authentication can be traced back to an individual account.

If the application server does not authenticate users on an individual basis, this is a finding."
V-30571,medium,Applications must enforce requirements regarding the connection of mobile devices to organizational information systems.,"Applications designed to manage the connection of mobile devices to information systems must be able to enforce organizational connectivity requirements or work in conjunction with enterprise tools designed to enforce policy requirements.  

Mobile devices include portable storage media (e.g., USB memory sticks, external hard disk drives) and portable computing and communications devices with information storage capability (e.g., notebook/laptop computers, personal digital assistants, cellular telephones, digital cameras, and audio recording devices).

Organizational connectivity requirements may include usage restrictions and implementation guidance related to mobile devices.  

For example, the organization may require the device be part of the configuration management environment or may require mandatory protective software be installed prior to connecting to the infrastructure (e.g., malicious code detection or a firewall).  

Scanning devices for malicious code may be required prior to connecting as well as updating virus protection software, scanning for critical software updates and patches, conducting primary operating system (and possibly other resident software) integrity checks, and disabling unnecessary hardware (e.g., wireless, infrared).

An example of information system functionality that may need to be disabled prior to connecting includes the capability for automatic execution of code such as AutoRun and AutoPlay.",None,SV-40300r1_rule,None,None,None,None
V-6144,medium,The designer will ensure the application provides a capability to limit the number of logon sessions per user and per application. ,"If a user account has been compromised, limiting the number of sessions will allow the administrator to detect if the account has been compromised by an indication that the maximum number of sessions has been exceeded.  Also, limiting the number of sessions affords an application the ability to prevent resources from becoming overloaded, and prevent a large scale DoS.",['ECLO-1'],SV-6144r1_rule,F-17073r1_fix,"Implement limits on:
• Number of sessions per user ID 
• Number of sessions per application 

Implement session limits.
",C-2958r1_chk,"Work with the application representative to identify application modules that involve user or process sessions (e.g., a user may initiate a session with a web server, which in turn maintains sessions with a backend database server).  For each session type, ask the application representative the limits on:
• Number of sessions per user ID 
• Number of sessions per application 
 
1) If the application representative states the session limits are absent for any of the session types, it is a finding.  

In many cases, session configuration parameters can be examined.  If configuration parameters are embedded within the application, they may not be available for review.  Any configuration settings that are not configurable should be manually tested. The preferred method depends on the application environment.  
 
2) If there is no evidence of a required session limit on one or more of the session types, it is a finding.  
 
The finding details should note specifically which types of sessions are left unbounded, and thus, more vulnerable to DoS attacks."
V-26820,medium,"In support of information flow requirements, applications must track problems associated with information transfer.","When an application transfers data, there is the chance an error or problem with the data transfer may occur.  Applications need to track failures and any problems encountered when performing data transfers so problems can be identified and remediated.  

Some potential issues with a failed or problematic data transfer include:  leaving sensitive data in a processing queue indefinitely, partial or incomplete data transfers, and corrupted data transfers.  Tracking problems with data transfers also serves to create a forensic record that can be retained to assist in investigations regarding the flow of application data.",None,SV-34070r1_rule,None,None,None,None
V-6153,high,"The designer will ensure the application removes authentication credentials on client computers after a session terminates. 
","Leaving authentication credentials stored at the client level allows potential access to session information that can be used by subsequent users of a shared workstation and could also be exported and used on other workstation providing immediate unauthorized access to the application.
","['IAIA-1', 'IAIA-2']",SV-6153r1_rule,F-17076r1_fix,"Modify the application to remove  authentication credentials on workstations after a session terminates. 
",C-3032r1_chk,"Persistent cookies are the primary means by which an application stores authentication information over more than one browser session.  If the application is a web-based application, verify that Internet Explorer (IE) is set to warn the user before accepting a cookie.  Logon to the application and perform several standard operations, noting if the application ever prompts the user to accept a cookie.  Log out, close the browser and check the /Windows/cookies, /Windows/profiles/xyz/cookies, and the /documents and settings/xyz/cookies directories (where xyz is replaced by the Windows user profile name).  If a cookie has been placed in either of these directories, open it (using Notepad or another text editor) and search for identification or authentication data that remain after to check for sensitive application data.  
 
1) If authentication credentials exist (e.g., a password), this is a CAT I finding.  
 
2) If identification information (e.g., user name, ID, or key properties) exists, but is not accompanied by authentication credentials such as a password, this is a CAT II finding. 
 
The application may use means other than cookies to store user information.  If the reviewer detects an alternative mechanism for storing I&A information locally, examine the credentials found.
 
3) If authentication data (e.g., a password) is found, this is a CAT I finding.
 
4) If identification information is found (e.g., user name, ID, or key properties) but is not accompanied by authentication credentials such as a password, this is a CAT II finding.
 
5) If the application will initiate additional sessions without requiring authentication after logging out of the application, this is a CAT I finding.

Web applications using autocomplete can be setup to store passwords and sensitive data.  Many operating systems centrally control the autocomplete feature and it should be disabled.  Workstations that do not have this feature disabled by default have the risk of storage of password information and sensitive information. Examples include public kiosks and home workstations connecting to the NIPRNet where this feature may be disabled.
 
View the html pages that contain password and sensitive information to determine if autocomplete feature has been turned off.

Example form html: 
<FORM AUTOCOMPLETE = ""off""> 
 
Autocompletes are explained further at the Microsoft website.
http://msdn.microsoft.com/en-us/library/ms533486(VS.85).aspx
 
6) If the application is configured to allow autocomplete for passwords,
this is a CAT I finding.
 
7) If the application is configured to allow for sensitive information fields, this is a CAT II finding."
V-57555,medium,The application server must protect the confidentiality and integrity of all information at rest.,"When data is written to digital media such as hard drives, mobile computers, external/removable hard drives, personal digital assistants, flash/thumb drives, etc., there is risk of data loss and data compromise.

Fewer protection measures are needed for media containing information determined by the organization to be in the public domain, to be publicly releasable, or to have limited or no adverse impact if accessed by other than authorized personnel. In these situations, it is assumed the physical access controls where the media resides provide adequate protection.

As part of a defense-in-depth strategy, data owners and DoD consider routinely encrypting information at rest on selected secondary storage devices. The employment of cryptography is at the discretion of the information owner/steward. The selection of the cryptographic mechanisms used is based upon maintaining the confidentiality and integrity of the information.

The strength of mechanisms is commensurate with the classification and sensitivity of the information.

The application server must directly provide, or provide access to, cryptographic libraries and functionality that allow applications to encrypt data when it is stored.",None,SV-71831r2_rule,F-62623r1_fix,Configure the application server to protect the confidentiality and integrity of all information at rest.,C-58263r1_chk,"Review the application server documentation and configuration to ensure the application server is protecting the confidentiality and integrity of all information at rest.

If the confidentiality and integrity of all information at rest is not protected, this is a finding."
V-27127,medium,The organization (or information system) must enforce explicit rules governing the installation of software by users.,"If provided the privilege, information system users have the ability to install software. This can create security related issues if the users install unapproved or insecurely written software. 

The organization shall identify what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree with regard to being potentially malicious is unknown or suspect).  

This is an OS requirement and does not apply to applications.",None,SV-34424r1_rule,None,None,None,None
V-30576,medium,The application must notify appropriate individuals when accounts are modified.,"Once an attacker establishes initial access to a system, they often attempt to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply modify or copy an existing account. 

Notification of account modification is one method and best practice for mitigating this risk. A comprehensive account management process will ensure that an audit trail which documents the modification of application user accounts and notifies administrators and/or application owners exists. Such a process greatly reduces the risk that accounts will be surreptitiously created or modified and provides logging that can be used for forensic purposes.  

To address the multitude of policy based access requirements, many application developers choose to integrate their applications with enterprise level authentication/access mechanisms that meet or exceed access control policy requirements.  Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality. 

Examples of enterprise level authentication/access mechanisms include but are not limited to Active Directory and LDAP. 

Applications must support the requirement to notify appropriate individuals when accounts are modified.",None,SV-40310r1_rule,None,None,None,None
V-69283,medium,The application must ensure each unique asserting party provides unique assertion ID references for each SAML assertion.,"SAML is a standard for exchanging authentication and authorization data between security domains. SAML uses security tokens containing assertions to pass information about a principal (usually an end user) between a SAML authority, (identity provider), and a SAML consumer, (service provider). SAML assertions are usually made about a subject, (user) represented by the <Subject> element. SAML assertion identifiers should be unique across a system implementation. Duplicate SAML assertion identifiers could lead to unauthorized access to a web service.",None,SV-83905r2_rule,F-75453r1_fix,Design and configure each SAML assertion authority to use unique assertion identifiers.,C-69691r1_chk,"Ask the application representative for the design document.

Review the design document for web services using SAML assertions.

If the application does not utilize SAML assertions, this check is not applicable.

Review the design document and verify SAML assertion identifiers are not reused by a single asserting party.

If the design document does not exist, or does not indicate SAML assertion identifiers which are unique for each asserting party, this is a finding."
V-57515,medium,The application server must accept Personal Identity Verification (PIV) credentials from other federal agencies to access the management interface.,"Personal Identity Verification (PIV) credentials are those credentials issued by federal agencies that conform to FIPS Publication 201 and supporting guidance documents. OMB Memorandum 11-11 requires federal agencies to continue implementing the requirements specified in HSPD-12 to enable agency-wide use of PIV credentials.  PIV credentials are only used in an unclassified environment.

Access may be denied to authorized users if federal agency PIV credentials are not accepted to access the management interface.",None,SV-71791r2_rule,F-62583r1_fix,Configure the application server to accept PIV credentials from other federal agencies to access the management interface.,C-58223r1_chk,"Review the application server documentation and configuration to determine if the application server accepts PIV credentials from other federal agencies to access the management interface.

If the application server does not accept other federal agency PIV credentials to access the management interface, this is a finding."
V-69475,medium,The application must provide a report generation capability that does not alter original content or time ordering of audit records.,"If the audit report generation capability alters the original content or time ordering of audit records, the integrity of the audit records is compromised, and the records are no longer usable for forensic analysis. Time ordering refers to the chronological organization of records based on time stamps. The degree of time stamp precision can affect this.

The report generation capability provided by the application can generate customizable reports.

This requirement is specific to applications with audit reduction capabilities; however, applications need to support on-demand audit review and analysis.",None,SV-84097r1_rule,F-75651r1_fix,Configure and design the application to not modify source logs when filtering events.,C-69893r1_chk,"Review the application documentation and interview the application administrator for details regarding audit reduction (log record event filtering).

Access the application with user rights sufficient to read and filter audit records.

Navigate the application user interface and select the application functionality that provides access and interface to audit records and audit reduction (event filtering).

If the application does not provide a report generation capability, the requirement is not applicable.

Examine the log files; take note of dates and times of events such as logon events.

Note: dates and times as well as the original content and any unique record identifiers.

Record the identifying information as well as the dates and times and content of the audit records.

Apply filters to reduce the amount of audit records displayed to just the logon events for the day.

Review the records and ensure nothing in the records has changed. Once validated, clear the filter and review the records again to validate nothing changed within the audit record itself.

If the application of event filters modifies the original log records, this is a finding."
V-69379,medium,The application must record the username or user ID of the user associated with the event.,"When users conduct activity within an application, that user’s identity must be recorded in the audit log. Failing to record the identity of the user responsible for the activity within the application is detrimental to forensic analysis.",None,SV-84001r1_rule,F-75553r1_fix,Configure the application to record the user ID of the user responsible for the log event entry.,C-69793r1_chk,"Review and monitor the application logs.

Connect to the application and perform application activity that is allowed by the user such as accessing data or running reports.

Observe if the log includes an entry to indicate the user ID of the user that conducted the activity.

If the user ID is not recorded along with the event in the event log, this is a finding."
V-69537,medium,The application must use multifactor (Alt. Token) authentication for local access to privileged accounts.,"Multifactor authentication requires using two or more factors to achieve authentication and access.

Factors include:
(i) something a user knows (e.g., password/PIN);
(ii) something a user has (e.g., cryptographic identification device, token); or
(iii) something a user is (e.g., biometric).

Multifactor authentication decreases the attack surface by virtue of the fact that attackers must obtain two factors, a physical token or a biometric and a PIN, in order to authenticate.  It is not enough to simply steal a user's password to obtain access.  

A privileged account is defined as an information system account with authorizations of a privileged user.  

An Alt. Token is a separate CAC or token used specifically for administrative account access and serves as a separate identifier much like a separate user account.

Local access is defined as access to an organizational information system by a user (or process acting on behalf of a user) communicating through a direct connection without the use of a network.",None,SV-84159r1_rule,F-75711r1_fix,Configure the application to only use Alt. Tokens when locally accessing privileged application accounts.,C-69955r1_chk,"Review the application documentation and interview the application administrator to identify application access methods.

Ask the application administrator to present both their primary CAC and their Alt. Token.  Ask the application administrator to log on to the application using the local application console.  

Attempt to use both the CAC and Alt. Tokens to authenticate to the application. 

Validate the application requests the user to input their CAC PIN and that they cannot perform administrative functions.

Have user logoff and reauthenticate with their Alt. Token and that they can perform administrative functions.

If the application allows administrative access to the application without requiring an Alt. Token, this is a finding."
V-27174,medium,"Applications designed to address malware issues and/or enforce policy pertaining to organizational use of mobile code must take corrective actions, when unauthorized mobile code is identified.","Decisions regarding the employment of mobile code within organizational information systems are based on the potential for the code to cause damage to the system if used maliciously. 

Mobile code technologies include:  Java, JavaScript, ActiveX, PDF, Postscript, Shockwave movies, Flash animations, and VBScript. Usage restrictions and implementation guidance apply to both the selection and use of mobile code installed on organizational servers and mobile code downloaded and executed on individual workstations. 

Policy and procedures related to mobile code, address preventing the development, acquisition, or introduction of unacceptable mobile code within the information system. ",None,SV-34473r1_rule,None,None,None,None
V-27055,medium,The information system must monitor and control communications at the external boundary of the information system and at key internal boundaries within the system.,"Restricting external web traffic only to organizational web servers within managed interfaces and prohibiting external traffic that appears to be spoofing an internal address as the source are examples of restricting and prohibiting communications.   The same can be said for the monitoring of the traffic.

The information system must monitor and control communications at the external boundary of the information system and at key internal boundaries within the system.

This is a boundary control requirement to use firewalls and proxy servers to control communications and is not an application requirement.",None,SV-34350r1_rule,None,None,None,None
V-70373,low,"Test procedures must be created and at least annually executed to ensure system initialization, shutdown, and aborts are configured to verify the system remains in a secure state.","Secure state assurance cannot be accomplished without testing the system state at least annually to ensure the system remains in a secure state upon initialization, shutdown, and aborts.",None,SV-84995r1_rule,F-76609r1_fix,Create test procedures to test the security state of the application and exercise test procedures annually.,C-70827r1_chk,"Review the process documentation and interview the admin staff.

Identify if testing procedures exist and if they include annual testing to ensure the application remains in a secure state on initialization, shutdown, and aborts.

Checks should include at a minimum, attempts to access the application and application configuration settings without credentials or with improper credentials both locally and remotely.

Dates should be noted as to the last date of testing.

If annual testing procedures do not exist, or if administrators are unable to provide testing dates that indicate the tests were conducted within the last year, this is a finding."
V-57567,medium,The application server must identify potentially security-relevant error conditions.,"The structure and content of error messages need to be carefully considered by the organization and development team.  Any application providing too much information in error logs and in administrative messages to the screen risks compromising the data and security of the application and system.  The extent to which the application server is able to identify and handle error conditions is guided by organizational policy and operational requirements. Adequate logging levels and system performance capabilities need to be balanced with data protection requirements.

The structure and content of error messages needs to be carefully considered by the organization and development team.

Application servers must have the capability to log at various levels which can provide log entries for potential security-related error events.

An example is the capability for the application server to assign a criticality level to a failed logon attempt error message, a security-related error message being of a higher criticality.",None,SV-71843r2_rule,F-62635r1_fix,Configure the application server to identify potentially security-relevant error conditions on the server.,C-58275r1_chk,"Review the application server configuration to determine if the system identifies potentially security-relevant error conditions on the server.

If this function is not performed, this is a finding."
V-16789,medium,The designer will ensure private keys are accessible only to administrative users.,"If private keys are accessible to non-administrative users, these users could potentially read and use the private keys to unencrypt stored or transmitted sensitive data used by the application.  ",['ECCD-1'],SV-17789r1_rule,F-17005r1_fix,Remove excessive permissions on private keys.,C-17775r1_chk,"Interview the application representative and determine the keys resident on application servers (including X.509 certificates).  For the purposes of this checklist, no more than 20 keys need to be examined.  Based on the number of keys in the inventory, determine if all of the keys will be examined, or just a sample.  If a sample will be selected, choose keys of a variety of types (certificate of a certificate authority, certificate of a user, private key of a user, etc.). No user or process should be able to write to any file containing keys.  If keys need to be replaced or added, permissions can be changed temporarily for those events.  

1) If any privileged or non-privileged user or application process has write permissions to a file containing cryptographic keys, it is a finding.

Determine if when keys are read, that transaction occurs under the security context of a user account, or of the application process (which would perform the transaction on behalf of the user).  Ensure that read permissions are granted only to the account(s) that must know the key to make the application function.  If any user groups are granted read permissions, check that the members of these groups contain only the users that require knowledge of the key.  

2) If any user accounts have read (or greater) permissions to a private or secret key, which do not require such permissions, it is a finding.  

3) If any group with read permissions contains a user that does not require such permissions, it is a finding. "
V-16842,medium,"The IAO will report all suspected violations of IA policies in accordance with DoD information system IA procedures.
","All potential sources are monitored for suspected violations of IA policies.  If there are not policies regarding the reporting of IA violations, some IA violations may not be tracked or dealt with in a proper manner.
",['ECAT-2'],SV-17842r1_rule,F-17164r1_fix,Establish an IA policy for reporting violations.,C-17849r1_chk,"Interview the application representative and review the SOPs to ensure that violations of IA policies are analyzed and reported.
 
1) If there is no policy reporting IA violations, it is a finding."
V-70361,medium,The application must use encryption to implement key exchange and authenticate endpoints prior to establishing a communication channel for key exchange.,"If the application does not use encryption and authenticate endpoints prior to establishing a communication channel and prior to transmitting encryption keys, these keys may be intercepted, and could be used to decrypt the traffic of the current session, leading to potential loss or compromise of DoD data.",None,SV-84983r1_rule,F-76597r1_fix,Use encryption for key exchange.,C-70815r1_chk,"If the application does not implement key exchange, this check is not applicable.

Identify all application or supporting infrastructure features using key exchange.

Verify the application is using FIPS-140-2 validated cryptographic modules for encryption of keys during key exchange.

If the application does not implement encryption for key exchange, this is a finding."
V-26971,medium,The application must support and must not impede organizational requirements to conduct backups of information system documentation including security-related documentation per organization-defined frequency. ,"Information system backup is a critical step in maintaining data assurance and availability. 

Information system and security related documentation contains information pertaining to system configuration and security settings.  

Backups shall be consistent with organizational recovery time and recovery point objectives. ",None,SV-34258r1_rule,None,None,None,None
V-26894,medium,The application must validate the binding of the reviewer’s identity to the information at the transfer/release point prior to release/transfer from one security domain to another security domain.,"This non-repudiation control enhancement is intended to mitigate the risk that information could be modified between review and transfer/release particularly when transfer is occurring between security domains.  

In those instances where the application is transferring data intended for release across security domains, the application must validate the binding of the reviewer’s identity to the information at the transfer/release point prior to release/transfer from one security domain to another security domain.",None,SV-34174r1_rule,None,None,None,None
V-26775,medium,Applications must uniquely identify source domains for information transfer.,"The application enforces approved authorizations for controlling the flow of information within the system and between interconnected systems in accordance with applicable policy. 

Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

Specific examples of flow control enforcement can be found in boundary protection devices (e.g., proxies, gateways, guards, encrypted tunnels, firewalls, and routers) employing rule sets or establish configuration settings restricting information system services, provide a packet-filtering capability based on header information, or message-filtering capability based on content (e.g., using key word searches or document characteristics). 

Attribution, (e.g., the ability to attribute actions to certain individuals) is a critical component of a security concept of operations. The ability to identify source and destination points for information flowing in an information system, allows forensic reconstruction of events when required, and increases policy compliance by attributing policy violations to specific organizations/individuals.  ",None,SV-34025r1_rule,None,None,None,None
V-26776,medium,Applications must uniquely authenticate source domains for information transfer.,"The information system enforces approved authorizations for controlling the flow of information within the system and between interconnected systems in accordance with applicable policy. 

Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

Specific examples of flow control enforcement can be found in boundary protection devices (e.g., proxies, gateways, guards, encrypted tunnels, firewalls, and routers) employing rule sets or establish configuration settings restricting information system services, provide a packet-filtering capability based on header information, or message-filtering capability based on content (e.g., using key word searches or document characteristics). 

Attribution, (e.g., the ability to attribute actions to certain individuals) is a critical component of a security concept of operations. The ability to identify source and destination points for information flowing in an information system, allows forensic reconstruction of events when required, and increases policy compliance by attributing policy violations to specific organizations/individuals.  ",None,SV-34026r1_rule,None,None,None,None
V-16833,medium,"The IAO will ensure if an application is designated critical, the application is not hosted on a general purpose machine.
","Critical applications should not be hosted on a multi-purpose server with other applications. Applications that share resources are susceptible to the other shared application security defects.  Even if the critical application is designed and deployed securely, an application that is not designed and deployed securely, can cause resource issues and possibly crash effecting the critical application. 
",['DCSQ-1'],SV-17833r1_rule,F-17150r1_fix,Deploy mission critical (MAC I) applications on servers that are not shared by other applications.,C-17839r1_chk,"Ask the application representative to review the servers where the application is deployed.  Also, ask what other applications are deployed on those servers.   

1) If a mission critical (MAC I) application is deployed on the same server as other applications, it is a finding."
V-70411,medium,Production database exports must have database administration credentials and sensitive data removed before releasing the export.,"Production database exports are often used to populate development databases. Test and development environments do not typically have the same rigid security protections that production environments do. When production data is used in test and development, the production database exports will need to be scrubbed to prevent information like passwords and other sensitive data from becoming available to development and test staff that may not have a need to know. Sensitive data should not be included in database exports because of classification, privacy, and other types of data protection requirement issues. Not all application developers have need-to-know sensitive information such as HIPAA data, Privacy Act Data, production admin passwords or classified data.",None,SV-85033r1_rule,F-76647r1_fix,Remove sensitive data from production database exports.,C-70865r1_chk,"Review the application documentation and identify the existence of databases within the application architecture.

Ask the application admin to identify when data exports from this database are imported to test or development databases.
 
If no data is exported to test or development databases, this check is not applicable.

If there are such data exports, ask if the production database includes sensitive data identified by the data owner as sensitive such as passwords, financial, personnel, personal, HIPAA, Privacy Act, or classified data is included.

If any database exports include sensitive data and that data is not sanitized or removed prior to or immediately after import to the development database, this is a finding."
V-6131,medium,"The designer will ensure the application prevents the creation of duplicate accounts.
","Duplicate user accounts can create a situation where multiple users will  be mapped to a single account.  These duplicate user accounts may cause users to assume other users roles and privilege escalation. If user IDs are not unique and individual, user activity may not be accurately audited and unauthorized activity may not be seen by the audit system.   ",['IAIA-1'],SV-6131r1_rule,F-17029r1_fix,Remove duplicate user accounts.,C-2945r1_chk,"If the user accounts used in the application are only operating system or database accounts, this check is Not Applicable.
 
Identify duplicate userids.  If these are not available, sort the list by the user name and, if applicable, associated ID number so that duplicates will be contiguous and thus easier to locate. 
 
1) If any duplicates user accounts are discovered, it is a finding.  
 
The finding details should specify the duplicates by name, unless they are too numerous to document, in which case a numerical count of the IDs is more appropriate."
V-26904,medium,The application must initiate session auditing upon start up.,"Session auditing activities are developed, integrated, and used in consultation with legal counsel in accordance with applicable federal laws, Executive Orders, directives, policies, or regulations. ",None,SV-34184r1_rule,None,None,None,None
V-26967,medium,"The application must reject or delay, as defined by the organization, network traffic generated above configurable traffic volume thresholds.","It is critical when a system is at risk of failing to process audit logs as required; actions are automatically taken to mitigate the failure or risk of failure. 

One method used to thwart the auditing system is for an attacker to attempt to overwhelm the auditing system with large amounts of irrelevant data.  The end result being audit logs that are either overwritten and activity thereby erased or disk space that is exhausted and any future activity is no longer logged. 

In many system configurations, the disk space allocated to the auditing system is separate from the disks allocated for the operating system; therefore, this may not result in a system outage.",None,SV-34252r1_rule,None,None,None,None
V-26774,medium,Applications must provide the ability to enforce security policies regarding information on interconnected systems. ,"The application enforces approved authorizations for controlling the flow of information within the system and between interconnected systems in accordance with applicable policy. 

Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

Transferring information between interconnected information systems of differing security policies introduces risk that such transfers violate one or more policies. While security policy violations may not be absolutely prohibited, policy guidance from information owners/stewards is implemented at the policy enforcement point between the interconnected systems. Specific architectural solutions are mandated, when required, to reduce the potential for undiscovered vulnerabilities. 

Architectural solutions include: (i) prohibiting information transfers between interconnected systems (i.e., implementing access only, one way transfer mechanisms); (ii) employing hardware mechanisms to enforce unitary information flow directions; and (iii) implementing fully tested, re-grading mechanisms to reassign security attributes and associated security labels. ",None,SV-34024r1_rule,None,None,None,None
V-16785,high,"The designer will ensure the application supports detection and/or prevention of communication session hijacking. 
","Session tokens can be compromised by various methods. Using predictable session tokens can allow an attacker to hijack a session in progress. Session sniffing can be used to capture a valid session token or session id, and the attacker uses this session information to gain immediate unauthorized access to the server which is a loss of confidentially and potentially a loss of integrity. Also, the Man-in-the-Middle (MITM) attack can be accomplished over an TLS connection with a session in progress.

Any vulnerability associated with a DoD Information system or system enclave, the exploitation of which, by a risk factor, will directly and immediately result in loss of Confidentiality, Availability or Integrity of the system
associated data.
",['ECTM-2'],SV-17785r1_rule,F-16991r1_fix,Use TLS encryption to protect session information. Do not use predicable session tokens. Implement protection from client side attacks.,C-17769r1_chk,"Ask the application representative for the threat model. Review the threat model for threats regarding session hijacking.  Review the threat model for common session hijacking attacks.

Examples of session hijacking vulnerabilities can be obtained from the OWASP website.

- Predictable session token
- Session sniffing
- Client-side attacks addressed in APP3580
- MITM attack 
- Man-in-the-browser attack 

1) If the threat model documentation does not address predictable session tokens and provide details regarding the countermeasures taken within the application to mitigate this risk, or if the application representative cannot demonstrate how this risk is mitigated within the application itself, this is a CAT I finding.

- Application should utilize a random method of generating session tokens so as to avoid predictable patterns or sequential numbering of session token values. Session identifiers should also utilize the largest character set available to assist randomization.
- Application should expire and destroy session identifiers upon logout.
- Session identifiers should never be logged.
 
2) If the threat model documentation does not address session sniffing and provide details regarding the countermeasures taken within the application to mitigate this risk, or if the application representative cannot demonstrate how the risk is mitigated within the application itself, this is a CAT I finding.

- Application should set the secure flag when generating cookies that store or transmit session identifiers to ensure values are transmitted via SSL.

If the application utilizes URLs with embedded session ids, these URLs can be forwarded in e-mails and e-mail recipients gain access to a system without authentication.

Example URL with embedded session id:
https://10.10.10.10:443/login.do;jsessionid=F2EE8C97B24635C9995A9D08E69D7B44 
 
3) If URLs containing embedded session ids can be forwarded and used to gain access to the application without authentication, this is a CAT I finding.

4) If the threat model documentation does not address MITM attack, this is a CAT II finding."
V-16784,medium,The designer will ensure the user interface services are physically or logically separated from data storage and management services.,"If user interface services are compromised, this may lead to the compromise of data storage and management services if they are not logically or physically separated.",['DCPA-1'],SV-17784r1_rule,F-16989r1_fix,Separate interface services from data storage and management services.,C-17768r1_chk,"Interview the application representative to determine if logical separation exists between application components within the application. Review locations of the components of the application such as web server, database server, and application server.  A separate machine is not required but is recommended.

Separation may be accomplished through the use of different computers, different CPUs, different instances of the operating system, different network addresses, and combinations of these methods, or other methods, as appropriate.

1) If the application components are not separated in the application, this is a finding."
V-19708,medium,"The designer will ensure the application is compliant with IPv6 multicast addressing and features an IPv6 network configuration options as defined in RFC 4038.
","If the application has not been updated to IPv6 multicast features, there is a possibility the application will not execute properly and as a result, a denial of service could occur.
",['DCSQ-1'],SV-21849r1_rule,F-23066r1_fix,Design the application to be compliant with IPv6 multicast addressing and features an IPv6 network configuration options as defined in RFC 4038.,C-24105r1_chk,"Ask the application representative for the design document. Review the design document for application services supporting IPv6.

Verify configuration options for the application for IPv6 addresses.

1) If the application has not been upgraded to support IPv6 addresses, it is a finding.

Verify configuration options for the application for IPv6 multicasting.

2) If the application has not been upgraded to support IPv6 multicasting, it is a finding.
"
V-70419,low,The application must provide notifications or alerts when product update and security related patches are available.,"An application vulnerability management and update process must be in place to notify and provide users and administrators with a means of obtaining security patches and updates for the application.

An important part of the maintenance phase of an application is managing vulnerabilities for updated versions of the application after the application is released.  When a security flaw is discovered in an application deployed in a production environment, notification to the user community must take place as quickly as possible. 

This notification should be planned for in the design phase of the application. This notification should be a warning of any potential risks to the application or data. A notification mechanism will be established to notify users of the vulnerability and the potential risks, the availability of a solution, and/or potential mitigations reducing risks to the application.",None,SV-85041r1_rule,F-76655r1_fix,"Provide a distribution mechanism for obtaining updates to the application.

Include a description of the issue, a summary of risk as well as potential mitigations and how to obtain the update.",C-70873r1_chk,"Review the components of the application.  Interview the application administrator.

Have the application administrator demonstrate the application notification process that occurs when a security patch or product update is available.

The process must include a brief description of the issue and any potential risks related to the issue.

The process must also include information regarding the availability of the patch or update and how it can be obtained as well as any potential mitigations that can be utilized in the interim.

If there is no application security patch or update notification process, this is a finding.

If the application notification process does not include a brief description, information on risks, how to obtain the patch or update and any potential mitigations, this is a finding."
V-16786,medium,"The designer will ensure the application installs with unnecessary functionality disabled by default.
","If functionality is enabled that is not required for operation of the application, this functionality may be exploited without knowledge because the functionality is not required by anyone.",['DCSD-1'],SV-17786r1_rule,F-16993r1_fix,Remove or disable unnecessary functionality.,C-17771r1_chk,"Ask the application representative to review the installation guide to determine what functionality is installed and enabled by default on installation of the application. 

Examples may include the following:
Functions that send information back to the vendor.
E-mail functions enabled when not required for functionality. 
 
1) If the application installs with functionality which is unnecessary and enabled by default, it is a finding."
V-69445,medium,The application must off-load audit records onto a different system or media than the system being audited.,"Information stored in one location is vulnerable to accidental or incidental deletion or alteration.  In addition, attackers often manipulate logs to hide or obfuscate their activity.

The goal is to off-load application logs to a separate server as quickly and efficiently as possible so as to mitigate these risks.  

A centralized logging solution offering applications an enterprise designed and managed logging capability which is the desired solution.

However, when a centralized logging solution is not an option due to the operational environment or other situations where the risk has been officially recognized and accepted, off-loading is a common process utilized to address this type of scenario.",None,SV-84067r1_rule,F-75621r1_fix,Configure the application to off-load audit records onto a different system as per approved schedule.,C-69863r1_chk,"Review application documentation and interview application administrator.  Identify log functionality and locations of log files.  Obtain risk acceptance documentation and task scheduling information.

If the application is configured to utilize a centralized logging solution, this requirement is not applicable.

Evaluate log management processes and determine if there are automated tasks that move the logs off of the system hosting the application.   

Verify automated tasks are performed on an ISSO approved schedule (hourly, daily etc.).  Automation can be via scripting, log management oriented tools or other automated means.

Review risk acceptance documentation for not utilizing a centralized logging solution.

If the logs are not automatically moved off the system as per approved schedule, or if there is no formal risk acceptance documentation, this is a finding."
V-27130,medium,The application must establish a trusted communications path between the user and organization-defined security functions within the information system.,"The application user interface must provide an unspoofable and faithful communication channel between the user and any entity trusted to manipulate authorities on the user's behalf. 

A trusted path shall be employed for high-confidence connections between the security functions of the information system and the user (e.g., for login). ",None,SV-34428r1_rule,None,None,None,None
V-27146,medium,Applications must use internal system clocks to generate time stamps for audit records.,"Determining the correct time a particular event occurred on a system is critical when conducting forensic analysis and investigating system events. 

Time stamps generated by the information system shall include both date and time. The time may be expressed in Coordinated Universal Time (UTC), a modern continuation of Greenwich Mean Time (GMT), or local time with an offset from UTC.",None,SV-34445r1_rule,None,None,None,None
V-30572,medium,The application must disable network access by unauthorized components/devices or notify designated organizational officials.,"Maintaining system and network integrity requires all systems on the network are identified and accounted for.  Without an accurate accounting of systems utilizing the network, the opportunity exists for the introduction of rogue systems.  The significance of this manner of security compromise increases exponentially over time and could become a persistent threat.  Therefore, organizations must employ automated mechanisms to detect the addition unauthorized devices. 

Information deemed to be necessary by the organization to achieve effective property accountability can include, for example, hardware inventory specifications (manufacturer, type, model, serial number, physical location), software license information, information system/component owner, and for a networked component/device, the machine name and network address. 

The monitoring for unauthorized components/devices on information system networks may be accomplished on an ongoing basis or by the periodic scanning of organizational networks for that purpose. Automated mechanisms can be implemented within the information system and/or in another separate information system or device.

Applications that are designed as systems configuration management solutions or other solutions developed specifically to fill the role of identifying or managing systems in the enterprise must be able to either disable the identified device or notify the appropriate personnel when new systems have been introduced into the environment.  ",None,SV-40301r1_rule,None,None,None,None
V-57547,medium,The application server must identify prohibited mobile code.,"Mobile code is defined as software modules obtained from remote systems, transferred across a network, and then downloaded and executed on a local system without explicit installation or execution by the recipient.

Mobile code technologies include: Java, JavaScript, ActiveX, PDF, Postscript, Shockwave movies, Flash animations, and VBScript. Usage restrictions and implementation guidance apply to both the selection and use of mobile code installed on organizational servers and mobile code downloaded and executed on individual workstations.

Application servers must meet policy requirements regarding the deployment and/or use of mobile code. This includes digitally signing applets in order to provide a means for the client to establish application authenticity and prohibit unauthorized code from being used.",None,SV-71823r2_rule,F-62615r1_fix,Configure the application server to identify prohibited mobile code.,C-58255r1_chk,"Review the application server configuration to determine if the application server is configured to identify prohibited mobile code.

If the application server is not configured to identify prohibited mobile code, this is a finding."
V-69381,medium,The application must generate audit records when successful/unsuccessful attempts to access privileges occur.,"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Audit records can be generated from various components within the information system (e.g., module or policy filter).

When a user is granted access or rights to application features and function not afforded to an ordinary user, they have been granted access to privilege and that action must be logged.",None,SV-84003r1_rule,F-75555r1_fix,Configure the application to audit successful and unsuccessful attempts to grant privileges.,C-69795r1_chk,"Review the application documentation and interview the application admin to identify application management interfaces and features.

Access the application management utility and create a test user account or use the account of a regular unprivileged user who is cooperating with the testing.

Access and open the auditing logs.

Using an account with the appropriate privileges, grant the user a privilege they previously did not have.

Attempt to grant privileges in a manner that will cause a failure event such as granting privileges to a non-existent user or attempting to grant privileges with an account that doesn't have the rights to do so.

Review the application logs and ensure both events were captured in the logs. The event data should include the user’s identity and the privilege that was granted and the privilege that failed to be granted.

If the application does not log when successful and unsuccessful attempts to grant privilege occur, this is a finding."
V-70255,high,The application must not store sensitive information in hidden fields.,"Hidden fields allow developers to process application data without having to display it on the screen.  Using hidden fields to pass data in forms is a common practice among web applications and by itself is not a security risk.  

However, hidden fields are not secure and can be easily manipulated by users.  Information requiring confidentiality or integrity protections must not be placed in a hidden field.   If data that is sensitive must be stored in a hidden field, it must be encrypted.

Furthermore, hidden fields used to control access decisions can lead to a complete compromise of access control mechanisms allowing immediate compromise of the user's application session.",None,SV-84877r1_rule,F-76491r1_fix,"Design and configure the application to not store sensitive information in hidden fields.  

Encrypt sensitive information stored in hidden fields using DoD-approved encryption and use server side session management techniques for user session management.",C-70731r1_chk,"Interview application administrator and review application documentation to identify and familiarize with the application features and functions.

Request most recent code review and vulnerability scan results.  Review test configuration to ensure testing for hidden fields was conducted.  Review test results for incidents of hidden data fields.  

Examine identified hidden fields and determine what type of data is stored in the hidden fields.

If the data stored in the hidden fields are determined to be authentication or session related data, or if the code review or vulnerability scan results are not available and configured to test for hidden fields, this is a finding."
V-26688,medium,Applications must support the capability to disable network protocols deemed by the organization to be nonsecure except for explicitly identified components in support of specific operational requirements.,"This control is related to remote access but more specifically to the networking protocols allowing systems to communicate.  Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.  

Some networking protocols allowing remote access may not meet security requirements to protect data and components. Bluetooth and peer-to-peer networking are examples of less than secure networking protocols.  

The DoD Ports, Protocols, and Services Management (PPSM) program provides implementation guidance on the use of IP protocols and application and data services traversing the DoD Networks in a manner supporting net-centric operations.  

Applications implementing or utilizing remote access network protocols need to ensure the application is developed and implemented in accordance with the PPSM requirements.  In situations where it has been determined that specific operational requirements outweigh the risks of enabling an insecure network protocol, the organization may pursue a risk acceptance.",None,SV-33911r1_rule,None,None,None,None
V-69377,medium,The application must provide audit record generation capability for connecting system IP addresses.,"Without the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Audit records can be generated from various components within the application (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.

The IP addresses of remote systems that connect to the application are an important aspect of identifying the sources of application activity. Recording these IP addresses in the application logs provides forensic evidence and aids in investigating and identifying sources of malicious behavior related to security events.",None,SV-83999r1_rule,F-75551r1_fix,Configure the application or application server to log all connecting IP address information,C-69791r1_chk,"Review the application documentation and interview the application administrator to identify where audit logs are stored.

Review audit logs and determine if the IP address information of systems that connect to the application is kept in the logs.

If connecting IP addresses are not seen in the logs, connect to the application remotely and review the logs to determine if the connection was logged.

If the IP addresses of the systems that connect to the application are not recorded in the logs, this is a finding."
V-27088,medium,"Applications providing malicious code protection must support organizational requirements to address the receipt of false positives during malicious code detection, eradication efforts, and the resulting potential impact on the availability of the information system. ","In order to minimize potential negative impact to the organization that can be caused by malicious code, it is imperative that malicious code is identified and eradicated. Malicious code includes, viruses, worms, Trojan horses, and Spyware.  Applications providing this capability must have an ability to address the issue of false alerts.  False alerts can overwhelm reporting and administrative interfaces making it difficult to identify the true threat.  A filtering capability that serves to identify and remove false positives is often employed to address this issue.
",None,SV-34383r1_rule,None,None,None,None
V-27053,medium,"Proxy applications must support logging individual Transmission Control Protocol (TCP) sessions and blocking specific Uniform Resource Locators (URLs), domain names, and Internet Protocol (IP) addresses. Proxy applications must also be configurable with organization-defined lists of authorized and unauthorized websites.","External networks are networks outside the control of the organization. Proxy servers support logging individual Transmission Control Protocol (TCP) sessions and blocking specific Uniform Resource Locators (URLs), domain names, and Internet Protocol (IP) addresses. Proxy servers are also configurable with organization-defined lists of authorized and unauthorized websites.",None,SV-34348r1_rule,None,None,None,None
V-70417,low,"At least one application administrator must be registered to receive update notifications, or security alerts, when automated alerts are available.","Administrators should register for updates to all COTS and custom-developed software, so when security flaws are identified, they can be tracked for testing and updates of the application can be applied.

Admin personnel should be registered to receive updates to all components of the application, such as Web Server, Application Servers, and Database Servers. Also, if update notifications are provided for any custom-developed software, libraries or third-party tools, deployment personnel must also register for these updates.",None,SV-85039r1_rule,F-76653r1_fix,Register administrators to receive update notifications so they can patch and update applications and application components.,C-70871r1_chk,"Review the components of the application.

Ask the application representative to demonstrate deployment personnel are registered to receive notifications for update notification for all of the application components including custom-developed software, libraries and third-party tools.

If no deployment personnel are registered to receive the alerts, this is a finding."
V-16844,medium,"The IAO will ensure back-up copies of the application software are stored in a fire-rated container and not collocated with operational software.
",Inadequate back-up software or improper storage of back-up software can result in extended outages of the information system in the event of a fire or other situation that results in destruction of the operating copy.,['COSW-1'],SV-17844r1_rule,F-17166r1_fix,Store a licensed copy of the application software in a fire rated container or store it separately (off-site) from the operational software.,C-17853r1_chk,"Verify that a licensed copy of the operating system software and other critical software is in a fire rated container or stored separately (offsite) from the operational software.
 
1) If operating system software and other critical software is not in a fire rated container, or stored offsite, it is a finding.
"
V-26975,medium,The application must use multifactor authentication for network access to non-privileged accounts.,"Multifactor authentication is defined as: using two or more factors to achieve authentication. 

Factors include: 
(i) something a user knows (e.g., password/PIN); 
(ii) something a user has (e.g., cryptographic identification device, token); or 
(iii) something a user is (e.g., biometric). 

A non-privileged account is defined as:  
An information system account with authorizations of a regular or non-privileged user. 

Network Access is defined as: 
Access to an information system by a user (or a process acting on behalf of a user) communicating through a network (e.g., local area network, wide area network, Internet). 

Applications integrating with the DoD Active Directory and utilize the DoD CAC are examples of compliant multifactor authentication solutions.",None,SV-34263r1_rule,None,None,None,None
V-69401,medium,The application must generate audit records when successful/unsuccessful attempts to delete application database security objects occur.,"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Audit records can be generated from various components within the information system (e.g., module or policy filter).",None,SV-84023r1_rule,F-75575r1_fix,Configure the application to create an audit record for both successful and unsuccessful attempts to delete database security objects.,C-69817r1_chk,"Review the application documentation and interview the application administrator.

Identify where the application logs are stored.

Identify application functionality that provides privilege or permission settings to database security objects within the application. This can be an application function that assigns privileges to an application object or data element.

Authenticate to the application as a regular user. Using application functionality, attempt to delete the database security object within the application.

Perform two attempts, one successfully and one unsuccessfully.

Review the log data and ensure the deletion events, both successful and unsuccessful, are logged.

If the application does not generate an audit record when successful and unsuccessful attempts to delete database security objects occur, this is a finding."
V-57417,medium,The application server must generate log records containing the full-text recording of privileged commands or the individual identities of group account users.,"Privileged commands are commands that change the configuration or data of the application server.  Since this type of command changes the application server configuration and could possibly change the security posture of the application server, these commands need to be logged to show the full-text of the command executed.  Without the full-text, reconstruction of harmful events or forensic analysis is not possible.

Organizations can consider limiting the additional log information to only that information explicitly needed for specific log requirements.  At a minimum, the organization must log either full-text recording of privileged commands or the individual identities of group users, or both.  The organization must maintain log trails in sufficient detail to reconstruct events to determine the cause and impact of compromise.",None,SV-71689r2_rule,F-62455r1_fix,"Configure the application server to generate the full-text recording of privileged commands or the individual identities of group users, or both.",C-58093r1_chk,"Review the application server documentation and deployment configuration to determine if the application server is configured to generate full-text recording of privileged commands or the individual identities of group users at a minimum.

Have a user execute a privileged command and review the log data to validate that the full-text or identity of the individual is being logged.

If the application server is not meeting this requirement, this is a finding."
V-16806,medium,"The designer will ensure the web application assigns the character set on all web pages.
","For web applications, setting the character set on the web page reduces the possibility of receiving unexpected input that uses other character set encodings by the web application.",['DCSQ-1'],SV-17806r1_rule,F-17095r1_fix,Set the character set on all web pages.,C-17804r1_chk,"Ask the application representative to review web pages, and determine if the application sets the character set.
 
Perl 
After the last header look for
print ""Content-Type: text/html; charset=utf-8\n\n"";
 
PHP. 
Look for the header() function before any content is generated
header('Content-type: text/html; charset=utf-8');
 
Java Servlets. 
Look for the setContentType method on the ServletResponse object 
Objectname.setContentType (""text/html;charset=utf-8"");
 
JSP. 
Look for a page directives
<%@ page contentType=""text/html; charset=UTF-8"" %>
 
ASP
Look for Response.charset
<%Response.charset=""utf-8""%>
 
ASP.Net
Look for Response.ContentEncoding
Response.ContentEncoding = Encoding.UTF8;
 
1) If the application representative cannot demonstrate the above, it is a finding."
V-16778,medium,"The Program Manager will document and obtain DAA risk acceptance for all public domain, shareware, freeware, and other software products/libraries with both (1) no source code to review, repair, and extend, and (2) limited or no warranty,  when such products are required for mission accomplishment.","The security posture of the enclave could be compromised if untested or unwarranted software is used due to the risk of software failure, hidden vulnerabilities, or other malware embedded in the application.  The Program Manager and IAO must get DAA approval prior to using this type of software for risk acceptance.  Public domain software is shareware.  There cannot be any assurance the products integrity or security mechanisms exist without conducting a code review or vulnerability analysis. Failure to properly authorize shareware, before it is installed or used, on corporate AISs could result in the compromise of sensitive corporate resources.",['DCPD-1'],SV-17778r1_rule,F-16976r1_fix,"Document and obtain the DAA's acknowledgment and acceptance of risk and approval for all binary or machine executable public domain software products such as freeware/shareware and other software products with no warranty and no source code review capability.

Implement policy and procedures to ensure the organization is in compliance with software licensing agreements. Implement policy and procedures to ensure the organization is in compliance with software usage restrictions.",C-17755r1_chk,"Policy:

The Program Manager will obtain DAA approval for all open source, public domain, shareware, freeware, and other software products/libraries with limited or no warranty but are required for mission accomplishment.

The designer will document  all open source, public domain, shareware, freeware, and other software products/libraries that have limited or no warranty, but which are required for mission accomplishment.

Software products and libraries with limited or no warranty will not be used in DoD information systems unless they are necessary for mission accomplishment, and there are no alternative IT solutions available.  If these products are required, they must be assessed for information assurance impacts, and must be approved for use by the DAA. 
 
Review the DoD policy regarding Open Source Software products:
http://www.defenselink.mil/cio-nii/docs/OpenSourceInDoD.pdf
 
Open Source Software:  Copyrighted software distributed under a license that provides everyone the right to use, modify, and redistribute the source code of software.
 
Public Domain Software: Software not protected by any copyright laws providing the right to use, modify, and redistribute without permission or payment to the author.
 
Shareware: Copyrighted software distributed under a license that provides a trial right to use and redistribute the binaries. For continued usage, users are required to pay a fee.
 
Freeware: Copyrighted software distributed under a license that provides a right to use and redistribute the binaries. Unlike shareware, there is no charge for continued use.
 
Commercial Software: Copyrighted software sold for profit by businesses, also referred to as COTS software.
 
1) If software products (e.g., Open Source Software, Public Domain Software, Shareware and Freeware) and libraries with limited or no warranty are used in DoD information systems except when they are necessary for mission accomplishment and there are no alternative IT solutions available, it is a finding.
"
V-26827,medium,"Application users must utilize a separate, distinct administrative account when accessing application security functions or security-relevant information. Non-privileged accounts must be utilized when accessing non-administrative application functions. The application must provide this functionality itself or leverage an existing technology providing this capability.","This requirement is intended to limit exposure due to operating from within a privileged account or role. The inclusion of role is intended to address those situations where an access control policy such as Role Based Access Control (RBAC) is being implemented and where a change of role provides the same degree of assurance in the change of access authorizations for both the user and all processes acting on behalf of the user as would be provided by a change between a privileged and non-privileged account. 

Audit of privileged activity may require physical separation employing information systems on which the user does not have privileged access.

To limit exposure and provide forensic history of activity when operating from within a privileged account or role, the application must support organizational requirements that users of information system accounts, or roles, with access to organization-defined list of security functions or security-relevant information, use non-privileged accounts, or roles, when accessing other (non-security) system functions.

If feasible, applications should provide access logging that ensures users who are granted a privileged role (or roles) have their privileged activity logged. ",None,SV-34077r1_rule,None,None,None,None
V-27107,medium,"The application must enforce organizational requirements to protect information obtained from intrusion monitoring tools from unauthorized access, modification, and deletion.","Intrusion monitoring applications are by their nature designed to monitor and record network and system traffic and activity.  They can accumulate a significant amount of sensitive data, examples of which could include user account information and application data not related to the intrusion monitoring application itself. 

Intrusion monitoring tools also obtain information that is critical to conducting forensic analysis on attacks occurring within the network.  This data may be sensitive in nature. Information obtained by intrusion monitoring applications in the course of evaluating network and system security needs to be protected. ",None,SV-34402r1_rule,None,None,None,None
V-29188,medium,"Applications handling data requiring ""data at rest"" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information that is at rest unless otherwise protected by alternative physical measures.","This control is intended to address the confidentiality and integrity of information at rest in non-mobile devices and covers user information and system information.  Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an organizational information system.  Alternative physical protection measures include, protected distribution systems.
",None,SV-37459r1_rule,None,None,None,None
V-16807,high,"The designer will ensure the application is not vulnerable to SQL Injection, uses prepared or parameterized statements, does not use concatenation or replacement to build SQL queries, and does not directly access the tables in a database.",SQL Injection can be used to bypass user login to gain immediate access to the application and can also be used to elevate privileges with an existing user account.,"['DCSQ-1', 'ECCD-1']",SV-17807r1_rule,F-17099r1_fix,Modify the application and remove SQL injection vulnerabilities.,C-17805r1_chk,"SQL Injections attacks can be used to bypass the login to the application or to provide authenticated user access to data that should not normally be provided by the application. 

Test applications using Oracle, Microsoft SQL Server, and other backend databases by putting a single ' in any of the fields used to login.  Submit the form and check for a server error 400.  If the error occurs, the application is not properly validating input fields. If an invalid user or password message is returned upon submitting the web form, the application is at least minimally protected.
 
Fill in login fields with potentially valid user names (e.g., admin, system, root, administrator) with a comment field to ignore the rest of the SQL query.  Fill in the password fields with any values and submit the form.
 
username' --   
username' # 
username'/* 
 
1) If the application bypasses user authentication with these inputs, this is a CAT I finding.
 
Try to append the ""or""  operator with a true value ""1=1"" and comment field.  This will test if a SQL query could be passed into the application for execution.
 
Fill in the login and password fields one at a time with the inputs below and submit the form.
 
' or 1=1-- 
' or 1=1# 
' or 1=1/* 
') or 1=1-- 
') or 1=1# 
') or 1=1/* 
 
2) If the application bypasses user authentication with these inputs, this is a CAT I finding.
 
Also other fields not associated with the login fields should be tested.
 
Fill in the each of the inputs one at a time with the inputs below, and submit the form.
 
' or 1=1-- 
' or 1=1# 
' or 1=1/* 
') or 1=1-- 
') or 1=1# 
') or 1=1/* 
 
3) If the application provides an authenticated user access or elevated access to the application to data, this is a CAT I finding.

Ask the application representative for code review or scan results from the entire application.  This can be provided as results from an automated code review or a vulnerability scanning tool.  See section 5.4 of the Application Security and Development STIG for additional details.

 If the application representative cannot provide results from a code review, then ask the application representative to demonstrate how the application meets the requirements below.
 
Identify from the code review results or the application representative demonstration how the application: 
- Uses prepared statements for SQL queries
- Does not provide direct access to tables (e.g. access is provided by views and stored procedures)
- Does not use concatenation or use replacement to build SQL queries
 
4) If the results are not provided from a manual code review or automated tool or the application representative cannot demonstrate the application uses prepared statements for SQL queries, this is a CAT II finding. 
 
5) If the results are not provided from a manual code review or automated vulnerability scanning tool, or the application representative cannot demonstrate the application does not use concatenation or use replacement to build SQL queries, this is a CAT II finding. 
 
6) If the results are not provided from a manual code review or automated vulnerability scanning tool, or the application representative cannot demonstrate the application does not directly accesses tables in a database, this is a CAT II finding.
 
7) If APP3500 is a finding due to the application account being a member of the Administrators group (Windows), has a UID of 0 (i.e., is equivalent to root in UNIX), is a member of the SYSAdmin fixed server role in SQL Server, or has DDL privileges, the finding should be upgraded to a CAT I. 
 
*Note Web services are subject to the same coding practices of other web application code (e.g., SQL Injection)."
V-27177,medium,Applications designed to enforce policy pertaining to the use of mobile code must prevent the automatic execution of mobile code in organization-defined software applications and require organization-defined actions prior to executing the code.,"Decisions regarding the employment of mobile code within organizational information systems are based on the potential for the code to cause damage to the system if used maliciously. 

Mobile code technologies include:  Java, JavaScript, ActiveX, PDF, Postscript, Shockwave movies, Flash animations, and VBScript. 

Usage restrictions and implementation guidance apply to both the selection and use of mobile code installed on organizational servers and mobile code downloaded and executed on individual workstations.  

Organization-defined software may be a specific application, web site or web sites in general. Organization-defined actions include but are not limited to:  alerts to the user, logging actions, a centralized alarm, or any combination thereof.",None,SV-34476r1_rule,None,None,None,None
V-70149,high,"The application, when utilizing PKI-based authentication, must validate certificates by constructing a certification path (which includes status information) to an accepted trust anchor.","Without path validation, an informed trust decision by the relying party cannot be made when presented with any certificate not already explicitly trusted.

A trust anchor is an authoritative entity represented via a public key and associated data. It is used in the context of public key infrastructures, X.509 digital certificates, and DNSSEC.

When there is a chain of trust, usually the top entity to be trusted becomes the trust anchor; it can be, for example, a Certification Authority (CA). A certification path starts with the subject certificate and proceeds through a number of intermediate certificates up to a trusted root certificate, typically issued by a trusted CA.

This requirement verifies that a certification path to an accepted trust anchor is used for certificate validation and that the path includes status information. Path validation is necessary for a relying party to make an informed trust decision when presented with any certificate not already explicitly trusted. Status information for certification paths includes certificate revocation lists or online certificate status protocol responses. Validation of the certificate status information is out of scope for this requirement.",None,SV-84771r1_rule,F-76385r1_fix,Design the application to construct a certification path to an accepted trust anchor when using PKI-based authentication.,C-70625r1_chk,"Review the application documentation, the application architecture and interview the application administrator to identify the method employed by the application for validating certificates.

Review the method to determine if a certification path that includes status information is constructed when certificate validation occurs.

Some applications may utilize underlying OS certificate validation and certificate path building capabilities while others may build the capability into the application itself.

The certification path will include the intermediary certificate CAs along with a status of the CA server's signing certificate and will end at the trusted root anchor.

If the application does not construct a certificate path to an accepted trust anchor, this is a finding."
V-26929,medium,The application must protect audit data records and integrity by using cryptographic mechanisms.,Protection of audit records and audit data is of critical importance. Cryptographic mechanisms are the industry established standard used to protect the integrity of audit data.  An example of a cryptographic mechanism is the computation and application of a cryptographic-signed hash using asymmetric cryptography. ,None,SV-34209r1_rule,None,None,None,None
V-35096,medium,The application server management interface must display the Standard Mandatory DoD Notice and Consent Banner before granting access to the system.,"Application servers are required to display the Standard Mandatory DoD Notice and Consent Banner before granting access to the system management interface, providing privacy and security notices consistent with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance that states that: 

(i) users are accessing a U.S. Government information system; 
(ii) system usage may be monitored, recorded, and subject to audit; 
(iii) unauthorized use of the system is prohibited and subject to criminal and civil penalties; and 
(iv) the use of the system indicates consent to monitoring and recording.

System use notification messages can be implemented in the form of warning banners displayed when individuals log on to the information system. 

System use notification is intended only for information system access including an interactive logon interface with a human user, and is not required when an interactive interface does not exist. 

Use this banner for desktops, laptops, and other devices accommodating banners of 1300 characters. The banner shall be implemented as a click-through banner at logon (to the extent permitted by the operating system), meaning it prevents further activity on the information system unless and until the user executes a positive action to manifest agreement by clicking on a box indicating ""OK"".

""You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.
By using this IS (which includes any device attached to this IS), you consent to the following conditions:
-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.
-At any time, the USG may inspect and seize data stored on this IS.
-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.
-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.
-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.""",None,SV-46383r3_rule,F-39648r4_fix,"Configure the application server management interface so it displays the Standard Mandatory DoD Notice and Consent Banner prior to allowing access.

The banner must read:

""You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.
By using this IS (which includes any device attached to this IS), you consent to the following conditions:
-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.
-At any time, the USG may inspect and seize data stored on this IS.
-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.
-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.
-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.""",C-43484r4_chk,"Review the application server management interface configuration to verify the application server is configured to display the Standard Mandatory DoD Notice and Consent Banner before granting access.

The banner must read:

""You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.
By using this IS (which includes any device attached to this IS), you consent to the following conditions:
-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.
-At any time, the USG may inspect and seize data stored on this IS.
-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.
-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.
-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.""

If the application server management interface does not display the banner or displays an unapproved banner, this is a finding."
V-70221,high,"The application must fail to a secure state if system initialization fails, shutdown fails, or aborts fail.","Failure to a known safe state helps prevent systems from failing to a state that may cause loss of data or unauthorized access to system resources. Applications or systems that fail suddenly and with no incorporated failure state planning may leave the hosting system available but with a reduced security protection capability. Preserving information system state information also facilitates system restart and return to the operational mode of the organization with less disruption of mission-essential processes.

In general, application security mechanisms should be designed so that a failure will follow the same execution path as disallowing the operation. For example, security methods, such as isAuthorized(), isAuthenticated(), and validate(), should all return false if there is an exception during processing. If security controls can throw exceptions, they must be very clear about exactly what that condition means.

Abort refers to stopping a program or function before it has finished naturally. The term abort refers to both requested and unexpected terminations.",None,SV-84843r1_rule,F-76457r1_fix,"Fix any vulnerability found when the application is an insecure state (initialization, shutdown and aborts).",C-70697r1_chk,"Review application design documentation, vulnerability scanner reports and interview application administrator to identify application components.

The design of the application should account for the following:

- Connections to databases are left open
- Access control mechanisms are disabled
- Data left in temporary locations

Testing application failure will require taking down parts of the application.

Review the vulnerability assessment configuration settings included in vulnerability report.

Examine the application test plans and procedures to determine if this type of failure was previously tested.

If test plans exist, validate the tests by performing a subset of the checks.

If test plans do not exist, an application failure must be simulated.

Simulate a failure. This can be accomplished by stopping the web server service and/or the database service. Also, for applications using web services stop the web service and/or the database.

Check to ensure that application data is still protected. Some examples of tests follow:

- Try to submit SQL queries to the database. Verify that the database requires authentication before returning data.
- Try to read the application source files; access should not be granted to these files because the application is not operating.
- Try to open database files; data should not be available because the application is not operational.

If the application fails in such a way that the application security controls are rendered inoperable, this is a finding."
V-70229,medium,The application must use appropriate cryptography in order to protect stored DoD information when required by the information owner or DoD policy.,"Applications handling data requiring ""data at rest"" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest.

Selection of a cryptographic mechanism is based on the need to protect the confidentiality of organizational information. The strength of mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields).

Special care must be taken to cryptographically protect classified data.",None,SV-84851r1_rule,F-76465r1_fix,"Identify data elements that require protection.

Document the data types and specify encryption requirements.

Encrypt classified data using Type 1, Suite B, or other NSA-approved encryption solutions.",C-70705r1_chk,"Review the application documentation and interview the application administrator.

Identify the data processed by the application and the accompanying data protection requirements.

Determine if the application is processing publicly releasable, SBU, FOUO, or classified data.

If the data is strictly publicly releasable information with no SBU, FOUO, or classified and system documentation specifies no data encryption is required for any hosted application data, this requirement is not applicable.

Have the application administrator identify the encryption protections that are utilized.

Validate the application is using encryption protections that are commensurate with the data being protected.

If the application is processing classified data, type 1, suite B cryptography, or hardware-based encryption solutions; meeting NSA encryption requirements for classified data processing and storage is required.

If the application processes classified data or if the data owner has specified encryption requirements and the application administrator is unable to demonstrate the type of encryption used or if the application processes classified and does not use type 1, suite B, or NSA-approved hardware-based encryption, this is a finding."
V-70189,medium,"The application must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards.","Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect classified data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.
 
Advanced Encryption Standard (AES)
Symmetric block cipher used for information protection
FIPS Pub 197
Use 256 bit keys to protect up to TOP SECRET

Elliptic Curve Diffie-Hellman (ECDH) Key Exchange
Asymmetric algorithm used for key establishment
NIST SP 800-56A
Use Curve P-384 to protect up to TOP SECRET.

Elliptic Curve Digital Signature Algorithm (ECDSA)
Asymmetric algorithm used for digital signatures
FIPS Pub 186-4
Use Curve P-384 to protect up to TOP SECRET.

Secure Hash Algorithm (SHA)
Algorithm used for computing a condensed representation of information
FIPS Pub 180-4

Use SHA-384 to protect up to TOP SECRET.
 
Diffie-Hellman (DH) Key Exchange
Asymmetric algorithm used for key establishment
IETF RFC 3526 
Minimum 3072-bit modulus to protect up to TOP SECRET

RSA
Asymmetric algorithm used for key establishment
NIST SP 800-56B rev 1
Minimum 3072-bit modulus to protect up to TOP SECRET

RSA 
Asymmetric algorithm used for digital signatures
FIPS PUB 186-4
Minimum 3072 bit-modulus to protect up to TOP SECRET.",None,SV-84811r2_rule,F-76425r1_fix,"Configure application to encrypt stored classified information; Ensure encryption is performed using NIST FIPS 140-2-validated encryption.

Encrypt stored, non-SAMI classified information using NIST FIPS 140-2-validated encryption.

Implement NSA-validated type-1 encryption of all SAMI data stored in the enclave.",C-70665r1_chk,"Review the application documentation, system security plan and interview the application administrator to determine if the application processes classified data.

If the application does not process classified data, this requirement is not applicable.

Identify the data classifications and the cryptographic protections established to protect the application data.

Verify the application is configured to utilize the appropriate encryption based upon data classification, cryptographic tasks that need to be performed (information protection, hashing, signing) and information protection requirements.

NIST-certified cryptography must be used to store classified non-Sources and Methods Intelligence (SAMI) information if required by the information owner.

NSA-validated type-1 encryption must be used for all SAMI data stored in the enclave.

If the application is not configured to utilize the NSA-approved cryptographic modules in accordance with data protection requirements specified in the security plan, this is a finding."
V-26865,medium,"Applications must display an approved system use notification message or banner before granting access to the system.  
","Applications must display an approved system use notification message or banner before granting access to the system.  

The banner shall be formatted in accordance with the DoD policy ""Use of DoD Information Systems - Standard Consent and User Agreement"".  The message banner shall provide privacy and security notices consistent with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance and shall state that:
 
(i) users are accessing a U.S. Government information system; 
(ii) system usage may be monitored, recorded, and is subject to audit; 
(iii) unauthorized use of the system is prohibited and subject to criminal and civil penalties;
(iv) the use of the system indicates consent to monitoring and recording;
(v) in the notice given to public users of the information system, shall provide a description of the authorized uses of the system.

System use notification messages are implemented in the form of warning banners displayed when individuals log in to the information system. System use notification is intended only for information system access including an interactive login interface with a human user and is not intended to require notification when an interactive interface does not exist. 

The banner shall state:

""You are accessing a U.S. Government (USG) Information System (IS) that is provided
for USG-authorized use only.
By using this IS (which includes any device attached to this IS), you consent to the
following conditions:
-The USG routinely intercepts and monitors communications on this IS for purposes
including, but not limited to, penetration testing, COMSEC monitoring, network
operations and defense, personnel misconduct (PM), law enforcement (LE), and
counterintelligence (CI) investigations.
-At any time, the USG may inspect and seize data stored on this IS.
-Communications using, or data stored on, this IS are not private, are subject to routine
monitoring, interception, and search, and may be disclosed or used for any USG authorized
purpose.
-This IS includes security measures (e.g., authentication and access controls) to protect
USG interests--not for your personal benefit or privacy.
-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI
investigative searching or monitoring of the content of privileged communications, or
work product, related to personal representation or services by attorneys,
psychotherapists, or clergy, and their assistants. Such communications and work product
are private and confidential. See User Agreement for details.""
",None,SV-34145r1_rule,None,None,None,None
V-57523,medium,The application server must require users to re-authenticate when organization-defined circumstances or situations require re-authentication.,"Without re-authentication, users may access resources or perform tasks for which they do not have authorization.

When applications provide the capability to change security roles or escalate the functional capability of the application, it is critical the user re-authenticate.

In addition to the re-authentication requirements associated with session locks, the application server security model may require re-authentication of individuals in other situations, including (but not limited to) the following circumstances:

(i) When authenticators change; 
(ii) When roles change; 
(iii) When security categories of information systems change; 
(iv) When the execution of privileged functions occurs; 
(v) After a fixed period of time; or 
(vi) Periodically.

Within the DoD, the minimum circumstances requiring re-authentication are privilege escalation and role changes.",None,SV-71799r2_rule,F-62591r1_fix,Configure the application server to require a user to re-authenticate when organization-defined circumstances or situations are met.,C-58231r1_chk,"Review the application server documentation and configuration to determine if the application server requires a user to re-authenticate when organization-defined circumstances or situations are met.

If the application server does not require a user to re-authenticate when organization-defined circumstances or situations are met, this is a finding."
V-70297,medium,The ISSO must review audit trails periodically based on system documentation recommendations or immediately upon system security events.,"Without access control the data is not secure. It can be compromised, misused, or changed by unauthorized access at any time.",None,SV-84919r1_rule,F-76533r1_fix,"Establish a scheduled process for reviewing logs.

Maintain a log or records of dates and times audit logs are reviewed.",C-70773r1_chk,"Interview the application representative and ask for the system documentation that states how often audit logs are reviewed. Also, determine when the audit logs were last reviewed.

If the application representative cannot provide system documentation identifying how often the auditing logs are reviewed, or has not audited within the last time period stated in the system documentation, this is a finding."
V-70179,medium,Applications used for non-local maintenance sessions must verify remote disconnection at the termination of non-local maintenance and diagnostic sessions.,"Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.

If the remote connection is not closed and verified as closed, the session may remain open and be exploited by an attacker; this is referred to as a zombie session. Remote connections must be disconnected and verified as disconnected when non-local maintenance sessions have been terminated and are no longer available for use.",None,SV-84801r1_rule,F-76415r1_fix,Configure the application to verify termination of remote maintenance sessions.,C-70655r1_chk,"Review the application documentation and interview the application administrator to identify application maintenance functions.

If the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.

Identify the maintenance functions/capabilities that are provided by the application, performed by an individual/admin and which can be performed remotely.

Examples include but are not limited to:

The application may provide the ability to clean up a folder of temporary files, add users, remove users, restart processes, backup certain files, manage logs, or execute diagnostic sessions.

Identify the IP address of the source system used to originate testing traffic. The IP address will be used to identify sessions on the application host so verify traffic is not traversing a proxy connection in order to reach the application host.

Access the operating system of the application host and execute the relevant OS commands to identify active TCP/IP sessions on the application host.

For example, the ""netstat -a"" command will provide a status of all TCP/IP connections on both Windows and UNIX systems.

Netstat output can be redirected to a file or the grep command can be used on UNIX systems to identify the specific application processes and network connections.

netstat -a |grep -i ""application process name"" > filename
or
netstat  -a |grep -i source IP address > filename

Utilizing the application, access using the appropriate role needed to execute maintenance tasks.

Execute a maintenance task or tasks from within the application.

Re-execute the netstat commands and identify what network connections and process IDs were created to handle the new application session.

Terminate the application session via the application interface and then execute the netstat commands a third time. The network connections should terminate or change to a state that indicates the connections are closed or are in the process of closing. Continue to execute netstat command until it is verified that the application has terminated the process sessions and closed the network connections.

Review the application logs to ensure the application has logged the disconnection event thereby verifying the disconnection.

If the application provides remote access to maintenance functions and capabilities and the remote access connections are not terminated and then verified, this is a finding."
V-69371,medium,The application must provide audit record generation capability for session timeouts.,"When a user's session times out, it is important to be able to identify these events in the application logs.

Without the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

Audit records can be generated from various components within the application (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.

DoD has defined the list of events for which the application will provide an audit record generation capability as the following:

(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);

(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities or other system level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and

(iii) All account creation, modification, disabling, and termination actions.

Web based applications will often utilize an application server that creates, manages and logs session IDs.  It is acceptable for the application to delegate this requirement to the application server.",None,SV-83993r1_rule,F-75545r1_fix,Configure the application to record session timeout events in the logs.,C-69785r1_chk,"Review the application documentation and interview the application administrator to identify log locations for application session activity.

Open the log file that tracks user session activity.

Access the application as a regular user and identify the user session within the log files.

Identify the session timeout threshold defined by the application.

Perform no action within the application in order to allow the session to timeout.

Once the session timeout threshold has been exceeded, verify the session has been terminated due to the timeout event and review the logs again to ensure the session timeout event was recorded in the logs.

If a web-based application delegates session timeout auditing to an application server, this is not a finding. 

If the session timeout event is not recorded in the logs, this is a finding."
V-6141,high,"The designer will ensure access control mechanisms exist to ensure data is accessed and changed only by authorized personnel. 
","If access control mechanisms are not in place, anonymous users could potentially make unauthorized read and modification requests to the application data which is an immediate loss of the integrity of the data.

Any vulnerability associated with a DoD Information system or system enclave, the exploitation of which, by a risk factor, will directly and immediately result in loss of Confidentiality, Availability or Integrity of the system
associated data.
","['ECCD-2', 'ECLP-1', 'ECPA-1']",SV-6141r1_rule,F-17090r1_fix,Implement access control mechanisms.,C-2955r1_chk,"Policy:

The designer will ensure access control mechanisms exist to ensure data is accessed and changed only by authorized personnel. The designer will ensure the access procedures enforce the principles of separation of duties and ""least privilege."" The IAO will ensure the access procedures enforce the principles of separation of duties and ""least privilege.""

Ask the application representative if particular administrative and user functions can be restricted to certain roles.  The objective is to ensure that the application prohibits combination of roles that represent an IA risk.  In particular, inquire about separation of duties between the following:

• Personnel that review and clear audit logs and personnel that perform non-audit administration.
• Personnel that create, modify, and delete access control rules and personnel that perform either data entry or application programming.

Some applications may only contain administrator access and no other access. For example, network appliances may have administrator only access.  Web applications with no user authentication required are also considered to contain a single role, unless the web application provides administrative access to publish web server content.

1) If the application is designed specifically to only have one role, this check is not applicable. 

2) If the application representative states that the application does not enforce separation of duties between the roles listed above, it is a finding.  

If the representative claims that the required separation exists, identify which software component is enforcing it.  Evidence of enforcement can either involve the display of relevant security configuration settings or a demonstration using different user accounts, each assigned to a different role.  

3) If the application representative cannot provide evidence of separation of duties, it is a finding. 
 
*Note: Web services are required to implement role-based access control."
V-70193,medium,The application must utilize FIPS-validated cryptographic modules when generating cryptographic hashes.,"Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.

If the application resides on a National Security System (NSS) it must not use a hashing algorithm weaker than SHA-384.",None,SV-84815r2_rule,F-76429r2_fix,Configure the application to use a FIPS-validated hashing algorithm when creating a cryptographic hash.,C-70669r6_chk,"Review the application components and the application requirements to determine if the application is capable of generating cryptographic hashes.

Review the application documentation and interview the application developer or administrator to identify the cryptographic modules used by the application.

If hashing of application components has been identified in the application security plan as not being required and if a documented acceptance of risk is provided, this is not a finding.

Have the application admin or the developer demonstrate how the application generates hashes and what hashing algorithms are used when generating a hash value.

While SHA1 is currently FIPS-140-2 approved, due to known vulnerabilities with this algorithm, DoD PKI policy prohibits the use of SHA1 as of December 2016.  See DoD CIO Memo Subject: Revised Schedule to Update DoD Public Key Infrastructure Certificates to Secure Hash Algorithm-256. 

If the application resides on a National Security System (NSS) and uses an algorithm weaker than SHA-384, this is a finding.

If FIPS-validated cryptographic modules are not used when generating hashes or if the application is configured to use the MD5 or SHA1 hashing algorithm, this is a finding."
V-70355,medium,Data backup must be performed at required intervals in accordance with DoD policy.,"Without proper backups, the application is not protected from the loss of data or the operating environment in the event of hardware or software failure.",None,SV-84977r1_rule,F-76591r1_fix,Develop and implement backup procedures based on risk level of the system and in accordance with DoD policy.,C-70809r1_chk,"Interview the application and system admins and review documented backup procedures.

Check the following based on the risk level of the application.

For low risk applications:

Validate backup procedures exist and are performed at least weekly.

A sampling of system backups should be checked to ensure compliance with the control.

For medium risk applications:

Validate backup procedures exist and are performed at least daily.

Validate recovery media is stored at an off-site location and ensure the data is protected in accordance with its risk category and confidentiality level. This validation can be performed by examining an SLA or MOU/MOA that states the protection levels of the data and how it should be stored.

A sampling of system backups should be checked to ensure compliance with the control.

Verify that the organization tests backup information to ensure media reliability and information integrity.

Verify that the organization selectively uses backup information in the restoration of information system functions as part of annual contingency plan testing.

For high risk applications:

Validate that the procedures have been defined for system redundancy and they are properly implemented and are executing the procedures.

Verify that the redundant system is properly separated from the primary system (i.e., located in a different building or in a different city). This validation should be performed by examining the secondary system and ensuring its operation.

Examine the SLA or MOU/MOA to ensure redundant capability is addressed. Finding details should indicate the type of validation performed. Examine the mirror capability testing procedures and results to insure the capability is properly tested at 6 month minimum intervals.

If any of the requirements above for the associated risk level of the application are not met, this is a finding."
V-70159,medium,"The application must use mechanisms meeting the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance for authentication to a cryptographic module.","Unapproved mechanisms that are used for authentication to the cryptographic module are not verified, and therefore cannot be relied upon to provide confidentiality or integrity and DoD data may be compromised.

Applications utilizing encryption are required to use FIPS compliant mechanisms for authenticating to cryptographic modules.

FIPS 140-2 is the current standard for validating that mechanisms used to access cryptographic modules utilize authentication that meets DoD requirements.",None,SV-84781r1_rule,F-76395r1_fix,Use FIPS-approved cryptographic modules.,C-70635r1_chk,"Review the application documentation and interview the application administrator.

Identify if the application provides access to cryptographic modules and if access is required in order to manage cryptographic modules contained within the application.

If the application does not provide authenticated access to a cryptographic module, the requirement is not applicable.

Review and identify the cryptographic module. Refer to the NIST website listing all FIPS-approved cryptographic modules.

http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140val-all.htm

If the cryptographic module that requires authentication is not on the FIPS-approved module list, this is a finding."
V-26773,medium,Applications must provide the ability to prohibit the transfer of unsanctioned information in accordance with security policy. ,"The application enforces approved authorizations for controlling the flow of information within the system and between interconnected systems in accordance with applicable policy. 

Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

Specific examples of flow control enforcement can be found in boundary protection devices (e.g., proxies, gateways, guards, encrypted tunnels, firewalls, and routers) employing rule sets or establish configuration settings restricting information system services, provide a packet-filtering capability based on header information, or message-filtering capability based on content (e.g., using key word searches or document characteristics). 

Actions to support this requirement include, but are not limited to: checking all transferred information for malware, implementing dirty word list searches on transferred information, and applying the same protection measures to metadata (e.g., security attributes) that is applied to the information payload.",None,SV-34023r1_rule,None,None,None,None
V-26924,medium,The application must support organizational requirements to enforce password encryption for transmission.,Passwords need to be protected at all times and encryption is the standard method for protecting passwords during transmission.,None,SV-34204r1_rule,None,None,None,None
V-70233,medium,The application must maintain a separate execution domain for each executing process.,"Applications can maintain separate execution domains for each executing process by assigning each process a separate address space. Each process has a distinct address space so that communication between processes is performed in a manner controlled through the security functions, and one process cannot modify the executing code of another process. Maintaining separate execution domains for executing processes can be achieved, for example, by implementing separate address spaces.

An example is a web browser with process isolation that provides tabs that are separate processes using separate address spaces to prevent one tab crashing the entire browser.",None,SV-84855r1_rule,F-76469r1_fix,Design and configure applications to maintain a separate execution domain for each executing process.,C-70709r1_chk,"Review the application documentation, the architecture documentation and interview the application administrator.

Identify if the application architecture provides the capability to sandbox executing processes so as to prevent a process in one application domain from sharing another application domain.

Ask the application administrator to demonstrate how the application processes are separated. This may be demonstrated by examining the OS processes running on the system and identifying the separate application processes.

If the application does not maintain a separate execution domain for each executing process, this is a finding."
V-26963,medium,"To support the requirements and principles of least functionality, the application must support organizational requirements regarding the use of automated mechanisms preventing program execution on the information system in accordance with the organization-defined specifications.","Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions). 

Standard operating procedure for placing an information system into a production environment includes creating a baseline configuration of the system.  The baseline configuration provides information about the components of the information system (e.g., the standard software load for a workstation, server, network component, or mobile device including operating system/installed applications with current version numbers and patch information), network topology, and the logical placement of the component within the system architecture. 

It is sometimes convenient to provide multiple services from a single information system, but doing so increases risk when compared to limiting the services provided by any one system.   This is particularly true when these services have conflicting missions, user communities or availability requirements.

This requirement addresses the need to provide an automated mechanism that will prevent the execution of programs not associated with the established baseline configuration.

This is a requirement to disable services as part of the baseline process and provide automated tools that monitor the system and prevent unauthorized system processes from executing. 

This requirement will apply to configuration management applications, HIDS applications and other similar types of applications designed to manage system processes and configurations. ",None,SV-34248r1_rule,None,None,None,None
V-70295,medium,"The ISSO must ensure application audit trails are retained for at least 1 year for applications without SAMI data, and 5 years for applications including SAMI data.",Log files are a requirement to trace intruder activity or to audit user activity.,None,SV-84917r1_rule,F-76531r1_fix,Retain application audit log files for one year and five years for SAMI data.,C-70771r1_chk,"Verify a process is in place to retain application audit log files for one year and five years for SAMI data.

If audit logs have not been retained for one year or five years for SAMI data, this is a finding."
V-27159,medium,The application must protect the integrity and availability of publicly available information and applications.,The purpose of this control is to ensure organizations explicitly address the protection needs for public information and applications with such protection likely being implemented as part of other security controls. ,None,SV-34458r1_rule,None,None,None,None
V-57421,medium,The application server must allocate log record storage capacity in accordance with organization-defined log record storage requirements.,"The proper management of log records not only dictates proper archiving processes and procedures be established, it also requires allocating enough storage space to maintain the logs online for a defined period of time.

If adequate online log storage capacity is not maintained, intrusion monitoring, security investigations, and forensic analysis can be negatively affected.

It is important to keep a defined amount of logs online and readily available for investigative purposes. The logs may be stored on the application server until they can be archived to a log system or, in some instances, a Storage Area Networks (SAN).  Regardless of the method used, log record storage capacity must be sufficient to store log data when the data cannot be offloaded to a log system or SAN.",None,SV-71693r2_rule,F-62459r1_fix,Configure the application server to allocate storage for log data before offloading to a log data storage facility.,C-58097r1_chk,"Review the application server documentation and configuration to determine if the application server creates log storage to buffer log data until offloading to a log data storage facility.

If the application server does not allocate storage for log data, this is a finding."
V-70209,medium,Applications must use system-generated session identifiers that protect against session fixation.,"Session fixation allows an attacker to hijack a valid user’s application session. The attack focuses on the manner in which a web application manages the user’s session ID. Applications become vulnerable when they do not assign a new session ID when authenticating users thereby using the existing session ID.

Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.

In many cases, creating a new session ID cookie containing a new unique value whenever authentication is performed will address the issue of session fixation.

Allowing the user to submit a session ID also introduces the risk that the application could be subject to a session fixation attack.",None,SV-84831r1_rule,F-76445r1_fix,Design the application to generate new session IDs with unique values when authenticating user sessions.,C-70685r1_chk,"Review the application documentation and interview the application administrator to identify how the application generates user session IDs.

Application session testing is required in order to verify this requirement.

Request the latest application vulnerability or penetration test results.

Verify the test configuration includes session handling vulnerability tests.

If the application is re-using/copying the users existing session ID that was created on one system in order to maintain user state when traversing multiple application servers in the same domain, this is not a finding.

If the session testing results indicate application session IDs are re-used after the user has logged out, this is a finding."
V-19705,medium,"The designer shall ensure encrypted assertions, or equivalent confidentiality protections, when assertion data is passed through an intermediary, and confidentiality of the assertion data is required to pass through the intermediary.
","The confidentially of the data in a message as the message is passed through an intermediary web service may be required to be restricted by the intermediary web service.  The intermediary web service may leak or distribute the data contained in a message if not encrypted or protected.  
",['IAIA-2'],SV-21846r1_rule,F-23061r1_fix,Encrypt assertions or use equivalent confidentiality when sensitive assertion data is passed through an intermediary.,C-24102r1_chk,"If the application does not utilize WS-Security tokens, this check is not applicable.

Ask the application representative for the design document. Review the design document for web services using WS-Security tokens. Review the design document and verify all WS-Security tokens are only transmitted after both receiving and sending services have been mutually PKI authenticated.

1) If the design document does not exist, or does not indicate all WS-Security tokens are only transmitted after both receiving and sending services have been mutually PKI authenticated, it is a finding."
V-69261,medium,Applications with SOAP messages requiring integrity must include the following message elements:-Message ID-Service Request-Timestamp-SAML Assertion (optionally included in messages) and all elements of the message must be digitally signed.,"Digitally signed SOAP messages provide message integrity and authenticity of the signer of the message independent of the transport layer. Service requests may be intercepted and changed in transit and the data integrity may be at risk if the SOAP message is not digitally signed.

Functional architecture aspects of the application security plan identify the application data elements that require data integrity protection.",None,SV-83883r1_rule,F-75431r1_fix,"Design and configure the application to sign the following message elements for SOAP messages requiring integrity:

- Message ID
- Service Request
- Timestamp
- SAML Assertion
- Message elements",C-69685r1_chk,"Review the application documentation, system security plan, application architecture diagrams and interview the application administrator.

Review the design document for web services using SOAP messages.

If the application does not utilize SOAP messages, this check is not applicable.

Review the design document and SOAP messages.
Verify the Message ID, Service Request, Timestamp, and SAML Assertion are included in the SOAP message.
If they are included, verify they are signed with a certificate.

If SOAP messages requiring integrity do not have the Message ID, Service Request, Timestamp, and SAML Assertion signed, or if any part of the message is not digitally signed, this is a finding."
V-35142,medium,The application server must allow only the ISSM (or individuals or roles appointed by the ISSM) to select which logable events are to be logged.,"Log records can be generated from various components within the application server, (e.g., httpd, beans, etc.) From an application perspective, certain specific application functionalities may be logged, as well.

The list of logged events is the set of events for which logs are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating log records (e.g., logable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked).


Application servers utilize role-based access controls in order to specify the individuals who are allowed to configure application component logable events. The application server must be configured to select which personnel are assigned the role of selecting which logable events are to be logged.

The personnel or roles that can select logable events are only the ISSM (or individuals or roles appointed by the ISSM).",None,SV-46429r3_rule,F-39693r2_fix,Configure the application server to only allow the ISSM (or individuals or roles appointed by the ISSM) to change logable events.,C-43529r2_chk,"Review application server product documentation and configuration to determine if the system only allows the ISSM (or individuals or roles appointed by the ISSM) to change logable events.

If the system is not configured to perform this function, this is a finding."
V-69429,medium,The application must produce audit records containing information to establish when (date and time) the events occurred.,"Without establishing when events occurred, it is impossible to establish, correlate, and investigate the events relating to an incident.

In order to compile an accurate risk assessment, and provide forensic analysis, it is essential for security personnel to know when events occurred (date and time).",None,SV-84051r1_rule,F-75605r1_fix,Configure the application or application server to include the date and the time of the event in the audit logs.,C-69847r1_chk,"Access the application logs and review the log entries for date and time. Each event written into the log must have a corresponding date and time stamp associated with it.

If the audit logs do not have a corresponding date and time associated with each event, this is a finding."
V-27154,medium,Applications must employ FIPS-validated cryptography to protect unclassified information when such information must be separated from individuals who have the necessary clearances yet lack the necessary access approvals.,"Cryptography is only as strong as the encryption modules/algorithms employed to encrypt the data. Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data.  FIPS 140-2 Security Requirements for Cryptographic Modules can be found at the following web site: http://csrc.nist.gov/publications/fips/fips140-2/fips1402.pdf.

Although persons may have a security clearance, they may not have a ""need to know"" and are required to be separated from the information in question.  Applications must employ FIPS validated cryptography to protect unclassified information from those individuals who have no ""need to know"".

",None,SV-34453r1_rule,None,None,None,None
V-26937,medium,The application must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users).,"Non-organizational users include all information system users other than organizational users which include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors, guest researchers, individuals from allied nations). 

Non-organizational users shall be uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization when related to the use of anonymous access such as accessing a web server.  

Accordingly, a risk assessment is used in determining the authentication needs of the organization. 

Scalability, practicality, and security are simultaneously considered in balancing the need to ensure ease of use for access to federal information and information systems with the need to protect and adequately mitigate risk to organizational operations, organizational assets, individuals, other organizations, and the Nation.  ",None,SV-34217r1_rule,None,None,None,None
V-70267,high,The application must not be vulnerable to SQL Injection.,"SQL Injection is a code injection attack against database applications. Malicious SQL statements are inserted into an application data entry field where they are submitted to the database and executed. This is a direct result of not validating input that is used by the application to perform a command or execute an action.

Successful attacks can read data, write data, execute administrative functions within the database, shutdown the DBMS, and in some cases execute OS commands.

Best practices to reduce the potential for SQL Injection vulnerabilities include:

Not using concatenation or replacement to build SQL queries.

Using prepared statements with parameterized queries that have been tested and validated not to be vulnerable to SQL Injection.

Using stored procedures that have been tested and validated not to be vulnerable to SQL Injection.

Escaping all user supplied input.

Additional steps to prevent SQL Injection can be found at the OWASP website:

https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet",None,SV-84889r1_rule,F-76503r1_fix,Modify the application and remove SQL injection vulnerabilities.,C-70743r1_chk,"Review the application documentation and interview the application administrator.

Request the latest vulnerability scan test results.

Verify the scan configuration is configured to test for SQL injection flaws.

Review the scan results to determine if any SQL injection flaws were detected during application testing.

If SQL injection flaws were discovered, request a subsequent scan that will show that the issues have been remediated.

If the scan results are not available, identify the database product in use and refer to the OWASP web application testing guide for detailed instructions on performing a manual SQL injection test. The instructions are located here and many tests are organized by database product:

https://www.owasp.org/index.php/Testing_for_SQL_Injection_%28OTG-INPVAL-005%29

If the application is vulnerable to SQL injection attack, contains SQL injection flaws, or if scan results do not exist, this is a finding."
V-26900,medium,The application must produce a system-wide (logical or physical) audit trail composed of audit records in a standardized format.,"Audits records can be generated from various components within the information system. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events).  ",None,SV-34180r1_rule,None,None,None,None
V-69305,medium,The application must automatically audit account creation.,"Once an attacker establishes initial access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Auditing of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail documents the creation of application user accounts and, as required, notifies administrators and/or application owners exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.

To address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms meeting or exceeding access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.",None,SV-83927r1_rule,F-75479r1_fix,"Configure the application to write a log entry when a new user account is created.

At a minimum, ensure account name, date and time of the event are recorded.",C-69717r1_chk,"Examine the application documentation to identify how the application users are managed.

Interview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.

If the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.

Identify the location of the audit logs and review the end of the logs.

Access the user account management functionality and create a new user account.

Examine the log file again and determine if the account creation event was logged. The information logged should, at a minimum, include enough detail to determine which account was created and when.

If the account creation event was not logged, this is a finding."
V-70171,medium,Applications used for non-local maintenance sessions must audit non-local maintenance and diagnostic sessions for organization-defined auditable events.,"Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.

If events associated with non-local administrative access or diagnostic sessions are not logged and audited, a major tool for assessing and investigating attacks would not be available.

This requirement addresses auditing-related issues associated with maintenance tools used specifically for diagnostic and repair actions on organizational information systems.

This requirement applies to hardware/software diagnostic test equipment or tools. This requirement does not cover hardware/software components that may support information system maintenance, yet are a part of the system (e.g., the software implementing ""ping,"" ""ls,"" ""ipconfig,"" or the hardware and software implementing the monitoring port of an Ethernet switch).",None,SV-84793r1_rule,F-76407r1_fix,Configure the application to log when application maintenance functionality is executed remotely.,C-70647r1_chk,"Review the application documentation and interview the application administrator to identify application maintenance functions.

If the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.

Identify the maintenance functions/capabilities that are provided by the application and performed by an individual which can be performed remotely.

For example, the application may provide the ability to clean up a folder of temporary files, add users, remove users, restart processes, backup certain files, manage logs, or execute diagnostic sessions.

Identify and open the audit logs that capture maintenance actions performed by the application.

Accessing the application in the appropriate role to execute maintenance tasks, perform several maintenance tasks and observe the logs.

If the application provides maintenance functions and capabilities and those functions are not logged when they are executed, this is a finding."
V-26792,medium,Applications must enforce information flow control on metadata.,"Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

Information flow enforcement mechanisms compare security attributes on all information (data content and data structure), source and destination objects, and respond appropriately (e.g., block, quarantine, alert administrator) when the mechanisms encounter information flows not explicitly allowed by the information flow policy. 

Metadata is defined as data providing information about one or more other pieces of data such as;  purpose of the data, author/creator of the data, network location of where data was created, and application specific data information. ",None,SV-34042r1_rule,None,None,None,None
V-69501,medium,The integrity of the audit tools must be validated by checking the files for changes in the cryptographic hash value.,"Protecting the integrity of the tools used for auditing purposes is a critical step to ensuring the integrity of audit data. Audit data includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.

Audit tools include, but are not limited to, vendor provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.

It is not uncommon for attackers to replace the audit tools or inject code into the existing tools with the purpose of providing the capability to hide or erase system activity from the audit logs. 

To address this risk, audit tools must be cryptographically signed/hashed in order to provide the capability to identify when the audit tools have been modified, manipulated or replaced. An example is a checksum hash of the file or files.",None,SV-84123r1_rule,F-75675r1_fix,Establish a process to periodically check the audit tool cryptographic hashes to ensure the audit tools have not been tampered with.,C-69919r1_chk,"Review the system documentation and interview the application administrator for details regarding application architecture, audit methods, and provided audit tools.

Identify the location of the application audit tools.

Separate audit tools will be file-oriented in nature, e.g., the application includes a separate executable file or library that when invoked allows users to view and manipulate logs.

If the application does not provide a separate tool in the form of a file which provides an ability to view and manipulate application log data, query data or generate reports, this requirement is not applicable.

If the system hosting the application has a separate file monitoring utility installed that is configured to identify changes to audit tools and alarm on changes to audit tools, this is not applicable.

Ask the application administrator to provide their process for periodically checking the list of checksum values against the associated file names of the audit tools to ensure none of the audit tools have been tampered with.

If a cryptographic checksum or hash value of the audit tool file is periodically checked to ensure the integrity of audit tools, this is a finding."
V-26979,medium,Applications authenticating users must ensure users are authenticated with an individual authenticator prior to using a group authenticator.,"To assure individual accountability and prevent unauthorized access, application users (and any processes acting on behalf of users) must be individually identified and authenticated.  

A group authenticator is a generic account used by multiple individuals.  Use of a group authenticator alone does not uniquely identify individual users.  An example of a group authenticator is the UNIX OS 'root' user account, a Windows 'administrator' account, an 'sa' account or a ""helpdesk"" account.

For example, the UNIX and Windows operating systems offer a 'switch user' capability allowing users to authenticate with their individual credentials and, when needed, 'switch' to the administrator role.  This method provides for unique individual authentication prior to using a group authenticator.

Some applications may not have the need to provide a group authenticator; this is considered a matter of application design. In those instances where the application design includes the use of a group authenticator, this requirement will apply.

There may also be instances when specific user actions need to be performed on the information system without unique user identification or authentication.  An example of this type of access is a web server which contains publicly releasable information. These types of accesses are allowed but must be explicitly identified and documented by the organization.
  ",None,SV-34267r1_rule,None,None,None,None
V-27025,medium,"Applications must isolate security functions from non-security functions by means of an isolation boundary (implemented via partitions and domains) controlling access to and protecting the integrity of, the hardware, software, and firmware that perform those security functions. The application must isolate security functions from non-security functions.","Security functions are defined as ""the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based"".  

Developers and implementers can increase the assurance in security functions by employing well-defined security policy models, structured, disciplined, and rigorous hardware and software development techniques, and sound system/security engineering principles. ",None,SV-34319r1_rule,None,None,None,None
V-70169,medium,The application must conform to FICAM-issued profiles.,"FICAM establishes a federated identity framework for the Federal Government. FICAM provides Government-wide services for common Identity, Credential, and Access Management (ICAM) requirements.  The FICAM Trust Framework Solutions (TFS) is the federated identity framework for the U.S. federal government.
 The TFS is a process by which Industry Trust Frameworks (The codification of requirements for credentials and their issuance, privacy and security requirements, as well as auditing qualifications and processes) are evaluated and assessed for potential use by the Government.  

This requirement only applies to applications that are intended to be accessible to non-federal government agencies and other partners or non-organizational (non-DoD) users.

Without conforming to FICAM-issued profiles, the information system may not be interoperable with FICAM-authentication protocols, such as SAML 2.0, OpenID 2.0 or other protocols such as the FICAM backend Attribute Exchange.

This requirement addresses open identity management standards.  More information regarding these standards is available by pointing your web browser to: info.idmanagement.gov/2012/10/what-are-ficam-technical-profiles-and.html",None,SV-84791r1_rule,F-76405r1_fix,Configure the application to conform to FICAM-issued technical profiles when providing services that rely on external (Federal Government) identity providers.,C-70645r1_chk,"Review the application documentation and interview the application administrator to identify application access methods.

If the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.

If the application is only deployed to SIPRNet, this requirement is not applicable.

If the application is not intended to be available to Federal government partners this requirement is not applicable.

This requirement applies to DoD service providers who are relying parties of external (Federal Government) identity providers.
 
Ask the application administrator to demonstrate how the application conforms to FICAM issued profiles such as SAML or OPENID.  

If the application is designed to be a service provider utilizing an external identify provider and doesn't conform to FICAM-issued profiles, this is a finding."
V-69249,low,The application must display an explicit logoff message to users indicating the reliable termination of authenticated communications sessions.,"If a user is not explicitly notified that their application session has been terminated, they cannot be certain that their session did not remain open. Applications with a user access interface must provide an explicit logoff message to the user upon successful termination of the user session.",None,SV-83871r1_rule,F-75419r1_fix,Design and configure the application to provide an explicit logoff message to users indicating a successful logoff has occurred upon user session termination.,C-69673r1_chk,"If the application does not provide an interface for interactive user access, this is not applicable.

Log on to the application with a valid user account. Examine the user interface. Identify the command or link that provides the logoff function.

Activate the user logoff function.

If the application does not provide an explicit logoff message indicating the user session has been terminated, this is a finding."
V-26868,medium,"Applications must include organization-defined additional, more detailed information in the audit records for audit events identified by type, location, or subject.

","Information system auditing capability is critical for accurate forensic analysis.   Audit record content that may be necessary to satisfy the requirement of this control, includes:  time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked.

In addition, the application must have the capability to include organization-defined additional, more detailed information in the audit records for audit events. These events may be identified by type, location, or subject. 

An example of detailed information that the organization may require in audit records is full-text recording of privileged commands or the individual identities of group account users.",None,SV-34148r1_rule,None,None,None,None
V-27128,medium,The application must terminate the network connection associated with a communications session at the end of the session or after an organization-defined time period of inactivity.,"This requirement applies to both internal and external networks. 

Terminating network connections associated with communications sessions include, de-allocating associated TCP/IP address/port pairs at the operating-system level, or de-allocating networking assignments at the application level if multiple application sessions are using a single, operating system-level network connection. 

The time period of inactivity may, as the organization deems necessary, be a set of time periods by type of network access or for specific accesses. ",None,SV-34426r1_rule,None,None,None,None
V-35216,medium,The application server must back up log records at least every seven days onto a different system or system component than the system or component being logged.,"Protection of log data includes assuring log data is not accidentally lost or deleted. Backing up log records to a different system or onto separate media from the system the application server is actually running on helps to assure that in the event of a catastrophic system failure, the log records will be retained.",None,SV-46503r3_rule,F-39762r2_fix,Configure the application server to back up log records every seven days onto a different system or media from the system being logged.,C-43588r2_chk,"Review the application server configuration to determine if the application server backs up log records every seven days onto a different system or media from the system being logged.

If the application server does not back up log records every seven days onto a different system or media from the system being logged, this is a finding."
V-27063,medium,The application must check the validity of data inputs.,"Invalid user input occurs when a user inserts data or characters into an applications data entry fields and the application is unprepared to process that data.  This results in unanticipated application behavior potentially leading to an application or information system compromise.  Invalid user input is one of the primary methods employed when attempting to compromise an application.  

All applications need to validate the data users attempt to input to the application for processing. Rules for checking the valid syntax and semantics of information system inputs (e.g., character set, length, numerical range, acceptable values) are in place to verify that inputs match specified definitions for format and content. Inputs passed to interpreters are prescreened to prevent the content from being unintentionally interpreted as commands.",None,SV-34358r1_rule,None,None,None,None
V-26890,medium,The application must associate the identity of the information producer with the information.,"Non-repudiation supports audit requirements to provide the appropriate organizational officials the means to identify who produced specific information in the event of an information transfer. 

The nature and strength of the binding between the information producer and the information are determined and approved by the appropriate organizational officials based on the security categorization of the information and relevant risk factors. ",None,SV-34170r1_rule,None,None,None,None
V-26767,medium,Applications providing information flow control must provide the capability for privileged administrators to enable/disable security policy filters.,"Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

From an application perspective, flow control is established once application data flow modeling has been completed.  Data flow modeling can be described as:  the process of identifying, modeling and documenting how data moves around an information system. Data flow modeling examines processes (activities that transform data from one form to another), data stores (the holding areas for data), external entities (what sends data into a system or receives data from a system), and data flows (routes by which data can flow). 

Once the application data flows have been identified, corresponding flow controls can be applied at the appropriate points.

A few examples of flow control restrictions include: keeping export controlled information from being transmitted in the clear to the Internet and blocking information marked as classified but is being transported to an unapproved destination.  Information flow control policies and enforcement mechanisms are commonly employed by organizations to control the flow of information between designated sources and destinations (e.g., networks, individuals, devices) within information systems and between interconnected systems. Flow control is based on the characteristics of the information and/or the information path.

Application specific examples of flow control enforcement can be found in information protection software (e.g., guards, proxies, gateways and cross domain solutions) employing rule sets or establishing configuration settings restricting information system services or provide message-filtering capability based on content (e.g., using key word searches or document characteristics).  

A crucial part of any flow control solution is the ability to create policy filters. Policy filters serve to enact and enforce the organizational policy as it pertains to controlling data flow. 

Organization-defined security policy filters include, for example,  file type checking filters, structured data filters, unstructured data filters, metadata content filters, and hidden content filters. 

- Structured data permits the interpretation of its content by virtue of elements that are understandable by an application and are indivisible. 
- Unstructured data refers to masses of (usually) digital information that does not have a data structure or does have a data structure that is not easily readable by a machine. Unstructured data consists of two basic categories: (i) bitmap objects that are inherently non language-based (i.e., image, video, or audio files); and (ii) textual objects based on a written or printed language (i.e., commercial off-the-shelf word processing documents, spreadsheets, or emails).

Applications providing information flow control must provide the capability for a privileged administrator to enable/disable security policy filters.",None,SV-34017r1_rule,None,None,None,None
V-16816,medium,"The designer will ensure the application supports the creation of transaction logs for access and changes to the data. 
","Without required logging and access control, security issues related to data changes will not be identified. This could lead to security compromises such as data misuse, unauthorized changes, or unauthorized access.",['ECCD-2'],SV-17816r1_rule,F-17115r1_fix,"Implement transaction logs which records access, and changes, to the data. ",C-17815r1_chk,"Ask the application representative to login as an unprivileged user and demonstrate the application creates transaction logs for access and changes to the data. Verify transaction logs exist and the log records access and changes to the data.  This check is in addition to the ECAR auditing requirements.

1) If the application representative cannot demonstrate the above, it is a finding."
V-35421,medium,The application server must recognize only system-generated session identifiers.,"This requirement focuses on communications protection at the application session, versus network packet level. The intent of this control is to establish grounds for confidence at each end of a communications session in the ongoing identity of the other party and in the validity of the information being transmitted.

Unique session IDs are the opposite of sequentially generated session IDs which can be easily guessed by an attacker. Unique session identifiers help to reduce predictability of said identifiers.

Unique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session. If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.",None,SV-46708r3_rule,F-39965r2_fix,Design the application server to recognize only system-generated session identifiers.,C-43772r2_chk,"Review the application server configuration to determine if the application server recognizes only system-generated session identifiers.

If the application server does not recognize only system-generated session identifiers, this is a finding."
V-27036,medium,Applications must protect against or limit the effects of the organization-defined or referenced types of Denial of Service (DoS) attacks.,"A variety of technologies exist to limit, or in some cases, eliminate the effects of DoS attacks. For example, boundary protection devices can filter certain types of packets to protect devices on an organization’s internal network from being directly affected by DoS attacks. 

Employing increased capacity and bandwidth combined with service redundancy may reduce the susceptibility to some DoS attacks. 
",None,SV-34330r1_rule,None,None,None,None
V-70399,low,Procedures must be in place to notify users when an application is decommissioned.,"When maintenance no longer exists for an application, there are no individuals responsible for making security updates. The application support staff should maintain procedures for decommissioning. The decommissioning process should include notifying users of the pending decommissioning event. If the users are not informed of the decommissioning event, attackers may be able to stand up similar looking system and fool users into attempting to log onto a duplicate system. This can be as simple as a banner informing users.

This risk is primarily geared towards insider threat scenarios and externally accessible applications that provide access to publicly releasable data but should also be applied to internal systems as a best practice.",None,SV-85021r1_rule,F-76635r1_fix,Create and establish procedures to notify users when an application is decommissioned.,C-70853r1_chk,"Interview the application representative to determine if provisions are in place to notify users when an application is decommissioned.
 
If provisions are not in place to notify users when an application is decommissioned, this is a finding."
V-70283,medium,The application performing organization-defined security functions must verify correct operation of security functions.,"Without verification, security functions may not operate correctly and this failure may go unnoticed.

Security function is defined as the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based. Security functionality includes, but is not limited to, establishing system accounts, configuring access authorizations (i.e., permissions, privileges), setting events to be audited, and setting intrusion detection parameters.

This requirement applies to applications performing security functions and security function verification/testing.",None,SV-84905r1_rule,F-76519r1_fix,Design the application to verify the correct operation of security functions.,C-70759r1_chk,"Review the application documentation and interview the system administrator to determine if the application performs security function testing.

If the application is not designed or intended to perform security function testing, the requirement is not applicable.

Access the application design documents and determine if the application is designed to verify the correct operation of security functions.

Review application logs and take note of log entries that indicate security function testing is being performed and verified.

If the application is designed to perform security function testing and does not verify the correct operation of security functions, this is a finding."
V-70219,medium,The application must only allow the use of DoD-approved certificate authorities for verification of the establishment of protected sessions.,"Untrusted Certificate Authorities (CA) can issue certificates, but they may be issued by organizations or individuals that seek to compromise DoD systems or by organizations with insufficient security controls. If the CA used for verifying the certificate is not a DoD-approved CA, trust of this CA has not been established.

The DoD will only accept PKI certificates obtained from a DoD-approved internal or external certificate authority. Reliance on CAs for the establishment of secure sessions includes, for example, the use of SSL/TLS certificates.

This requirement focuses on communications protection for the application session rather than for the network packet.

This requirement applies to applications that utilize communications sessions. This includes, but is not limited to, web-based applications and Service-Oriented Architectures (SOA).",None,SV-84841r1_rule,F-76455r1_fix,Configure the application to utilize DoD-approved PKI established CAs when verifying DoD-signed certificates.,C-70695r1_chk,"Review the application documentation and interview the application administrator to identify certificate location.

Internet Explorer can be used to view certificate information:

Select “Tools”
Select “Internet Options”
Select “Content” tab
Select “Certificates”
Select the certificate used for authentication:

Click “View”
Select “Details” tab
Select “Issuer”

If the application utilizes PKI certificates other than DoD-approved PKI and ECA certificates, this is a finding."
V-27139,medium,Applications that are utilized to address the issue of SPAM and provide protection from SPAM must automatically update any and all SPAM protection measures including signature definitions.,"Originators of SPAM emails are constantly changing their source email addresses in order to defeat SPAM countermeasures; therefore, SPAM software must be constantly updated to address the changing threat.  A manual update procedure is labor intensive and does not scale well in an enterprise environment which necessitates an automatic update capability.",None,SV-34438r1_rule,None,None,None,None
V-35141,medium,The application server must generate log records for access and authentication events.,"Log records can be generated from various components within the application server.  From an application server perspective, certain specific application server functionalities may be logged as well.  The application server must allow the definition of what events are to be logged.  As conditions change, the number and types of events to be logged may change, and the application server must be able to facilitate these changes.

The minimum list of logged events should be those pertaining to system startup and shutdown, system access, and system authentication events.",None,SV-46428r3_rule,F-39692r2_fix,"Configure the application server to generate log records for system startup and shutdown, system access, and system authentication events.",C-43528r2_chk,"Review the application server documentation and the deployed system configuration to determine if, at a minimum, system startup and shutdown, system access, and system authentication events are logged.

If the logs do not include the minimum logable events, this is a finding."
V-27070,medium,The application must support organizational requirements to employ automated patch management tools to facilitate flaw remediation to organization-defined information system components.  Patch management tools must be automated.,"The organization (including any contractor to the organization) shall promptly install security-relevant software updates (e.g., patches, service packs, and hot fixes). Flaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling, shall also be  addressed expeditiously. Due to information system integrity and availability concerns, organizations shall give careful consideration to the methodology used to carry out automatic updates. ",None,SV-34365r1_rule,None,None,None,None
V-26770,medium,"Applications, when transferring information between different security domains, must decompose information into policy-relevant subcomponents for submission to policy enforcement mechanisms. ","Information flow control regulates where information is allowed to travel within an information system and between information systems (as opposed to who is allowed to access the information) and without explicit regard to subsequent accesses to that information. 

Specific examples of flow control enforcement can be found in boundary protection devices (e.g., proxies, gateways, guards, encrypted tunnels, firewalls, and routers) employing rule sets or establish configuration settings restricting information system services, provide a packet-filtering capability based on header information, or message-filtering capability based on content (e.g., using key word searches or document characteristics). 

Policy enforcement mechanisms include the filtering and/or sanitization rules applied to information prior to transfer to a different security domain.  

Parsing transfer files facilitates policy decisions on source, destination, certificates, classification, subject, attachments, and other information security-related component differentiators. 

Policy rules for cross domain transfers include, limitations on embedding components/information types within other components/information types, prohibiting more than two-levels of embedding, and prohibiting the transfer of archived information types.",None,SV-34020r1_rule,None,None,None,None
V-35325,medium,The application server must map the authenticated identity to the individual user or group account for PKI-based authentication.,"The cornerstone of PKI is the private key used to encrypt or digitally sign information. The key by itself is a cryptographic value that does not contain specific user information, but the key can be mapped to a user.  Without mapping the certificate used to authenticate to the user account, the ability to determine the identity of the individual user or group will not be available for forensic analysis.

Application servers must provide the capability to utilize and meet requirements of the DoD Enterprise PKI infrastructure for application authentication.",None,SV-46612r3_rule,F-39872r4_fix,Configure the application server to utilize the DoD Enterprise PKI infrastructure.,C-43695r3_chk,"Review application server documentation to ensure the application server provides a PKI integration capability that meets DoD PKI infrastructure requirements.

If the application server is not configured to meet this requirement, this is a finding."
V-70293,high,Application web servers must be on a separate network segment from the application and database servers if it is a tiered application operating in the DoD DMZ.,"A tiered application usually consists of 3 tiers, the web layer (presentation tier), the application layer (application logic tier), and the database layer (data storage tier).

Using one system for hosting all 3 tiers introduces risk that if one tier is compromised, there are no additional protection layers available to defend the other tiers.
Security controls must be in place in order to provide different levels and types of defenses for each type of server based upon data protection requirements identified by policy or data owner.

DoD DMZ policy specifies that logical separation is allowed but when hosting different data types on the same server, physical separation is required.

1) Unrestricted web servers and Restricted web servers must be on separate virtual or physical servers from Private web servers, application servers, or database servers.
2) Unrestricted web servers and Restricted web servers can either be on separate physical servers from each other, or they can be on separate virtual servers.
3) If application and database servers have been separated by service type into Unrestricted, Restricted, and Private servers (permitted but not required in Increment 1 Phase 1), they must be on separate virtual or physical servers from each other by server type (Application or Database) and by service type (Unrestricted, Restricted, or Private).

Reference the DoD DMZ STIG for details on data types and separation requirements.

Security controls include firewalls or other forms of access controls that restrict the ability to traverse the network from one system to the other.

Separation can be performed either physically or logically based upon data protection and application protection design requirements.

Physically separate networks require distinct physical network devices for connections (e.g., two separate switches or two separate routers).

Physically separate machines utilize a non-virtual OS.

Logically separate networks are usually implemented via a VLAN.

Logically separate systems are implemented with virtual machines or other system emulation.

Security controls are firewall rules or ACLs that provide access restrictions on network traffic and limit communications between systems to only application and application/system support traffic.

For complete explanation of DoD DMZ requirements, reference DoD DMZ requirements.",None,SV-84915r1_rule,F-76529r1_fix,Separate web server from other application tiers and place it on a separate network segment apart from the application and database servers in accordance with DoD DMZ data access controls requirements.,C-70769r1_chk,"Review the application documentation.

Review the application data protection requirements and identify if all data types hosted on server are identical.

Review the network diagram and identify web servers/web services, web application servers, and database servers.

If the application is not hosted in the DoD DMZ, this requirement is not applicable.

Verify the application web servers are separated from the application and database servers if the application is a tiered design as per DoD DMZ STIG requirements.

If the application is tiered and the network infrastructure hosting the application is not configured to provide separation and security access controls between the tiered layers in accordance with DoD DMZ requirements, this is a finding."
V-69409,medium,The application must generate audit records showing starting and ending time for user access to the system.,Knowing when a user’s application session began and when it ended is critical information that aids in forensic analysis.,None,SV-84031r1_rule,F-75585r1_fix,Configure the application or application server to record the start and end time of user session activity.,C-69827r1_chk,"Review and monitor the application logs.

Initiate a user session and observe if the log includes a time stamp showing the start of the session.

Terminate the user session and observe if the log includes a time stamp showing the end of the session.

If the start and the end time of the session are not recorded in the logs, this is a finding."
V-57481,medium,The application must generate log records showing starting and ending times for user access to the application server management interface.,"Determining when a user has accessed the management interface is important to determine the timeline of events when a security incident occurs.  Generating these events, especially if the management interface is accessed via a stateless protocol like HTTP, the log events will be generated when the user performs a logon (start) and when the user performs a logoff (end).  Without these events, the user and later investigators cannot determine the sequence of events and therefore cannot determine what may have happened and by whom it may have been done.

The generation of start and end times within log events allow the user to perform their due diligence in the event of a security breach.",None,SV-71757r2_rule,F-62549r1_fix,Configure the application server to generate log records showing starting and ending times of user access to the management interface.,C-58189r1_chk,"Review the application server documentation and the system configuration to determine if the application server generates log records showing starting and ending times for user access to the management interface.

If log records are not generated showing starting and ending times of user access to the management interface, this is a finding."
V-27050,medium,Boundary protection applications must be capable of preventing public access into the organization’s internal networks except as appropriately mediated by managed interfaces.,Access into an organization's internal network and to key internal boundaries must be tightly controlled and managed. Applications monitoring and/or controlling communications at the external boundary of the system and at key internal boundaries must be capable of preventing public access into the organization’s internal networks except as appropriately mediated by managed interfaces.  ,None,SV-34345r1_rule,None,None,None,None
V-69483,medium,The application must protect audit information from any type of unauthorized read access.,"If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult if not impossible to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.

To ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, and copy access.

This requirement can be achieved through multiple methods which will depend upon system architecture and design. Commonly employed methods for protecting audit information include least privilege permissions as well as restricting the location and number of log file repositories.

Additionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring audit information is protected from unauthorized access.

Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.",None,SV-84105r1_rule,F-75659r1_fix,"Configure the application to protect audit data from unauthorized access. Limit users to roles that are assigned the rights to view, edit or copy audit data, and establish permissions that control access to the audit logs and audit configuration settings.",C-69901r1_chk,"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.

Identify the application components and the logs associated with the components.

Identify the roles and users allowed to access audit information and the circumstances in which they are allowed to read or otherwise access the data.

Identify the methods used to manage audit records and audit components. Typical methods are file system-based, via an application user interface via database access or a combination thereof.

For file system access: Review file system permissions to ensure the audit logs and the application audit components such as executable files and libraries are protected by adequate file permission restrictions.

Permissions must be configured to limit access to only those who have been identified and whose access has been approved.

If file permissions are configured to allow unapproved access, this is a finding.

For application-oriented and database access: Identify the application module that provides access to audit settings and audit data. Attempt to access audit configuration features and logs by using a regular non-privileged application or database user account.

If a non-privileged user account is allowed to access the audit data or the audit configuration settings, this is a finding."
V-6154,medium,"The designer will ensure the application is organized by functionality and roles to support the assignment of specific roles to specific application functions. 

","Without a least privilege policy, a user can gain access to information that he or she is not entitled to and can compromise confidentiality, integrity, and availability of the system. Also, minimizing privileges reduces the risk associated with hijacked accounts. Role based accounts can separate administrative and non-administrative rights in different roles.
","['ECLP-1', 'ECPA-1']",SV-6154r1_rule,F-17088r1_fix,"Modify the application to be organized by functionality and roles to support the assignment of specific roles to specific application functions. 
Assign privileged accounts only to privileged users.
Assign non-privileged accounts only to non-privileged users.
Establish and administer accounts in accordance with a role based access scheme to enforce least privilege, and separation of duties.",C-3033r1_chk,"Policy: 

The designer will ensure the application is organized by functionality and roles to support the assignment of specific roles to specific application functions.

The IAO will ensure access to privileged accounts is limited to privileged users.

The IAO will ensure non-privileged accounts are limited to non-privileged users.

The IAO will ensure the application account is established and administered in accordance with a role based access scheme to enforce least privilege and separation of duties.

Check: Log on as an unprivileged user.  Examine the user interfaces (such as, graphical, web, and command line) to determine if any administrative functions are available.  Privileged functions include the following:
 
• Create, modify, and delete user accounts and groups
• Grant, modify, and remove file or database permissions
• Configure password and account lockout policy 
• Configure policy regarding the number and length of sessions
• Change passwords or certificates of users other than oneself
• Determine how the application will respond to error conditions
• Determine auditable events and related parameters 
• Establish log sizes, fill thresholds, and fill behavior (i.e., what happens when the log is full)

Some applications may only contain administrator access and no other access. For example, network appliances may have administrator only access.  Web applications with no user authentication required are also considered to contain a single role, unless the web application provides administrative access to publish web server content.

1) If the application is designed specifically to only have one role, this check is not applicable.

2) If non-privileged users have the ability to perform any of the functions listed above, it is a finding.  

Finding details should specify which of the functions are not restricted to privileged users.  

Work closely with the application SA before testing any administrative changes to ensure local change management procedures are followed.  Immediately back out of any changes that occur during testing.  

Review administrative rights assignments in all application components, including the database software and operating system.  
 
On Windows systems, review each of the User Rights to determine which users and groups are given more than default capabilities. User Rights can be viewed by using DumpSec, then selecting Reports, Dump Rights.

3) If privileged rights are granted to non-privileged users, it is a finding.
 
*Note: Web services are required to separate functionality by roles."
V-16799,medium,"The designer will ensure the application installs with unnecessary accounts disabled, or deleted, by default.
",Unnecessary accounts should be disabled to limit the number of entry points for attackers to gain access to the system.  Removing unnecessary accounts also limits the number of users and passwords the system administrator must maintain.,['IAIA-1'],SV-17799r1_rule,F-17028r1_fix,"Remove or disable unneeded accounts.
",C-17795r1_chk,"Ask the application representative what system accounts are installed/created and/or enabled by default upon installation of the application.  
 
1) If the application installs/creates/enables accounts that are not needed in order for the application to operate, it is a finding."
V-35324,medium,Only authenticated system administrators or the designated PKI Sponsor for the application server must have access to the web servers private key.,"The cornerstone of the PKI is the private key used to encrypt or digitally sign information. 

If the private key is stolen, this will lead to the compromise of the authentication and non-repudiation gained through PKI because the attacker can use the private key to digitally sign documents and can pretend to be the authorized user. 

Both the holders of a digital certificate and the issuing authority must protect the computers, storage devices, or whatever they use to keep the private keys. Java-based application servers utilize the Java keystore, which provides storage for cryptographic keys and certificates. The keystore is usually maintained in a file stored on the file system.",None,SV-46611r3_rule,F-39870r2_fix,Configure the application server to enforce authorized access to the corresponding private key.,C-43694r2_chk,"Review application server configuration and documentation to ensure the application server enforces authorized access to the corresponding private key.

If the application server is not configured to enforce authorized access to the corresponding private key, this is a finding."
V-26682,medium,Applications providing remote access connectivity must use cryptography to protect the integrity of the remote access session. ,"Remote access is any access to an organizational information system by a user (or an information system) communicating through an external, non-organization-controlled network (e.g., the Internet). Examples of remote access methods include dial-up, broadband, and wireless.  

Remote network access is accomplished by leveraging common communication protocols and establishing a remote connection.  These connections will typically occur over the public Internet, the Public Switched Telephone Network (PSTN) or sometimes both.  Since neither of these internetworking mechanisms are private nor secure, if cryptography is not used, then the session data traversing the remote connection could be intercepted and potentially modified.  Cryptography provides a means to secure the remote connection so as to prevent unauthorized access to the data traversing the remote access connection thereby providing a degree of integrity.  The encryption strength of mechanism is selected based on the security categorization of the information traversing the remote connection.",None,SV-33882r1_rule,None,None,None,None
V-70245,high,The application must protect the confidentiality and integrity of transmitted information.,"Without protection of the transmitted information, confidentiality and integrity may be compromised since unprotected communications can be intercepted and either read or altered.

This requirement applies  to those applications that transmit data, or allow access to data non-locally. Application and data owners have a responsibility for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. 

Application and data owners need to identify the data that requires cryptographic protection. If no data protection requirements are defined as to what specific data must be encrypted and what data is non-sensitive and doesn't require encryption, all data must be encrypted.
 
When transmitting data, applications need to leverage transmission protection mechanisms, such as TLS, SSL VPNs, or IPSEC.

Communication paths outside the physical protection of a controlled boundary are exposed to the possibility of interception and modification. Protecting the confidentiality and integrity of organizational information can be accomplished by physical means (e.g., employing physical distribution systems) or by logical means (e.g., employing cryptographic techniques). If physical means of protection are employed, then logical means (cryptography) do not have to be employed, and vice versa.",None,SV-84867r1_rule,F-76481r1_fix,Configure all of the application systems to require TLS encryption in accordance with data protection requirements.,C-70721r1_chk,"Review the application documentation and interview the application administrator.

Identify application clients, servers and associated network connections including application networking ports.  

Identify the types of data processed by the application and review any documented data protection requirements.

Identify the application communication protocols.

Review application documents for instructions or guidance on configuring application encryption settings.

Verify the application is configured to enable encryption protections for data in accordance with the data protection requirements. If no data protection requirements exist, ensure all application data is encrypted.

If the application does not utilize TLS, IPsec or other approved encryption mechanism to protect the confidentiality and integrity of transmitted information, this is a finding."
V-69481,medium,The application must record time stamps for audit records that meet a granularity of one second for a minimum degree of precision.,"Without sufficient granularity of time stamps, it is not possible to adequately determine the chronological order of records.

Time stamps generated by the application include date and time. Granularity of time measurements refers to the degree of synchronization between information system clocks and reference clocks.",None,SV-84103r1_rule,F-75657r1_fix,Configure the application to leverage the underlying operating system as the time source when recording time stamps or design the application to ensure granularity of 1 second as the minimum degree of precision.,C-69899r1_chk,"Review the system documentation and interview the application administrator to determine where application audit logs are written and how time stamps are recorded.

If the application utilizes the underlying OS for time stamping and time synchronization when writing the audit logs, this requirement is not applicable.

Access and review log files over a period of at least 10 minutes; compare time stamps written in the application log to the system clock to ensure time is synchronized to within 1 second of precision.

If the application audit log time stamps differ from the OS time source by more than one second, this is a finding."
V-57397,medium,The application server must provide access logging that ensures users who are granted a privileged role (or roles) have their privileged activity logged.,"In order to be able to provide a forensic history of activity, the application server must ensure users who are granted a privileged role or those who utilize a separate distinct account when accessing privileged functions or data have their actions logged.

If privileged activity is not logged, no forensic logs can be used to establish accountability for privileged actions that occur on the system.",None,SV-71669r2_rule,F-62435r1_fix,Configure the application server to log privileged activity.,C-58071r1_chk,"Review application server documentation and log configuration to verify the application server logs privileged activity.

If the application server is not configured to log privileged activity, this is a finding."
V-69333,medium,The application must enforce approved authorizations for controlling the flow of information within the system based on organization-defined information flow control policies.,"A mechanism to detect and prevent unauthorized communication flow must be configured or provided as part of the system design. If information flow is not enforced based on approved authorizations, the system may become compromised. Information flow control regulates where information is allowed to travel within a system and between interconnected systems. The flow of all system information must be monitored and controlled so it does not introduce any unacceptable risk to the systems or data.

Application specific examples of enforcement occurs in systems that employ rule sets or establish configuration settings that restrict information system services, or message-filtering capability based on message content (e.g., implementing key word searches or using document characteristics).

This is usually established by identifying if there are rulesets, policies or other configurations settings provided by the application which serve to control the flow of information within the system. Control of data flow is established by using labels on data and data subsets, evaluating the destination of the data within or without the system (similar security domain) and referencing a corresponding policy that is used to control the flow of data.

Applications providing information flow control must be able to enforce approved authorizations for controlling the flow of information within the system in accordance with applicable policy.",None,SV-83955r1_rule,F-75507r1_fix,Configure the application to enforce data flow control in accordance with data flow control policies.,C-69745r1_chk,"Review the application documentation and interview the application and system administrators.

Review application features and functions to determine if the application is designed to control the flow of information within the system.
Identify:

- rulesets,
- data labels, and
- policies

to determine if the application is designed to control the flow of data within the system.

If the application does not provide data flow control capabilities, the requirement is not applicable.

Access the system as a user with access rights that allow the creation of test data or use of existing test data.

Create a test data set and label the data with a data label provided with or by the application, e.g., Personally Identifiable Information (PII) data.

Review the policy to determine where in the system the PII labeled data is allowed and is not allowed to go.

Using application features and functions, attempt to transmit the labeled data to an area that is prohibited by policy.

Verify the flow control policy was enforced and the data was not transmitted.

If the application does not enforce the approved authorizations for controlling data flow, this is a finding."
V-35205,medium,The application server must protect log information from any type of unauthorized read access.,"If log data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to log records provides information an attacker could potentially use to his or her advantage.

Application servers contain admin interfaces that allow reading and manipulation of log records. Therefore, these interfaces should not allow unfettered access to those records. Application servers also write log data to log files which are stored on the OS, so appropriate file permissions must also be used to restrict access.

Log information includes all information (e.g., log records, log settings, transaction logs, and log reports) needed to successfully log information system activity. Application servers must protect log information from unauthorized read access.",None,SV-46492r3_rule,F-39751r2_fix,Configure the application server to protect log information from unauthorized read access.,C-43577r2_chk,"Review the configuration settings to determine if the application server log features protect log information from unauthorized access.

Review file system settings to verify the application server sets secure file permissions on log files.

If the application server does not protect log information from unauthorized read access, this is a finding."
V-26901,medium,The application must provide audit record generation capability for defined auditable events within defined application components.,"Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem etc.). From an application perspective, certain specific application functionalities may be audited as well.

The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records (i.e., auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked).

Organizations define which application components shall provide auditable events. ",None,SV-34181r1_rule,None,None,None,None
V-27135,medium,Applications must provide automated support for the management of distributed security testing.,"The need to verify security functionality applies to all security functions. 

For those security functions that are not able to execute automated self-tests the organization either implements compensating security controls or explicitly accepts the risk of not performing the verification as required. Information system transitional states include:  startup, restart, shutdown, and abort.",None,SV-34434r1_rule,None,None,None,None
V-27073,medium,Applications must provide the capability to centralize the review and analysis of audit records from multiple components within the system.,"Successful incident response and auditing relies on timely, accurate system information and analysis in order to allow the organization to identify and respond to potential incidents in a proficient manner. 

Segregation of logging data to multiple disparate computer systems is counter-productive and makes log analysis and log event alarming difficult to implement and manage, particularly when the system or application has multiple logging components written to different locations or systems.",None,SV-34368r1_rule,None,None,None,None
V-70387,low,The designer must create and update the Design Document for each release of the application.,"This requirement is meant to apply to developers or organizations that are doing application development work.

The application design document or configuration guide includes configuration settings, recommendations and best practices that pertain to the secure deployment of the application.

It also contains the detailed functional architecture as well as any changes to the application architecture corresponding to a new version release and must be documented to ensure all risks are assessed and mitigated to the maximum extent practical.

Failure to do so may result in unexposed risk, and failure to mitigate the risk leading to failure or compromise of the system.",None,SV-85009r1_rule,F-76623r1_fix,"Create and maintain the Design Document for each release of the application and identify the following:

- All external interfaces (from the threat model)
- The nature of information being exchanged
- Categories of sensitive information processed or stored and their specific protection plans
- The protection mechanisms associated with each interface
- User roles required for access control
- Access privileges assigned to each role
- Unique application security requirements
- Categories of sensitive information processed or stored and specific protection plans (e.g., Privacy Act, HIPAA, etc.)
- Restoration priority of subsystems, processes, or information.",C-70841r1_chk,"This requirement is meant to apply to developers or organizations that are doing application development work. If the organization operating the application is not doing the development or managing the development of the application, the requirement is not applicable.

Ask the application representative for the design document for the application. Review the design document.

Examine the design document and/or the threat model for the application and verify the following information is documented:

- All external interfaces.
- The nature of information being exchanged
- Any protections on the external interface
- User roles required for access control and the access privileges assigned to each role
- Unique security requirements (e.g., encryption of key data elements at rest)
- Categories of sensitive information processed by the application and their specific protection plans (e.g., PII, HIPAA).
- Restoration priority of subsystems, processes, or information
- Verify the organization includes documentation describing the design and implementation details of the security controls employed within the information system with sufficient detail
- Application incident response plan that provides details on how to provide the development team with application vulnerability or bug information.

If the design document is incomplete, this is a finding."
V-69341,medium,The application must audit the execution of privileged functions.,"Misuse of privileged functions, either intentionally or unintentionally by authorized users, or by unauthorized external entities that have compromised information system accounts, is a serious and ongoing concern and can have significant adverse impacts on organizations. Auditing the use of privileged functions is one way to detect such misuse, and identify the risk from insider threats and the advanced persistent threat.",None,SV-83963r1_rule,F-75515r1_fix,"Configure the application to write log entries when privileged functions are executed. At a minimum, ensure the specific action taken, date and time of event are recorded.",C-69753r1_chk,"Log on to the application as an administrative user.

Identify functionality within the application that requires utilizing the admin role.

Monitor application logs while performing privileged functions within the application.

Perform administrative types of tasks such as adding or modifying user accounts, modifying application configuration, or managing encryption keys.

Review logs for entries that indicate the administrative actions performed were logged.

Ensure the specific action taken, date and time or event is recorded.

If the execution of privileged functionality is not logged, this is a finding."
V-26927,medium,"The application, when utilizing PKI-based authentication, must validate certificates by constructing a certification path with status information to an accepted trust anchor.","A trust anchor is an authoritative entity represented via a public key and associated data. It is used in the context of public key infrastructures, X.509 digital certificates, and DNSSEC. 

When there is a chain of trust, usually the top entity to be trusted becomes the trust anchor; it can be for example a Certification Authority (CA).  A certification path starts with the Subject certificate and proceeds through a number of intermediate certificates up to a trusted root certificate, typically issued by a trusted CA. 

Path validation is necessary for a relying party to make an informed trust decision when presented with any certificate not already explicitly trusted.  

Status information for certification paths includes, certificate revocation lists or online certificate status protocol responses. ",None,SV-34207r1_rule,None,None,None,None
V-70147,medium,The application must terminate existing user sessions upon account deletion.,"The application must ensure that a user does not retain any rights that may have been granted or retain access to the application after the user's authorization or role within the application has been deleted or modified.  This means once a user's role/account within the application has been modified, deleted or disabled, the changes must be enforced immediately within the application.  Any privileges or access the user had prior to the change must not be retained.  For example; any application sessions that the user may have already established prior to the configuration change must be terminated when the user account changes occur.

Simply removing a user from a web application without terminating any existing application user sessions can introduce a scenario where the deleted user still has access to the application even though their account has been deleted from the authentication store. This can be attributed to browser caching and session management on the web server.

To address this, the web application must provide a means for ensuring this type of ""zombie"" access does not occur. Applications must provide a user management feature or function that will terminate any existing user sessions at the same time or just before the user account is terminated from the authoritative authentication source.",None,SV-84769r2_rule,F-76383r1_fix,Configure the application to terminate existing sessions of users whose accounts are deleted.,C-70623r1_chk,"Review the application documentation and interview the application administrator.

Identify the user management functions of the application and create a test user account.

Access the application and perform application functions as the test user.

Access the user management functions and delete the test account while the test user sessions are still active.

Verify the test user application sessions are terminated by attempting to perform additional application functions.

If the test user retains access after the test account has been deleted, this is a finding."
V-6129,high,"The designer will ensure the application using PKI validates certificates for expiration, confirms origin is from a DoD authorized CA, and verifies the certificate has not been revoked by CRL or OCSP, and CRL cache (if used) is updated at least daily.","The application should not provide access to users or other entities using expired, revoked or improperly signed certificates because the identity cannot be verified.   ","['IATS-1', 'IATS-2']",SV-6129r2_rule,F-17021r1_fix,Enable the application to provide certificate validation.,C-2943r2_chk,"If the application is not PK-enabled, this check is not applicable.

If the application resides on the SIPRNet and PKI infrastructure is unavailable, this check is not applicable.
 
This check is not applicable where system users are determined to be information privileged individuals, volunteers, or reservists, as required in the DoDI 8520.2.
 
DoD test certificates can be obtained from the following website:
http://jitc.fhu.disa.mil/pki/lab2.html
 
Note: Before executing this check, the following certificate types need to be obtained:
• Expired
• Revoked
• Improperly Signed
 
If the application is PK-enabled and is not using DoD PKI certificates, the application representative will need to provide these certificates.
 
If the application is PK-enabled and is not using DoD PKI certificates, the application representative will need to provide these certificates.  

If the application is a web-application that utilizes client certificates, validate proper PKI-functionality by using a test system configured to use an expired certificate, a revoked certificate and an improperly signed certificate.  The test system should contain three user profiles: One with a revoked certificate, one with an expired certificate, and one with an improperly signed certificate.  Log on with each of the user accounts for which there is an associated “bad certificate” profile and perform selected functions in the application that requires the use of a certificate (e.g., authentication). 
 
1) If the expired, revoked, or improperly signed certificate can be used for application functions, it is a finding. 
 
Also, review the web server’s configuration to ascertain whether appropriate certificate validity checks are occurring.  
 
2) If the web server does not check for and deny expired, revoked, or improperly signed certificates, it is a finding.  
 
If the application is not a web-application, work with an application SA to identify PK-enabled application functions, and then sequentially install the invalid certificates, testing each of the functions against each of the certificates.  
 
3) Any successful use of any of the invalid certificates is a finding.  
 
If a finding is found in any of the preceding steps, document the details of the finding to include the following:

• Which of the invalid certificates was accepted (potentially more than one).
• The specific application functions that accepted the invalid certificate.

*Note: Do not use (WS-Security, SAML, and XML) security libraries that do not perform full certificate validation adequately. Checking should include the certificate against the CA’s Certificate Revocation List (CRL) or the Online Certificate Status Protocol (OCSP)."
V-26675,medium,The application must maintain and support the use of organization defined security attributes to information in transmission.  ,"Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.  

These attributes are typically associated with internal data structures (e.g., records, buffers, files) within the application and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.  

Organizations define the security attributes of their data (e.g., classified, FOUO). Applications generating and/or processing data assigned these organization defined security attributes must maintain the binding of these attributes to the data when the data are transmitted.

If the application does not maintain the data security attributes when it transmits the data, there is a risk of data compromise.",None,SV-33823r1_rule,None,None,None,None
V-35300,medium,The application server must use multifactor authentication for network access to privileged accounts.,"Multifactor authentication creates a layered defense and makes it more difficult for an unauthorized person to access the application server.  If one factor is compromised or broken, the attacker still has at least one more barrier to breach before successfully breaking into the target.  Unlike a simple username/password scenario where the attacker could gain access by knowing both the username and password without the user knowing his account was compromised, multifactor authentication adds the requirement that the attacker must have something from the user, such as a token, or to biometrically be the user.

Multifactor authentication is defined as: using two or more factors to achieve authentication. 

Factors include: 
(i) something a user knows (e.g., password/PIN); 
(ii) something a user has (e.g., cryptographic identification device, token); or 
(iii) something a user is (e.g., biometric). A CAC or PKI Hardware Token meets this definition.

A privileged account is defined as an information system account with authorizations of a privileged user.  These accounts would be capable of accessing the web management interface.

When accessing the application server via a network connection, administrative access to the application server must be PKI Hardware Token enabled.",None,SV-46587r3_rule,F-39846r2_fix,Configure the application server to authenticate privileged users via multifactor authentication for network access to the management interface.,C-43669r2_chk,"Review the application server configuration to ensure the system is authenticating via multifactor authentication for privileged users.

If all aspects of application server web management interfaces are not authenticating privileged users via multifactor authentication methods, this is a finding."
V-26674,medium,The application must support and maintain the binding of organization defined security attributes to information in process.  ,"Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.  

These attributes are typically associated with internal data structures (e.g., records, buffers, files) within the application and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. 

Organizations define the security attributes of their data (e.g., classified, FOUO). Applications generating and/or processing data assigned these security attributes must maintain the binding of these security attributes to the data while it is being processed. 

If the application does not maintain the data security attributes while it processes the data, there is a risk of data compromise.",None,SV-33821r1_rule,None,None,None,None
V-27015,medium,"Application must ensure  authentication of both client and server during the entire session. An example of this is SSL Mutual Authentication.
","This control focuses on communications protection at the session, versus packet level. 

At the application layer, session IDs are tokens generated by web applications to uniquely identify an application user's session. Web applications utilize session tokens or session IDs in order to establish application user identity.  Proper use of session IDs addressed man-in-the-middle attacks including session hijacking or insertion of false information into a session. This control is only implemented where deemed necessary by the organization (e.g., sessions in service-oriented architectures providing web-based services). ",None,SV-34309r1_rule,None,None,None,None
V-6138,medium,"The designer will ensure the application design includes audits on all access to need-to-know information and key application events.

","Properly logged and monitored audit logs not only assist in combating threats, but also play a key role in diagnosis, forensics,  and recovery. ","['ECAR-1', 'ECAR-2', 'ECAR-3']",SV-6138r1_rule,F-17118r1_fix,"Implement logging of security-relevant events.
",C-2950r1_chk,"MAC I or DoD Information Systems processing classified information, require the following events and data for auditing.

Types of events are: 
- Successful and unsuccessful attempts to access security files.
- Successful and unsuccessful logons.
- Denial of access resulting from excessive number of logon attempts.
- Blocking or blacklisting a user ID, terminal or access port.
- Activities that might modify, bypass, or negate safeguards controlled by the system.
- Possible use of covert channel mechanisms.
- Privileged activities and other system-level access.
- Starting and ending time for access to the system.
- Security relevant actions associated with periods processing or the changing of security labels or categories of information.
- Deletion or modification of data.

Audit records include:
- User ID
- Date and time of the event
- Type of event
- Success or failure of event
- origin of request (e.g., originating host’s IP address) for Identification and Authentication events only
- name of data object modified or deleted for deletion or modification events only
- reason user is blocked or blacklisted for blocking or blacklisting events only
- Data required to monitor for the possible use of covert channels events only

MAC II DoD Information Systems processing sensitive information require the following events and data for auditing.

Types of events are:
- Successful and unsuccessful attempts to access security files.
- Successful and unsuccessful logons.
- Denial of access resulting from excessive number of logon attempts.
- Blocking or blacklisting a user ID, terminal or access port.
- Activities that might modify, bypass, or negate safeguards controlled by the system.
- Deletion or modification of data.

Audit records include:
- User ID
- Date and time of the event
- Type of event
- Success or failure of event
- origin of request (e.g., originating host’s IP address) for Identification and Authentication events only
- name of data object modified or deleted for deletion or modification events only
- reason user is blocked or blacklisted for blocking or blacklisting events only

MAC III or DoD Information Systems processing publicly released information require the following events and data for auditing.

Types of events are:
- Successful and unsuccessful attempts to access security files.
- Deletion or modification of data

Audit records include:
- User ID
- Date and time of the event
- Type of event
- origin of request (e.g., originating host’s IP address) for Identification and Authentication events only.
- name of data object modified or deleted for deletion or modification events only

1) If all the required events and associated details are not included in the log or there is not a logging mechanism, it is a finding.

*Note: The mechanism that performs auditing may be a combination of the operating system, web server, database, application, etc. Also web services may be distributed over many geographic locations; however, auditing requirements remain the same in web services as they do in a traditional application."
V-16812,medium,"The designer will ensure the application has no canonical representation vulnerabilities.
",Canonical representation issues arise when the name of a resource is used to control resource access.  There are multiple methods of representing resource names on a computer system.  An application relying solely on a resource name to control access may incorrectly make an access control decision if the name is specified in an unrecognized format.,['DCSQ-1'],SV-17812r1_rule,F-17111r1_fix,"Protect against canonical representation attacks.
",C-17810r1_chk,"Ask the application representative for code review or scan results from the entire application.  This can be provided as results from an automated code review or a vulnerability scanning tool.  See section 5.4 of the Application Security and Development STIG for additional details.
 
If the results are provided from a manual code review, the application representative will need to demonstrate how canonical representation vulnerabilities are identified during code reviews. 
 
1) If the results are not provided or the application representative cannot demonstrate how manual code reviews are performed to identify canonical representation vulnerabilities this is a finding.
 
Examples of Canonical Representation vulnerabilities can be obtained from the OWASP website. "
V-26856,medium,"Applications, when the maximum number of unsuccessful attempts are exceeded, must automatically lock the account/node for an organization-defined time period or lock the account/node until released by an administrator IAW organizational policy. ","Anytime an authentication method is exposed so as to allow for the utilization of an application, there is a risk that attempts will be made to obtain unauthorized access. 

To defeat these attempts, organizations define the number of times a user account may consecutively fail a login attempt. The organization also defines the period of time in which these consecutive failed attempts may occur. 

By limiting the number of failed login attempts, the risk of unauthorized system access via user password guessing, otherwise known as brute forcing, is reduced.  Limits are imposed by locking the account. ",None,SV-34136r1_rule,None,None,None,None
V-16850,medium,"The IAO will ensure connections between the DoD enclave and the Internet or other public or commercial wide area networks require a DMZ.
","In order to protect DoD data and systems, all remote access to DoD information systems must be mediated through a managed access control point, such as a remote access server in a DMZ.
",['EBPW-1'],SV-17850r1_rule,F-17172r1_fix,"Setup DMZ between DoD and public networks.
",C-17866r1_chk,"Interview the application representative and determine if the application is publicly accessible.
 
1) If the application is publicly accessible and traffic is not being routed through a DMZ, it is a finding."
